<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; BluetoothLE APRS TNC &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F2865%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/2865-bluetoothle-aprs-tnc">BluetoothLE APRS TNC</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A Bluetooth Low energy Terminal Node Connector for sending and reciving AFSK modulated packet data on your phone via radio.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/11454-dryerzinia" title="Visit Profile">DrYerzinia</a><span>&bull;</span>
                
                a year ago<span>&bull;</span><a href="/project/2865#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/2865-bluetoothle-aprs-tnc">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/2865/logs/sort/newest">Newest</option>
                    <option value="/project/2865/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/2865/log/9178-current-status">Current Status</a></h2>
                            <small class="authorship">a year ago  &bull;
                                <a class="gray-link" href="/project/2865/log/9178#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-9178"><p>Right now I have the Lithium-Ion AA battery powered prototype with RX working.  Currently testing TX code on the bread board prototype.  RX performance was tested passing recorded packet data directly into the demodulator on a computer from WA8LMF APRS test CD with the following results.<br><br>Stephen Smith WA8LMF's APRS test CD Track 1 demoded 958 packets<br>Stephen Smith WA8LMF's APRS test CD Track 2 demoded 641 packets<br><br>Will need to test alternate TNC's to see how it measures up but based on these numbers it seems to be doing an excelent job of demodulating packets.<br><br>The Li-Ion prototype is just a tiny bit wider and longer than the AA battery that is powering it while remaining relatively thin.  Based on TX tests with the breadboard prototype I don't believe I will be able to get good TX performance out of this PCB and will have to wait for the next prototype for good TX.  It only draws 7 mA in RX mode giving it an approximately 1 week long battery life.<br></p><p><img src="https://cdn.hackaday.io/images/6608331427773826916.jpg"></p><p><br>Testing the TX last night with my Yaesu FT-60D as the transmitting radio resulting in currently disappointing performance.  While my attic terrestrial TNC was able to decode every packet after I added some low pass filtering to the TNC I could not get a single packet to bounce of a repeater or get into the APRS network.  A test using APRSDroid attached to same radio hit 2 repeaters and got into the APRS network on the first transmit.  I'm thinking to use the PIC's built in OpAmp to give the DAC some current gain because the load from the radios MIC input appears to be distorting the signal a bit.  Also I will need to check to make sure its not over or under driving the audio input, it sounded clear on a second receiving radio but obviously it is not working well.</p><p>I expect to have good TX performance by the end of tommorow night.  Hopefully I can finalize updates to revision 2 of the prototype PCB and have them ordered by friday.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2865/log/15808-back-to-the-drawing-board">Back to the Drawing Board</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/2865/log/15808#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15808"><p>After a lot of debugging and testing the current state of the hardware design I decided I needed to go back to the drawing board.  I was having a major problem trying to get TX data over the SPI bus to the pic.  I don't have a proper logic analyzer, but I did try a lot of things to figure out what was going on and after several days of fiddling around with it I'm still stumped.</p><p>However it looks like it's all for the better.  My new design uses a dsPIC33FJ64GP802 as its core.  It has a built in Audio DAC which fixes the problems with the 2.2k PTT resistor loading down the signal because it has built in reconstruction filters and output drivers.  So there is no longer a need for an external low pass filter or driver op amp.  In addition to that now that all the processing is happening on the PIC im free to choose a cheaper lower power Bluetooth Low Energy module.  The new PIC costs about $4.30 more than the old one but the new BLE module I'm looking at (AMS002), only costs $5.86 starting at a minimum of 1 module.  The RFDuino cost $14.99 for a minimum of 1 and $12.79 when you get to the 500 unit volume.  This lower's the overall cost down to about $15 a board.  So we will also be cheaper than before.</p><p>So far I have the PIC sending and reciving APRS packets no problem on a breadboard.  Better than what I had before. (RX Only)  I dont have the Bluetooth Low Enery modules yet but they look very solid and have a simple serial interface for communication to the master device.</p><p><img src="https://cdn.hackaday.io/images/6523791427773956129.jpg"></p><p>One important point about this design.  I've looked around a bit have have yet to find a TNC that works with iPhones or iPads.  I believe this is primarly because of the lack of Serial Port Protocol capability.  There are apps out there that will use the phones headset jack to get the radio data and to the modulation but I would imagine that would put a significant drain on the devices battery.  This device because of the low enery aspect will be able to communicate with iPhones and iPads.  There are test applications for the ACKme modules available on the app store so I'm quite sure its doable.  I however do not have any apple devices so I will most likley not be writing and app to communicate with this device.  If anyone want's to write an app for the iPhone/iPad to communicate with my device or has an APRS app and would like to integrate compatibility with my device in addition to the headset modem send me a message.</p><p>Things are looking pretty great for me to have a fully functional prototype ready to show off in about 2 weeks.  The only things left are to test the Bluetooth LE Module, design and make new board, and finaly tune up and streamline the code and the device communication protocol.  Hooking up the breadboard prototype to the computer via serial port allows me to recive and send packets quite well.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2865/log/15858-aprs-radio-side-tested-live-successfully">APRS Radio side tested live successfully!</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/2865/log/15858#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15858"><p>I was debugging problems with the code for 16 hours yesterday.  Right after my optimistic log post I noticed a few problems with the code and fortunately after staying up till 4 AM figuring them out I can be optimistic again.  This post is just going to be about last nights debugging session.</p><p>The most critical problem I encountered was that no demodulators besides my own would demodulate the signal from my modulation code.  It baffled me for about 3 hours.  I played with the signal in Audacity trying to figure out what was different between my output and the output of another piece of APRS software.  In this case APRS Droid.  I adjusted the timing, tried adding pre-emphasis, compared both waveforms in spectrogram mode.  It was when I was trying to add more pre/post ambles to the signal that I noticed what the problem actually was.  As you can see in the image below my signal (Top) has an extra bit inserted.<br></p><p><img src="https://cdn.hackaday.io/images/1147681427771483642.png"></p><p>An odd problem for sure.  But at least I know why my decoder could still make it out.  When it gets a postamble it chops off any extra bits and returns what it has so far.  Apparently other decoders aren't so flexible or forgiving.  Ultimately I needed to subtract 1 to the if statement that changes the modulator stage from data to postambles.</p><pre class="hljs objectivec"><span class="hljs-comment">// old</span>
<span class="hljs-keyword">if</span>(current_bit &gt;= <span class="hljs-keyword">self</span><span class="hljs-variable">.len</span> * <span class="hljs-number">8</span>)
    AFSK_Modulator_advance_stage();

<span class="hljs-comment">// new</span>
<span class="hljs-keyword">if</span>(current_bit &gt;= <span class="hljs-keyword">self</span><span class="hljs-variable">.len</span> * <span class="hljs-number">8</span> - <span class="hljs-number">1</span>){
    AFSK_Modulator_change_frequency();
    AFSK_Modulator_advance_stage();
}</pre>I'm not sure why I needed to do an additional frequency change but that adjustment made the modulator spit out the right waveform.  The timing was also slightly off so I changed the divider of the DAC clock down by one and everything I sent out was clearly decoded.  MixW 2.20f showed it at 1203 baud, so slightly off but it seems its within tolerance.<p>The next bug was also rather troublesome but it was primarily a poorly written test that caused most of the delay.  I programmed it to use base64 for sending the message data over the UART to and from the PIC.  This way the stream can still be managed by new lines and everything is printable.  The command I was using to send the packets was:</p><p>TX="gqCIpGJk4JaIYK6OrGqukoiKYkBjA/A9MzkwMC4wME4vMTA0MDAuMDBXJCBodHRwOi8vYXByc2Ryb2lkLm9yZy84yQ=="</p><p>It's the test data I got from APRSDroid to figure out what was wrong with the modulator.  My first send naturally was not decoded because of bugs in the base64 decoder.  The hex my demodulator spit out didn't match what was expected.  Turned out to be a simple case of using a back slash where I should have had a forward slash as well as adding the wrong number in one of the if statements to decide what value a character should have.  These problems where both fixed in a few minutes.</p><p>What ended up really getting me was a mistake I made in writing a unit test for the base64 de/encoder.  I used python to convert the base64 to its binary equivalent and then copied that to the C unit test into a const array.</p><p>"gqCkpkBA4paIYK6OrGfwA1Rlc3Rpbmc67w=="</p><p>'\x82\xa0\xa4\xa6@@\xe2\x96\x88`\xae\x8e\xacg\xf0\x03Testing:\xef'</p><p>Unfortunately when manual converting the \x to 0x I also inadvertently deleted the ' and the g.  The 2 printable characters mixed in with the hex.  Stupidly I analyzed my code for about an hour trying to figure out how the test could be failing and I was missing 2 bytes in my decoder output.  Eventually I realized the mistake.</p><p>So I got bitten by unit testing twice yesterday.  Because my unit tests for my modulator showed it working because my demodulator is more flexible than others.  And by mistyping the expected result into the base64 unit test.</p><p>Moral of the story is double check your unit tests.</p><p>As for the current status of the project.  I was hopping to get the AMS002 modules today but still waiting on those from Mouser.  The prototype is tested receiving from and getting into the APRS network successfully.  The code has been reorganised a bit and I feel its easier to follow and maintain.  The serial command interface for the PIC has been improved using standard commands like TX with base64 encoded data to send.  It sends RX="base64data" for what it receives.  I implemented PPT function via a 2.2k resistor to ground from the mic line sunk with a NPN and its fully functional.  I think I will see if the any of the PIC pin's can sink enough current to save me the extra component on the board.</p><p>Looking good overall.  I expect to have fully functional breadboard prototype by end of next week with all the components the final version will have.  (Battery, Charge Circuit, BluetoothLE).  Then I expect it will be about 2 weeks to get PCBs for the smaller prototype and a week for building and testing.  Looks like it will be about 5 weeks till I have a usable final prototype!</p><p>If you want to monitor any progress I'm making with the unit you can track my callsign KD0WGV-5 on aprs.fi to see what I've been broadcasting.  I'll include little messages about how things are going in my test packets.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2865/log/15915-got-the-ble-radio-module">Got the BLE Radio Module</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/2865/log/15915#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15915"><p>I got the AMS002 modules from mouser today.  Managed to design, etch, and solder a breakout board for it between work and catching a red eye to New York.</p><p><img style="width: 372px; height: 395.846px;" src="https://cdn.hackaday.io/images/9892421427863359855.jpg"></p><p><img style="width: 377px; height: 407.605px;" src="https://cdn.hackaday.io/images/5155681427863346872.jpg"></p><p>I broke out the pins by functional group rather than just a bunch of long headers by position.  I managed to power it on to see if I could connect to it and enumerate the services.  It worked perfectly.  Should have it tested and talking between the PIC and the Android app in a few days.</p><p><img src="https://cdn.hackaday.io/images/5639681427863525485.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2865/log/16176-ams002-bobcat-ble-radio">AMS002 Bobcat BLE Radio</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/2865/log/16176#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16176"><p>Over my vacation to New York I programmed the PIC controller to interface with the AMS002 module instead of being controlled over the serial port so I could test it using the Android app.  This ended up being extremely easy.  The only change I really had to do was change the error message from ? to str this way it would switch the BLE device into stream mode on any kind of error and I could talk to the phone.</p><p>The Android side of things was also very easy.  Transitioning to the TruConnect interface of packets containing a serial stream just required some minor tweaking of loops.  Then I just had to change it to use Base64 encoding an decoding which already exists in the Android utility library.</p><p>In my initial testing I saw you could configure a custom Service UUID in the TruConnect Service.  I tried it once changing from the default service UUID 175f8f23-a570-49bd-9627-815a6a27de2a to a randomly generated one (53f06320-d9d2-11e4-8830-0800200c9a66).  However even after numerous power cycles I was unable to get it to use the new service ID and changed the app back to the default one as well as resetting the UUID in the flash memory of the device.  Or atleast so I thought.  I may have forgotten to do SAVE command to commit the new UUID to memory.  Either way the observed behaviour is quite puzzling.  I used the app with the radio for several days and it worked fine.  But this morning I got nothing out of it.  Interestingly enough I found it was using the new UUID I had given it several days before and given up on.</p><p>I really have no Idea how this happened.  But it certainly is something to watch out for if you are using these modules and plan to program custom UUID's into their firmware.  It may not work when you try it and then days later start doing what you asked!</p><p>Going forward I plan to design and order the prototype boards for the non breadboard prototype by the end of this week.  Typically I get board back from OSH park in about 3 weeks so expect some pictures of the prototype then.  While I'm waiting on the boards I plan to work on the android app.  Shining it up from the raw test program it is into a actually useful APRS app that can be as simple as a locator beacon to as advanced as a full fledged Digipeater, IGate, tracking station.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2865/log/16671-mosfet-selection">Mosfet Selection</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/2865/log/16671#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16671"><p>Rather than working on the Android app like I thought I would be I've been spending considerably greater effort on the hardware design. Lots of little things to think about. I'd been toying with the idea of using a buck boost converter to allow the AA <span class="J-JK9eJ-PJVNOc">TNC</span> version to run off of Alkaline, <span class="J-JK9eJ-PJVNOc">NiMH</span>, <span class="J-JK9eJ-PJVNOc">NiCD</span>, and Li-Ion batteries.  Is the ability to run on alkalines woth the extra dollar in parts costs. I<span class="J-JK9eJ-PJVNOc"></span> decided to design it in. The only chip that I found that was both Buck-Boost and could go down to less than 1v for the boost was AS1337. I thought having <span class="J-JK9eJ-PJVNOc">LEET</span> in the name it would work awesome but it had a few problems. Its maximum operating voltage is 4.5v. Enough for the Lithium-Ion batteries but not enough for the <span class="J-JK9eJ-PJVNOc">USB</span> charge voltage. It's absolute maximum was 6v, so I thought I may as well see what happens if I gave it 5v.</p><p><img src="https://cdn.hackaday.io/images/1705541429333538327.jpg"></p><img src="https://cdn.hackaday.io/images/1614811429333558554.jpg"><p>I designed a test power supply board with some jumpers to try and figure out what the best way to build the circuit would be. I added a 3.3v <span class="J-JK9eJ-PJVNOc">LDO</span> regulator for <span class="J-JK9eJ-PJVNOc">USB</span> power and figured I could just disable the AS1337, but upon further inspection of the <span class="J-JK9eJ-PJVNOc">datasheet</span> I found out the disable mode had some properties that would screw me over. There are 2 models of the AS1337. Model A goes open circuit and puts battery voltage on the output when disabled. Model B shorts its output to ground when disabled. Neither was conducive to my design so I added a P-Channel <span class="J-JK9eJ-PJVNOc">Mosfet</span> to actually shut off power to the regulator when <span class="J-JK9eJ-PJVNOc">USB</span> power is connected.</p><p>This is where things went wrong. Unfortunately I forgot to check the Gate-Source voltage threshold when I selected a <span class="J-JK9eJ-PJVNOc">FET</span> for the application. For it to work with a Alkaline cell I needed a <span class="J-JK9eJ-PJVNOc">Vgs</span>(<span class="J-JK9eJ-PJVNOc">th</span>) of less than 1 volt but I selected one that was 1.5-3.0 volts.</p><p>After some fiddling around on the board with the voltmeter and some tweezers I figured out the problem. I tried bypassing the <span class="J-JK9eJ-PJVNOc">FET</span> with the tweezers and got a beautiful 3.3 volt output with the Alkaline, Li-Ion and <span class="J-JK9eJ-PJVNOc">USB</span> power. I also tested 5 volts directly to the device but unfortunately this caused the output to jump up to 5 volts. It couldn't regulate the 5 volt input. Fortunately it didn't damage the chip.</p><p><img src="https://cdn.hackaday.io/images/5202011429334345039.jpg"></p><p>It was surprisingly hard to find a Low <span class="J-JK9eJ-PJVNOc">Vgs</span> P-Channel <span class="J-JK9eJ-PJVNOc">Mosfet</span> in a SOT-23 package but after a bit of searching I settled on the <span class=""><a href="http://www.onsemi.com/pub_link/Collateral/MCH3383-D.PDF">MCH3383</a></span>. Hopefully when it gets here everything will work.</p><p>Interestingly enough the -4.2 Vgs from a 10k to ground was not enough to turn on the <span class="J-JK9eJ-PJVNOc">FET</span> either. I had to ground the gate with tweezers to get it to turn on with the Li-Ion installed. This wasn't enough for the Alkaline. I will probably have to rethink my resistor selection as well.</p><p>And if anyones interested here is what the TNC layout is looking like so far.<br></p><p><img src="https://cdn.hackaday.io/images/557191429333762723.png"></p><p>I'm using 25mil via holes and keeping them out from underneath parts to make it a bit easier to make the board at home. I just got a new Jewelers Drill press and a bunch of tiny rivets for PCB prototyping so I might even try using 13.5mil <span class="J-JK9eJ-PJVNOc">vias</span> for the final version.</p><img alt="" src="https://cdn.hackaday.io/images/4931191429334930418.jpg"><img style="" src="https://cdn.hackaday.io/images/4021351429334939297.jpg"><table><tbody></tbody></table><p>I changed from a SIP <span class="J-JK9eJ-PJVNOc">pinout</span> for the programming header to a 1mm pitch rectangular connector so it could double as a GPS connector. I matched the <span class="J-JK9eJ-PJVNOc">pinout</span> to the <a href="https://www.sparkfun.com/products/11571">GP-635T</a>. If anyone wants to make it a stand alone beacon with no need for a <span class="J-JK9eJ-PJVNOc">BLE</span> capable master to tell it where it is they can populate this connector and add the GPS!</p><p>I'm also thinking of adding another connector footprint that will allow CAT control of the radio using a shared <span class="J-JK9eJ-PJVNOc">UART</span> with the GPS.</p><p>I'm also hopping I'll be able to make the firmware decode 9600 baud packet from various radios discriminators outputs. As it stands I know it can modulate/demodulate 1200/300 VHF/HF packet schemes. I want it to be as capable as possible.</p><p>That's all that's been going on this last week. Hopefully I'll have a post with good news on the power supply design sometime next week with the new <span class="J-JK9eJ-PJVNOc">Mostfet</span> and Resistors.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'zuFy67vb-FzgSLkBlkn5kknbrDPHQmssY8dg';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>