<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; Internet enabled smoke alarm &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F18722">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/5472">Internet enabled smoke alarm</a>
                    </p>
                    <p class="description-summary">This project uses an ESP8266 (IOT) module to send an email alert when the smoke alarms are sounding.  </p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/13673-matt-meerian" title="Visit Profile">
                                Matt Meerian
                            </a>
                            <span>&bull;</span>
                            3 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p>Well, I have not did very good about keeping a project log. Here is the (hopefully) final project.</p><iframe style="width: 500px; height: 281px;" src="//player.vimeo.com/video/129321866" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><br><p><img src="https://cdn.hackaday.io/images/5430221433026084618.png"></p><p>Figure 1: The internet enabled smoke alarm on the benchtop</p><p><img src="https://cdn.hackaday.io/images/7986951433026102464.png"></p><p><br>Figure 2: The internet enabled smoke alarm installed on the ceiling.</p><p><img src="https://cdn.hackaday.io/images/344441433026148931.png"></p><br>Figure 3: Inside of the Hammond enclosure<p>Oh, this is the misbehaving smoke alarms I mentioned in the project description.<br></p><p><iframe src="//www.youtube.com/embed/BpsMkLaEiOY" allowfullscreen="" frameborder="0" height="281" width="500"></iframe></p><p><br>When reverse engineering part of the commercial FireX smoke alarm schematic, I took digital images of the top and bottom side of the PCB. I then over layed the images in <a href="http://paint.net" target="_blank">http://paint.net</a>. Then, the opacity was adjusted to see both the traces on the bottom and the components on the top side. (This technique has been written about on various sites)</p><p><br>There are three wires going to each smoke alarm:<br> 1) 120VAC<br> 2) Common<br> 3) Network</p><p><br>The 120VAC and common are incredibly fortunate. This makes it easy to power the ESP8266 module with a 120VAC to 3.3VDC wall pack adapter. The network line connects all 6 smoke alarms. Normally, the network line is at the same level as common. But, when the smoke alarms are sounding an alert, the network line rises about 9 volts above common. This causes all 6 smoke alarms to sound an alert. This network wire is connected to the ESP8266, through an optocoupler. The optocoupler has several advantages:<br> 1) The optocoupler is high impedance, so it will not interfere with the smoke alarm operation.<br> 2) The optocoupler electrically isolates the smoke alarm from the ESP8266.<br> 3) The optocoupler is one directional. So, if some evil-hacker guy gets into the ESP8266, he could not set off the fire alarm. (I'm not 100% sure if the 3.3V logic line from the ESP8266 would set off the smoke alarm)</p><p><br>Now that it is known how the network line operates, here is a schematic of the smoke alarm modification.</p><p><img src="https://cdn.hackaday.io/images/495931433026334443.png"></p><br>Figure 4: Schematic to add internet connectivity to a smoke alarm.<p><br><br>There really isn't too much to the hardware. When the network line goes to 9V above common, the optocoupler turns on. This changes the state of the I/O line going to the ESP8266. There is a two wire cable going to the white LED. The LED blinks when there the wireless router is not found. The 3.3V wall pack powers the ESP8266. The schematic has a few details noted on it.</p><p><br><br>The software I used for the ESP8266 module is written in Lua. The NodeMCU firmware was loaded in the module. The module is running version 20150318 of NodeMCU. <br>Here is the code:</p><pre class="hljs vbscript">-- 	Matt Meerian
-- 	<span class="hljs-built_in">Date</span>:  <span class="hljs-number">5</span>-<span class="hljs-number">16</span>-<span class="hljs-number">2015</span>
-- 	Origin:  This started as an example from the internet (there are several modified snippets)
--	Target:  ESP8266 module
--	Connection <span class="hljs-keyword">to</span> target:  USB <span class="hljs-keyword">to</span> <span class="hljs-number">9600</span> baud, <span class="hljs-number">3.3</span>V
--	Downloader:  ESP8266 LuaLoader <span class="hljs-number">0.83</span> <span class="hljs-keyword">or</span> later
--	Firmware running <span class="hljs-keyword">on</span> the ESP8266:  NodeMCU <span class="hljs-number">0.9</span><span class="hljs-number">.5</span> build <span class="hljs-number">20150318</span>  powered by Lua <span class="hljs-number">5.1</span><span class="hljs-number">.4</span>
--	Description:  (NOTE:  This firmware should be the only file <span class="hljs-keyword">on</span> the ESP8266 module when run)
--		This script will send an email <span class="hljs-keyword">to</span> my yahoo account when the networked smoke alarms sound an alert.
--		There are <span class="hljs-number">6</span> networked smoke alarms <span class="hljs-keyword">in</span> the house:  Kiddie i4618.  I have reverse engineered
--		part of the schematic.  There are three wires going <span class="hljs-keyword">to</span> the smoke alarm:  <span class="hljs-number">120</span>VAC <span class="hljs-keyword">and</span> a 
--		<span class="hljs-string">"network"</span> wire.  The network wire <span class="hljs-keyword">is</span> normally at <span class="hljs-number">0</span>V.  When the alarm <span class="hljs-keyword">is</span> going off, the network
--		line goes up <span class="hljs-keyword">to</span> <span class="hljs-number">9</span>V.  This <span class="hljs-keyword">then</span> sets off the other smoke alarms <span class="hljs-keyword">on</span> the network.  I have 
--		used an optocoupler <span class="hljs-keyword">to</span> tap off of this network line <span class="hljs-keyword">and</span> trigger the input of the ESP8266 module.
--	You need <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> a wireless router (AP) before you run the <span class="hljs-string">"dofile"</span>:
-- 		wifi.setmode(wifi.STATION)
--		wifi.sta.config(<span class="hljs-string">"NSA_mobile_surveillance"</span>,<span class="hljs-string">"frn..."</span>)
--		You can <span class="hljs-keyword">then</span> <span class="hljs-keyword">get</span> your wifi by:  = wifi.sta.getip()
--	NOTE:  The email alert <span class="hljs-keyword">is</span> sent by pushingbox.  
--	When running a <span class="hljs-keyword">new</span> lua script <span class="hljs-keyword">in</span> LuaLoader:
--		Press the <span class="hljs-string">"Upload File"</span> button.  (wait)
--		Press the <span class="hljs-string">"Restart"</span> button.
--		Press the <span class="hljs-string">"dofile"</span> button <span class="hljs-keyword">to</span> run the script.
--	How <span class="hljs-keyword">to</span> flash lua firmware into the ESP8266:
--		Use esp8266_flasher.exe			Follow the instructions there

led_output_pin=<span class="hljs-number">4</span>	--This <span class="hljs-keyword">is</span> the pin <span class="hljs-keyword">for</span> the <span class="hljs-string">"wifi not connected"</span> LED blink
opto_input_pin = <span class="hljs-number">3</span>	--The optocoupler input pin
debug_cntTick = <span class="hljs-number">0</span>
timer_between_emails=<span class="hljs-number">0</span>
timer_minute=<span class="hljs-number">0</span>	--This <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> count up <span class="hljs-keyword">to</span> a <span class="hljs-built_in">minute</span>
wifi_gone_alert=<span class="hljs-number">0</span>
email_sent_timeout=<span class="hljs-number">0</span>
const_min_time=<span class="hljs-number">30</span>	--this <span class="hljs-keyword">is</span> a <span class="hljs-string">"constant"</span>, <span class="hljs-keyword">if</span> <span class="hljs-built_in">timer</span> <span class="hljs-keyword">is</span> at <span class="hljs-number">2</span> seconds, <span class="hljs-keyword">then</span> a value of <span class="hljs-number">30</span> would be <span class="hljs-number">1</span> min
const_email_series_delay=<span class="hljs-number">200</span>	--<span class="hljs-keyword">if</span> a series of emails has started, <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> send anymore <span class="hljs-keyword">for</span> an <span class="hljs-built_in">hour</span> (<span class="hljs-keyword">if</span> the <span class="hljs-built_in">timer</span> <span class="hljs-keyword">is</span> <span class="hljs-number">2</span> seconds, <span class="hljs-keyword">then</span> the value should be <span class="hljs-number">1800</span>)
host=<span class="hljs-string">"<a href="http://api.pushingbox.com" target="_blank">http://api.pushingbox.com</a>"</span>	--This <span class="hljs-keyword">is</span> the address <span class="hljs-keyword">to</span> send an alert email
ipnr=<span class="hljs-number">0</span>		--holds the IP address
CntTimer=<span class="hljs-number">1</span>	--allows the code <span class="hljs-keyword">in</span> the <span class="hljs-string">"send_pushingbox_email"</span> routine <span class="hljs-keyword">to</span> be run twice

gpio.mode(opto_input_pin,gpio.INPUT,gpio.PULLUP)	--make the optocoupler pin an input
gpio.mode(led_output_pin,gpio.OUTPUT)	--make the <span class="hljs-string">"no wifi"</span> LED alert pin an output.
gpio.write(led_output_pin,gpio.LOW)

--This <span class="hljs-built_in">timer</span> happens every four seconds
tmr.alarm(<span class="hljs-number">0</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">function</span>() 
	--print(<span class="hljs-string">"testing..."</span>) 
	check_smoke_alarm()		--
	debug_cntTick=debug_cntTick+<span class="hljs-number">1</span>		--counts the number of times through the <span class="hljs-built_in">timer</span>
	print(debug_cntTick)
	<span class="hljs-keyword">if</span> debug_cntTick &gt; <span class="hljs-number">50000</span> <span class="hljs-keyword">then</span>	--reset the counter <span class="hljs-keyword">if</span> the number <span class="hljs-keyword">is</span> getting large
		debug_cntTick=<span class="hljs-number">1</span>	--reset the value
	<span class="hljs-keyword">end</span>
	check_wifi_status()		--blink an LED <span class="hljs-keyword">if</span> there <span class="hljs-keyword">is</span> no wifi signal
	timer_minute=timer_minute+<span class="hljs-number">1</span>
	<span class="hljs-keyword">if</span> timer_minute&gt;const_min_time <span class="hljs-keyword">then</span>	--This <span class="hljs-built_in">timer</span> happens every <span class="hljs-built_in">minute</span>.
		timer_minute=<span class="hljs-number">0</span>	--reset the <span class="hljs-built_in">minute</span> counter
	<span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span> )

--This <span class="hljs-keyword">function</span> looks <span class="hljs-keyword">to</span> see <span class="hljs-keyword">if</span> there <span class="hljs-keyword">is</span> a wifi signal.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">not</span>, it blinks a red LED.
<span class="hljs-keyword">function</span> check_wifi_status()
	<span class="hljs-keyword">if</span> wifi.sta.getip()==nil <span class="hljs-keyword">then</span>	--are we attached <span class="hljs-keyword">to</span> a wireless router?
		print(<span class="hljs-string">"no IP address"</span>)	--no wifi connection, start blinking an LED
		<span class="hljs-keyword">if</span> wifi_gone_alert==<span class="hljs-number">0</span> <span class="hljs-keyword">then</span>	--Since we <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> have an internet connection, start blinking a red LED
			wifi_gone_alert=<span class="hljs-number">1</span>	--<span class="hljs-keyword">next</span> <span class="hljs-built_in">time</span> through, turn off the red LED
			gpio.write(led_output_pin,gpio.HIGH)	--turn <span class="hljs-keyword">on</span> the red LED, we will be blink<span class="hljs-comment">'n</span>
		<span class="hljs-keyword">else</span>
			wifi_gone_alert=<span class="hljs-number">0</span>	--<span class="hljs-keyword">next</span> <span class="hljs-built_in">time</span> through, turn <span class="hljs-keyword">on</span> the red LED
			gpio.write(led_output_pin,gpio.LOW)		--turn off the red alert LED, we will be blink<span class="hljs-comment">'n</span>
		<span class="hljs-keyword">end</span>
	<span class="hljs-keyword">else</span>	--we <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> need <span class="hljs-keyword">to</span> blink the alert LED, so turn <span class="hljs-keyword">if</span> off
		--print(<span class="hljs-string">"we have an ip address"</span>)
		wifi_gone_alert=<span class="hljs-number">0</span>	--we <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> need any more red LED blinking
		gpio.write(led_output_pin,gpio.LOW)		--make sure the red LED <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">on</span>
	<span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span>

--This <span class="hljs-keyword">function</span> looks at an input pin (through an opto coupler), <span class="hljs-keyword">to</span> see <span class="hljs-keyword">if</span> the smoke alarm <span class="hljs-keyword">is</span> going off
--  <span class="hljs-keyword">If</span> the alarm <span class="hljs-keyword">is</span> going off, it sends an email
<span class="hljs-keyword">function</span> check_smoke_alarm()
	<span class="hljs-keyword">if</span> gpio.read(opto_input_pin)==<span class="hljs-number">1</span>  <span class="hljs-keyword">then</span>	--The smoke alarm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> going off
		--print(<span class="hljs-string">"-no alarm-"</span>)	--this <span class="hljs-keyword">is</span> run when the smoke alarm <span class="hljs-keyword">is</span> off
		<span class="hljs-keyword">if</span> email_sent_timeout==<span class="hljs-number">0</span> <span class="hljs-keyword">then</span>	--only allow an email <span class="hljs-keyword">to</span> be sent <span class="hljs-keyword">if</span> an email has <span class="hljs-keyword">not</span> been sent recently
			timer_between_emails=<span class="hljs-number">0</span>	--The alarm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> sounding, so reset the email counter
		<span class="hljs-keyword">end</span>
	<span class="hljs-keyword">else</span>		--The smoke alarm <span class="hljs-keyword">is</span> going off
		print(<span class="hljs-string">"smoke alarm sounding!"</span>)	--this <span class="hljs-keyword">is</span> run when the optocoupler sees <span class="hljs-number">9</span>V (alarm of <span class="hljs-keyword">on</span> the smoke alarm <span class="hljs-keyword">is</span> active)
		<span class="hljs-keyword">if</span> timer_between_emails==<span class="hljs-number">0</span> <span class="hljs-keyword">then</span>
			print(<span class="hljs-string">"First email sent"</span>)
			send_pushingbox_email()
			email_sent_timeout=const_email_series_delay	--<span class="hljs-keyword">if</span> we have sent an email recently, don<span class="hljs-comment">'t allow another series of emails to be sent out right away</span>
		<span class="hljs-keyword">end</span>
		<span class="hljs-keyword">if</span> timer_between_emails==<span class="hljs-number">20</span> <span class="hljs-keyword">then</span>	--<span class="hljs-keyword">is</span> it <span class="hljs-built_in">time</span> <span class="hljs-keyword">to</span> send the <span class="hljs-built_in">second</span> email?
			print(<span class="hljs-string">"second email sent"</span>)
			send_pushingbox_email()
		<span class="hljs-keyword">end</span>
		<span class="hljs-keyword">if</span> timer_between_emails==<span class="hljs-number">40</span> <span class="hljs-keyword">then</span>	--<span class="hljs-keyword">is</span> it <span class="hljs-built_in">time</span> <span class="hljs-keyword">to</span> send the third email?  The house has probably burned down by <span class="hljs-built_in">now</span>.  fuck.
			print(<span class="hljs-string">"third email sent"</span>)
			send_pushingbox_email()
		<span class="hljs-keyword">end</span>
		<span class="hljs-keyword">if</span> timer_between_emails&lt;<span class="hljs-number">100</span> <span class="hljs-keyword">then</span>	--the smoke alarms must have been <span class="hljs-keyword">on</span> <span class="hljs-keyword">for</span> a long <span class="hljs-built_in">time</span>!
			timer_between_emails=timer_between_emails+<span class="hljs-number">1</span>		--counting up <span class="hljs-keyword">to</span> the <span class="hljs-keyword">next</span> email that can be sent out
		<span class="hljs-keyword">end</span>
	<span class="hljs-keyword">end</span>
	<span class="hljs-keyword">if</span> email_sent_timeout&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">then</span>	--<span class="hljs-keyword">if</span> we have sent an email recently, don<span class="hljs-comment">'t allow another series of emails to be sent out right away</span>
		email_sent_timeout=email_sent_timeout-<span class="hljs-number">1</span>		--counting down <span class="hljs-keyword">to</span> allow another series of emails <span class="hljs-keyword">to</span> be sent out
	<span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span>

--This routine uses a <span class="hljs-string">"get"</span> command <span class="hljs-keyword">to</span> have the Pushingbox web site send an email.
--This code snippet was copied from the internet
<span class="hljs-keyword">function</span> send_pushingbox_email()
	CntTimer=<span class="hljs-number">1</span>	--we have <span class="hljs-keyword">to</span> go through this routine twice <span class="hljs-keyword">in</span> order <span class="hljs-keyword">for</span> the email <span class="hljs-keyword">to</span> be sent
	tmr.alarm(<span class="hljs-number">1</span>, <span class="hljs-number">4000</span>,<span class="hljs-number">1</span>, <span class="hljs-keyword">function</span>()
		print(<span class="hljs-string">"CntTimer: "</span>)	--debug
		print(CntTimer)	--debug
		CntTimer=CntTimer+<span class="hljs-number">1</span>
		<span class="hljs-keyword">if</span> CntTimer&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">then</span>	--allows the <span class="hljs-built_in">timer</span> <span class="hljs-keyword">to</span> only run through twice
			tmr.<span class="hljs-keyword">stop</span>(<span class="hljs-number">1</span>)	--<span class="hljs-keyword">stop</span> the <span class="hljs-built_in">timer</span> after two times through
		<span class="hljs-keyword">end</span>
		sk=net.createConnection(net.TCP, <span class="hljs-number">0</span>)
		print(<span class="hljs-string">"A"</span>)	--debug
		sk:dns(host,<span class="hljs-keyword">function</span>(conn,ip)
			ipnr=ip
			print(<span class="hljs-string">"B"</span>)	--debug
		<span class="hljs-keyword">end</span>)
		conn=net.createConnection(net.TCP, <span class="hljs-number">0</span>) 
		print(<span class="hljs-string">"C"</span>)	--debug
		conn:<span class="hljs-keyword">on</span>(<span class="hljs-string">"receive"</span>, <span class="hljs-keyword">function</span>(conn, payload) print(payload) <span class="hljs-keyword">end</span> )
		print(<span class="hljs-string">"D"</span>)	--debug
		conn:connect(<span class="hljs-number">80</span>,ipnr)
		print(<span class="hljs-string">"E"</span>)	--debug
		conn:send(<span class="hljs-string">"GET /pushingbox?devid=vD60F1 HTTP/1.1\r\nHost: "</span>..host..<span class="hljs-string">"\r\nConnection: keep-alive\r\nAccept: */*\r\n\r\n"</span>)  --use your own V
		print(<span class="hljs-string">"F"</span>)	--debug
	<span class="hljs-keyword">end</span>)
<span class="hljs-keyword">end</span>


</pre><br><br><br>This is my first Lua program. I had to borrow heavily from forum examples in <a href="http://esp8266.com" target="_blank">http://esp8266.com</a>. There are a bunch of really talented people there.<p><br>There are a couple of things I would like to do in the future:<br>1) Recess all of the electronics into the ceiling. The Hammond enclosure hanging down from the ceiling is somewhat of an eye sore.<br>2) Create a web server on the ESP8266. It would be nice to hold debugging information in a web page. Then, when an email is not sent, I can look back at the history. It would also be nice to change the wifi access point and password remotely. <br>3) Make a custom circuit board for the ESP8266. I used perf-board with point to point wiring in the prototype. It would be more tidy to do a PCB layout and send out the gerbers for a professional board.</p><p><br>There is lots of room for improvement. Anyway, let me know if you have questions and I will try to get to them.<br></p>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'qKX0hde8-EY-0_pnPVujOsRwu3zezOHMfRfo';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>