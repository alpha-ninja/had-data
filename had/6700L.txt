<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Home Power Usage Monitor &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6700%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6700-home-power-usage-monitor">Home Power Usage Monitor</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Gather power data from the breaker panel and beam it to a Raspberry Pi for storage and web serving</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/79721-drew-yenzer" title="Visit Profile">Drew Yenzer</a><span>&bull;</span>
                
                a month ago<span>&bull;</span><a href="/project/6700#discussion-list" title="See Comments">3 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6700-home-power-usage-monitor">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6700/logs/sort/newest">Newest</option>
                    <option value="/project/6700/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6700/log/20694-first-post">First Post</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6700/log/20694#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20694"><p>It took longer than I expected to get the initial project info in there, so this post will be brief.  So far, I've got a schematic done up, PCB laid out, and BOM made.  All the parts have even been ordered.  I expect to receive the PCB in a couple weeks from OSH Park.  Between then I'll have started writing the PIC code. Probably...</p><p>In my head, it's basically divided into 3 main sections:</p><p>1. ADC reads and power calculation</p><p>2. LCD Display</p><p>3. RF Transmission</p><p>I'll tackle it in that order as well.  The RF transmission is last because I haven't quite decided how I want to handle that.  MQTT looks interesting and definitely scale-able to work with other projects, but it might be too much overhead for the PIC.  Plus I'd need to find a C library implementation of it.  The alternative is to make my own quick and dirty protocol.  It would be faster for me to implement and for the short term is all this project really needs.  If I structure it right then it should be easy to switch protocols later on if need be.</p><p>Anyway that's all for now. I'll post the schematic, PCB, and BOM once I figure out a good way to do so.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6700/log/20833-schematic-posted">Schematic Posted</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6700/log/20833#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20833"><p>I made a github account to post all the project files at.  So far it has the schematic and board layout.</p><p>In other exciting news I received parts from Digikey today.  Now all I'm waiting on is the PCB and I'll have everything hardware wise.  Still haven't started any coding, but hey, I've got time, right? :)</p><p>Here's pictures of the schematic and board layout for your viewing pleasure.  All the related files are on github. Enjoy!</p><p><img src="https://cdn.hackaday.io/images/9718321436661678661.png"></p><p><img src="https://cdn.hackaday.io/images/5455711436661723387.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6700/log/21051-schematic-mistakes">Schematic Mistakes</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6700/log/21051#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21051"><p>The good news is the PCBs I ordered should get here Saturday.  The bad news is there are horrible flaws in the design that would burn up one or more components.  I may have jumped the gun in ordering those PCBs... stings....  Here&apos;s a list of them.  The first 2 are from SJ Greenfield.</p><ol><li>Since the 9Vac source is grounded by the voltage divider AND the diode bridge, it shorts itself across the diode between pins 2 and 4 on the bridge every negative cycle.  That diode bridge definitely would have smoked.<ol><li>SOLUTION: Go with a single diode half wave rectifier.  This will require a larger smoothing capacitor.</li></ol></li><li>Resistor R4 should have a junction between R12 and R11.... Duh.</li><li>Currently when the current transformer is disconnected, the switch in the stereo jack pulls the ADC line to ground.  After looking at it again I think it would be better to send the divided 1.65V to the ADC so I can calibrate that measurement.</li><li>Button1 is tied to pin RA7 on the PIC.  RA7 just so happens to not have any interrupt associated with it, nor is it a remappable pin.  Nice.</li><li>Turns out the CSN pin on the nRF24 is more than just a simple chip select. You know, the simple kind that just enables/disables the entire chip.  It actually needs to be pulled high and low when sending commands. Go figure.</li></ol><img src="https://cdn.hackaday.io/images/2404701437093475181.png"><p>Let me know if you guys notice anything else!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6700/log/22042-latest-circuit">Latest Circuit</a></h2>
                            <small class="authorship">15 days ago  &bull;
                                <a class="gray-link" href="/project/6700/log/22042#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22042"><p>It&apos;s been a little while since my last update.  Haven&apos;t accomplished a whole lot since then, but I have updated the schematic to what will hopefully be a final &quot;base&quot; version.  Anything added on will be in a later revision.  So, this is what&apos;s changed:</p><ul><li>Fixed mistakes from previous post<ul><li>The big change here is swapping out full wave rectification with half wave.  I chose a schottky diode because the lower voltage drop affords the use of a smaller smoothing capacitor, without any ill side effects from the small reverse leakage current.</li></ul></li><li>Moved RF connections around to default SPI pins on PIC.  There was really no reason to keep it as is and this saves me from having to remap pins in software.</li><li><div>Connected IRQ RF pin.  Not sure if I&apos;ll use this but it&apos;s there now.</div></li><li>I was going to add a fuse, but it turns out the wall wart transformer has one built in.  Bonus!</li><li>Added test points.  This is something I always mean to do but forget about.  Really useful for troubleshooting.</li></ul><img src="https://cdn.hackaday.io/images/9249941438547661324.png"><p>I thought about throwing an LED in there for some diagnostics, but I have an LCD so I can just update that with pertinent error info.  I&apos;ll go ahead and order this board in a couple days, and it should get here in a couple weeks.<br></p><p>You&apos;ll also notice some ADC scaling information on the schematic.  This is because I&apos;ve already started on that part of the code and I&apos;ll probably post an explanation for my methodology in the next few days.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6700/log/22261-power-calcs-design">Power Calcs Design</a></h2>
                            <small class="authorship">11 days ago  &bull;
                                <a class="gray-link" href="/project/6700/log/22261#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22261"><p>Hi there!  These numbers may not mean much, but this project has had over 2000 page views, 26 followers, and 5 skulls (no idea what those are)!  That&apos;s exciting!  It&apos;s encouraging to know there are people out there that are interested in what I&apos;m doing. Thanks!</p><p>Now then, today I&apos;m going to talk about my software design for calculating power. I&apos;m nearly done implementing a first draft of it.  It still needs to be tested with hardware, or simulated, before I&apos;d call it ready, but I&apos;ll use some code snippets to help explain things.</p><p>If you&apos;ll remember, the hardware is composed of a line voltage ADC sensor, and 3 current ADC sensors.  I&apos;m calling that the 3 power channels.  There are 5 main values that I&apos;m interested in:</p><ul><li>Volts_rms = sqrt( mean( instVolts^2) )</li><li>Amps_rms = sqrt( mean( instAmps^2) )</li><li>Real Power = instVolts * instAmps</li><li>Apparent Power = Volts_rms * Amps_rms</li><li>Power Factor = Real Power / Apparent Power</li></ul><p>As you can see, in order to calculate these values you need instantaneous voltage and current measurements. For each power channel I&apos;ll need to measure both voltage and current at a certain sampling rate.  I&apos;m going to measure voltage for each channel for accuracy. If I measured voltage once, then the 3 current values, the delay between the voltage reading and the last current reading could be significant enough to make it an inaccurate power measurement.</p><p>Sampling speed and processing time could be an issue then. Depending on the load, current draw can change very rapidly within a 60Hz period.  In order to capture that I&apos;ll try to sample the waveform as much as possible with enough overhead to process the data within the PIC. I&apos;ll also use a power of 2 as the sampling rate over a 60Hz period in order to make the Mean calculation faster, theoretically. I&apos;ll start with 64 samples per 60Hz period, or 3840Hz. This will allow me to adequately capture out to the 16th harmonic (64/4). By the way, for an excellent read on sampling for engineers, check out <a href="http://www.wescottdesign.com/articles/Sampling/sampling.pdf" target="_blank">www.wescottdesign.com/articles/Sampling/sampling.pdf</a>.</p><p>At that rate, if the PIC clock is running at 8MHz (2MHz instruction cycle), I&apos;ll have 520 instructions available between samples.  This should be enough to capture and do some accumulation, but not enough to do the math needed for the power calculations above.  However, each second I&apos;ll have 2 million instructions available, which should be more than enough for the square roots and divisions. If it&apos;s not, I have a max clock of 48MHz in the PIC to play with. </p><p>To capture the data I&apos;ll use a timer interrupt at 3840Hz with the capture function within the interrupt.  It&apos;s normally not good practice to do much other than setting a flag within an interrupt, but in this case I need to ensure the data is captured at specific intervals. The power calculations can continue on in the main loop of the program, initiated once every second. After the calculations are done it will update the LCD and transmit data with the nRF24, all while new data is being collected through interrupts.</p><p>This post is already getting a little long. For next time I think I&apos;ll post some of the code and also try simulating it. Stay tuned!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6700/log/22300-power-calcs-design-pt2">Power Calcs Design Pt2</a></h2>
                            <small class="authorship">10 days ago  &bull;
                                <a class="gray-link" href="/project/6700/log/22300#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22300"><p>I&apos;ll just dive right in and show you what I&apos;ve got so far.</p><pre class="hljs cpp"><span class="hljs-comment">/* Main Loop */</span>
<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) {
        <span class="hljs-keyword">if</span> (_adcCounter &gt;= NUM_SAMPLES){
            _adcCounter=<span class="hljs-number">0</span>;
            CalcPower(instData,powerData);  <span class="hljs-comment">//tally up power data</span>
            UpdateLcd(powerData,display_state);  <span class="hljs-comment">//Display on LCD</span>
        }
        Sleep();
}</pre><p> This is the main loop.  Currently it does the power calculations and updates the LCD. Eventually it will also transmit data over the nRF24.  Outside of this loop I&apos;ve set up a timer that will trigger every (60Hz*64) 3840Hz.  Inside of that timer interrupt I call the GatherData() method shown below:</p><pre class="hljs cpp"><span class="hljs-comment">//Read each voltage/current pair</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GatherData</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> datapoint *dp, <span class="hljs-keyword">uint16_t</span> midPtV, <span class="hljs-keyword">uint16_t</span> midPtA[3])</span> </span>{
    <span class="hljs-keyword">uint16_t</span> tempV[<span class="hljs-number">3</span>],tempA[<span class="hljs-number">3</span>];
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {<span class="hljs-comment">//read ADCs</span>
        MySetChanADC(VIN_ADC_CHAN);    <span class="hljs-comment">//read voltage</span>
        ConvertADC();    //starts ADC capture
        <span class="hljs-keyword">while</span>(BusyADC()){NOP();}
        tempV[i] = ReadADC();
        MySetChanADC(i+<span class="hljs-number">1</span>);    <span class="hljs-comment">//read current transformer</span>
        ConvertADC();
        <span class="hljs-keyword">while</span>(BusyADC()){NOP();}
        tempA[i] = ReadADC();
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {<span class="hljs-comment">//Scale and store data</span>
        <span class="hljs-comment">//scale voltage and current readings</span>
        tempV[i] = tempV[i] &gt;= midPtV ? tempV[i]-midPtV : midPtV-tempV[i];  <span class="hljs-comment">//calculate difference about midpoint value</span>
        tempV[i] *= V_SCALE_FACTOR;
        tempA[i] = tempA[i] &gt;= midPtA[i] ? tempA[i]-midPtA[i] : midPtA[i]-tempA[i];
        tempA[i] *= A_SCALE_FACTOR;
        <span class="hljs-comment">//accumulate values for inst power and RMS volts/amps</span>
        dp[i].instVolts += (<span class="hljs-keyword">uint32_t</span>)tempV[i] * tempV[i];
        dp[i].instAmps += (<span class="hljs-keyword">uint32_t</span>)tempA[i] * tempA[i];
        dp[i].instPower += (<span class="hljs-keyword">uint32_t</span>)tempV[i] * tempA[i];
    }
}</pre><p> All this function does is read in a voltage and current for each power channel, scales it, then accumulates for the RMS and power calculations.  The ADC values are scaled about the alternating voltage/current midpoint, which would be the value read by the ADC when no voltage or current sensor is present.  I&apos;ll determine those midpoint values by a yet unimplemented calibration routine that runs on startup.  It&apos;ll average the ADC values over some power of 2 number of 60Hz cycles.</p><p>In case you&apos;re wondering why the datapoint structure uses uint32 types, it&apos;s because it needs to store 3840 squared ADC values. That adds up to a larger than uint24 value.  I tried looking for a way to save that data without squaring it and without a large array, but couldn&apos;t come up with anything else. </p><pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CalcPower</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> datapoint *dp, <span class="hljs-keyword">struct</span> power_data *pwr)</span></span>{
    <span class="hljs-keyword">struct</span> datapoint lastDp[<span class="hljs-number">3</span>];

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {<span class="hljs-comment">//transfer data to temps first</span>
        lastDp[i].instAmps = dp[i].instAmps;
        lastDp[i].instPower = dp[i].instPower;
        lastDp[i].instVolts = dp[i].instVolts;
        dp[i].instAmps = <span class="hljs-number">0</span>; <span class="hljs-comment">//clear data to prepare for next wave</span>
        dp[i].instPower = <span class="hljs-number">0</span>;
        dp[i].instVolts = <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {
<span class="hljs-comment">        lastDp[i].instAmps *= A_SCALE_FACTOR_SQ;  //scale ADC values</span>
<span class="hljs-comment">        lastDp[i].instVolts *= V_SCALE_FACTOR_SQ;</span>
<span class="hljs-comment">        lastDp[i].instPower *= VA_SCALE_FACTOR;</span>
        pwr[i].voltsRMS = <span class="hljs-built_in">sqrt</span>(lastDp[i].instVolts / NUM_SAMPLES); <span class="hljs-comment">//RMS calc</span>
        pwr[i].ampsRMS = <span class="hljs-built_in">sqrt</span>(lastDp[i].instAmps / NUM_SAMPLES);
        pwr[i].realPower = lastDp[i].instPower / NUM_SAMPLES;
        pwr[i].apparentPower = pwr[i].voltsRMS * pwr[i].ampsRMS;
        pwr[i].powerFactor = pwr[i].realPower / pwr[i].apparentPower;
    }
}</pre>Lastly is the actual power calculation.  This is called once a second from the main loop. The first loop in this function tries to quickly transfer the instantaneous voltage/current/power data into temporary variables, then clear those accumulations before the next timer interrupt.  The next loop is the meat of it. First it scales the data from ADC values to actual units (power_data structure is all floats).  The scaling factors are squared since the data is squared before it&apos;s accumulated.  The rest is just the standard RMS and power calculations<p>If you&apos;re looking at this and thinking it&apos;s going to take a lot of instructions to accomplish not only the math but the conversions between 16-bit, 32-bit, and float data types then you are right!  It actually took 10 times more cycles than I allotted for in the GatherData() function.  I&apos;ll get into all of that in the next post talking about simulation and optimizations.  I actually discovered something pretty interesting (or infuriating depending on your point of view), which is why I rushed through this post.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6700/log/22448-simulation-optimizations">Simulation &amp; Optimizations</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/6700/log/22448#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22448"><p>If you&apos;ll remember, I want to sample voltage and current at 3840Hz. With a 2MHz instruction clock, that gives me 520 instructions between samples. On face value, that should be enough to capture 6 ADC values, multiply 16-bit numbers 9 times, and add 16 and 32-bit values 9 times. That&apos;s all I need to do, and without doing any calculations I naively figured that would certainly take less than 500 instructions. Well when I actually simulated it, it took...wait for it.... 4398 instructions! What! Even at the max oscillator frequency of 48MHz, that only allows 3125 instructions per 3840Hz. My fallback plan was shot.</p><p>So I took a look at the assembly the XC8 compiler generated and it&apos;s largely garbage. Lots of NOPs, useless branches, useless moving values around (they&apos;re never used). After looking around the web for a bit I found this is normal for the free version. I can understand not optimizing the assembly for the free version, but come on inserting garbage instructions is not cool! I really don&apos;t want to write any assembly for this project if I don&apos;t have to, so I took a look at how I can change the C code around to produce fewer assembly instructions.</p><p>Starting off with the </p><pre class="hljs cpp"><span class="hljs-setting">tempV[i] = <span class="hljs-value">tempV[i] &gt;= midPtV ? tempV[i]-midPtV : midPtV-tempV[i];</span></span></pre><p>line, I tried changing it to </p><pre class="hljs cpp"><span class="hljs-keyword">if</span> (tempV[i] &gt;= midPtV) tempV[i] -= midPtV;
<span class="hljs-keyword">else</span> tempV[i] = midPtV-tempV[i];</pre><p>That saved 9 instructions total for the entire function. Since there is another line that&apos;s basically the same thing except with tempA[], that&apos; 18 total saved (it actually saves 26 with both of them..go figure)... This is going to take a while.... UNTIL I stepped through the code to this part:</p><pre class="hljs cpp">dp[i].instVolts += (<span class="hljs-keyword">uint32_t</span>)tempV[i] * tempV[i];</pre><p>It takes 370-390 cycles to do one of those lines, and with the loop there is a total of 9, which is insane. But that&apos;s not the interesting part. I found that if you step into this line it branches to a file called Umul32.c in the sources\common directory of XC8. This file has multiple methods for doing a 32x32 bit multiplication with a 32-bit result. One of these methods has an</p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">if</span> ... &amp;&amp; defined(__OPTIMIZE_SPEED__)</span></pre><p>directive preceding it. That was not the method the compiler chose for me, of course. After a couple failed attempts at defining that value, commenting out the #if lines and the slower methods (it still executed the comments when stepping through!), I just copied the faster code into a new function and used that instead.</p><p>I&apos;m not sure on the legality of posting the code, but the 32x32 algorithm is probably a standard one (again, not sure), and I believe I&apos;ve given you enough to go on to replicate it. The results were pretty fantastic. Cycle count for the GatherData() function went from 4362 (after the first optimization I tried) to 2190 with the new 32-bit multiply code.  Awesome. Now I can run the PIC at 48MHz and have it complete the data gathering with cycles to spare. Mission accomplished!</p><p>This can of course be improved upon further, but I don&apos;t want to take the time to do that. If I really wanted to easily change things I would go with a 32-bit micro (PIC32) that could natively handle these calculations without having to convert between types, and it has a 32-bit hardware multiplier instead of the 8-bit in PIC18. Knowing what I know now I would have gone with the PIC32 from the start. I found out its compiler is gcc based, and you can find instructions on the web how to enable the paid optimizations for free on it. XC8 is a different compiler entirely and is hobbled in the free version. In other words, if this project gets as far as a Rev 2.0 and power consumption is an issue, look for it using a PIC32 at a lower clock speed. It would be ironic after all for a power meter to be power inefficient, right?</p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'XtcmNcgw-X3qh01xoN8E0PNg3BWldiBw5678';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>