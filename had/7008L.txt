<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Fly Wars : A Hackers Solution To World Hunger &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F7008%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/7008-fly-wars-a-hackers-solution-to-world-hunger">Fly Wars : A Hackers Solution To World Hunger</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Using Technology To Increase Food Production</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/83560-michael-ratcliffe" title="Visit Profile">Michael Ratcliffe</a><span>&bull;</span>
                
                20 days ago<span>&bull;</span><a href="/project/7008#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/7008-fly-wars-a-hackers-solution-to-world-hunger">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/7008/logs/sort/newest">Newest</option>
                    <option value="/project/7008/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/7008/log/21887-raspberry-pi-2-b-and-processing-221">Raspberry Pi 2 B and Processing 2.2.1</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/7008/log/21887#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21887"><p>The hackers Solution  to World Hunger will require Vision based control, Processing is a Free and Powerful Tool when it comes to Vision based Control Systems. It turns out Installing Processing on The Raspberry Pi is a little more complicated than it should be, this tutorial will guide you through the installation process.</p><p>This Tutorial is based on a <a href="http://scruss.com/blog/2014/01/07/processing-2-1-oracle-java-raspberry-pi-serial-arduino-%E2%98%BA/">Scruss.com</a> tutorial for processing 2.1 . If you are used to the Linux GUI and the use of Commands, then skip the Video and just read the tutorial. If this is your first time with a Raspberry Pi and are finding yourself a little lost making your way around the environment then use both the video and tutorial together.</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/9H5ZuRXfZfA" frameborder="0" allowfullscreen=""></iframe>  <p>In order to get a working version of Processing on the Raspberry Pi the following steps must be followed:</p>  <p>&gt;Update the system</p>  <p>&gt;Install and use the Java JDK 7</p>  <p>&gt;Install Processing </p>  <p>&gt;Replace the Java run time with Pi&#x2019;s own version</p>    <p><strong>Update the system</strong></p><p>Check that you are connected to the internet, then open the terminal and follow the commands below:</p>  <p><strong></strong></p><pre class="hljs sql">sudo apt-get <span class="hljs-operator"><span class="hljs-keyword">update</span>

sudo apt-<span class="hljs-keyword">get</span> dist-<span class="hljs-keyword">upgrade</span></span></pre><p><strong></strong></p>    <p><strong>Install  Java</strong></p>  <p><strong></strong></p><pre class="hljs sql"><strong>sudo apt-get <span class="hljs-operator"><span class="hljs-keyword">install</span> oracle-java7-jdk</span></strong></pre>  <p>Check if the right version is installed and being used.</p>  <pre class="hljs nginx"> <span class="hljs-title">java</span> -version
</pre><p>java version &quot;1.7.0_40&quot; is what you should get, if you dont then enter the following Command:</p>  <p><strong></strong></p><pre class="hljs sql"><strong>sudo <span class="hljs-operator"><span class="hljs-keyword">update</span>-alternatives <span class="hljs-comment">--config java</span></span></strong></pre>    <p>This command will ask for a specific version to be declared, you do this by inputting the corresponding table number  into the task manager. Remember you want JDK 7.</p><p><strong>Download &amp; Install Processing</strong></p>    <p>Go to  <a href="http://www.Processing.Org">www.Processing.Org</a></p>  <p>And Download the Linux 32-bit Version [around 100mb]</p><p>[If you have the funds to spare, Fund these guys. Their work is Awesome!]</p>  <p>Once it is downloaded click to open the file, it will ask you to extract the folder, extract it into the:</p><p>home/pi directory [as Below]</p><p><span></span></p><p><img src="https://cdn.hackaday.io/images/8699511438299607079.png"></p><p>Next you need to Run the following two commands, it replaces the java with a compatible R-pi one [Check out  <a href="http://scruss.com/blog/2014/01/07/processing-2-1-oracle-java-raspberry-pi-serial-arduino-%E2%98%BA/">Scruss.com</a> if you want a better explanation] .</p><pre>rm -rf ~<span class="hljs-regexp">/processing-2.2.1/java</span>

ln -s /usr/lib/jvm/jdk-<span class="hljs-number">7</span>-oracle-armhf ~<span class="hljs-regexp">/processing-2.2.1/java</span></pre><p><strong>That Is The End of The Tutorial</strong></p><p>Now You should be able to navigate to the processing folder:</p><p>home/pi <span class="redactor-invisible-space">/Processing-2.2.1  <br></span></p><p><span class="redactor-invisible-space">Click on the Processing Link in there, Execute and Processing should open like below:</span></p><p><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/4534441438299852139.png"><span class="redactor-invisible-space"><br></span></span></p><p><strong>Dont Forget To like, Share and Get involved with the &quot;Hackers Solution to World Hunger&quot;  Project.  The next Tutorials:</strong></p><p><strong>&gt; Controlling Raspberry Pi GPIO Pins From Withing Processing Environment</strong></p><p><strong>&gt;Raspberry Camera and Processing, Bringing Vision Based Control To Your Projects</strong></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/21899-controlling-raspberry-pi-gpio-pins-from-within-processing-environment">Controlling Raspberry Pi GPIO Pins From Within Processing Environment</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/7008/log/21899#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21899"><p><strong>Before you start, make sure you have a working Processing environment on your Pi. </strong>[<a href="Controlling Raspberry Pi GPIO Pins From Withing Processing Environment">See Tutorial-1</a>] </p><p>This Tutorial Gave me a bit of a headache, I can not find much reliable information online using the GPIO pins from inside the Processing environment. Which is a shame because it is such a useful environment for those guys coming over from Arduino based electronics.</p><p>The only project I could find was this little snippet on git hub:</p><p><a href="http://xseignard.github.io/2013/04/24/processing-and-gpios-on-raspberry-pi/">http://xseignard.github.io/2013/04/24/processing-and-gpios-on-raspberry-pi/</a></p><p><strong>This tutorial implements the following steps to get GPIO&#x2019;s working within Processing:</strong></p><p>&gt;Check System is up to date</p><p>&gt;Download the Latest Pi4J library</p><p>&gt;Unzip the library and rearrange its files into something Processing will accept</p><p>&gt;Show us how to Run Processing as Root [Pi4j needs to be ran as root]</p><p> you are used to the Linux GUI and the use of Commands, then skip the Video and just read the tutorial. If this is your first time with a Raspberry Pi and are finding yourself a little lost making your way around the environment then use both the video and tutorial together.<br></p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/mp5GzsSDH0s" frameborder="0" allowfullscreen=""></iframe><p><strong>Check System is up to date</strong><br></p><p>Enter the following into the Command Terminal:</p><pre class="hljs sql">Sudo apt-get <span class="hljs-operator"><span class="hljs-keyword">update</span></span></pre><pre class="hljs vbscript">Sudo apt-<span class="hljs-keyword">get </span>upgrade</pre><p><strong>Downloading the Latest Pi4j</strong></p><p>Pi4j Has moved to:   <a href="http://www.pi4j.com">www.pi4j.com</a> </p><p>Do not install it as recommended on the website, to make it work with processing you will have to follow the rest of the steps.</p><p>Download  the : pi4j-1.0.zip    [<a href="http://pi4j.com/download.html" target="_blank">http://pi4j.com/download.html</a>]</p><p><strong>Re-structuring Pi4j</strong></p><p>Once the Download has finished Copy the zip file into your:</p><p>Home/pi  directory </p><p>The Run the Following command in the Terminal:</p><p><strong></strong></p><pre class="hljs nginx"><strong><span class="hljs-title">unzip</span> pi4j-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.zip</strong></pre><p>Since Processing is not happy when a lib have something else than letters and numbers in the lib name, you need to rename the unzipped folder:</p><p>(see <a href="http://wiki.processing.org/w/How_to_Install_a_Contributed_Library" target="_blank">http://wiki.processing.org/w/How_to_Install_a_Contributed_Library</a>).<br></p><p><strong></strong></p><pre class="hljs nginx"><strong><span class="hljs-title">mv</span> pi4j-<span class="hljs-number">1</span>.<span class="hljs-number">0</span> pi4j</strong></pre><p>Then you need to re-arrange files to stick with the Processing convention:</p><p><strong></strong></p><pre class="hljs nginx"><strong><span class="hljs-title">mv</span> pi4j/lib pi4j/library</strong></pre><p><strong></strong></p><pre class="hljs nginx"><strong><span class="hljs-title">mv</span> pi4j/library/pi4j-core.jar pi4j/library/pi4j.jar</strong></pre><p>Now you can put the lib in the Processing library folder (defaults to ~/sketchbook/libraries).</p><p><strong></strong></p><pre class="hljs nginx"><strong><span class="hljs-title">mv</span> pi4j sketchbook/libraries</strong></pre><p><strong>Running as Root</strong></p><p><strong></strong></p><pre class="hljs bash"><span class="hljs-built_in">cd</span> ~/processing-<span class="hljs-number">2.2</span>.<span class="hljs-number">1</span>/</pre><p><strong></strong></p><pre class="hljs nginx"><strong><span class="hljs-title">sudo</span> su </strong></pre><p><strong></strong></p><pre><strong>./processing</strong></pre><p><strong>Now that you are logged in to Processing, click on file&gt;preferences </strong></p><p><strong></strong></p><p><strong><img src="https://cdn.hackaday.io/images/426961438328680521.png"></strong></p><p><strong>Make Sure the Sketchbook Location is /Home/PI/Sketchbook</strong></p><p><strong>Testing</strong></p><p>Processing should start up, it is a good idea to check that  the &quot;clock&quot; example will still compile and run before moving onto testing GPIO&apos;s. </p><p><strong>Gpio Testing:</strong></p><p>Connect a button as shown, or use some jumper wires to make the following circuit:</p><p><img src="https://cdn.hackaday.io/images/7757861438325962498.png"></p><p>For an explanation of Pin-outs see: <a href="http://www.pi4j.com">www.pi4j.com</a><br></p><p>Here is the Sketch that comes along the Image from above (borrowed from <a href="http://pi4j.com/">http://pi4j.com/</a>).<br></p><p>Copy and Past This Code into a processing window and run it:<br></p><pre>import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalInput;
import com.pi4j.io.gpio.PinPullResistance;
import com.pi4j.io.gpio.RaspiPin;

int WIDTH = 1280;
int HEIGHT = 1024;
GpioController gpio;
GpioPinDigitalInput button;

void setup() {
    size(WIDTH, HEIGHT);
    gpio = GpioFactory.getInstance();
    button = gpio.provisionDigitalInputPin(RaspiPin.GPIO_02, PinPullResistance.PULL_DOWN);
}

void draw() {
    if (button.isHigh()) {
        println(&quot;pressed&quot;);
        fill(int(random(255)), int(random(255)), int(random(255)));
        float x = random(WIDTH);
        float y = random(HEIGHT);
        ellipse(x, y, 80, 80);
    };
}</pre><p>When You press the button [or bridge the correct pins with a jumper] A sphere should appear on the new screen, If it doesn&apos;t then  check you have the correct sketch folder defined under file&gt;preferences.</p><p><strong>Dont Forget To like, Share and Get involved with the &quot;Hackers Solution to World Hunger&quot; Project. The next Tutorials:</strong></p><p><strong><br></strong></p><p><strong>&gt;Raspberry Pi, Camera and Processing, Bringing Vision Based Control To Your Projects</strong></p><p><strong>&gt;How To make an Image Useful To a Computer Program</strong></p><p><strong><br></strong></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/22299-a-fast-postman-prototype-1a-and-1b">A Fast Postman: Prototype 1a and 1b </a></h2>
                            <small class="authorship">10 days ago  &bull;
                                <a class="gray-link" href="/project/7008/log/22299#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22299"><p>Today I received the parts needed to make an automated fish feeder. There are Two models. Here is a prototype: </p><p><img src="https://cdn.hackaday.io/images/4510851438988390985.JPG"></p><p>And the Control Box, that feeds the fish just as much as they need for the temperature of the water: </p><img src="https://cdn.hackaday.io/images/2953011438988474786.JPG"><p>Early next week there will be a video Log of these Up and running [we will be testing what medium they can dispence].</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/23066-making-the-feeder">Making The Feeder</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/7008/log/23066#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23066"><p>I have had a lot of requests for a how to on making the mechanical portion of the feeder. Well Here it is: </p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/CSxTFsVC_aU" frameborder="0" allowfullscreen=""></iframe><p><strong>Spec&apos;s </strong></p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/MAqm8-fx4zU" frameborder="0" allowfullscreen=""></iframe><p><strong>20mm:</strong></p><p>-federate [need to measure this]</p><p>-can handle food upto 4mm</p><p><strong>25mm</strong></p><p>-1L/min Federate with 50:1 ratio box</p><p>- can handle pelted food upto 6mm</p><p>What you will need:</p><p>Tools:</p><p>-Hand Drill</p><p>-Allen KEys</p><p>-Philips Screw Driver</p><p><strong>25mm Feeder Parts</strong></p><p>     &gt;25MM X 235MM SDS auger wood drill bit                                                                           </p><p>     &gt;25mm Pvc Inspection Tee                                                                                                         </p><p>     &gt;28mm metal saddels [28 mm MSBZP] two of these                                                       </p><p>     &gt; Aluminum Flexible Shaft Coupling  6mm to 10mm [SDS is 10mm, motor 6mm] </p><p>     &gt; MFA 919D 12v dc motor, 50:1 and lower gear ratio                   </p><p>     &gt;8 wood screws</p><p>     &gt;2&#x2019; Length  of 3x2&#x201D; wood</p><p>     &gt; 5cm length of 25mm PVC piping [for fitting the hopper]</p><p>As You can see the Motor is an expensive one, I had one of these knocking about but any similar power slow rotating  [120 rpm and below] 12v motor should work. It is important to get one that has a shaft height [ie the heigh of the shaft above the mounting plate] of blow 14mm. If it is lower you can always mount the motor on a shim.</p><p><strong>20mm Feeder Parts:</strong></p><p><strong><br></strong></p><p>     &gt;20MM X 205MM SDS auger bit</p><p>     &gt;20mm Pvc Inspection Tee</p><p>     &gt;25mm Pvc Saddels [two of these]</p><p>     &gt; Aluminum Flexible Shaft Coupling  4mm to 10mm [SDS is 10mm, motor 4mm] </p><p>     &gt;Electric 2 Pin Connector DC12V 40-50mA 10RPM DC Geared Motor  </p><p>     &gt;8 wood screws</p><p>Feel Free to use this design, modify it and make it better if you can see a way to do so.</p><p>Want to bring your fish feeding into the rest of the automated system, the next blog will be on controlling these feeders to optimise fish growth. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/23068-installing-opencv-on-a-raspberry-pi-the-easy-way">Installing OpenCv on a Raspberry Pi - The Easy Way </a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/7008/log/23068#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23068"><p>For This Project we will be using OpenCv on the Raspberry Pi quite a lot.</p><p>It it crazy Just How much miss information there is about opencv and the Raspberry pi<br></p><p>many tutorials will guide you thru a installation process that takes 12 hours+</p><p>and has library linked complexly.</p><p><strong>Opencv 2.4.1 [CV2] is available in the default Rasbian Repository.</strong></p><p><strong>To Install on Rasbian, type the following into the command terminal:</strong></p><pre class="hljs sql">sudo apt-get <span class="hljs-operator"><span class="hljs-keyword">update</span>

sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">upgrade</span>

sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> libcv-dev

sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> python-opencv

sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> libopencv-dev

sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> libcv2<span class="hljs-number">.3</span>

sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> opencv-doc
</span></pre><p><strong>Yet that is it, OpenCv is installed.</strong></p><p><strong>How To use:</strong></p><p>&gt;Open the File manager and go to your documents </p><p>&gt;Right click&gt;CreatNew&gt;Empty File</p><p>&gt;Add the line [#!/usr/bin/python] To the top of the file</p><p>&gt;Save it as &lt;FileName&gt;.py </p><p>&gt;Right Click on the File &gt;Properties&gt;Permisions and select everone&gt; OK</p><p>&gt;Doubble click on the file and execute in terminal</p><p>Hints:</p><p>&gt;Remember it is a python based install of openCV 2</p><p>&gt;Execute the python script as root if you want acess to the GPIO pins</p><p>&gt;If the script doesnt work, Cd / into the directory and run python &lt;Filename.py&gt;</p><p>I will be including a test scrip in my next blog post to check that your installation will work with the raspbery Camera module and a USB camera.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/23321-working-out-feed-rates-for-use-in-controller">Working Out Feed-Rates for Use in Controller</a></h2>
                            <small class="authorship">17 hours ago  &bull;
                                <a class="gray-link" href="/project/7008/log/23321#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23321"><p>To implement the control systems we need an idea of how much our feeders are delivering in Grams/second. </p><p>To Do this:</p><p>&gt;Run your feeder for 60 Seconds </p><p>&gt;Collecting the feed it dispenses. </p><p>&gt;Weigh the food it has dispensed in grams</p><p>&gt;Divide by 60 to get grams/second. </p><p>Here is a Video Of me doing this with the 20 and 25mm Feeders we made in an earlier video <a href="https://hackaday.io/project/7008/log/23066-making-the-feeder">[Link]</a>:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/MAqm8-fx4zU" frameborder="0" allowfullscreen=""></iframe><p>Nothing Really Hard Here. Watch the main Fly Wars Blog for any Improvments and links to building the controller yourself. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/23352-code-for-finding-fish-food">Code For Finding Fish Food</a></h2>
                            <small class="authorship">14 hours ago  &bull;
                                <a class="gray-link" href="/project/7008/log/23352#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23352"><p>This Is the Code for Finding fish food in a pond suing OpenCv and a raspberyPi. </p><p><strong>Prerequisites:</strong></p><p>&gt;Raspberrypi 2b running OpenCV <a href="https://hackaday.io/project/7008-fly-wars-a-hackers-solution-to-world-hunger/log/23068-installing-opencv-on-a-raspberry-pi-the-easy-way">[Install Instructions Here]</a></p><p>&gt;USB camera</p><p>&gt;A Feeder, controlled by opto isolated relay {See instructions here} </p><p>This is a basic proof of Concept script, what it does it count the number of food particles in a Fish Pond. </p><p><strong>It does this by:</strong></p><p>&gt;RaspberryPi request Image from USB Camera</p><p>&gt;Turns Image into Gray Scale </p><p>&gt;Turns grey scale into black and white </p><p>&gt;Uses Blob detection on white image to identify food </p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/fLURREGxTVw" frameborder="0" allowfullscreen=""></iframe><p>The  code below has been tested to work on a RaspberryPI 2b , running a Rasbian Image. </p><pre class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span>

<span class="hljs-comment">##*********Explain a Little About the Codes Purpose *****************##</span>
print(<span class="hljs-string">&quot;Vision Based Fish Feeder&quot;</span>)
print(<span class="hljs-string">&quot;This code is the first of its kind, addresing fish feeding with an active feedback system&quot;</span>)
print(<span class="hljs-string">&quot;Proof Of Concept Code, Submitted to HackaDay,Not Yet Under GNU etc&quot;</span>)
print(<span class="hljs-string">&quot;10th/8/2015&quot;</span>)
print(<span class="hljs-string">&quot;By Michael Ratcliffe&quot;</span>)
print(<span class="hljs-string">&quot;Mike@MichaelRatcliffe.com&quot;</span>)


<span class="hljs-comment">##**********************Import Some Librays**************************##</span>
<span class="hljs-keyword">import</span> cv2
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO
<span class="hljs-keyword">import</span> time

print(<span class="hljs-string">&quot;Librarys Loaded&quot;</span>)

<span class="hljs-comment">##*** Creating Video Capture and Defining Pins and other variables **##</span>
cap = cv2.VideoCapture(<span class="hljs-number">0</span>)
butPin = <span class="hljs-number">21</span> <span class="hljs-comment"># Broadcom pin 21 (P1 pin xx)</span>
motorPin = <span class="hljs-number">18</span> <span class="hljs-comment"># Broadcom pin 18 (P1 pin 12)</span>
<span class="hljs-comment">#dc = 20 # duty cycle (0-100) for PWM pin##not used unless pwm</span>

GPIO.setmode(GPIO.BCM) <span class="hljs-comment"># Broadcom pin-numbering scheme</span>
GPIO.setup(motorPin, GPIO.OUT) <span class="hljs-comment"># PWM pin set as output</span>
<span class="hljs-comment">#pwm = GPIO.PWM(pwmPin, 50)  # Initialize PWM on pwmPin 100Hz frequency</span>
GPIO.setup(butPin, GPIO.IN, pull_up_down=GPIO.PUD_UP) <span class="hljs-comment"># Button pin set as input w/ pull-up</span>
<span class="hljs-comment">#pwm.start(0)</span>

print(<span class="hljs-string">&quot;Definitions Finished and Entering Main Loop&quot;</span>)

<span class="hljs-comment">##*********************** Main Loop **********************************##</span>
<span class="hljs-comment">##								      ##</span>
<span class="hljs-comment">## Runs Continuosly for testing purposes                              ##</span>
<span class="hljs-comment">## Eventualy It will Run every Hour 8am-8pm 			      ##</span>
<span class="hljs-comment">## Feeding the Fish as Much as thet Can Eat in 5-10 minutes	      ##</span>
<span class="hljs-comment">##********************************************************************##</span>

<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):
   

   
<span class="hljs-comment">##**************** Capturing Image From Webcam ***********************##</span>

    _,frame = cap.read()



<span class="hljs-comment">##***************** Bluring Image to unify color *********************##</span>

    frame = cv2.blur(frame,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))

   

<span class="hljs-comment">##**************** Converting To Gray Scale **************************##</span>
<span class="hljs-comment">##								      ##</span>
<span class="hljs-comment">##Simple Conversion Using RGB Works Empty Tank			      ##</span>
<span class="hljs-comment">##Convert from One Channel to Cancel Noise from Fish Color if Needed  ##</span>
<span class="hljs-comment">##********************************************************************##</span>
   
    gray= cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    thresh = cv2.adaptiveThreshold(
    gray,<span class="hljs-number">255</span>,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
            cv2.THRESH_BINARY,<span class="hljs-number">75</span>,<span class="hljs-number">20</span>)

    
    thresh2 = thresh.copy()

  

<span class="hljs-comment">##***************** Identify Pellets Of Food ************************##</span>

    contours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)



<span class="hljs-comment">##************ Simple Logic to Feed Fish on Demand ******************##</span>
<span class="hljs-comment">##								     ##</span>
<span class="hljs-comment">##		PWM PIN Used Later As Project Evloves                ##</span>
<span class="hljs-comment">##		Most Likley Proportional+Intergral Control	     ##</span>
<span class="hljs-comment">##*******************************************************************##</span>

    <span class="hljs-keyword">if</span> (len(contours) &gt; <span class="hljs-number">7</span> <span class="hljs-keyword">or</span> GPIO.input(butPin)):
	print(<span class="hljs-string">&quot;Waiting for Fish to Eat&quot;</span>)
	GPIO.output(motorPin,<span class="hljs-keyword">False</span>);
	
    <span class="hljs-keyword">else</span>: <span class="hljs-comment"># button is pressed:</span>
       
	print(<span class="hljs-string">&quot;Adding Food&quot;</span>)
	GPIO.output(motorPin,<span class="hljs-keyword">True</span>)
        time.sleep(<span class="hljs-number">0.01</span>)
        GPIO.output(motorPin,<span class="hljs-keyword">False</span>);
<span class="hljs-comment">##************ Print Some Useful Things to the Screen ***************##</span>

    <span class="hljs-keyword">print</span><span class="hljs-string">&apos;Amount Of Food:  &apos;</span>,len(contours)-<span class="hljs-number">1</span>,<span class="hljs-string">&apos;  Pellets&apos;</span>


    cv2.imshow(<span class="hljs-string">&apos;Normal&apos;</span>,frame)
    cv2.imshow(<span class="hljs-string">&apos;Gray&apos;</span>,gray)
    cv2.imshow(<span class="hljs-string">&apos;Pellets&apos;</span>,thresh2)

    time.sleep(<span class="hljs-number">0.1</span>)

<span class="hljs-comment">##**************** Checks If User Has Asked to Leave *****************##</span>

    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">33</span>)== <span class="hljs-number">27</span>:
        <span class="hljs-keyword">break</span>



<span class="hljs-comment">##************** Clean up everything before leaving *****************##</span>

GPIO.cleanup() <span class="hljs-comment"># cleanup all GPIO</span>
cap.release()
cv2.destroyAllWindows()
</pre>
<p>You Can download this file and an explanation on how to use it from:</p><p><a href="http://www.MichaelRatcliffe.com/Projects"><strong></strong></a><strong><a href="http://www.MichaelRatcliffe.com/Projects">www.MichaelRatcliffe.com/Projects</a></strong><br></p><p>-either download the folder from the above link and unzip it into your home/pi folder. or paste the code from the above box into a text editor on the pi and save it as &quot;ProofofConcept.py&quot; in Home/Pi. </p><p>-Locate the File &quot;ProofofConcept.py&quot; Right Click on the File &gt;Properties&gt;Permissions and select everyone&gt; OK</p><p>- because we are using the GPIO pins. Run it using:</p><pre class="hljs bash"><span class="hljs-built_in">cd</span> home/pi
sudo python ProofofConcept.py</pre>
<p><strong>The Script should now run, it will output three windows and data to the command terminal about how much food it can see.</strong><strong></strong><br></p><p>So it Works, what is left to do now:<br></p><p>&gt;Improve immunity to noise in image processing</p><p style="margin-left: 20px;">-Convert just main color into Gray Scale [ie red food, make a grey scale from just red component of image]</p><p style="margin-left: 20px;">-Improve Blob Detection Implementation to stop groups of pellets being classed as a single pellet</p><p>&gt;Calculate rate of food consumption or fish in tank </p><p>That is it for now, we have proved that it is possible to identify the pelleted food. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/23412-good-news-for-cases">Good News For Cases</a></h2>
                            <small class="authorship">12 hours ago  &bull;
                                <a class="gray-link" href="/project/7008/log/23412#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23412"><p>Today I got three unit housing from the factory to put my electronics inside,  The next Step is Buying the components to poulate the housings and building a GUI. </p><p>The key to the success of this product will be an easy to use product contained within quality housing with a great user interface. To keep this unit Simple it must be plug and play, the user will input a few key aspects of their setup and the mcu will take care of the rest. The inputs and outputs that can be accessed via the compact on board screen are summarized below:<br></p><p><img src="https://cdn.hackaday.io/images/5908261439844283853.png"></p><p>The Unit will pull the time from a internal GPS module so the user wont have to set time and it will work anywhere in the world, the user will then input details about his system via the 5 button interface or view key logs/details of his unit by the on board screen:</p><p><img src="https://cdn.hackaday.io/images/5104261439844299381.png"></p><table><tbody></tbody></table><a name="_Toc427149486">Case</a><p>This Product must be durable and just as importantly portray a sense of quality. I really do like the heated bed controller I included in the parcel [I will be needing this back for testing]. </p><a name="_Toc427149487">Screen</a><p>For the temperature compensated model a simple Alphanumeric LCD or Graphic Display will suffice, on standby it will list the time now, time of next feed and current water temperature, illuminating when any button is pressed and give acess to a log of recent water extreme temperatures and feed rates.</p><p>Vision control systems could also be packaged with this screen, displaying the food count as a number. Larger bespoke units would encorperate a true screen to show the </p><a name="_Toc427149488">Buttons</a><p>This is the interface by which the user will define his system, most selections will be made from pre set options. </p><a name="_Toc427149489">Versions</a> <p>In order to reduce production costs I would like to keep the number of different versions limited, all utilizing the same main chassis/case and being available in 12v and mains power because we will need to be compatible with all commercial feed dispensers. Remember it is all about the control strategies and not the tiny mechanical feeders you have in front of you.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/23469-licences">Licences </a></h2>
                            <small class="authorship">11 hours ago  &bull;
                                <a class="gray-link" href="/project/7008/log/23469#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23469"><p>All of the mechanical portions of this projects are made solely by myself. the are released for anyone to use/modify/perfect. Do so at your own risk and do try to improve them. </p><p>All of the Code is also 100% my own and is released under GNU public licence. </p><p><img src="https://cdn.hackaday.io/images/4956001439837423973.png"></p><p>Use it as you wish, please reference me if you use any large parts of my work [Michael Ratcliffe] Modify it, make it better etc. but as always you do so at your own risk. <br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7008/log/23572-simpler-vision-control">Simpler Vision Control </a></h2>
                            <small class="authorship">9 hours ago  &bull;
                                <a class="gray-link" href="/project/7008/log/23572#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23572"><p>Today while waiting for videos to upload to YouTube for the Best Product award I have been working on a simpler vision based control system suited to the smaller aquaponics guys using IBC&apos;s as ponds. </p><p>To keep Cost down and the ease of use up, we are going to have to drop the RapberyPi and the high end vision operations and go with some basic arduino based stuff. </p><p>Not having a Arduino camera at the moment we are proving the concept works using a linux desktop and processing environment: </p><p>How Does it work:</p><p>&gt;Counts the number of food coloured pixels</p><p>&gt;Removes the static pixels found at sartup/beginning of the day</p><p>&gt;the remaining pixels are related to the amount of food in the cameras view</p><p>Here is the Code:<br></p><p>[Linux mint, processing 2.21]</p><p><span></span></p><pre class="hljs cpp"><span class="hljs-comment">/**
 *Pixel Count 
 * by Michael Ratcliffe. 
 *Released under GNU
 * Counts the number of red pixels in a frame
 */</span>


import processing.video.*;        
PFont f;                          <span class="hljs-comment">// Used For Displaying Data To Terminal</span>
  
Capture video;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>{
  size(<span class="hljs-number">640</span>, <span class="hljs-number">480</span>);
  video = <span class="hljs-keyword">new</span> Capture(<span class="hljs-keyword">this</span>, width, height);
  video.start();  
  noStroke();
  smooth();
   f = createFont(<span class="hljs-string">&quot;Arial&quot;</span>,<span class="hljs-number">16</span>,<span class="hljs-keyword">true</span>); 
  
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">if</span> (video.available()) {
    video.read();
    image(video, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height); <span class="hljs-comment">// Draw the webcam video onto the screen</span>
    
    
    <span class="hljs-keyword">int</span> foodCount=<span class="hljs-number">0</span>;
      video.loadPixels();
    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt; video.height; y++) {
      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; video.width; x++) {
        <span class="hljs-comment">// Get the color stored in the pixel</span>
        
       
        <span class="hljs-keyword">int</span> pixelValue = video.pixels[index];
        <span class="hljs-keyword">int</span> r = (pixelValue &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>;
        <span class="hljs-keyword">int</span> g = (pixelValue &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>;
        <span class="hljs-keyword">int</span> b = pixelValue &amp; <span class="hljs-number">0xff</span>;

<span class="hljs-comment">//******************************* Basic threshold for pixel Redness ***********************************//        </span>
        <span class="hljs-keyword">if</span>(r&gt;<span class="hljs-number">1.6</span>*g &amp;&amp; r&gt;<span class="hljs-number">1.2</span>*b){
                   foodCount++ ;  <span class="hljs-comment">//Adds to the pixel count for that frame </span>
                        
                        }
        index++;
      }
    }
    
<span class="hljs-comment">//************************************Displays the PixelCount on the Screen as Text**********************//   </span>
     textFont(f,<span class="hljs-number">32</span>);                 
  fill(<span class="hljs-number">0</span>);                       
  text(<span class="hljs-string">&quot;Pixels Of Food&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>);  
     textFont(f,<span class="hljs-number">32</span>);                
  fill(<span class="hljs-number">0</span>);                       
  text(foodCount,<span class="hljs-number">10</span>,<span class="hljs-number">140</span>);  
   
  }
}</pre>[This Is a rough Proof Of Concept, A better one with a youtube Video of how well it works will be added soon]<p><strong>Work Done so Far:</strong></p><p>Proved that this simple technique could be used</p><p><strong> Work to Do:</strong></p><p>-See if we can assess the camera data packets as they come in from the camera to the arduino to neglect the need to save the Image. </p><p>-Schedule a testing at the beginning of the day to assign a background pixel count. this will take care of any other food color objects in the view of the camera.</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'wh4eIgCs-QSExVhrCYBfOms59O-Em7CGzW88';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>