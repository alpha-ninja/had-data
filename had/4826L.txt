<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Tiny Bit Dingus &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4826%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4826-tiny-bit-dingus">Tiny Bit Dingus</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Every Day Carry bit flipper</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/49067-ajlitt" title="Visit Profile">ajlitt</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4826#discussion-list" title="See Comments">4 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4826-tiny-bit-dingus">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4826/logs/sort/newest">Newest</option>
                    <option value="/project/4826/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4826/log/15387-v01">v0.1</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/15387#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15387"><p>The hard requirement on this project is that it use the PCB as the USB contacts.  This restricts the total height of the board + components to 2mm.  The tallest components are currently the QFN and caps at 0.5mm.  There are many PCB houses that will do thin boards (DirtyPCBs will do down to 0.6mm) but I didn't want to wait too long to find out my first pass was broken since this is my first time on KiCAD and using this particular micro.</p><p>So for the first board I left the underside of the connector end bare and put the components on a part of the PCB that sits outside the port.  I added an edgemount header that brings out SWD, UART, reset, and boot mode select.  I also added an LED off a GPIO because "Hello, world" on a micro is better that way.  These changes let me get it fabbed at  OSHPark which takes just a couple of weeks to get me a 1.7mm thick board.  I also ordered a stencil (OSHStencils), paste, and components.</p><p>Still need to figure out what I'm going to use to reflow it.  Hot air gun?  Skillet?  Maybe an excuse to make a reflow toaster?<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/15589-sketchy-purchases-at-home-depot">Sketchy purchases at Home Depot</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/15589#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15589"><p>Bits and pieces have been coming in the mail over the last couple of weeks.  Finally yesterday the PCBs arrived, so naturally I had to get building.</p><p>Unfortunately I hadn't decided on how I was going to reflow the board.  I considered one of the cheap death trap $50 hot air stations on eBay, but my bench is small and I'm partial to living in an uncombusted home.  I could have picked up a well-regarded (as in: not entirely unsafe) Aoyue station for $100 at the local Fry's, but that was more than I wanted to spend on a merely passable tool.  I didn't have time to search thrift shops for the perfect toaster to convert into a reflow oven.  I suppose I could have bought a new one, but I get hung up on the allure of reusing an unloved appliance.</p><p>Then I stumbled on an old post on <a href="http://www.piclist.com/techref/postbot.asp?by=thread&amp;id=%5BPIC%5D%3A+SMD+soldering+using+butane+air+gun%2Firon&amp;w=body&amp;tgt=post">piclist</a> mentioning success with butane soldering irons used as small heat guns for SMD work.  The catalytic element is the key: it burns the butane at its surface instead of in an open flame, radiating heat while emitting a stream of hot exhaust.  The downside is that there's no temperature or airflow control.  I figured that I could put a thermocouple probe on the board surface and close the control loop myself.</p><p>So that's what I did.  I bought a <a href="http://www.homedepot.com/p/Bernzomatic-ST500T-Auto-Ignite-Butane-Torch-335258/205495608">$20 butane iron at Home Depot</a>, along with a cheap ceramic tile as a work surface.  The guy at the checkout gave me a funny look, like I was preparing to do... something.  Clearly I wasn't remodeling my kitchen or installing a new thermostat.  Maybe I was one item short of getting on a watch list.</p><p>Anyway, the board soldering was a big success considering it was my first time using stencils and reflow.  I set up the board in the jig and stencil, pasted it up, and taped it to the tile.  Component placement was fairly easy with some new curved tweezers I bought along with the paste.  Unfortunately I fumbled and lost the $0.80 LED, so I left that out for the moment.</p><p>I taped the thermocouple to the tile with the tip touching the PCB and fired up the torch.  I started slowly, with the torch near its lowest setting, and constantly moving the air stream around the board.  I used the torch distance as fine control over the temperature, and when it looked like the board was thoroughly soaked around 160C, I cranked up the torch and watched for the solder to melt while trying to keep the temperature around 240C for about a minute.  After everything looked smooth and silvery, I gradually dialed back the torch in a lame attempt to gradually cool down the board.</p><p>The result was a reflowed QFN and four parts stuck down to the board on their pads.  But the QFN had a solder blob between two pins, and one of the bypass caps wasn't making contact with a pad.  The QFN blob was easily fixed with wick, and the cap replaced with an iron.  The QFN was probably due to too much paste, so I'll work on my technique next time.  The cap however was a silk problem: it looks like the silk was off slightly for the entire backside, and a marker in silk between the pads had partially covered one of the landings.</p><p>I found my missing LED stuck to some of the tape I used to secure the board, and added that as well as the 8 pin connector.  Turns out that a 1.6mm thick board is way too thin to edge mount a dual row header, so I had to solder-blob one row of pins to the pads.  I'm not concerned though, since this header is only for debugging.</p><p>I did basic continuity checks as much as I could and cleaned off flux from the hand soldering.  By this time it was fairly late and I had to get up early for work today.  No time for "Hello World!" but there is that USB bootloader.</p><p>I plugged it into my Linux PC and it enumerated on the first try!</p><p>Next step: blink an LED.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/15642-never-always-check-your-appnotes">Never... Always check your appnotes.</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/15642#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15642"><p>Good news is at least half of the functionality of the board seems to work.  I rigged it to the external debug port of a FRDM-KL25Z board and pyOCD was able to read out the IDCODE and bulk erase flash.  The NMI_b (boot mode select) works as expected to force the bootloader to run after the flash is wiped, and RESET causes a USB disconnect on the host when in the bootloader.  The only remaining untested bits are the UART and the LED, which need code to be checked out.</p><p>Bad news is I didn't research the software end carefully enough.</p><p>First mistake: although the tools for flashing in ROM bootloader mode (blhost) are open, they're Windows-only.  I'd assumed that there was a Linux version, or that the bootloader (Kibble) talks plain old USB-DFU.  Now my to-do list includes a Python reimplementation of blhost, which sounds like a fun project.<br></p><p>Second mistake: Most of the KLxx chips are supported in pyOCD with nearly the same code.  This seems to be true for bulk erase.  But for some reason I can't flash the target.  I don't have time to look into this now, but in-circuit debug support would be nice for development.</p><p>Third mistake: I didn't have a binary to run yesterday, and was hoping that the mbed blinky code compiled for the KL25Z with the mbed online IDE would work.  However the mbed build server was offline most of yesterday, and I didn't have the cycles to spend on generating a binary with alternate tools (and the right target).  Yeah, TANSTAAFL and all.  I also have serious doubts that the KL25Z build will work anyway due to the TBD's use of the internal oscillator, so it might be for the best.</p><p>At this point I'm happy that I haven't run into problems that point to board or reflow screwups.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/16067-progress">Progress?</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/16067#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16067"><p>I've been too busy to spend much time on this, but I did play with the Kinetis SDK.  I can get the LED to light using a project build for KL43Z, but only when the SWD debugger is physically connected.  I think this has to do with the fact that I've built my "Hello World" in debug mode, and the micro is hanging on an unanswered semihosting breakpoint call.  I'll dig into this in the next couple of weeks.</p><p>Also committed the KiCAD project complete with gerbers I used to make boards and stencils on Github: <a href="https://github.com/pokey9000/tbd" target="_blank">https://github.com/pokey9000/tbd</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/16169-yes-progress">Yes, progress.</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/16169#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16169"><p>I built my LED project in KDS as "Release" and it works when flashed over USB from blhost without a debugger attached.  I also built the USB CDC demo which worked once I switched the USB clock to use the internal oscillator.</p><p>Next step: pull the mbed libraries and try building some stuff with the KL43 target.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/18501-but-at-what-cost">...but at what cost</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/18501#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18501"><p>Over lunch I got the mbed build of the USB_4 test project (USB-CDC) for KL43Z with GCC working.  My first attempt at this a while back broke because of a duplicate _exit() definition, but looking closer showed a cpp file from the ARM tools target dir in the GCC target that doesn't belong.  Delete, clean, and it built ok.</p><p>After verifying the built binary has the config bits correct (or risk soft-bricking without an SWD adapter handy) I flashed it with blhost under Windows, and the USB-CDC device showed up on my Linux laptop as soon as I plugged it in!</p><p>Exciting, right?</p><p>Well... it would be if I hadn't recently taken a look at some of the Gecko parts from SiLabs (inherited from the Energy Micro acquisition).</p><p>I used to ignore anything from SiLabs as they were stingy with documentation and tools for hackers.  But within the last few months they added support in mbed for some of their EFM32 Cortex-M devkits.  The EFM32HG "Happy Gecko" line caught my eye: Cortex-M0+ at 24MHz, 64K flash / 8K SRAM,  crystal-less USB, on-chip regulator, ROM bootloader, and comes in QFN24.  That's not as good as the Freescale KL27 I'm using here in speed and memory.  What makes it better is it's fully supported in the mbed IDE, has a simpler bootloader to work with (USB-CDC + xmodem instead of custom HID), and is less than half the price of the KL27 ($1.94 qty1 for the '309 variant vs $4.39).  Given that I can live with the limitations.</p><p>So I'm looking into that for the next rev.  I'll get a better feel for it once the devkit gets here.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/19178-flipping-and-flopping">Flipping and flopping</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/19178#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19178"><p>The EFM32 is impressive, but I think I'm going back to the Freescale part for now.  The bootloader is a big thing for me, and while the EFM32 USB-CDC and xmodem protocol is easier to use from a software standpoint, the KL27's HID protocol is driverless under all OSes.  Plus it opens another possibility: firmware loading through a driverless and OS agnostic Chrome plugin using the Chrome HID API.</p><p>It's another arbitrary challenge in this project, and that's great.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/19597-i-should-be-sleeping">I should be sleeping</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/19597#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19597"><p>but I was working on the next board rev.  The surface mount header shortens the whole board but fits within a typical USB thumb drive volume.  Pins are remapped to bring SPI, I2C, UART, FlexIO, and the bootloader pin.</p><p>It still needs some cleanup but I think it looks a lot better than v0.1.</p><img src="https://cdn.hackaday.io/images/415971434443166681.png"><p><img src="https://cdn.hackaday.io/images/6611141434443156448.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/19821-actions-were-taken">Actions were taken</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/19821#discussion-list">
                                    17 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19821"><p>I spent some quality time in KiCAD finishing TBD v0.2 over the last couple of weeks.  I ordered boards, stencils, and parts which should take a couple of weeks to trickle in.  Files in the Github link to the left. Here are the deltas from v0.1:</p><ul><li>Surface mount 2x4 header mounted on the backside to reduce overall length</li><li>Rethought pinout brings out 6 pins that can be muxed between I2C, SPI, FlexIO (general purpose serial engine), and ADC</li><li>Option to use a micro USB jack instead of the USB-A board edge.  Fits to the back side of the USB-A pads.</li><li>BOOT pin placed next to GND so a 2 pin jumper can be used to force ROM boot mode</li><li>0603 discretes for easier manual placement and less risk of tombstoning</li><li>Resistor in line with the LED</li><li>SWD_CLK moved to test pad to save 1 pin on the header.  SWD_IO is shared with one of the I2C pins</li><li>Silk legends for pin GPIO names and main alternate function</li></ul><img src="https://cdn.hackaday.io/images/6123151434988524257.png"><p><img src="https://cdn.hackaday.io/images/9970331434988504899.png"></p><p>I also had some time to play with using a web browser to talk to the bootloader via HID.  I started with the <a href="https://learn.sparkfun.com/tutorials/hid-control-of-a-web-page">Sparkfun Firefox HID example</a>
 as a base and ended up with a simple page that's able to reset the part
 and read memory as a proof-of-concept.  Now that the board is in 
production, I can spend some more time on this part of the project.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4826/log/20211-pcbs-in-the-mail">PCB&#39;s in the mail</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4826/log/20211#discussion-list">
                                    1 comment
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20211"><p>The PCBs for v0.2 should be waiting for me on my doorstep when I get home tonight.  The components and stencil arrived last week, so tonight I'll be baking boards.</p><p>I'm so excited that I spent my lunch break pricing larger volume builds for fun.  For a build of 100 I can get the price to ~$4/board in components and PCB.  Assembly time/cost, QA, shipping, solder paste, and NRE aren't included, so finished boards would be significantly more. </p><p>Progress on the browser based programmer is slow.  I scrapped my Firefox + FireBreath proof-of-concept after finding out that the NPAPI standard the FireBreath based plugin relies on is deprecated due to security risk.  Now I'm trying to find my way around developing a Chrome app, which has the advantage of being driverless and plugin-less on all platforms.  Nothing to show for it now, and certainly not while I've got boards to build.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'S3mRVquu-CGDV0EG-dHtZAxUmNgMLyha-D5o';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>