<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Low-power environmental data logger &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6177%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6177-low-power-environmental-data-logger">Low-power environmental data logger</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Small battery-powered data logger that runs on 3.2 ÂµA when measuring at a 1 minute interval</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/213-martin2250" title="Visit Profile">martin2250</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6177#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6177-low-power-environmental-data-logger">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6177/logs/sort/newest">Newest</option>
                    <option value="/project/6177/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6177/log/19186-case-build">Case Build</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6177/log/19186#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19186"><p>The Case is made from 4mm plywood and milled on my Shapeoko 2.</p><h2>Design (CAD)</h2><p>To design the case, I used Cadsoft EAGLE. I have only seen very few people use it for that purpose, although it is quite nice to use (at least if you're already used to the workflow) and the size restrictions only apply to components, not to drawings.</p><p>The design is pretty straightforward: a box with finger joints and a separator for the battery compartment.</p><p>The most exciting part is the battery cover: it slides in and out without using anything but the plywood and no extra parts.</p><p>The design files can also be found in the GitHub repo.<span></span></p><h2>CAM</h2><p>For CAM, I chose the best tool that I had: me. I traced out the toolpath in eagle with a line width of two millimeters which is also the size of the bit I used for routing. Then I used a program that I made for this very purpose (might get released on GitHub soon) to convert the line path directly to GCode.</p><p>Since this is almost as close to G-Code as writing it by hand, the generated toolpath is very efficient.</p><h2>CNC</h2><p><a href="https://www.youtube.com/watch?v=tlStZuNBMCA">A video of the CNC work can be found here</a><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6177/log/19187-software-v1">Software V1</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6177/log/19187#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19187"><p>If you want to take a look at the old software you can find it here: <a href="http://martin2250.blogspot.de/2014/11/avr-temperaturehumidity-logger.html">http://martin2250.blogspot.de/2014/11/avr-temperaturehumidity-logger.html</a></p><p>Since I created this project log after finishing the improved software, I won't write about it.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6177/log/19190-hardware-improvements">Hardware Improvements</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6177/log/19190#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19190"><p>I fixed some issues with the hardware:</p><h2>Buttons</h2><p>the buttons reacted very badly, so I replaced them with tactile switches which have spacers glued to them. The old buttons were screwed in, the new ones were secured in true hacker fashion with excessive amounts of hot glue.</p><h2>Reverse voltage protection</h2><p>The schottky diode that was used to protect the circuit against reverse voltage, which can easily appear with 9V-clips dropped too much voltage under load, especially when the LCD was on, but also when sampling the battery voltage after storing the buffer to EEPROM which resulted in curiously low readings. While it was not too much of an issue for the controller, the LCDs contrast constantly had to be adjusted so I replaced the simple diode with a small MOSFET in this configuration:<span></span></p><img src="http://rs20.mine.nu/w/wp-content/uploads/2013/02/nfet.png"><p>Now the voltage drop is negligible, which also increases battery lifetime.</p><h2>Battery Voltage Measurement</h2><p>The schematic shows a voltage divider feeding into the ADC. The voltage was measured against the internal bandgap. In the new firmware I used <a href="http://wp.josh.com/2014/11/06/battery-fuel-guage-with-zero-parts-and-zero-pins-on-avr/">bigjosh2's method of measuring the bandgap against the supply voltage</a> and removed the voltage divider and the capacitor which saved me 4ÂµA of constantly wasted power, more than the entire circuit uses with the new firmware.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6177/log/19193-software-v2">Software V2</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6177/log/19193#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19193"><p>While performing pretty well in terms of battery consumption (60ÂµA), the old firmware was very buggy and only reacted poorly to the buttons, so I started working on the new Firmware.</p><p>It is available on GitHub, see the main project page.</p><p>Flaws of the old version:</p><ul><li>processor is woken up from deep sleep every second by the RTC to look for button presses</li><li>menu completely blocks the processor, is very sluggish and hard to expand</li><li>battery voltage is determined with a voltage divider</li><li>no display timeout -&gt; accidentaly drained the batteries in under a day</li><li>peripherals are accessed during interrupts (not necessarily a bad thing, but only when timing is critical)</li></ul><p>The main difference is that now, interrupts only set flags in the global flag struct which get processed in the main loop. Also the processor goes to deep sleep after it has finished drawing the display, while it is sending data via UART or while it is waiting for the HYT939 to finish it's measurement.</p><p><span></span><br></p><h2>Button Handling</h2><p>Instead of polling the buttons in a loop, the buttons now trigger a pin change interrupt. Every time this interrupt fires, a timer is reset back to zero, or started if it wasn't running already. When this timer hits a predetermined value, it fires an interrupt that stops the timer and sets the appropriate flags for the buttons.</p><p>This ensures that the inputs are only read when they didn't change their state for a while, which is a very effective way (both in responsiveness and required processing power) of debouncing buttons.</p><p>When the button flags are set, the main loop executes a function pointer which holds the currently selected button handler. This allows submenus to borrow the button events instead of having all the code in one ridiculously huge method.</p><p>When the LCD is turned off, the button handler gets reset to a method which either launches the menu or shows the current measurements.</p><h2>Menu</h2><p>All menu entries are now stored in an array that holds</p><ul><ul><li>it's title</li><li>a pointer to an optional value</li><li>a pointer to a method that gets executed when the entry is selected</li><li>a flag that determines whether the value points to a static variable or to a method that returns the value to be displayed</li></ul></ul><p>When an entry is executed, the method can reassign the button handler to whatever method it wants to allow for submenus.</p><p>After a button handler is executed, the processor returns to deep sleep.</p><p>Also the display now has a configurable timeout to prevent accidentally draining the battery.</p><h2>Measurements</h2><p>When the RTC triggers it's interrupt and the countdown for setting the interval overflows, it sets a flag. In the main loop this triggers a measurement request to be sent to the HYT939. It also starts the watchdog in interrupt mode to trigger the post-measurement processing. The watchdog was chosen over a normal timer because it runs very often and a normal timer will leave the main system clock running (only supports idle mode vs power down mode) which ultimately used too much power.</p><h2>Data Handling</h2><p>Of the 14 bits that the sensor reports for each temperature and humidity, twelve are fitted into three bytes for each sample. Forty of these samples are stored in a buffer in RAM. Each of those packets also contains the time and date of the first sample, the battery voltage at the first sample, the currently selected sample interval, and the amount of actually used samples in the packet.</p><p>This makes each packet 128 bytes long, which coincides with the physical layout of the pages in the EEPROM. Writing one page at a time has many advantages, because the EEPROM can only erase it's data in entire pages. So even if you just stored a single byte, a whole page gets erased and newly written to, which wears out the EEPROM faster and takes more time and power.</p><h2>Sending Data</h2><p>The collected data can be sent via UART at a baudrate of 250,000. The controller reads an entire page from the EEPROM into a buffer and enables the UDRE interrupt which fires when there is room for another byte in the transceiver. In this interrupt , new data is put into the tranceiver. If it detects that the buffer is empty, it will again set a flag to tell the main loop to refill the buffer. This allows the core to go into idle mode to save power.</p><h2>Power Consumption</h2><p>The heavy use of interrupts and sleep modes (not a single polling loop) along with the use of &lt;power.h&gt; to turn off the ATMega's unused modules drastically reduces the power consumption of the device.</p><p>To measure such a small power, I used a 10k resistor as a shunt and measured the voltage across it with my oscilloscope. This allowed me to integrate the current to get a precise average.</p><p><img src="https://cdn.hackaday.io/images/8266191433790446412.png" title=""></p><p>Blue Waveform: Current (10ÂµA/div) Black Waveform: <strong>â« </strong>Current dt (100ÂµAs/div) Timescale: 10s/div</p><p>This works out to a phenomenal power consumption of just <strong>3.1ÂµA</strong> this value even decreases with lower voltages<strong>. </strong>After loosing power, it will continue to measure for 8 more minutes just on the 220ÂµF capacitor.</p><p>Doing some very basic <a href="http://www.wolframalpha.com/input/?i=2000mA+*+h+%2F+3.1%C2%B5A">calculations</a>, the theoretical battery life would be over seventy years. In practice, the device also needs a fair bit of power to store the buffer into the EEPROM though I never measured how much exactly.</p><h2>Further possible improvements</h2><ul><li>find current leaks (probably the 220ÂµF capacitor and the GoldCap)</li><li>use a lithium ion cell instead of NiMhs (lower self discharge rate)</li></ul><p>For now, I think the current setup is more than sufficient, so I will leave further improvements to readers who want to build one for themselves.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6177/log/19357-low-power-considerations">Low-power considerations</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6177/log/19357#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19357"><p>Since one of the key features of this project is the low power consumption, I'll go into some more detail on how to archive similar results on AVR microcontrollers.</p><h2>Power Management</h2><p>Use the macros provided by &lt;power.h&gt; to turn off modules that you don't need. My usual approach is disabling all modules when going to sleep and only activating modules as you need them.</p><p>Be careful though, registers of disabled modules can't be accessed! I spent a lot of time tracking down a bug where I set up a timer, and enabled it only before starting it.</p><h2>Sleep Modes</h2><p>Whenever you have to wait for an external event or just want to pause the program for a certain time, use sleep modes. As there are many different modes it's important to choose the correct one depending on the task. If you need to keep a peripheral running in the background, you can't use 'power down' mode, instead use 'idle' mode.<br></p><p>I used two flags in my status variable which indicate if either the timer used for debouncing or the USART are running. The main loop will enter 'power down' mode only if both flags are cleared.</p><h2>Watchdog</h2><p>If you need to wake up from a sleep mode after a predetermined time, you should use the watchdog timer instead of a normal timer where possible. </p><p>The advantage of the watchdog is that it has it's own 128kHz clock and will still continue to operate in 'power down' mode whereas the other timers rely on the I/O clock (aka the main oscillator) which uses a lot of power.</p><p>It does have it's disadvantages though, you can only choose from a small selection of timeouts ranging from 16ms to 8 seconds. Also, the 128kHz clock is not calibrated. If you need accurate timing, you'll have to use normal timers.<br></p><p>I used the watchdog to wake the processor from deep sleep after sending a measurement request to the sensor and waiting for the conversion to finish. Since the conversion takes around 53ms and happens every minute, there is a lot of power to be saved.</p><p>Before, I used a normal timer and put the processor to 'idle' mode. In this configuration, the average current over one minute was around 10ÂµA. That means that the processor in 'idle' mode for 50ms alone used twice the power of the processor in 'power down' mode for one full minute and doing some processing and communication alongside the sensor doing a conversion and both other chips idling.</p><ul></ul></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '8epYpOQg-Fe9n1zEDtpYK3Oozil0agYbwcZg';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>