<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; SPI and TTL Serial VGA Graphics Card - VGATonic &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6309%2Flogs%3Fpage%3D3">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic">SPI and TTL Serial VGA Graphics Card - VGATonic</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">640x480 Color VGA Video Card for Microcontrollers and Single Board Computers</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/18962-pk" title="Visit Profile">PK</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6309#discussion-list" title="See Comments">22 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6309/logs/sort/newest">Newest</option>
                    <option value="/project/6309/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6309/log/22051-prototype-video-posted">Prototype Video Posted!</a></h2>
                            <small class="authorship">16 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22051#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22051"><p>Today I finished my 2 minute prototype video (the next one will be 5 minutes).  It includes an overview of a lot of the features we have already covered, along with some things I have not filmed until now:</p><ul><li>VT52 Terminal Emulator (and the tiny font!)</li><li>UART Framebuffer mode</li><li>&quot;Video&quot; over UART Framebuffer (5 and change FPS)</li><li>Hardware acceleration (demonstrated, of course, by a slow part)</li></ul><p>Enjoy!</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/yJVtyzp8tTc" allowfullscreen="" frameborder="0" height="281" width="500"></iframe></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/22125-default-pinouts-for-example-linux-drivers-and-arduino-uno">Default Pinouts For Example Linux Drivers (and Arduino Uno)</a></h2>
                            <small class="authorship">15 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22125#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22125"><p>If you don&apos;t modify the drivers (which I, of course, encourage - especially if you want to compile for a different kernel version on your target board), you can use the pins I used.  Here&apos;s a chart of the pins I connected to for my example videos, and in the published drivers.  (The Beaglebone Black needs SPI0 enabled through device tree before loading drivers; <a href="http://elinux.org/BeagleBone_Black_Enable_SPIDEV#SPI0">find out how here</a>.  The Intel Edison needs a pinmuxing script to be run before loading drivers; <a href="http://dqydj.net/wp-content/uploads/2015/07/oldpinmux.txt">find that script here</a>).</p><table>
	
	<tbody>
		<tr>
			<td><br></td>
			<td><strong>Chip Select</strong></td>
			<td><strong>MOSI</strong></td>
			<td><strong>SCK</strong></td>
			<td><strong>CS Label</strong></td>
			<td><strong>MOSI Label</strong></td>
			<td><strong>SCK Label</strong></td>
		</tr>
		<tr>
			<td><strong><i>Raspberry Pi 2 Model B</i></strong></td>
			<td>22</td>
			<td>19</td>
			<td>23</td>
			<td>BCM 25</td>
			<td>BCM 10 (MOSI)</td>
			<td>BCM 11 (SCLK)</td>
		</tr>
		<tr>
			<td><strong><i>Odroid C1</i></strong></td>
			<td>22</td>
			<td>19</td>
			<td>23</td>
			<td>#103</td>
			<td>#107</td>
			<td>#105</td>
		</tr>
		<tr>
			<td><strong><i>BeagleBone Black</i></strong></td>
			<td>15</td>
			<td>18</td>
			<td>22</td>
			<td>GPIO_48</td>
			<td>SPIO_D1</td>
			<td>SPIO_SCLK</td>
		</tr>
		<tr>
			<td><strong><i>Intel Edison</i></strong></td>
			<td>8</td>
			<td>11</td>
			<td>13</td>
			<td>49</td>
			<td>43/SPI_2_TXD</td>
			<td>40/SPI_2_CLK</td>
		</tr>
		<tr>
			<td><strong><i>Arduino Uno</i></strong></td>
			<td>9</td>
			<td>11</td>
			<td>13</td>
			<td>9</td>
			<td>11</td>
			<td>13</td>
		</tr>
	</tbody>
</table><h2>Reference Diagram Links</h2><p>Raspberry Pi 2: <a href="http://pi.gadgetoid.com/pinout">http://pi.gadgetoid.com/pinout</a></p><p>Odroid C1: <a href="http://www.hardkernel.com/main/products/prdt_info.php?g_code=G141578608433&amp;tab_idx=2">http://www.hardkernel.com/main/products/prdt_info.php?g_code=G141578608433&amp;tab_idx=2</a></p><p>BeagleBone Black (P9 Header): <a href="http://beagleboard.org/support/bone101">http://beagleboard.org/support/bone101</a></p><p>Intel Edison: <a href="http://www.emutexlabs.com/project/215-intel-edison-gpio-pin-multiplexing-guide">http://www.emutexlabs.com/project/215-intel-edison-gpio-pin-multiplexing-guide</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/22324-vgatonic-user-guide">VGATonic User Guide!</a></h2>
                            <small class="authorship">11 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22324#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22324"><p>I wrote something up for VGATonic, if you&apos;re interested.  It&apos;s got a number of useful sections if you&apos;re looking to build a VGATonic yourself - as well as tips and feature listings.  </p><p><a href="http://dqydj.net/wp-content/uploads/2015/08/VGATonic-Users-Guide.pdf">You can find it here</a> (PDF, 18 pages)</p><p>A lot of the content I&apos;ve posted, but the consolidation is nice - I&apos;ve used it a few times already since it has the VT52 escape code table in it, haha.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/22370-buildprogramming-details">Build/Programming Details</a></h2>
                            <small class="authorship">10 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22370#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22370"><p>The User Guide in the last entry has an <a href="https://hackaday.io/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic/log/22324-vgatonic-user-guide">order of operations to build VGATonic</a>.  This article is more of an overview and a look at how to program the firmware for the CPLD and the microcontroller.</p><p><a href="https://github.com/dqydj/VGAtonic/tree/master/Hardware_Rev_A">This guide is for Rev_A of the board (link is to GitHub)</a> - so named in case there are more VGATonics in the future!</p><p>Here is a blown up board, with power and ground marked (Black - Ground, Red - +5V, Yellow - + 3.3v).<br></p><p><img src="https://cdn.hackaday.io/images/2363841439146398271.jpg"></p><p><strong>Parts Selection</strong></p><p><strong></strong>Cost is about $20.50, plus shipping - you can (of course) do cheaper depending on where you source the parts or how many you buy.<strong></strong><br><strong></strong></p><p><strong></strong>I have a <a href="https://hackaday.io/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic/log/21984-updated-bill-of-materials">BOM here</a>, and I have the <a href="https://github.com/dqydj/VGAtonic/blob/master/Hardware_Rev_A/VGAtonic_BOM.csv">parts guide here on Github with exact part numbers and tolerances</a>.  You can substitute close values - but for the output stages, use the same value and tolerance resistors - it&apos;s best to use 1% or less for the output stage.  Everything else is just fine with 5% tolerance.<strong></strong><br><strong></strong></p><p><strong>Ease of Building</strong><br></p><p>If you can get past soldering the CPLD, it&apos;s not a hard board to assemble.  The 0603 decoupling capacitors are annoying, but surface tension generally pulls them onto their pad.</p><p>Those 2 steps probably take half your soldering time!  (You can do it though - the CPLD was the smallest pitch part I&apos;d ever soldered and I managed to get 6 working boards, haha.)</p><p>I suggest using solder paste and investing in one of those flux pens - and have a fair amount of desoldering braid on hand for solder bridges on the parts.<br></p><p><strong>The CPLD</strong><br></p><p>If you don&apos;t want to fire up ISE Webpack yourself, <a href="http://dqydj.net/wp-content/uploads/2015/08/VGAtonic_Rev1_Firmware_v1.00.zip">here is the firmware I am currently using</a>.  That package contains the .jed file and an .xsvf file - the XSVF can be programmed with something like a Bus Pirate.</p><p>Otherwise, <a href="https://github.com/dqydj/VGAtonic/tree/master/Hardware_Rev_A/CPLD%20Firmware">the VHDL can be found here</a>.<br></p><p><strong>The Microcontroller</strong></p><p><strong><strong></strong></strong>The microcontroller is trickier - it has a calibration step so I can&apos;t really post Arduino files; luckily the IDE is easy to use! </p><p>You can find the <a href="https://github.com/dqydj/VGAtonic/tree/master/Hardware_Rev_A/AVR_ATTiny2313a_Firmware">EEPROM and the standard firmware here</a>.<br></p><p> It&apos;s a two, maybe three step process since we are using that internal oscillator.  Start with <a href="https://code.google.com/p/arduino-tiny/">Arduino Tiny Core&apos;s 1.5 version</a>.  I&apos;m using 1.6.5 of the IDE - you need to use at least 1.6.2 to get the EEPROM functions.  Next, comment out the Hardware Serial files - we will be managing UART directly.  (<em>Editor: you can find my commented out files on Github as </em><a href="https://hackaday.io/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic/log/22783-minor-license-updates-third-parties"><em>detailed in this project log</em></a>)</p><p>If any of these steps are confusing let me know, I&apos;ll add details and perhaps some code samples:<br></p><ol><br><li>(Optional) Calibrate the &quot;OSCAL&quot; register.  I&apos;m using Jason Pepas&apos;s method of sending &apos;U&apos;s over UART - use whatever is most convenient.</li><li>Burn the EEPROM version of the VGATonic Firmware.  All you need to do is uncomment the line <em><strong>//#define EEPROM_UPDATE 1</strong></em> in the main .ino file.<ol><li>(Optional) If you calibrated VGATonic, change the calibration bit in &quot;<strong>utilities.ino</strong>&quot;.  <br>The line looks something like this: <strong><em>eeprom_update_byte (( uint8_t *) OSCALSPEED, &apos;O&apos; );</em></strong> (Change the &apos;O&apos; to your value).</li></ol></li><li>Burn the normal VGATonic firmware - just recomment the line <em><strong>#define EEPROM_UPDATE 1</strong></em></li></ol><p><strong><strong></strong></strong><br><strong></strong></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/22504-longer-vgatonic-overview-video">Longer VGATonic Overview Video</a></h2>
                            <small class="authorship">8 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22504#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22504"><p>Hey folks, I stayed up late last night and finished the five minute VGATonic overview:</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/PY8rA9VJT20" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>Showing a lot of new stuff here, but here are some highlights:</p><ul><li>Multiple monitors (3 screens on an Odroid C1)<ul><li>Also show some of the VT52 escape codes in that clip</li></ul></li><li>Every bit depth and resolution accelerated by VGATonic on Linux (LXDE)</li><li>Video of the BeagleBone Black in action at 640x480 and 320x240 in 8 bit color</li></ul><p>Hope you enjoy it!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/22604-brief-update-added-uart-framebuffer-code">Brief Update, Added UART Framebuffer Code</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22604#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22604"><p>Due to a well timed suggestion from <a data-mention-user-id="38504" href="/hacker/38504">@antti.lukats </a>in chat, I went through and made the licenses more explicit today.  Basically everything is MIT licensed, except code which derives (or is used in) the Linux Kernel - all of that is, of course, GPL v2.</p><p>I&apos;m not sure if anyone has built a VGATonic yet, but today&apos;s update includes the Python code I&apos;ve been using to test the serial framebuffer driver.  The libraries you need are <a href="http://pyserial.sourceforge.net/">pyserial</a> and <a href="https://python-pillow.github.io/">Pillow</a>.  You can pick either 9600 or 38400 baud, and it will blast images over UART to VGATonic. (Set the image with the -i command).  Here&apos;re some examples:</p><blockquote>python SerialDemo.py -x 640 -y 480 -c 8 -d 0 -i VGATonic.png -v 2<br>python SerialDemo.py -x 640 -y 480 -c 4 -d 1 -i ground.jpg -v 2<br>python SerialDemo.py -x 320 -y 240 -c 4 -d 1 -i edison.png -v 2</blockquote><p>Here are some command line options:</p><p>    # -d Controls dithering - 0 off, 1 on (Default off - but for that 90s vibe, try some with it on!)<br>    # -c Controls color depth, 8, 4, 2, 1 all legal<br>    # -x Controls width, 640, 320, 160, 80 all available<br>    # -y Controls height, 480, 240, 120, 60 all available (has to match width - so 640x480, 320x240, 160x120, 80x60)<br>    # -m Movie mode - probably just stick to 80x60x1 bit or x2 bit, but this mode rotates the image &quot;-m&quot; times.<br>    # -i Controls the file to input (there are some images in the directory to try)<br>    # -p Change the port - default is in code<br>    # -b Baudrate.  Pick 9600 or 38400<br>    # -v Verbosity, set to an integer.  &apos;2&apos; is the highest level, it&apos;ll give you some stats too.</p><p>On the driver side, I made a BBB update as well:</p><ul><li>The BeagleBone Black board specific driver file was updated to ask for 19.25 FPS in 640x480x8bpp - it looks pretty good!<em><strong></strong></em></li></ul><p><em><strong>As always, find all the most recent code here on Github: <a href="https://github.com/dqydj/VGAtonic">https://github.com/dqydj/VGAtonic</a></strong></em></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/22783-minor-license-updates-third-parties">Minor License Updates - Third Parties</a></h2>
                            <small class="authorship">5 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22783#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22783"><p>I made very small modifications to the arduino-tiny core, specifically 4 lines of preprocessor directives to disable code.  I am commenting out code in both HardwareSerial.cpp and HardwareSerial.h in order to have VGATonic handle the UART interrupts on its own (this is the relevant code block that interferes):</p><pre class="hljs cpp">ISR(USART_RX_vect) 
{
  <span class="hljs-keyword">uint8_t</span> tmp = UDR;
  <span class="hljs-keyword">if</span> (rxn==BUFFER_SIZE)
    rxn=<span class="hljs-number">0</span>;
  RX_BUFF[rxn++] = tmp;  
  rx_flag=<span class="hljs-number">1</span>;
}</pre><p>A strict reading of license terms counts <em>disabling</em> code as a modification, so I wanted to document that <a href="https://code.google.com/p/arduino-tiny/">arduino-tiny</a> is licensed under <a href="http://www.gnu.org/licenses/lgpl.html">LPGL</a>.  I have released my modifications to arduino-tiny on <a href="https://github.com/dqydj/VGAtonic/tree/master/arduino-tiny_Modification">Github here</a>.</p><p><br>You can directly overwrite the arduino-tiny files when installing arduino-tiny core, but on a Mac they go here (Arduino IDE 1.6.5):</p><blockquote>Arduino (Right Click) -&gt; Show package contents<br>/Contents/Resources/Java/hardware/tiny/avr/cores/tiny/<br></blockquote></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/23022-system-design-document">System Design Document</a></h2>
                            <small class="authorship">3 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/23022#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23022"><p>I just finished the initial <a href="https://github.com/dqydj/VGAtonic/blob/master/Documents/VGATonic%20Design%20Document.pdf">System Design Document</a>.  It also includes some newly measured details on power consumption (<em>Edit: I set up a better test bench with a reliable adapter today; picture/results below</em>).</p><p>It also lays out some of the future work I&apos;d like to complete, including additional firmware - so folks who don&apos;t want to use VGA can switch to NTSC or something instead.</p><p>This document is on top of the <a href="https://github.com/dqydj/VGAtonic/blob/master/Documents/VGATonic%20User's%20Guide.pdf">User&apos;s Guide</a> I released (with the Hacker&apos;s Guide inset!) that lists a lot of the features onboard, and details some of the protocols I used.  If you&apos;re interested in VGATonic, I&apos;d suggest reading them both!</p><p><strong>Update:</strong></p><p><strong></strong>I set up a better testbench today.  Here is a picture of one of the worst case readings:<strong></strong></p><p><strong><img src="https://cdn.hackaday.io/images/1194971439747710553.png"></strong></p><p><strong></strong>I&apos;m getting between 140 and 158 mA @ 5V here, so let&apos;s call it between .7 and .85 Watts for a graphics card.  Not bad - I&apos;d say that competes pretty well with what&apos;s out there, haha!<strong></strong><br><strong></strong></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/23105-arduino-uno-driver-hardware-acceleration-example">Arduino Uno Driver, Hardware Acceleration Example</a></h2>
                            <small class="authorship">3 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/23105#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23105"><p>I just pushed some Arduino Uno driver code to the <a href="https://github.com/dqydj/VGAtonic">Github Repository</a> showing how to skip to individual lines.  You can find it in the User Driver directory, and I called it &quot;SPI_test&quot;.  Just hook up VGATonic SCK, MOSI, and CS to pins 13, 11, and 9, respectively, on the Uno, then power it up!</p><p>If all goes well, you should see the pattern covered at around 1:19 in my prototype video now running on your VGATonic:</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/yJVtyzp8tTc" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>That&apos;s the third and the arguably the most subtle of the hardware acceleration methods on VGATonic, but is very useful for slow parts.  Take the 2 MHz SPI from the example code - normally, that can push <strong>under one frame per second</strong> at 640x480x8 bit color (which requires roughly 2.5 million bits per total screen)... but by skipping to specific lines it creates the illusion that VGATonic is actually writing from bottom to top!</p><p>I forsee this being most useful for GUI development on slow serial parts - imagine having a constantly refreshing menubar on the bottom of the screen, but not needing to refresh the <em>entire</em> screen content if only the menubar changes.  It&apos;s also useful for something like a mouse cursor, where only some of the screen needs a redraw and blasting the entire screen is a waste of resources.</p><p>Here are all three forms of acceleration onboard:</p><ol><strong></strong><li><strong>Resolution and Bit Depth Changes</strong> - the bread and butter of the video card; reducing bit depth and/or resolution requires less serial bytes per screen refresh.  Ranges from 640x480 @ 8 bit (2,457,600 bits) down to 80x60 @ 1 bit (4,800 bits).</li><li><strong>Chip Select Toggling</strong> - toggling chip select without any additional commands will reset the writing position to the upper left column and row, regardless of where it was previously positioned.  This means a device can write an arbitrary number of pixels (assuming at least 2 bytes are sent; 1 byte is a special control character, detailed in the User Guide), and doesn&apos;t need to write until the last pixel in the lower right.</li><li><strong>Hardware Accelerated Positioning </strong>- detailed in this article and in the example code, this lets a device skip to individual rows for writing instead of starting from the upper right hand corner.  For 640x480, this allows skipping 8 rows at a time (320x240 4, 160x120 2, and 80x60 1), vastly increasing throughput for slower parts.</li></ol></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/23235-videos-and-some-older-material">Videos and Some Older Material!</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/23235#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23235"><p>If you&apos;ve been following along, you&apos;ve probably seen my Quarterfinals Video and Semifinals Video already:</p><ul></ul><ul><li><a href="https://www.youtube.com/watch?v=PY8rA9VJT20">Semifinals</a> (~ 5 Minutes)</li><li><a href="https://www.youtube.com/watch?v=yJVtyzp8tTc">Quarterfinals</a> (~ 2 Minutes)</li></ul><p>One of the requirements of the <em>Best Product</em> category is to show some videos of the prototype in action.  I have some linked on the sidebar, but I wanted to link some here to make them easier to find:</p><ul><li>The <a href="https://www.youtube.com/watch?v=jMW791veOA8">Intel Edison was a nice addition</a> to the framebuffer code; it started headless but I got it to play Quake at 40 FPS. I <a href="https://hackaday.io/project/7025-a-vga-display-for-the-intel-edison">wrote up another project log</a> if you&apos;re interested in reproducing the work!</li><li>Here is this year&apos;s kickoff video, <a href="https://www.youtube.com/watch?v=qo9iJGTwuEo">Doom on a Raspberry Pi</a>.</li><li>Last year, after the PCBs came in, I got a version running on the Intel Galileo running in &quot;Arduino mode&quot;.  Here are some <a href="https://www.youtube.com/watch?v=uM7XolLGq4E">early signs of VGATonic life</a>.<br><a href="https://www.youtube.com/watch?v=xUdjdHOkqZE"></a></li><li><a href="https://www.youtube.com/watch?v=xUdjdHOkqZE">A very early prototype</a> using a CPLD breakout with no SRAM - but doing NTSC and VGA from the same clock source!</li></ul><p>It&apos;s fun to reflect on how far this project has come!  Here&apos;s where it all started, on a 4 row breadboard (complete with painstakingly placed R-2R resistor ladders!):</p><p><img alt="https://cdn.hackaday.io/images/8853771407209727512.png" src="https://cdn.hackaday.io/images/8853771407209727512.png"></p><p>Good luck to everyone contending with the 2015 Hackaday Prize deadline!</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=2" class="grey-gold-button prev-button show">Previous</a>
                    
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'UIHE01pf-NQA02EEhjussSbGcAPtNHyoZZZE';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>