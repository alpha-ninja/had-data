<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; HydroPWNics &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F2964%2Flogs%3Fpage%3D2">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/2964-hydropwnics">HydroPWNics</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">An open source hydroponic garden control, monitoring, and grow system with cloud database integration</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/2632-adam-vadala-roth" title="Visit Profile">Adam Vadala-Roth</a><span>&bull;</span>
                
                a year ago<span>&bull;</span><a href="/project/2964#discussion-list" title="See Comments">16 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/2964-hydropwnics">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/2964/logs/sort/newest">Newest</option>
                    <option value="/project/2964/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/2964/log/17854-teensy-compatiblity-maybe">Teensy Compatiblity? Maybe</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17854#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17854"><p>One thing folks will notice very quickly is that HydroPWNics makes heavy use of FreeScale ARM Cortex M0+ microcontrollers. I chose these MCUs for their very nice cost to performance ratio and low power capabilities. I am currently using two different MCUs the MKL05Z16VFK4 and the MKV10Z16VFM7. The ML05 is being used for  modules because I want them to be low power capable and the L series (Kinetis L) designed for that. The MKV10 is on the hub and I intend that to be doing a bit more processing (sample modules, aggregating the data, rudimentary processing etc), hence the hire clockspeed. I also wanted to support both wired and wirelss functions so I needed the dual UART of the MKV10. Even thought the V series (Kinetis V) is targeted towards motion control and higher performance its still considered a low power product. Now that being said what if these modules had Teensy compatibility? The benefit of Teensy compatibility would mean that my modules could be compatible with the Arduino IDE and all of Paul's great libraries. It would effectively make this project Arduino compatible, which is handy to get other's involved in the project later on as it grows. Before I make a decision I should not this is not a simple switch either way. Teensy compatibility could be implemented by either porting the code base or swapping chips. This would mean redesigning all the modules around the Teensy chips or a project in itself for software. </p><p>Now redesigning the PCBs seems like a lot but to be honest they are not too compex, they are two layer designs using circuits I've played with before and took very little time to implement. What I need to do now, is perform some testing. Luckily I can get the MKL05 as a FreeScale Freedom board, so I can use that to test the sensors I plan to use and runs some benchmarks. The MKV10 doesn't have a Freedom board yet, there is talk of one but I haven't seen anything as of late. Next off I would have to evaluate Teensy. The Teensy LC is the most attractive one because its low cost and low power, despite all the custom hardware I am trying to keep costs down (see log about board cost estimates and look for the BOM post coming soon). The Teensy LC has a Cortex M0+ similar to the MKL05 but is equipped with USB, also the LC uses a QFN package which I like very much for the size and I find them very easy to solder. Despite the differences between the Teensy LC and my chips, I think I could make it work either way but first I want to do some testing.  Stay tuned for more to come!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17956-omg-its-an-rf-project-now">OMG It&#39;s an RF Project now</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17956#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17956"><p>So after thinking about the hardware as it stands(current revs/thoughts on teensy compatibility) I came to a conclusion: while its super nifty and easy to use a premade ESP8266 module, I'd like to further maximize the cost of the PCB so I'm going to integrate the ESP8266 chip, circuit, and antenna all into the Module Hub PCB. </p><p> I am still going to produce a prototype of the module hub as it is now as I need to test if the DCDC regulator's PCB layout allows for correct operation of the regulators (first time using these TPS chips). Once I confirm the layout on the DCDC regulators I will perform a redesign and integrate all the circuitry into one fantastically cost effective PCB. I've done 2.4GHZ RF before at a previous job so I know how to do PCB antennas and traces to minimize noise etc (can't comment much on the work because you guys know).  This is going to be my first RF PCB on my own so I'm bound to screw it up but that's just the case with PCBs in general in my field its usually 3 times a charm, but then again every PCB is always  work in progress, you can always doing it better and better. Anyways this means I will be sticking with the current hardware choices and not including Teensy compatibility as much as I like the idea, I don't feel like making another microntroller footprint (my least favorite part of the process, so much typing), and I'd like to challenge myself further with the addition of RF. Stay tuned for more PCBs and HydroPWNics!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/19680-update-its-been-a-while">Update! Its been a while!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/19680#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19680"><p>Its been a while since I have been posting updates but I assure you work has not stopped. Since the last update HydroPWNics was featured on the Hackaday blog, for me this was very exciting as a longtime reader, so thankyou everyone!!!! </p><p>First off there have been some small adjustments in the design of the garden system. Originally I was going to deploy the HydroPWNics system on a gutter based ebb/flow and window boxes with dirt. I have since changed plans to build a fence post based NFT hydroponics (<a href="https://en.wikipedia.org/wiki/Nutrient_film_technique">https://en.wikipedia.org/wiki/Nutrient_film_technique</a>) system since they are very efficient and simple to construct. The focus of this project is on the hardware/software side of things so I decided to go with a grow system that would be easy for me to source parts for and build. Even though I have switched the type of garden I am still going to automate as much of its function as I can, pump flow rate monitoring, servo actuated level valves, etc. A couple weeks ago I bought alot of the materials and started building the unti.</p><p>Materials: 2X4s, 4X4s, and 5X5 PVC fence post</p><p><img src="https://cdn.hackaday.io/images/8651261434606829443.JPG"></p>Cutting Fence posts, I bought two 8 foot lengths and cut them in half for four 4 foot units. Each unit will hold 4 plants in 3" diameter hydroponic plastic grow baskets, filled with hydroton grow media. <p><img src="https://cdn.hackaday.io/images/7933301434606986156.JPG"></p><p>All Cut, the chop saw wasn't big enough to fit the whole width of the post so I had to rotate it 3 times to cut them, I don't recommend this but if you do wear safety glasses and be very careful.<img src="https://cdn.hackaday.io/images/2837261434607194656.JPG"></p><p>Measuring spacing of the plant pots and drilling pilot holes for the hole saw. I was planning on using my 3 inch hole saw to cut holes for the pots but the drill (on the table) I have won't fit the hole saw. I need to borrow a friends drill to finish. Next off for building the unit will be the frame, I haven't decided what the frame is going to look like. Simple requirements for it will be to mount the 4 rows and be tall enough to fit a 55 gallon water barrel underneath to act as the reservoir for the system. I plan on using the 4X4s to make legs and to build the rest of the frame with the 2X4s.</p><p><img src="https://cdn.hackaday.io/images/224461434607449644.JPG"></p><p>So thats what I got done on the unit so far, I'm hoping to do some more work Friday if its nice outside to use the saw, stay tuned for more updates later!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/19939-pcbs-ordered-and-part-boms-made">PCBs Ordered! and Part BOMs Made!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/19939#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19939"><p>Over the weekend I ordered the first round of PCBs for HydroPWNics. I went with OSHPark because they make decent quality boards cheap and fast.  PCBs for the Module Hub, Analog Sensor Module, and Digital Sensor Module will be at my doorstep in about another week. The cost of the PCBs didn't change since my last post on the subject (see the PCB cost estimate log) but have undergone many updates for fabrication and electrical integrity. Most of the tweaking was running design rule checks on the PCBs and correcting the resulting errors.  </p><p><strong>Renders of the PCBs sent to the fab, these are the Rev1s!</strong></p><p><strong>Module Hub:</strong></p><p><img src="https://cdn.hackaday.io/images/1936701435130366011.png"></p><p><strong>Digital Sensor Module</strong></p><p><img src="https://cdn.hackaday.io/images/9254941435130326157.png"></p><p><strong>Analog Sensor Module</strong> </p><p><img src="https://cdn.hackaday.io/images/282511435130343199.png"></p><p>As for the part BOMs I made a few. There are two kinds of BOMs for each board, a build BOM, and a order BOM. The build BOM is used for assembly purposes, it is to be read like instructions, each step being a designator correlating to a component. The order BOM is for ordering a set of parts for a given board, it organizes the components by quantity for simple ordering from electronics suppliers (I use digikey and Mouser). </p><p><strong>Module BOM:</strong></p><table><tbody><tr><td>Symbol</td><td>Value</td><td>Package</td><td>Quantity</td><td>Digikey Part Number</td><td>Manufacturer Part Number</td><td>Price</td><td>Quantity Price</td><td>Build 3 Price</td><td>Build 10 Price</td><td>Build 25 Price</td></tr><tr><td>C1, C2, C3, C4, C16, C18</td><td>100nF</td><td>C0603</td><td>6</td><td>399-5089-1-ND</td><td>C0603C104K5RACTU</td><td>$0.10</td><td>$0.60</td><td>$1.80</td><td>$6.00</td><td>$15.00</td></tr><tr><td>C5, C11, C19</td><td>10uF 6.3VDC</td><td>C0603</td><td>3</td><td>445-11185-1-ND</td><td>C1608JB0J106K080AB</td><td>$0.37</td><td>$1.11</td><td>$3.33</td><td>$11.10</td><td>$27.75</td></tr><tr><td>C6, C7, C8</td><td>100uF</td><td>EEE-1VA101XP</td><td>3</td><td>PCE3951CT-ND</td><td>EEE-1VA101XP</td><td>$0.63</td><td>$1.89</td><td>$5.67</td><td>$18.90</td><td>$47.25</td></tr><tr><td>C9, C12</td><td>10uF 50V</td><td>C1206</td><td>2</td><td>1276-2876-1-ND</td><td>CL31A106KBHNNNE</td><td>$0.65</td><td>$1.30</td><td>$3.90</td><td>$13.00</td><td>$32.50</td></tr><tr><td>C10, C13</td><td>22uF</td><td>C0805</td><td>2</td><td>1276-2907-1-ND</td><td>CL21A226KQQNNNE</td><td>$0.56</td><td>$1.12</td><td>$3.36</td><td>$11.20</td><td>$28.00</td></tr><tr><td>C14, C15</td><td>100nF</td><td>C0402</td><td>2</td><td>490-3261-1-ND</td><td>GRM155R71C104KA88D</td><td>$0.10</td><td>$0.20</td><td>$0.60</td><td>$2.00</td><td>$5.00</td></tr><tr><td>D2, D3</td><td>5988140107F</td><td>LED2012120</td><td>2</td><td>350-2041-1-ND</td><td>5988140107F</td><td>$0.45</td><td>$0.90</td><td>$2.70</td><td>$9.00</td><td>$22.50</td></tr><tr><td>DA1, DA2, DA3</td><td>PESD3V3L2BT</td><td>SOT95P230X110-3N</td><td>3</td><td>568-4046-1-ND</td><td>PESD3V3L2BT</td><td>$0.58</td><td>$1.74</td><td>$5.22</td><td>$17.40</td><td>$43.50</td></tr><tr><td>FB1</td><td>BLM15HG601SN1D</td><td>BLM15HG601SN1D</td><td>1</td><td>490-3998-1-ND</td><td>BLM15HG601SN1D</td><td>$0.23</td><td>$0.23</td><td>$0.69</td><td>$2.30</td><td>$5.75</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>J1</td><td></td><td>FTSH-105-XX-X-DV</td><td>1</td><td>S9013E-05-ND</td><td>ARM Cortex JTAG-DEBUG Header</td><td>$1.30</td><td>$1.30</td><td>$3.90</td><td>$13.00</td><td>$32.50</td></tr><tr><td>L1, L2</td><td>2.2uH</td><td>VLS252012T-2R2M1R3</td><td>2</td><td>445-3670-1-ND</td><td>VLS252012T-2R2M1R3</td><td>$0.81</td><td>$1.62</td><td>$4.86</td><td>$16.20</td><td>$40.50</td></tr><tr><td>P1, P2, P6</td><td></td><td>HDR1X4</td><td>3</td><td>S5440-ND</td><td>PPTC041LGBN-RC</td><td>$0.73</td><td>$2.19</td><td>$6.57</td><td>$21.90</td><td>$54.75</td></tr><tr><td>P3</td><td></td><td>705530041</td><td>1</td><td>WM4929-ND</td><td>705530041</td><td>$1.94</td><td>$1.94</td><td>$5.82</td><td>$19.40</td><td>$48.50</td></tr><tr><td>P4, P5, P7</td><td></td><td>HDR1X2</td><td>3</td><td>S5438-ND</td><td>PPTC021LGBN-RC</td><td>$0.57</td><td>$1.71</td><td>$5.13</td><td>$17.10</td><td>$42.75</td></tr><tr><td>P10, P11, P13</td><td></td><td>3020-10-0100-00</td><td>3</td><td>1175-1609-ND</td><td>3020-10-0100-00</td><td>$0.48</td><td>$1.44</td><td>$4.32</td><td>$14.40</td><td>$36.00</td></tr><tr><td>P12</td><td></td><td>HDR1X6</td><td>1</td><td></td><td>Header 6</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>P14</td><td></td><td>705530001</td><td>1</td><td>WM4900-ND</td><td>705530001</td><td>$0.74</td><td>$0.74</td><td>$2.22</td><td>$7.40</td><td>$18.50</td></tr><tr><td>P15</td><td></td><td>HDR1X3</td><td>1</td><td></td><td>Header 3</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>R1, R2</td><td>100K</td><td>R0603</td><td>2</td><td>311-100KHRCT-ND</td><td>RC0603FR-07100KL</td><td>$0.10</td><td>$0.20</td><td>$0.60</td><td>$2.00</td><td>$5.00</td></tr><tr><td>R3, R4, R5, R13, R14</td><td>1K</td><td>R0603</td><td>5</td><td>P1.00KHCT-ND</td><td>ERJ-3EKF1001V</td><td>$0.10</td><td>$0.50</td><td>$1.50</td><td>$5.00</td><td>$12.50</td></tr><tr><td>SW1</td><td></td><td>TL3301AF160QG</td><td>1</td><td>EG2526CT-ND</td><td>TL3301AF160QG</td><td>$0.43</td><td>$0.43</td><td>$1.29</td><td>$4.30</td><td>$10.75</td></tr><tr><td>U1</td><td></td><td>MKV10Z16VFM7</td><td>1</td><td>MKV10Z16VFM7-ND</td><td>MKV10Z16VFM7</td><td>$2.50</td><td>$2.50</td><td>$7.50</td><td>$25.00</td><td>$62.50</td></tr><tr><td>U2</td><td></td><td>RGY (S-PVQFN-N14)</td><td>1</td><td>296-20698-1-ND</td><td>TXS0104E</td><td>$2.01</td><td>$2.01</td><td>$6.03</td><td>$20.10</td><td>$50.25</td></tr><tr><td>U3</td><td></td><td>74HC4052</td><td>1</td><td>568-1456-1-ND</td><td>74HC4052</td><td>$0.56</td><td>$0.56</td><td>$1.68</td><td>$5.60</td><td>$14.00</td></tr><tr><td>U4</td><td></td><td>ESP8266 ESP-12E</td><td>1</td><td></td><td>ESP-12</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>U5, U6</td><td></td><td>DSG8-1600X900TP</td><td>1</td><td>296-29897-1-ND</td><td>TPS62162DSG</td><td>$2.62</td><td>$2.62</td><td>$7.86</td><td>$26.20</td><td>$65.50</td></tr><tr><td>U6</td><td></td><td>DSG8-1600X900TP</td><td>1</td><td>296-29898-1-ND</td><td>TPS62163DSGR</td><td>$2.30</td><td>$2.30</td><td>$6.90</td><td>$23.00</td><td>$57.50</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>$19.14</td><td>$57.42</td><td>$191.40</td><td>$478.50</td></tr></tbody></table><p><strong><br></strong></p><p><strong>Digital Sensor Module BOM</strong></p><table><tbody><tr><td>Symbol</td><td>Value</td><td>Package</td><td>Quantity</td><td>Digikey Part Number</td><td>Manufacturer Part Number</td><td>Price</td><td>Quantity Price</td><td>Build 3 Price</td><td>Build 10 Price</td><td>Build 25 Price</td><td>Comment</td></tr><tr><td>C1, C2, C3, C4, C9, C10</td><td>100nF</td><td>C0402</td><td>6</td><td>490-3261-1-ND</td><td>GRM155R71C104KA88D</td><td>$0.10</td><td>$0.60</td><td>$1.80</td><td>$6.00</td><td>$15.00</td><td></td></tr><tr><td>C6</td><td>100uF</td><td>EEE-1VA101XP</td><td>1</td><td>PCE3951CT-ND</td><td>EEE-1VA101XP</td><td>$0.63</td><td>$0.63</td><td>$1.89</td><td>$6.30</td><td>$15.75</td><td></td></tr><tr><td>C7</td><td>10uF 50V</td><td>C1206</td><td>1</td><td>1276-2876-1-ND</td><td>CL31A106KBHNNNE</td><td>$0.65</td><td>$0.65</td><td>$1.95</td><td>$6.50</td><td>$16.25</td><td></td></tr><tr><td>C8</td><td>22uF</td><td>C0805</td><td>1</td><td>1276-2876-1-ND</td><td>CL21A226KQQNNNE</td><td>$0.65</td><td>$0.65</td><td>$1.95</td><td>$6.50</td><td>$16.25</td><td></td></tr><tr><td>D1, D2</td><td>5988140107F</td><td>LED2012120</td><td>2</td><td>350-2041-1-ND</td><td>5988140107F</td><td>$0.45</td><td>$0.90</td><td>$2.70</td><td>$9.00</td><td>$22.50</td><td></td></tr><tr><td>FB1</td><td></td><td>BLM15HG601SN1D</td><td>1</td><td>490-3998-1-ND</td><td>BLM15HG601SN1D</td><td>$0.23</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>J1</td><td></td><td>FTSH-105-XX-X-DV</td><td>1</td><td>S9013E-05-ND</td><td>ARM Cortex JTAG-DEBUG Header</td><td>$1.30</td><td>$1.30</td><td>$3.90</td><td>$13.00</td><td>$32.50</td><td></td></tr><tr><td>L1</td><td>2.2uH</td><td>VLS252012T-2R2M1R3</td><td>1</td><td>445-3670-1-ND</td><td>VLS252012T-2R2M1R3</td><td>$0.81</td><td>$0.81</td><td>$2.43</td><td>$8.10</td><td>$20.25</td><td></td></tr><tr><td>M1, M2, M3, M4</td><td></td><td>4POL254</td><td>4</td><td>WM4802-ND</td><td>Molex 0705430003 Alt</td><td>$1.03</td><td>$4.12</td><td>$12.36</td><td>$41.20</td><td>$103.00</td><td></td></tr><tr><td>P1</td><td></td><td>HDR2X5</td><td>1</td><td>609-3236-ND</td><td>Header 5X2</td><td>$0.49</td><td>$0.49</td><td>$1.47</td><td>$4.90</td><td>$12.25</td><td></td></tr><tr><td>P4</td><td></td><td>705530003</td><td>1</td><td>WM4902-ND</td><td>705530003</td><td>$1.10</td><td>$1.10</td><td>$3.30</td><td>$11.00</td><td>$27.50</td><td></td></tr><tr><td>P11</td><td></td><td>705530001</td><td>1</td><td>WM4900-ND</td><td>705530001</td><td>$0.74</td><td>$0.74</td><td>$2.22</td><td>$7.40</td><td>$18.50</td><td></td></tr><tr><td>R1, R2, R5, R6, R7, R8, R9, R10, R11, R12</td><td>4.7K</td><td>R0603</td><td>10</td><td>P4.7KGCT-ND</td><td>ERJ-3GEYJ472V</td><td>$0.10</td><td>$1.00</td><td>$3.00</td><td>$10.00</td><td>$25.00</td><td></td></tr><tr><td>R3, R13, R14</td><td>1K</td><td>R0603</td><td>3</td><td>P1.00KHCT-ND</td><td>ERJ-3EKF1001V</td><td>$0.10</td><td>$0.30</td><td>$0.90</td><td>$3.00</td><td>$7.50</td><td></td></tr><tr><td>R4</td><td>100K</td><td>R0603</td><td>1</td><td>311-100KHRCT-ND</td><td>RC0603FR-07100KL</td><td>$0.10</td><td>$0.10</td><td>$0.30</td><td>$1.00</td><td>$2.50</td><td></td></tr><tr><td>SW1</td><td></td><td>TL3301AF160QG</td><td>1</td><td>EG2526CT-ND</td><td>TL3301AF160QG</td><td>$0.43</td><td>$0.43</td><td>$1.29</td><td>$4.30</td><td>$10.75</td><td></td></tr><tr><td>U1</td><td></td><td>98ASA00474D</td><td>1</td><td>MKL05Z16VFK4-ND</td><td>MKL05Z16VFK4 - 24 Pin VQFN</td><td>$1.69</td><td>$1.69</td><td>$5.07</td><td>$16.90</td><td>$42.25</td><td></td></tr><tr><td>U2</td><td></td><td>DSG8-1600X900TP</td><td>1</td><td>296-29897-1-ND</td><td>TPS62162SOP</td><td>$2.62</td><td>$2.62</td><td>$7.86</td><td>$26.20</td><td>$65.50</td><td></td></tr><tr><td>U3</td><td></td><td>ADUM3210BRZ-RL7</td><td>1</td><td>ADUM3210BRZ-RL7CT-ND</td><td>ADUM3210BRZ-RL7</td><td>$3.31</td><td>$3.31</td><td>$9.93</td><td>$33.10</td><td>$82.75</td><td></td></tr><tr><td>U4</td><td></td><td>PCA9518APW,512</td><td>1</td><td>568-4245-5-ND</td><td>PCA9518APW512</td><td>$2.36</td><td>$2.36</td><td>$7.08</td><td>$23.60</td><td>$59.00</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>$20.37</td><td>$61.11</td><td>$203.70</td><td>$509.25</td><td></td></tr></tbody></table><p><strong><br></strong></p><p><strong>Analog Sensor Module BOM</strong></p><table><tbody><tr><td>Symbol</td><td>Value</td><td>Package</td><td>Quantity</td><td>Digikey Part Number</td><td>Manufacturer Part Number</td><td>Price</td><td>Quantity Price</td><td>Build 3 Price</td><td>Build 10 Price</td><td>Build 25 Price</td><td>Comment</td></tr><tr><td>C3, C4, C5, C9, C10</td><td>100nF</td><td>C0402</td><td>5</td><td>490-3261-1-ND</td><td>GRM155R71C104KA88D</td><td>$0.10</td><td>$0.50</td><td>$1.50</td><td>$5.00</td><td>$12.50</td><td></td></tr><tr><td>C6</td><td>100uF</td><td>EEE-1VA101XP</td><td>1</td><td>PCE3951CT-ND</td><td>EEE-1VA101XP</td><td>$0.63</td><td>$0.63</td><td>$1.89</td><td>$6.30</td><td>$15.75</td><td></td></tr><tr><td>C7</td><td>10uF 50V</td><td>C1206</td><td>1</td><td>1276-2876-1-ND</td><td>CL31A106KBHNNNE</td><td>$0.65</td><td>$0.65</td><td>$1.95</td><td>$6.50</td><td>$16.25</td><td></td></tr><tr><td>C8</td><td>22uF</td><td>C0805</td><td>1</td><td>1276-2876-1-ND</td><td>CL21A226KQQNNNE</td><td>$0.65</td><td>$0.65</td><td>$1.95</td><td>$6.50</td><td>$16.25</td><td></td></tr><tr><td>FB1</td><td></td><td>BLM15HG601SN1D</td><td>1</td><td>490-3998-1-ND</td><td>BLM15HG601SN1D</td><td>$0.23</td><td>$0.23</td><td>$0.69</td><td>$2.30</td><td>$5.75</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>J1</td><td></td><td>FTSH-105-XX-X-DV</td><td>1</td><td>S9013E-05-ND</td><td>ARM Cortex JTAG-DEBUG Header</td><td>$1.30</td><td>$1.30</td><td>$3.90</td><td>$13.00</td><td>$32.50</td><td></td></tr><tr><td>L1</td><td>2.2uH</td><td>VLS252012T-2R2M1R3</td><td>1</td><td>445-3670-1-ND</td><td>VLS252012T-2R2M1R3</td><td>$0.81</td><td>$0.81</td><td>$2.43</td><td>$8.10</td><td>$20.25</td><td></td></tr><tr><td>P1, P2, P3, P5, P6, P7, P8, P9, P10</td><td></td><td>70543-03</td><td>9</td><td>WM4123-ND</td><td>705430107</td><td>$1.36</td><td>$12.24</td><td>$36.72</td><td>$122.40</td><td>$306.00</td><td></td></tr><tr><td>P4</td><td></td><td>705530003</td><td>1</td><td>WM4902-ND</td><td>Molex 0705530003</td><td>$1.10</td><td>$1.10</td><td>$3.30</td><td>$11.00</td><td>$27.50</td><td></td></tr><tr><td>P11</td><td></td><td>705530001</td><td>1</td><td>WM4900-ND</td><td>Molex 0705530001</td><td>$0.74</td><td>$0.74</td><td>$2.22</td><td>$7.40</td><td>$18.50</td><td></td></tr><tr><td>R3</td><td>1K</td><td>R0603</td><td>1</td><td>P1.00KHCT-ND</td><td>ERJ-3EKF1001V</td><td>$0.10</td><td>$0.10</td><td>$0.30</td><td>$1.00</td><td>$2.50</td><td></td></tr><tr><td>R4</td><td>100K</td><td>R0603</td><td>1</td><td>311-100KHRCT-ND</td><td>RC0603FR-07100KL</td><td>$0.10</td><td>$0.10</td><td>$0.30</td><td>$1.00</td><td>$2.50</td><td></td></tr><tr><td>SW1</td><td></td><td>TL3301AF160QG</td><td>1</td><td>EG2526CT-ND</td><td>TL3301AF160QG</td><td>$0.43</td><td>$0.43</td><td>$1.29</td><td>$4.30</td><td>$10.75</td><td></td></tr><tr><td>U1</td><td></td><td>98ASA00474D</td><td>1</td><td>MKL05Z16VFK4-ND</td><td>MKL05Z16VFK4 - 24 Pin VQFN</td><td>$1.69</td><td>$1.69</td><td>$5.07</td><td>$16.90</td><td>$42.25</td><td></td></tr><tr><td>U2</td><td></td><td>DSG8-1600X900TP</td><td>1</td><td>296-29897-1-ND</td><td>TPS62162DSG</td><td>$2.62</td><td>$2.62</td><td>$7.86</td><td>$26.20</td><td>$65.50</td><td></td></tr><tr><td>U3</td><td></td><td>ADUM3210BRZ-RL7</td><td>1</td><td>ADUM3210BRZ-RL7CT-ND</td><td>ADUM3210BRZ-RL7</td><td>$3.31</td><td>$3.31</td><td>$9.93</td><td>$33.10</td><td>$82.75</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>Order Total</td><td>$27.10</td><td>$81.30</td><td>$271.00</td><td>$677.50</td><td></td></tr></tbody></table><p>For the most part the over cost of each board isn't too bad, given the quantity I'm building (three of each). Though the cost is pretty reasonable building 3 of each design adds up, I'm estimating a total cost close to 300 dollars for building the first round of hardware. Soon I'll be ordering parts to populate the PCBs but in the interest of saving money I plan to go through my inventory of SMT components and see if I have any of the parts I need already. After all the parts are in hand (as well as PCBs) I will hand populate and solder each one and begin testing. Expect future updates on hardware building and soon software, stay tuned!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/20091-description-update-and-more">Description update and More</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/20091#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20091"><p>So over the last day or two I have been slowly retooling the description of the project, I'm still editing it and what not but you can check it out here: <a href="https://hackaday.io/post/15141">https://hackaday.io/post/15141</a> There have been some changes to the project since the original description was written. originally the DyIO was going to be the main controller, a Raspberry Pi 2 was going to be used in the control box, and the web page was going to be java based. </p><p>The new system is using a Beaglebone Black for the control box, the custom HydroPWNics hardware I've been blogging about all spring, a dedicated WIFi network via router, and the web page is going to be hosted on an actual web server.  The new system has the Beaglebone black running the java application controlling the garden and pushing the data pulled from the Module Hubs to a web server. This system will allow me to publicly host the sight and handle a decent amount of traffic so I can show the plant data of the NFT system I'm building. A benefit to this new system is that the there won't be any need for a web page API using Apache strut since the web page will be a standard HTML5 page receiving data over a secure socket. Below is a diagram of the new system, also available in the project description</p><p><img src="https://cdn.hackaday.io/images/7554821435471526296.png"></p> </div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/20092-project-components">Project Components</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/20092#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20092"><p>So given that this project has been added to so many project parts lists I feel that it deserves an explanation particularly because two of the lists don't seem to make sense right away......... </p><p>So I'll start with the custom hardware. HydroPWNics so far had three unique pieces of electrical hardware designed to date, the Module Hub, the Analog Sensor Module, and the Digital Sensor Module. This board have qualified HydroPWNics to be listed in the Texas Instruments and FreeScale lists.  First off the FreeScale List:  Each of these boards is powered by a FreeScale ARM Cortex M0+. All Modules use the FreeScale MKL05Z16VFK4 48MHZ ARM Cortex M0+, this controller was chosen for cost effectiveness, performance, and overall simplicity. It's a rather simple controller using not too many external parts and having one of every peripheral. Another note is that it can be programmed with the freedom board.  Modules for functions will also use the same MCU, I only say this now because only the sensing modules have been designed/fabbed. The Module Hub is using the FreeScale MKV10Z16VFM7 75MHZ ARM Cortex M0+, this controller was chosen for cost effectiveness and impressive performance. The reason for the higher clock speed is that the module hub has to perform wifi coms and control three modules at the same time. </p><p> For Texas Instrument parts all the boards use TPS series DCDC converters, I've been wanting to try these regulators out for a while and felt this was a good project to do so. The TPS62162 is a fixed 3.3v DCDC converter, I chose it because its got decent efficiency and it results in a very small footprint. The TPS62163 is a fixed 5v DCDC converter, I chose it for the same reasons as the TPS62162 as they use the same supporting passives and have the same route. These DCDC regulators also can support 1A of current at their respective voltages ensuring that there will be plenty of power for everything. As a general rule I tend to use Ti power parts, there are plenty of options a lot of them cheap :) . </p><p><br>Now for the interesting. The project is also listed in the microchip and Atmel lists. Looking at the projects component list this may seem puzzling. The explanation is that a component of this project contains those parts. The DyIO has both a microchip PIC32 and Atmel Atmega in it, hence qualifying this project for those lists. It puzzled me at first but then I thought about it. Anways who knows if I will add an Arduino or two or add my ChipKit into the mix down the road? </p><p>Stay tuned  for more project updates and edits to the documentation!!!!!!!!!<span></span><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/20158-java-dev-day-update">Java Dev Day Update!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/20158#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20158"><p>So today I spent some time working on the higher level software for the system. I'd say  good chunk got done too but there is still plenty to go. I started with the Java software because for the most part the system's layout and how all the subsystems interact with eachother is basically decided (see previous diagram). Most of the code written today pertains to the data object and how the data of each plant and garden as a whole will be represented and managed inside the Java program. Code from today is found at the following repo: <a href="https://github.com/adamjvr/HydroPWNicsAPI">https://github.com/adamjvr/HydroPWNicsAPI</a></p><p> The data structure for the the garden is a sort of nested data structure. The Garden as a whole is represented by a Garden object, the Garden object is made up of PlantRow objects. PlantRow represents a row of plants in the system, PlantRowm has a fixed size set during instantiation. The PlantRow object holds up to the set max amount of Plant objects in an ArrayList. The objects represent the different physical components of the grow units, the plants and the fence post row units they grow in. The Plant object represents a plant, Plant objects are contained by PlantRow objects. A Plant object contains an arraylist of all data samples (timestamped) take during the plants lifetime in addition to characteristics such as name and type. So thats the general overview of how the data of the garden will be handled internal. </p><p>Some Code Snippets of the Data Objects can be found below, keep in mind these are rough and very bleeding edge lol</p><p>Plant Object</p><pre>package com.DataTypes.hydroPWNicsAPI.github.io;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Iterator;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Plant</span> {
	<span class="hljs-comment">/**
	 * plantDataSamples : an ArrayList of type PlantData containing all the data
	 * samples on a given plant complete with timestamp
	 */</span>
	ArrayList&lt;PlantData&gt; plantDataSamples = <span class="hljs-keyword">new</span> ArrayList&lt;PlantData&gt;();

	<span class="hljs-comment">/**
	 * plantDataSamplesIterator an Iterator of Type PlantData for cycling
	 * through the arraylist of containing all plant data samples
	 */</span>
	Iterator&lt;PlantData&gt; plantDataSamplesIterator = plantDataSamples.iterator();
	
	<span class="hljs-comment">/**
	 * datPlanted : a timestamp oject denoting the time the plant was added to
	 * the system
	 */</span>
	Timestamp datePlanted = <span class="hljs-keyword">new</span> Timestamp(<span class="hljs-number">0</span>);
	
	<span class="hljs-comment">/**
	 * PlantTyep : a string of the plant type, e.g Tomato, or Pepper etc
	 */</span>
	String PlantType = <span class="hljs-string">"N/A"</span>;

	<span class="hljs-comment">/**
	 * plnt_stage : an enum denoting the plants growth stage, Seedling, sprout,
	 * vegetive, flowering and fruiting.
	 */</span>
	PlantStage plnt_stage = <span class="hljs-keyword">null</span>;

	<span class="hljs-comment">/**
	 * Instantiation constructor, acceps a date of planting, string for type
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Plant</span><span class="hljs-params">(Timestamp date, String type, PlantStage pstage)</span> </span>{
		datePlanted = date;
		PlantType = type;
		plnt_stage = pstage;
	}
	
	
	<span class="hljs-comment">/**
	 * Returns plant data on a given day/time
	 * 
	 * @param desired_date
	 *            accepts a timstamp object representing the desired date
	 * @return returns a PlantData object containing all the plant data on the
	 *         specified date.
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> PlantData <span class="hljs-title">getPlantDataOnDate</span><span class="hljs-params">(Timestamp desired_date)</span> </span>{
		PlantData dd_data = <span class="hljs-keyword">new</span> PlantData();
		Timestamp iterator_time = <span class="hljs-keyword">new</span> Timestamp(<span class="hljs-number">0</span>);
		<span class="hljs-keyword">while</span> (plantDataSamplesIterator.hasNext()) {
			dd_data = plantDataSamplesIterator.next();
			iterator_time = dd_data.getSmplDate();

			<span class="hljs-keyword">if</span> (iterator_time.equals(desired_date)) {
				<span class="hljs-keyword">return</span> dd_data;
			}<span class="hljs-comment">// end if</span>

		}<span class="hljs-comment">// end while</span>
		<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
	}<span class="hljs-comment">// end funct</span>

	<span class="hljs-comment">/**
	 * 
	 * @return
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDays</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
	}

	<span class="hljs-comment">/**
	 * 
	 * @return
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWeeks</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
	}
}</pre><p>PlantData Object</p><pre class="hljs java">package com.DataTypes.hydroPWNicsAPI.github.io;

import java.sql.Timestamp;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlantData</span> {

	<span class="hljs-comment">/**
	 * plant_humidity Humidity within the vicinity of the plant
	 */</span>
	<span class="hljs-keyword">double</span> plant_humidity = <span class="hljs-number">0.0</span>;
	<span class="hljs-comment">/**
	 * plant_temp the temperature within the vicinity of the plant
	 */</span>
	<span class="hljs-keyword">double</span> plant_temp = <span class="hljs-number">0.0</span>;
	<span class="hljs-comment">/**
	 * smpl_waterData : the waterData at the time of that the sample of plant
	 * data is taking place
	 */</span>
	WaterData smpl_waterData = <span class="hljs-keyword">new</span> WaterData();

	<span class="hljs-comment">/**
	 * lght_tmp : an enum pertaining to the type of light conditions the plant
	 * is under at the time of the plant data sample taking place
	 */</span>
	LightTemp lght_tmp = <span class="hljs-keyword">null</span>;
	<span class="hljs-comment">/**
	 * type : an enum pertainting to the type of garden the plant is in,
	 * hydroponic, soil, or soiless
	 */</span>
	GardenType type = <span class="hljs-keyword">null</span>;
	<span class="hljs-comment">/**
	 * smplDate : a Timestamp object containting the date and time the sample of
	 * plant data occurred.
	 */</span>
	Timestamp smplDate = <span class="hljs-keyword">new</span> Timestamp(<span class="hljs-number">0</span>);

	<span class="hljs-comment">/**
	 * Main constructor used for full instantiation of PlantData Object
	 * 
	 * @param iplant_humidity
	 *            Humidity around the plant at time of sample
	 * @param iplant_temp
	 *            Temperature around the plant at time of sample
	 * @param ismpl_waterData
	 *            Water datagram at the time of sample
	 * @param itype
	 *            Plant type, hydroponic, soil, or soiless pertains to garden
	 *            growth type
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PlantData</span><span class="hljs-params">(<span class="hljs-keyword">double</span> iplant_humidity, <span class="hljs-keyword">double</span> iplant_temp,
			WaterData ismpl_waterData, GardenType itype, LightTemp ilght_tmp,
			Timestamp idate)</span> </span>{
		plant_humidity = iplant_humidity;
		plant_temp = iplant_temp;
		smpl_waterData = ismpl_waterData;
		type = itype;
		lght_tmp = ilght_tmp;
		smplDate = idate;
	}

	<span class="hljs-comment">/**
	 * default constructor defaults to hydroponic garden designation all other
	 * datatypes default to their constructor default in this case
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PlantData</span><span class="hljs-params">()</span> </span>{
		type = GardenType.HYDRO;
	}

	
	<span class="hljs-comment">/**
	 * getPlant_humidity : returns the plants humidity
	 * 
	 * @return returns type double, member variable pertaining to humidity of
	 *         plant at time of sample
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPlant_humidity</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> plant_humidity;
	}

	<span class="hljs-comment">/**
	 * 
	 * @return
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPlant_temp</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> plant_temp;
	}

	<span class="hljs-comment">/**
	 * 
	 * @return
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> WaterData <span class="hljs-title">getSmpl_waterData</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> smpl_waterData;
	}

	<span class="hljs-comment">/**
	 * 
	 * @return
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> GardenType <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> type;
	}

	<span class="hljs-comment">/**
	 * 
	 * @param type
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(GardenType type)</span> </span>{
		<span class="hljs-keyword">this</span>.type = type;
	}

	<span class="hljs-comment">/**
	 * 
	 * @return
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> Timestamp <span class="hljs-title">getSmplDate</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> smplDate;
	}

}
</pre><p>PlantRow Object</p><pre class="hljs java"><span class="hljs-keyword">package</span> com.DataTypes.hydroPWNicsAPI.github.io;

<span class="hljs-keyword">import</span> java.util.ArrayList;
<span class="hljs-keyword">import</span> java.util.Iterator;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlantRow</span> </span>{
	<span class="hljs-keyword">int</span> num_plants = <span class="hljs-number">0</span>;
	<span class="hljs-keyword">int</span> max_plant_num = <span class="hljs-number">4</span>;
	ArrayList&lt;Plant&gt; PlantsInRow = <span class="hljs-keyword">new</span> ArrayList&lt;Plant&gt;();
	Iterator&lt;Plant&gt; IPlantsInRowIterator = PlantsInRow.iterator();

	<span class="hljs-javadoc">/**
	 * Main Constructor
	 * 
	 *<span class="hljs-javadoctag"> @param</span> iPlantsInRow
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PlantRow</span><span class="hljs-params">(ArrayList&lt;Plant&gt; iPlantsInRow)</span> </span>{
		PlantsInRow = iPlantsInRow;
		num_plants = iPlantsInRow.size();
	}

	<span class="hljs-javadoc">/**
	 * 
	 *<span class="hljs-javadoctag"> @return</span>
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumberOfPlants</span><span class="hljs-params">()</span> </span>{
		<span class="hljs-keyword">return</span> num_plants;
	}

	<span class="hljs-javadoc">/**
	 * 
	 *<span class="hljs-javadoctag"> @return</span>
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> Plant <span class="hljs-title">getPlant</span><span class="hljs-params">(<span class="hljs-keyword">int</span> list_index)</span> </span>{
		<span class="hljs-keyword">return</span> PlantsInRow.get(list_index);
	}

	<span class="hljs-javadoc">/**
	 * 
	 *<span class="hljs-javadoctag"> @param</span> newPlant
	 */</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addPlantToRow</span><span class="hljs-params">(Plant newPlant)</span> </span>{
		<span class="hljs-keyword">if</span> (PlantsInRow.size() &lt; max_plant_num) {
			PlantsInRow.add(newPlant);
		}
	}

}
</pre><br><p>Garden Object</p><pre class="hljs java"><span class="hljs-keyword">package</span> com.DataTypes.hydroPWNicsAPI.github.io;

<span class="hljs-keyword">import</span> java.util.ArrayList;
<span class="hljs-keyword">import</span> java.util.Iterator;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Garden</span> </span>{
	ArrayList&lt;PlantRow&gt; GardenRows = <span class="hljs-keyword">new</span> ArrayList&lt;PlantRow&gt;();
	Iterator&lt;PlantRow&gt; IGardenRowsIterator = GardenRows.iterator();
	<span class="hljs-keyword">int</span> GardenRowCount = <span class="hljs-number">0</span>;
	<span class="hljs-keyword">int</span> MaxGardenRowSize = <span class="hljs-number">0</span>;
	<span class="hljs-keyword">int</span> PlantRowSize = <span class="hljs-number">0</span>;
	<span class="hljs-keyword">int</span> GardenSize = <span class="hljs-number">0</span>;
	
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addRowToGarden</span><span class="hljs-params">(PlantRow rowToAdd)</span></span>{
		<span class="hljs-keyword">if</span>(GardenRows.size()&lt;MaxGardenRowSize){
			GardenRows.add(rowToAdd);
		}
	}
	
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddPlantToGarden</span><span class="hljs-params">(PlantRow whchRow, <span class="hljs-keyword">int</span> plantRowNum)</span></span>{
		
	}
	
	
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removePlantFromGarden</span><span class="hljs-params">(PlantRow whchRow, <span class="hljs-keyword">int</span> plantRowNum)</span></span>{
		
	}
	
	
	
}
</pre><br><p>On another note in regards to the Java side of things, I did also begin the Java objects representing the hardware. This component of the system is a bit more complex than I anticipated so I didn't get much done in one sitting. I need to read up more on the custom Bowler device documentation from Neuron Robotics before I move ahead anymore with this code.</p><p>For transmitting the data to the cloud, I have decided to use JSON packets and the google Gson Java JSON library. With the Gson library I can easily serialize the datatype objects into JSON strings and push them to the cloud. The reason to use JSON is that its simple, readable, and well used. JSON use is definitely the newest development in the project so I don't have much else to say on the subject, so stay tuned for new updates!!!!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/20331-update-started-embedded-sofware">Update: started embedded sofware</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/20331#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20331"><p>Over the last two days I worked on the embedded software for the HydroPWNics Hardware. As mentioned before the hardware is based on FreeScale ARM Cortex M0+ microcontrollers, the Kinetis MKL05Z16VFK4 and MKV10Z16VFM7<span class="redactor-invisible-space">. To develop and program for these FreeScale MCUs I am using the new FreeScale IDE Kinetis Design Studio. I worked on developing basic hardware libraries to control the hardware peripherals on the microcontrollers, this is he first step before writing an application specific firmware. The process this time around was very different from what I'm used to, it will all be explained in the rest of the post!</span></p><p><span class="redactor-invisible-space"><br></span></p><p>Kinetis Studio</p><p><img src="https://cdn.hackaday.io/images/2128931435805592985.png"></p><p><span class="redactor-invisible-space"><br></span></p><p><span class="redactor-invisible-space"> Kinetis Design Studio is an eclipse based IDE, (its the expected IDE really, Ti has their own, NXP has their own, etc) it combines the standard Eclipse C/C++ layout with a an array of tools/plugins specific for FreeScale Kinetis ARM Cortex development. KDS is a free tool and uses the GNU ARM GCC toolchain for building projects. In addition to the standard features of the Eclipse-ARM-Cortex-IDE (my generic term for these sorts of IDEs they are mostlty the same) KDS has a neat tool called Processor Expert. Processor Expert is a nifty graphical interface with lots of menu options and a physical representation of the MCU you are using. With Processor Expert you can configure the microcontroller and code libraries for ther  peripherals and pins you are using in your happlication with simple context menus. After you configure everything how you like for your application Processor Expert will auto generate logical device drivers for all the hardware peripherals/GPIO you chose in the in configuration!</span></p><p>After playing around with Kinetis Design Studio for a while and Processor Expert, I figured out how to use them correctly and set out to created custom libraries for the HydroPWNics hardware. I started by making charts of the pinouts of the microcontrollers on the PCBs in google docs spreadsheets. The chart shows the physical pin, port name, the function the pin needs to be set to, the function on the PCB, and a note (typically which Kinetis component being used for code generation).For easy viewing I screencapped the documents and the legend below:</p><p>Pinout Map Legend</p><p><img src="https://cdn.hackaday.io/images/1052941435809354154.png" alt="" style="float: left; margin: 0px 10px 10px 0px;"></p><p>Module Hub Pinout Mapping<br></p><p><img src="https://cdn.hackaday.io/images/1210571435809234497.png"></p><p>Digital Sensor Module Pinout Mapping</p><p><img src="https://cdn.hackaday.io/images/1548111435809293595.png"></p><p>Analog Sensor Module Pinout Mapping</p><p>MKL05 Processor Expert : This is the Processor Expert View in Kinetis Design Studio, this is for the MKL05 series MCU being used on the sensor modules, you can see that the graphic is the 24 VQFN package being used on the sensor module boards. <br></p><p><img src="https://cdn.hackaday.io/images/4104161435805618301.png"></p><p>MKV10 Processor Expert: Processor Expert view for the MKV10 series MCU being used on the Module hub. This screenshot shows a bit more, it was taken after I finished the configuration. I didn't say much before but configuration is carried out by selecting "Components" that represent a type of code that can be generated for a given function. The options are usually a logical device driver (simple register level driver code), basic init code (just configuring peripheral registers and nothing else), or a high level application device driver. Once components are chosen they are added to the component list for the project. Components after being added need to be configured, this usually amounts to baudrates or clock divisers for serial or timers and pin mapping for peripherals. Configuration is simple and Processor Expert notifies you of conflicts if component configurations are using the same resources or pins. Once configuration is complete code can be generated with the click of a button.</p><p><img src="https://cdn.hackaday.io/images/2316131435805642767.png"></p><p> I mentioned earlier how this process has been different than I'm used to, well traditionally a library would have to be written at the register level, by digging through the datasheet. Sometimes a manufacture has a prewritten library that just needs to be compiled but this time there was the Processor Expert feature. I guess this is the new way of doing things and its kind of awesome really, this feature has saved me a lot of time and I look forward to spending more time on the application code than hardware drivers!<br></p><p>The software sources for all the firmware can be found in the HydroPWNicsFirmware github repository here: <a href="https://github.com/adamjvr/HydroPWNicsFirmware">https://github.com/adamjvr/HydroPWNicsFirmware</a> This is only a start so far, a lot has to be done in the coming weeks but I feel that what got done for this post is a good start given that I don't have any hardware in hand yet. PCBs should be coming in the next few days and I will be ordering components and development hardware soon, stay tuned for more to follow on the embedded software and more of HydroPWNics!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/20763-pcbs-here-code-moved-and-more">PCBs Here, Code Moved, and More!!!</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/2964/log/20763#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20763"><p>Got a pretty big update this evening. First off the HydroPWNics project was selected for a few awards this week. During this week hackaday announced the projects that won the sponsor list prizes. I am proud and happy to say HydroPWNics was selected for all four sponsor prices, Texas Instruments, Microchip, FreeScale, and Atmel. I'd like to thank Hackaday and the Sponsors for the excellent prizes!!! Its always nice to be featured in he spotlight of this fantastic community ! Well anyway on with the really fun things!</p><p>Last evening I decided to move all the code over to a dedicated github organization called HydroPWNics (surprising I know). Each component of the software and hardware have their own repositories. Dedicated repos for firmwares, hardware source, application software, webpage, and API. All the source code and repositories can be found here: <a href="https://github.com/HydroPWNics">https://github.com/HydroPWNics</a> </p><p>Earlier this week my PCBs arrived in the mail. As per usual OSHPark did a great job with the board, the quality is pretty great from hand inspection. Now that PCBs are in I should be ordering components soon but I've yet to do an inventory on the components I have, I'll probably have that done over the weekend and adjust my digikey order to save some bucks. Next off will be assembly, I plan to populate the boards at the local hackerspace Technocopia with the help of some friends. I think I can get all the hardware assmbled in one day at the space and estimate a week of debugging before finding all flaws in the boards. </p><p>The PCBs:</p><p><img src="https://cdn.hackaday.io/images/4419531436511312802.jpg"></p>How the modules fit together with the Module Hub:<p><img src="https://cdn.hackaday.io/images/4000851436511388682.jpg"></p>Digital Sensor Module up close<p><img src="https://cdn.hackaday.io/images/817071436512180790.jpg" width="282" height="739" alt="" style="width: 282px; height: 739px; margin: auto; display: block;"></p><p>Analog Sensor Module</p><p><img src="https://cdn.hackaday.io/images/3147881436512215658.jpg"></p>Module Hub<p><img src="https://cdn.hackaday.io/images/7295861436512245970.jpg"></p><p><br>On another note, about 3 weeks back I won a trivia contest that General Hydroponics was holding on their facebook page. They posted a picture of a moth and I correctly identified it to win a GH Performance pack. This kit includes more of the nutrients and pH management solution that I already have but also includes a bunch of other supplements and boosters for various plant stages.</p><p><img src="https://cdn.hackaday.io/images/3818041436512788085.jpg">Stay tuned for more updates over the weekend!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/21198-nft-grow-unit-progress">NFT Grow Unit Progress</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/2964/log/21198#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21198"><p>Last week I did a lot more work on the NFT grow unit the HydroPWNics control system will be deployed on. I finally decided on a simple design to hold up the 4 cut piece of fence posts holding the plants. I choose to cut the two by fours into two pieces one larger than they other. I used all these piece to make a simple box frame and added boards on top to strengthen and support it further. Its hard to describe with words so I have included a bunch of pictures of what I have done so far:</p><p>Materials laid out being measured and cut</p><p><img src="https://cdn.hackaday.io/images/9222021437360886785.JPG"></p><p>Wood all cut to length, time to drill pilot holes and screw it all together:</p><p><img src="https://cdn.hackaday.io/images/5041551437360939172.JPG"></p><p>Just placing it together to see how it fits and see how well the cuts came out. The cuts were spot on, and everything slid together without any real big gaps between wood. You can see how the pieces were cut purposely uneven (like how I mentioned before) so that they fit together neatly at each corner. </p><p><img src="https://cdn.hackaday.io/images/8539981437361221951.JPG"></p><p>Closer look at the at the construction</p><p><img src="https://cdn.hackaday.io/images/8051511437361490188.JPG"></p><p>Its much darker out because it took me a while to find some clamps around the house. I clamped each joint together, when I drilled the pilot holes and left them clamped when I added the screws. It took much longer to clamp and drill pilot holes but in the end I didn&apos;t get any cracks in the wood and everything went together rather smoothly.</p><p><img src="https://cdn.hackaday.io/images/5797591437361552273.JPG"></p><p>Closer look at the clamp placement and placement of the wood. I forgot to take pictures earlier but what I did firs was take the longer lengths of two by four for the frame and bolted them to the top planks at the end, which are also the same length. I did that first to make it easier to clamp, drill, and screw each corner of the frame.</p><p><img src="https://cdn.hackaday.io/images/3700811437361673921.JPG"></p><p>The frame after the first day of work. The middle two by fours are screwed in from the top and side, so they are held in place rather well. One got attached crooked and it makes things look weird but I plan to fix it later before I paint the frame. </p><p><img src="https://cdn.hackaday.io/images/3860791437361884903.JPG"></p><p>Stay tuned for another update on the frame as well as the rest of the project either later tonight or tomorrow. This post is for last week&apos;s work and I just forgot to make a post. I hope to have some more to show from this past week, so stay tuned!!!</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=1" class="grey-gold-button prev-button ">Previous</a>
                    
                    
                    <a href="?page=3" class="grey-gold-button next-button ">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'pMUpb0Wj-GxIJhJUA3qBAYORjGjpUIFi-6Xs';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>