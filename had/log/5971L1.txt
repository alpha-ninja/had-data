<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Python Powered Scientific Instrumentation tool &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F5971%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/5971-python-powered-scientific-instrumentation-tool">Python Powered Scientific Instrumentation tool</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A multi purpose lab tool accessible by simple Python functions, and capable of studying a wide range of physical phenomena.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/35701-jithin" title="Visit Profile">Jithin</a><span>&bull;</span>
                
                3 months ago<span>&bull;</span><a href="/project/5971#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/5971-python-powered-scientific-instrumentation-tool">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/5971/logs/sort/newest">Newest</option>
                    <option value="/project/5971/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/5971/log/18523-prototype-1">Prototype #1</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18523#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18523"><p>The very first board .</p><p><img src="https://cdn.hackaday.io/images/6939201432708606859.jpg"></p><p>A lot of patchwork went into this<br></p><p><strong>Rough list of features:</strong></p><ul><li>USB powered. .5mA polymer fuse. MCP2200 convertor.</li><li>Controlled by PIC24E</li><li>MCP1725 LDO regulator</li><li>REF196 stable 3.3V voltage reference</li><li>bipolar power supplies generated by 7660 and 1240A charge pumps</li><li>MCP4922 2-channel DAC for programmable voltage and current sources</li><li>MCP6S21 programmable gain amplifiers to provide several software configurable input ranges for voltmeters and oscilloscopes.</li><li>4-channel oscilloscope. +/- 16V full range. +/-500mV at 32x PGA gain.</li><li>ATTINY based sine wave generator</li><li>Capacitance measurement via CTMU of PIC24E</li><li>Digital I/O</li><li>Component store - A collection of commonly used resistors, capacitors, diodes etc soldered directly on the PCB, and broken out into a berg strip for quickly trying out stuff.</li></ul><p><strong>Errors and concerns that decided the design of the next iteration</strong><br></p><ul><li>The voltage reference of the PGA needed to be set to the midpoint. LM324 buffered midpoint references were added.</li><li>Quality of ATTINY generated sine wave was rather poor.  I found a low priced alternative, PIC1572, which not only ran faster, but also had 3 16-bit PWMs, and a 5-bit DAC which could be used to add more programmable voltage and current sources.</li><li>Planned to use two PIC1572 to the next iteration for generating dual sine waves. Made the mistake of assuming the outputs would be phase correlated since they were identical. :/</li><li>Ripple noise from charge pumps needed additional filtering.</li><li><strong>PIC24E refused to START</strong> .<strong> </strong>I had<strong> </strong>powered Vdd from the MCP1725, and Avdd from the REF196 for separating analog and digital sections. After much hunting around, I found that Avdd and Vdd must never be more than 300mV apart or else the oscillator won't start. I tried to delay the Vdd rising speed by trying out several capacitors attached to its Delay pin, but with no luck. Here's a screenshot detailing how the Vdd(blue) and AVdd(yellow) voltages would rise on power up<strong></strong></li></ul><p><span></span><br><strong></strong></p><p><strong><img src="https://cdn.hackaday.io/images/3093781432710513045.jpg"></strong></p><p><strong></strong><br><strong><strong></strong></strong></p><p><strong><strong></strong></strong>The Cdelay Pin of 1725 was attached to a 1nF cap.<br><strong></strong></p><p><em><img src="https://cdn.hackaday.io/images/2505991432710615278.jpg"></em></p>In this instance , Yellow is Avdd,  and Blue trace is the PWRGD output of 1725. It seemed I couldn't get them to rise together. Finally I settled on a a diode that would keep the two within a certain range of each other. Once both have risen to their full 3.3V level, the diode can be removed with no consequence.  Have had no problems since.<p><strong>Noise Levels</strong></p><p><img src="https://cdn.hackaday.io/images/5137331432710799932.jpg"></p>Negative power supply(-10V voltage inverter) ripple level with a 680 ohm load.<p><img style="width: 386px; height: 217.263px;" src="https://cdn.hackaday.io/images/8574981432711022020.jpg">Positive power supply (+10V voltage doubler) ripple level with a 680 ohm load.<br></p><p><strong>Attempting to Clean noise with RC filters</strong><br></p><p><img style="width: 366px; height: 205.809px;" src="https://cdn.hackaday.io/images/8140391432711618094.jpg">25 uF, 47Ohm RC filter applied to +10V</p><p><img style="width: 407px; height: 228.842px;" src="https://cdn.hackaday.io/images/2601311432711652486.jpg"></p>100 uF, 47Ohm RC filter applied to +10V
<p><img style="width: 562px; height: 315.957px;" src="https://cdn.hackaday.io/images/2450591432713772180.jpg"></p><p>Tested I2C with SSD1306 OLED display</p><p><img src="https://cdn.hackaday.io/images/3804231432713826446.jpg"></p>'Corrected' schematic. page#2<p><img src="https://cdn.hackaday.io/images/6126311432714043328.jpg"></p>
<p>Testing an inverted configuration op-amp for input voltage range. Overshoot with oscillations occurs if frequency compensation isn't set up.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/18524-prototypes-23">PROTOTYPES #2,#3</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18524#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18524"><p><strong>The following changes were made</strong></p><ul><li><strong></strong>LM324 was used to buffer a midpoint voltage(1.65) and fed to Vref input of MCP6S21 PGAs. This didn't work as expected in higher gain settings. The datasheet demands an output impedance of &lt;0.1 ohms for Vref, although I'm not sure what caused the erratic behavior. Check out the following image of a 100mV sine wave amplified 32x.  The PGA works fine up to 10x.</li><li><img src="https://cdn.hackaday.io/images/3523841432714555598.png"></li><li>The yellow trace is a mess!  The other traces represent high impedance inputs that were floating, and probably accumulated charge which drained once the scope started digitizing them.</li><li>I tried several possible solutions including disconnecting three PGAs and letting the LM324 drive the Vref of only one. But with no hope.  Here's what the Vref pin looks like on a LeCroy scope.</li><li><img src="https://cdn.hackaday.io/images/5334181432714905613.jpg"></li><li>The LM324 simply cannot drive the Vref at high gain settings.</li><li>Switching to a TL08 worked.</li></ul><p><img src="https://cdn.hackaday.io/images/5574151432715133283.jpg"></p><p>Yellow trace - DAC output to CCS circuit.  Blue trace - Voltage drop across a 100 ohm load connected to CCS.  The range of the constant current source is dependent on the load resistance since for higher loads, higher voltages need to provided to maintain the same current (I=V/R) , and there;s a limit to that.</p><p><span></span><br></p><p><img src="https://cdn.hackaday.io/images/8783081432715421227.jpg"></p><p>testing an LM311 based tank circuit driver to use as an inductance meter. </p><p><img src="https://cdn.hackaday.io/images/1834111432715525369.png"></p><p>Verifying that other function calls can be executed while the oscilloscope runs in the background. In this instance, The yellow and red traces are looking at the SPI clock and data pins, while the green is a square wave connected to a PGA.  The data sent over the SPI bus is actually changing the gain of that particular PGA.  One can see that once the last clock of each packet is sent to the PGA, its output(green trace) changes.</p><p><img src="https://cdn.hackaday.io/images/5438541432715728060.jpg"></p><p>Vdd (Yellow) , AVdd (Blue) rising together since a diode was connected from Vdd to AVdd.  No PIC oscillator failures have occured since.</p><p><img style="width: 405px; height: 227.894px;" src="https://cdn.hackaday.io/images/3146681432715878965.jpg"></p><p>Aluminium Capacitors can't seem to do the job for the charge pumps. They require low ESR Tantalum capacitors.</p><p><img style="width: 512px; height: 287.755px;" src="https://cdn.hackaday.io/images/2568891432715989924.jpg"></p><p>I monitored a capacitor's voltage while the CTMU was being used to estimate its capacitance using constant current charging.  Q=CV  =&gt;  I*t = C*V  [ Current, and charging time are both set by us. Voltage is measured at the end of the charging time, and therefore Capacitance can be calculated. ]</p><p>Monitoring this charging cycle using the LeCroy scope caused an increase of 13picoFarad in the measured capacitance. This value somehow tallies exactly with the 13pF capacitance specified on the LeCroy scope. No current source calibration was used.</p><p><img style="width: 284px; height: 504.315px;" src="https://cdn.hackaday.io/images/9596591432716455843.jpg"></p><p>Trying out a NanoAmmeter.  The LED is used as an input source, and the output from the ammeter goes up by a few mV when I shine a light source onto the LED<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/18527-prototype-4">Prototype #4</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18527#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18527"><p>Replacing the PGA Vref drivers with TL08 ICs fixed the previous problems.  Tested all gain ranges by sweeping frequencies of sine and square inputs across the entire bandwidth, and monitoring the output on a scope.  A function generator by Agilent was used to provide the input waveforms.</p><p><img style="width: 560px; height: 314.732px;" src="https://cdn.hackaday.io/images/8570201432718436279.jpg"></p><p>A simple laser cut enclosure was also made.</p><p>The picture below shows a 555 oscillator being studied using the device.  Three oscilloscope channels are being used to monitor the output, voltage across the capacitor, and the midpoint voltage of the two resistors.  The results are shown in the next picture.<br></p><p><img style="width: 493px; height: 277.077px;" src="https://cdn.hackaday.io/images/1776301432718511480.jpg"></p><p><img style="width: 507px; height: 280.783px;" src="https://cdn.hackaday.io/images/8462211432718732408.png"></p><p><img src="https://cdn.hackaday.io/images/2227911432718760901.png">Source: WIkipedia</p><p>I also started using the Input capture modules along with DMA to try to make a Logic Analyzer at no additional cost.  Preliminary results from a TSOP1738 IR demodulator IC receiving the signal from a TV remote are shown</p><p><img style="width: 395px; height: 223.208px;" src="https://cdn.hackaday.io/images/5342051432718964626.jpg"></p><p><img src="https://cdn.hackaday.io/images/1113851432719010173.png"></p><p>It was also used to test an SR-04 ultrasound based distance sensor</p><p><span></span><br></p><p><img style="width: 333px; height: 158.086px;" src="https://cdn.hackaday.io/images/9526261432719177727.jpg"></p><p><img src="https://cdn.hackaday.io/images/4631991432719215415.png"></p><p>Without going into the details of scopes and logic analyzers, I'll post a couple of pictures of both monitoring the same signals.</p><p><img src="https://cdn.hackaday.io/images/4579551432719356244.png"></p><p><img style="width: 446px; height: 357.737px;" src="https://cdn.hackaday.io/images/1899601432719337025.png"></p><p><img src="https://cdn.hackaday.io/images/1050401432719409242.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/18528-bandpass-filter-characterization">Bandpass filter characterization</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18528#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18528"><p>The PIC12F1572 based sine wave generator was used to sweep the input signal frequency of an active bandpass filter I made. Both the input and output were monitored using the device's oscilloscope. Scipy was used to fit the waveforms to a sine function and extract parameters.</p><p>Extracted Amplitude and phase were plotted against input frequency.</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/5rthqWznCMI" allowfullscreen="" width="500" frameborder="0" height="281"></iframe><br>
<p><img style="width: 477px; height: 268.222px;" src="https://cdn.hackaday.io/images/6761261432720737584.jpg"></p><p>This is the only picture I have. I made the connections properly, but later.</p><p>The PIC based waveform generators were later replaced with AD9833 DDS chips which offered 28-bit frequency resolution, and 12-bit phase control in addition to other features such as FSK capability<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/18592-prototype-5">Prototype #5</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18592#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18592"><p><img style="width: 438px; height: 246.165px;" src="https://cdn.hackaday.io/images/9017271432796655164.jpg"></p><p>Moved to a larger form factor.</p><p>Replaced several crucial input connectors with banana sockets that are more reliable.</p><p>These include:</p><ul><li>CH1-CH5 - Oscilloscope inputs + 1 high impedance input</li><li>ID1,ID2</li><li>SQR1,SQR2,OD1,OD2</li><li>I-V convertor</li><li>Sine Wave generators</li><li>PVS1 , PVS2, PVS3</li><li>5V, GND</li></ul><p>Included an AD9833 28-bit DDS in addition to the two phase correlated PIC1752 based wavegens.</p><p><span></span><br></p><p>This is the module I used for testing the AD9833 before including it on the main PCB</p><p><img style="width: 295px; height: 165.796px;" src="https://cdn.hackaday.io/images/7562001432796887232.jpg"></p><p><img style="width: 266px; height: 205.269px;" src="https://cdn.hackaday.io/images/1715501432797747730.jpg"></p><p>Since The PIC based wavegens use a a table I programmed, I added the ability to edit those tables in order to enable arbitrary waveforms. Subject to frequency response limitations.</p><p>The image below shows how easy it is to load arbitrary waveforms.  Python accepts your function( In this case it;s the first three terms used to construct a square wave from sines ), and generates the corresponding table before loading it onto the PIC wavegen.</p><p>Sadly, the more powerful AD9833 is limited to sine, triangle and square waves.<br></p><p><img src="https://cdn.hackaday.io/images/8005731432797879014.jpeg"></p><br><p>NRF radios arrived.  Looking forward to making wireless modules.<br></p><img style="width: 423px; height: 237.735px;" src="https://cdn.hackaday.io/images/1978101432797481092.jpg"><p>Visited several Laser cutting faciities to try out different enclosures for the prototype boards.</p><p>Will add a separate log for those</p><ul></ul></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/18593-streaming-adc-data">Streaming ADC data</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18593#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18593"><p>While the oscilloscope can capture up to 10K samples, and then dump them into the PC for processing, the streaming mode dumps datapoints continuously at the maximum speed possible .   If the python program reading the data fails to keep up, buffer overflows will lead to lost datapoints.  ADC data can currently be streamed at 125KSPS.</p><p>PyQtGraph is amazingly adept at plotting large datasets being updated in real time. Right-click and drag to zoom along either axis</p><p><br>A 50Hz sine wave was initally monitored, and then changed to 500Hz.</p><p><iframe src="//www.youtube.com/embed/Qq_M_BwgvvA" allowfullscreen="" width="500" frameborder="0" height="281"></iframe></p><p>Screencast recorded using RecordMyDesktop.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/18594-laser-cutting-enclosures">Laser cutting enclosures</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18594#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18594"><p>An enclosure needed to be designed for the prototypes, so I proceeded to visit several laser cutting facilities armed with a few different designs.</p><p><img style="width: 245px; height: 434.755px;" src="https://cdn.hackaday.io/images/8284271432799805050.jpg"></p><p>Top panel cut out from translucent red acrylic.  The edge was bent by heating .</p><p><span></span><br></p><p><img style="width: 234px; height: 238.707px;" src="https://cdn.hackaday.io/images/4155051432799990768.jpg"></p><p><img style="width: 266px; height: 248.891px;" src="https://cdn.hackaday.io/images/2145631432800041658.jpg"></p><p>I also tried Clear, and black acrylic</p><p><img style="width: 436px; height: 244.961px;" src="https://cdn.hackaday.io/images/242341432800145063.jpg"></p><p><img style="width: 415px; height: 233.239px;" src="https://cdn.hackaday.io/images/6324181432800216789.jpg"></p><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/18765-incorporating-commonly-available-sensors-into-the-framework">Incorporating commonly available sensors into the framework</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/18765#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18765"><p>Thanks to the vibrant hobbyist market, several sensors which would otherwise have remained inaccessible owing to their reflow-only footprints, are now available in amateur friendly breakout boards with clearly labeled pins.</p><p>I bought up a bunch of these, and tested most of them.  Several of these use SPI/I2C, and companion classes to support them can be coded on the PC side without having to touch the firmware.  Some however, use non-standard/timing critical protocols, so I have added support for them in the firmware. These include ( I may have mentioned them in a previous log somewwhere ), the HX711 weighing sensor(24-bit fully differential, 128x PGA), DHT22(humidity), and a 3648 element optical array from Toshiba.</p><p>Here's an example of what a Python side class for a sensor may look like.</p><pre class="hljs python"><span class="hljs-comment">#HMC5883L 3-axis magnetometer</span>
<span class="hljs-keyword">import</span> Labtools.interface <span class="hljs-keyword">as</span> interface
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> int16

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HMC5883L</span>:</span>
	<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,ADDRESS=<span class="hljs-number">0x1E</span>)</span>:</span>
		self.ADDRESS = ADDRESS
		self.I = interface.Interface()

	<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connect</span><span class="hljs-params">(self)</span>:</span>
		self.I.I2C.start(self.ADDRESS,<span class="hljs-number">0</span>) <span class="hljs-comment">#writing mode</span>
		self.I.I2C.send(<span class="hljs-number">0x01</span>) <span class="hljs-comment">#gain</span>
		self.I.I2C.send(<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">5</span>) <span class="hljs-comment">#smallest range</span>
		self.I.I2C.stop()


		self.I.I2C.start(self.ADDRESS,<span class="hljs-number">0</span>) <span class="hljs-comment">#writing mode</span>
		self.I.I2C.send(<span class="hljs-number">0x02</span>) <span class="hljs-comment">#Mode</span>
		self.I.I2C.send(<span class="hljs-number">0</span>)    <span class="hljs-comment">#Continuous measurement</span>
		self.I.I2C.stop()
	
	<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getVals__</span><span class="hljs-params">(self,addr,bytes)</span>:</span>
		self.I.I2C.start(self.ADDRESS,<span class="hljs-number">0</span>)
		self.I.I2C.send(addr) <span class="hljs-comment">#read raw values starting from address</span>
		self.I.I2C.restart(self.ADDRESS,<span class="hljs-number">1</span>)
		vals=self.I.I2C.read(bytes)
		self.I.I2C.stop()
		<span class="hljs-keyword">return</span> vals

	<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span><span class="hljs-params">(self)</span>:</span>
		vals=self.__getVals__(<span class="hljs-number">0x03</span>,<span class="hljs-number">6</span>)
		x=int16((vals[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">8</span>)|vals[<span class="hljs-number">1</span>])	<span class="hljs-comment">#conversion to signed datatype</span>
		y=int16((vals[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">8</span>)|vals[<span class="hljs-number">3</span>])
		z=int16((vals[<span class="hljs-number">4</span>]&lt;&lt;<span class="hljs-number">8</span>)|vals[<span class="hljs-number">5</span>])
		<span class="hljs-keyword">return</span> x,y,z


<span class="hljs-string">'''		
a=HMC5883L()
a.connect()
while 1:
	print a.read()
'''</span>	</pre><p>The above code ignores error codes returned by the I2C functions, and needs much work.<br></p><p>refer to <a href="http://pythonhosted.org/LabtoolSuite/interface.html">http://pythonhosted.org/LabtoolSuite/interface.html</a> for a rough programmer's manual generated using Sphinx.<br></p><p><img style="width: 382px; height: 298.931px;" src="https://cdn.hackaday.io/images/304741433135336898.jpg"></p><p>A UART relay has been implemented, but it's fairly buggy at this point.  When activated, all data sent to the device is ignored, and relayed directly to the output port, and vice versa. It can be used to test  UART devices like bluetooth modems with little overhead.</p><p>There are two modes.  One where the device returns to normal functionality if no data is exchanged for more than one second, and another where a power cycle is required for the device to return to normal functioning. Can possibly be used for programming secondary microcontrollers with bootloaders such as the ESP8266.</p><p>Here's some example output from a BOLUTEK bluetooth modem(left side of the box in the picture above), after I activated the relay.</p><p><img src="https://cdn.hackaday.io/images/1560651433135722709.png"></p><p>The 1ms delay between characters is to prevent buffer overflows caused by the much lower BAUD rate of the modem.  I could alter the vLabtool's BAUD rate to keep up, but like I said, there are many problems with this feature that need to be looked at.</p><p>Here's an elaborate explanation on how the DHT-22 sends data, along with the timing details for all the pulses.  I will soon write a dedicated loop in the firmware which collects and sorts the pulse width encoded data in real time, but using the logic analyzer first gave me an accurate idea of what the timing details are.</p><p>The code is self explanatory.</p><p><img src="https://cdn.hackaday.io/images/8535431433136201034.png"></p><p>Currently testing a PIC16F1618+NRF24L01+ combo for making wireless sensor nodes.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/19005-wireless-nodes">Wireless Nodes!</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/19005#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19005"><p>An easy to use RF link can be a very valuable addition for large scale experiments with multiple data acquisition points spread out over a wide area that rules out the use of wires due to hassles/expenditure/nature of the data.  </p><p>The NRF24L01+ radio modules offer data rates up to 2MbPS, and configurable addresses with up to five bytes each. So, technically speaking, you can implement more nodes than you'll ever need.</p><p>Here's a demo.  There's no sound, but I've tried to make up for it by annotating the whole thing.<br></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/ffopAuFA8Gs" allowfullscreen="" width="500" frameborder="0" height="281"></iframe><p>The master radio transmits using the ShockBurst mode, and the slave nodes acknowledge along with Payloads that contain whatever data they had been instructed to gather. They also handle dropped packets gracefully by attempting a few retransmits without user firmware intervention.</p><p>Here's everything that went into making the slave node prototype featured in the video.</p><p><img style="width: 575px; height: 323.162px;" src="https://cdn.hackaday.io/images/6924721433436266751.jpg"></p><p>The PIC used has a shared SPI, I2C peripheral module, so each time I2C data is required, a quick pin remapping is carried out to switch between the I2C sensor and  the SPI NRF radio.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5971/log/19516-add-ons-high-resolution-adcs">Add-ons : High resolution ADCs</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/5971/log/19516#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19516"><p>Tested the AD7718 24-bit ADC with a custom PCB.</p><p>AIN1-AIN4 have been broken out into pin headers directly , and can be used as unipolar inputs/differential pairs.</p><p>AIN5-AIN8
 will be used to measure bipolar signals. The inputs for these are 
attenuated and buffered using high precision Op-Amps 
OPA2277(offset&lt;10uV , drift&lt;0.1uV/C ), and then level shifted.</p><p><img style="width: 397px; height: 224px;" src="https://cdn.hackaday.io/images/6819251434346328344.jpg" height="224" width="397"></p><p>The
 StickVise that Hackaday handed out a couple of weeks ago has turned out
 to be incredibly useful since I use surface mount parts a lot</p><p><img style="width: 405px; height: 297px;" src="https://cdn.hackaday.io/images/668411434346409186.png" height="297" width="405"></p><p style="margin-left: 220px;">Fig : Schematic<br></p><p>Now
 that its functionality has been reasonably tested in terms of software 
control, and noise spread is below 100uV, an opto-isolated version can 
be made which should give much better resolution.  I hope to post 
histograms and other characterization results soon.</p><p>Unipolar inputs were tested using unbuffered voltages from the 12-bit DAC of the main board.</p><p>Differential inputs were checked out using a Peltier plate used a voltage generator.<br></p><p>The
 main aim of this add-on board for now is to serve as a calibration tool
 for all the analog inputs on the main board. The AD7718 will first be 
calibrated against a 6.5 digit standard DMM from Keithley, and then be 
used as a calibration tool. </p><p>The PCB features the REF196 voltage reference, as well as an AD5680 18-bit DAC(as yet untested )</p><p>A PCB for a 22-bit ADC MCP3553 is also on its way .   </p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'mITEaIDE-4puinX0pmo6vCNV5qq4H6Q-X6to';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>