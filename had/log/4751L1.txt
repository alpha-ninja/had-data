<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; BradWii on the Hubsan Q4 &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4751%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4751-bradwii-on-the-hubsan-q4">BradWii on the Hubsan Q4</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">In which the author runs open source firmware on a palm sized quadcopter</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/49067-ajlitt" title="Visit Profile">ajlitt</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4751#discussion-list" title="See Comments">2 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4751-bradwii-on-the-hubsan-q4">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4751/logs/sort/newest">Newest</option>
                    <option value="/project/4751/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4751/log/15181-recap-early-work-1">Recap: early work #1</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4751/log/15181#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15181"><p>I bought a Q4 on a whim while browsing the local hobby shop.  $30 is impressive given the individual components: CPUs in both the TX and RX, gyro, accelerometer, LiPo battery, motors, and 2-way 2.4GHz radios in the TX and RX.  Add to that the part where it flies and it was an easy decision.  I also remembered <a href="http://hackaday.com/2014/12/10/reverse-engineering-the-proto-x-quadcopter-radio/" target="_blank">[Alvaro's] deep dive into the TX protocol</a> on this model a couple of months back.</p><p>Of course I had to take it apart when I got home.  The Q4 is nothing more than a flying PCB with a battery and motors to keep a workable power/weight ratio.  The only unnecessary component is the plastic canopy over the battery.  This also covers the ICs on the top of the PCB, but leaves the bottom side exposed, including a number of test pads.  Fortunately Hubsan was kind enough to label some of these "+", "-", "C", "D".  Some Googling revealed that the "HBS002" CPU is really a Nuvoton MINI54 ARM Cortex-M0 CPU.  I beeped out the pads, following the "C" and "D" pads to the SWCLK and SWDIO pins on the micro.  "+" goes to the 3.3V output rail of what looks like a linear regulator.</p><p>I had to go further.  I considered soldering to the pads, but thought that even a small header dangling off this copter would affect flight performance.   Given the ease of getting to the pads, I decided to make a pogo pin jig using my go-to physical toolchain of a 3D printer and OpenSCAD.</p><p>I started on this by getting the positions of the pad centers.  The pads aren't evenly spaced, so I needed to measure positions for each relative to a central point.  I scanned the bottom of the Q4 on a flatbed scanner and used Gimp and calipers to turn the scan into distances relative to one of the corners.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4751/log/15198-recap-early-work-2">Recap: early work #2</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4751/log/15198#discussion-list">
                                    1 comment
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15198"><p>After a few iterations of the OpenSCAD model and a week of waiting for the pogo pins I ordered from Sparkfun to come in, I have a working jig.  It turns out my photogrammetry was a little off, since it took a couple of iterations of the model to dial in the pin locations.  This likely comes from parallax error since I didn't remove the motors when I scanned the board.  I also had some problems getting the hole sizes right for the pins since the C and D pins are so close to each other that they wind up a little narrower than the other two.</p><p>Next up I soldered wires to the pogo pins and hooked them to the STLink/V2 debugger on a STMicro STM32F0 eval board I had on hand.  <a href="https://gist.github.com/TheLastMutt/d1c1948acaace7444c1c" target="_blank">I found this guide by TheLastMutt</a> for flashing and erasing the contents to remove the flash read/write lock on the Mini54 under OpenOCD.</p><p>So what's with the flash lock?  Like most micros the Mini54 has a similar feature, preventing most debug port operations including writing flash unless a bulk erase is performed first.  Hubsan's firmware is written to the Q4 with this lock enabled.</p><p>The code in the guide didn't work without some changes, one being the transport settings needed changing for STLink/V2, and the OpenOCD patch didn't have the right mask for the part ID.  <a href="https://gist.github.com/pokey9000/cad04d6975c0bc6bf3d0" target="_blank">My changes, which I'll eventually put on github proper.</a> <span></span></p><p>After I got OpenOCD and the part to talk, I erased the original firmware to get rid of the flash lock.  Unfortunately the lock also prevents reading out the existing contents, so I was stuck with a dead toy until I could get some alternate firmware working.  This is the part of the movie where the scientist infects themselves with the deadly mystery virus for motivation to find a cure.  I knew that the <a href="https://github.com/goebish/bradwii-X4" target="_blank">BradWii firmware supported very similar quads</a> but getting this to work would be a learning experience.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4751/log/15200-recap-3-bringing-up-bradwii">Recap #3: Bringing up BradWii</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4751/log/15200#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15200"><p>I spent a few lunch hours poking at BradWii.  Usually the ARM fork of BradWii is built in Keil, but TheLastMutt had added project files for Eclipse and GCC.  I don't care for Eclipse, but for a small project I'd deal with it.  I couldn't get the OpenOCD integration to work.  But I discovered that Eclipse can convert its project format into Makefiles, so with exported Makefiles in hand I got the Hubsan X4 build of BradWii to build.</p><p>But before any code could be written, I would need to know the pin mapping for the Mini54 to the peripherals.  I traced out the pins mapping to the motors, LEDs, battery voltage monitor, gyro, accelerometer, and radio.  I forked BradWii on github and made changes to the Hubsan X4 config and support sources to work with that pin map.  Along the way I added a target in the main Makefile to erase flash and call OpenOCD for flashing.</p><p>Good news is the LEDs blink on power up and change pattern when the TX is turned on, so at least the RX section and the LEDs work.  Bad news is that's all it can do right now.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4751/log/15270-recap-4-flying">Recap #4: Flying</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4751/log/15270#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15270"><p>I ran into a couple of roadblocks in the week since barely getting Bradwii loaded:</p><p>BradWii for X4 was configured to arm the motors if the yaw is all the way to the right and the throttle at 0.  The stock TX has a range too narrow to hit the default thresholds.  The stock TX's case has rounded edges in the stick cutout so the values at the corners are lower than at the extreme of one axis.  To get around this I changed the arming combination to low throttle + high pitch and decreased the thresholds until they worked reliably.<br></p><p>I got the Q4 to arm, and the props turned at low throttle.  But trying to fly resulted in an instant barrel roll.  It took a few days of trial and error, but I eventually realized I had mapped the motor PWM channels 180 degrees from the orientation of the sensors.  With fixed motor channels I got the Q4 to hover for a few seconds, but then the shakes set in and ultimately it would power dive into the floor.  I hadn't changed the PID coefficients from the X4 defaults so I'm not surprised.</p><p>On more formal quadcopters, the PID settings are tuned remotely during flight with a sideband channel, or with a serial cable on a fixture that allows the quad to rotate on one axis on the bench.  BradWii has a feature to change certain parameters in realtime and save them to on-chip EEPROM, using the micro's UART for communication.  Unfortunately the Q4 has no other external interface but the ARM SWD debug port and is too small to use the usual tricks for running tethered anyway.</p><p>The pin map I made showed that the UART pads on the Mini54 were being used for radio SPI framing and the interrupt from the accelerometer, so I couldn't blue wire out the UART.  One alternative I considered was using unused bytes in the Hubsan protocol and modifying the TX somehow.  The Hubsan TX uses an STM8 micro, but even that board has its UART pins committed to other peripherals.  It would also mean a descent into <a href="http://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspx">yak shaving </a>as I would have to write my own replacement TX firmware.  I also considered using [alvaro]'s work in putting the TX under PC control, but being a relative noob to flying RC things I didn't want to stray far from the handheld transmitter.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4751/log/15272-recap-5-abusing-the-debug-port">Recap #5: Abusing the debug port</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4751/log/15272#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15272"><p>So it turns out BradWii can do autotuning of the PID coefficients.  It pitches and rolls +/- 15 degrees, systematically varying each coefficient until it converges.  Once the tuning is done, the new coefficients can be saved to EEPROM.  Autotune is started, stopped, and parameters saved using an extra TX channel so that it can be started when the quad is hovering in an open space.  The consensus is that the BradWii autotuning is very effective as long as the initial PIDs are good enough to get into a hover.</p><p>I planned to use autotuning to find workable PID coefficents and pull them out of the EEPROM with the debugger.   I bought a Hubsan X4 for its remote (now I'm in deep...) which is compatible with the Q4 but has a couple of pushbutton channels, one of which I'd use to control the autotuning.  But not long after I started playing with autotune I realized that the battery voltage ADC wasn't tripping the low battery detection at all.  I needed to know what the ADC was reading, and while it could be done with memory inspection it would be easier if I had a stdout to printf to...</p><p>Fortunately ARM specifies a standard for "semihosting", or sending arbitrary data between the debug host and target applications via the debug port.   The standard specifies fairly straightforward stdio and file operations that the target application can ask the debug host to perform.  One of these prints a null-terminated string to the debug console.  This was exactly what I needed.</p><p>I added some inline assembly functions to the serial driver so I could later pipe the UART configuration protocol over SWD.  But for now printfs to the screen would be enough.  I also had to make the breakpoint ISR check that the breakpoint was for semihosting so it could continue execution if the debugger wasn't attached.</p><p>Semihosting works ok in practice if you know the limitations.  Or limitation.  Semihosting is incredibly slow.  It's transferring a 1k file over a 300 baud modem slow.  But it's enough to print the autotuned PID parameters from EEPROM on power-up and to print the ADC raw value for debug.</p><p>This was the last piece in making BradWii autotuning work and find the right mapping of battery voltage to ADC counts.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4751/log/15274-recap-6-moving-slowly">Recap #6: Moving slowly</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4751/log/15274#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15274"><p>I went a few rounds with PID autotuning in the living room after the kids were asleep.  It's been constant nasty weather for the last few weeks, so I couldn't get outside so the Q4 could have more room for its autotuning dance.</p><p>Meanwhile I discovered the LED mappings for both the X4 and Q4 weren't right, I merged Q4 and X4 configurations together as much as possible, and found the right scaling factor for the battery voltage.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4751/log/15276-works-fine-but-what-do-i-know">Works fine, but what do I know?</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4751/log/15276#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15276"><p>Finally.</p><p>The weather was nice enough yesterday to try autotuning outside. The battery held out for about a minute each of pitch and roll tuning and long enough to write the results to EEPROM to dump out at home.  I ended up with PIDs that seem to work great for my Q4 as defaults in the code.  It flies just about as well as I remember the stock firmware behaving, which given my untrained thumbs is like saying Apple earbuds sound as good as $30k Sennheiser Orpheus headphones.  It even works with the original remote.<br></p><p>There's still work to be done: change PID tuning TX channel to something less destructive,  more code cleanups (most importantly pull from victzh's latest commit), better documentation, test unlock procedure on a new Q4.</p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'aqU3fIYG-ozwx70R4qIm_PR94KQeqndGoB5Q';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>