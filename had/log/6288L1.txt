<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Volkswagen CAN BUS Gaming &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6288%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6288-volkswagen-can-bus-gaming">Volkswagen CAN BUS Gaming</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Controlling a VAG CAN BUS tachometer of a Polo 6R with an Arduino, CAN BUS shield with Telemetry API from Euro Truck Simulator 2</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/74900-leon-bataille" title="Visit Profile">Leon Bataille</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6288#discussion-list" title="See Comments">2 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6288-volkswagen-can-bus-gaming">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6288/logs/sort/newest">Newest</option>
                    <option value="/project/6288/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6288/log/19467-power-pin-found">Power Pin found!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19467#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19467"><p>I've figured out the power pins of the dashboard:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/jFYQPi9Chhk" frameborder="0" allowfullscreen=""></iframe><p>These are the pin assignments of the 32 Pin Connector on the backside of the dashboard:</p><p>See: <a href="http://www.polo6rfreunde.de/index.php/Thread/9562-Pinbelegung-Tacho-Stecker/">http://www.polo6rfreunde.de/index.php/Thread/9562-Pinbelegung-Tacho-Stecker/</a> (German</p><p>Pin 1 - encoders for fuel gauge 1 (fully)</p><p>Pin 2 - encoder for fuel gauge 1 (empty)</p><p>Pin 3 - encoder for fuel gauge 2 (full)</p><p>Pin 4 - Encoder for fuel gauge 2 (empty)</p><p>Pin 5 - Not used</p><p>Pin 6 - Not used</p><p>Pin 7 - immobilizer -D2- (1) (no engine control unit therefore present not available)</p><p>Pin 8 - immobilizer -D2- (2) (no engine control unit therefore present not available)</p><p>Pin 9 - speed signal output</p><p>Pin 10 - Unassigned</p><p>Pin 11 - Oil level and oil temperature sender -G266-</p><p>Pin 12 - Unassigned</p><p>Pin 13 - indicator light Rear fog light (probably digital 1/0)</p><p>Pin 14 - beam indicator light (probably digital 1/0)</p><p>Pin 15 - transducer for brake pad wear, front left -G34- / donors for brake lining wear, rear right (probably digital 1/0)</p><p>Pin 16 - Terminal 31 (GND)</p><p>Pin 17 - Sprinkler water level sensor -G33- (probably digital 1/0)</p><p>Pin 18 - transducer for coolant shortage indicator -G32- (probably digital 1/0)</p><p>Pin 19 - temperature sensor for outside temperature -G17- (in most cars is a PT100, ie analog input)</p><p>Pin 20 - Terminal 31, sensor ground (GND)</p><p>Pin 21 - call button for multifunction display -E86- (MFA +) (no engine control unit available so possibly alternative occupancy)</p><p>Pin 22 - call button for multifunction display -E86- (MFA) (no engine control unit available so possibly alternative occupancy)</p><p>Pin 23 - Memory switches for multi-function display -E109- (MFA-R) (no engine control unit available so possibly alternative occupancy)</p><p>Pin 24 - Unassigned</p><p>Pin 25 - Handbrake control -F9- (probably digital 1/0)</p><p>Pin 26 - Warning Contact brake fluid level -F34- (probably digital 1/0)</p><p>Pin 27 - Oil pressure switch -F1- (probably digital 1/0)</p><p>Pin 28 - CAN data bus combo, High</p><p>Pin 29 - CAN data bus combo, Low</p><p>Pin 30 - Unassigned</p><p>Pin 31 - Power supply Terminal 15 (12V).</p><p>Pin 32 - Power supply terminal 30 (12V).</p><p>The dashboard is connected to:</p><p>+12 V at Pin 31, 32 and GND at Pin 16, 20</p><p>Info: It needs to be connected to both +12V Pins. However it only needs +12V to run.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19469-the-can-bus">The CAN BUS</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19469#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19469"><p>I want to control the dashboard via CAN BUS.</p><p>So how does that work?</p><p>As mentioned above you need a CAN BUS Shield for Arduino.</p><p>Every Function in the dashboard has their own register address. You can address it with an hexadecimal code.</p><p>The problem is that these adresses are not documented by Volkswagen. Some vehicle CAN Codes can be found in some difficult to find forums (like <a href="http://www.canhack.de" target="_blank">http://www.canhack.de</a>) but you won't find all of them and just for special vehicles.</p><p>So how do you figure out these codes?</p><p>So we're on hackaday, right? So just let's hack this!</p><p>I'll make a brute force attack to the dashboard while documenting the actual CAN address.</p><p>More information:</p><p>CAN Hack Forum (German): <a href="http://www.canhack.de">http://www.canhack.de</a></p><p>Volkswagen "Data Exchange on CAN BUS 1": <a href="https://www.google.de/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCIQFjAAahUKEwjT1sSB847GAhXJF9sKHQfDADU&amp;url=http%3A%2F%2Fwww.volkspage.net%2Ftechnik%2Fssp%2Fssp%2FSSP_238.pdf&amp;ei=AE19VdPWD8mv7AaHhoOoAw&amp;usg=AFQjCNF703R8QVUcWqvDgwad8q-ITDbmQg&amp;sig2=r-QtlDi2df2TlvKa56pQFg"></a><a href="http://www.volkspage.net/technik/ssp/ssp/SSP_238.pdf">www.volkspage.net/technik/ssp/ssp/SSP_238.pdf</a><span class="redactor-invisible-space"></span></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19473-rpm-can-address-found">RPM CAN Address found!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19473#discussion-list">
                                    4 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19473"><p>I finally got the address for the RPM needle! </p><p><strong>Baudrate: 500kbps</strong></p><p>It's 0x280!</p><p>So how do you control it?</p><pre class="hljs cs"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp[] = {<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,rpm_int};
CAN.sendMsgBuf(<span class="hljs-number">0x280</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp);</pre>
<p> The first line creates a new array with 4 spaces. (The last one "rpm_int" is the byte to control the RPM needle).</p><p>I don't know the first three bytes. They're Probably for fine tuning.</p><p>The second line sends the CAN message with the above mentioned bytes to the dashboard CAN BUS on address 0x280.</p><p>Proof of concept:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/RrUiMBteI9M" frameborder="0" allowfullscreen=""></iframe><p>Conversion Table</p><p>We need to convert the byte for the RPM signal into the actual value we want to show.</p><p>That's done like this:</p><table><tbody><tr><td>RPM x 1000</td><td>byte value (factor: 15.5)</td></tr><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>15.5</td></tr><tr><td>2</td><td>31</td></tr><tr><td>3</td><td>46.5</td></tr><tr><td>4</td><td>62</td></tr><tr><td>5</td><td>77.5</td></tr><tr><td>6</td><td>93</td></tr></tbody></table><p>I guess that these values can be higher (up to 255 in bytes) but at least to RPMs like 8000 or 9000. I use the dashboard of a diesel Polo 6R. That's why the maximum are 6000.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19563-more-can-adresses-found">More CAN Adresses found!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19563#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19563"><p>For already known CAN Codes, please jump over to the project description.</p><p>I've figured out more Functions of the dashboard:</p><table><tbody><tr><td>Function / Icon</td><td>Behavior</td><td>Hex-Code</td><td>Byte structure</td><td>Further information</td></tr><tr><td><img src="http://extern.volkswagen-nutzfahrzeuge.de/d40/iframe/service_zubehoer/icons/Blinklicht_links_oder_rechts.png"><img src="http://extern.volkswagen-nutzfahrzeuge.de/d40/iframe/service_zubehoer/icons/Fahrbeleuchtung_teilweise_oder_ganz_ausgefallen.png"><img src="http://extern.volkswagen-nutzfahrzeuge.de/d40/iframe/service_zubehoer/icons/Generator_gestoert.png"><img src="http://extern.volkswagen-nutzfahrzeuge.de/d40/iframe/service_zubehoer/icons/nicht_weiterfahren_Fahrzeugtuer.png"><img src="http://extern.volkswagen-nutzfahrzeuge.de/d40/iframe/service_zubehoer/icons/Fernlicht_eingeschaltet_oder_Lichthupe.png"></td><td>turning signal, <br>backlight, <br>battery warning,<br>opened doors,<br>lights<br></td><td>0x470</td><td>turning_signal,<span class="hljs-number">0</span>,backlight<br><br>turning_signal:<br>1 = &lt;-<br>2 = -&gt;<br>3 = &lt;-&gt;<br><br>backlight:<br>0 = auto / off<br>1 = on</td><td>If the first byte is &gt; ~10 <br>then there could be some errors, <br>like "Battery is low" or "Check Clutch".<br><br>The backlight behavior is complicated.<br>When it is set to 0, the backlight will be off<br>when it is dark in your room. Otherwise<br>it'll be on. I think it's there to see in darkness<br>that the lights are off.<br>When backlight is set to 1 it'll be on the whole<br>time, but the digital display in the middle<br>will dim down.</td></tr></tbody></table><p>Example:</p><pre class="hljs cpp"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp[] = {2,<span class="hljs-number">0</span>,1,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};
CAN.sendMsgBuf(<span class="hljs-number">0x470</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp);</pre>This peace of code would turn on the right turning signal and switch on the backlight of the dashboard (display will dim down).<p>Hint: The turning signal will not blink. The LEDs for it will just be on or off.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19566-vw-can-bus-transport-protocol-tp2">VW CAN BUS Transport Protocol TP2</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19566#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19566"><p>Just figured out that there&apos;s a information webpage about the VW Transport Protocol.</p><p>Check it out: <a href="http://jazdw.net/tp20">http://jazdw.net/tp20</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19745-kph-gauge-works-partially">KPH gauge works partially</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19745#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19745"><p>I found out the (or a) register that controls the kph gauge. But it reacts really strange.</p><p>The CAN register is 0x5A0.</p><p>Here is a script that provides settings for the RPM and KPH gauge as well as turning lights and backlight of the device itself. There are also many other CAN Codes. See also this <a href="https://hackaday.io/project/6288/instructions">list</a>.</p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;mcp_can.h&gt;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;SPI.h&gt;</span>

<span class="hljs-keyword">int</span> fernlicht = <span class="hljs-number">13</span>;
<span class="hljs-keyword">int</span> nebellicht = <span class="hljs-number">12</span>;
<span class="hljs-keyword">int</span> bremse = <span class="hljs-number">11</span>;

<span class="hljs-keyword">int</span> tempo = <span class="hljs-number">0</span>;
<span class="hljs-keyword">int</span> rpm;
boolean hgb;
<span class="hljs-keyword">int</span> blinker;
<span class="hljs-keyword">int</span> tempBlinker;


<span class="hljs-comment">// the cs pin of the version after v1.1 is default to D9</span>
<span class="hljs-comment">// v0.9b and v1.0 is default D10</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SPI_CS_PIN = <span class="hljs-number">9</span>;

<span class="hljs-function">MCP_CAN <span class="hljs-title">CAN</span><span class="hljs-params">(SPI_CS_PIN)</span></span>;                                    <span class="hljs-comment">// Set CS pin</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span>
</span>{
  pinMode(fernlicht, OUTPUT);
  pinMode(nebellicht, OUTPUT); 
  pinMode(bremse, OUTPUT);
  
   <span class="hljs-comment">//Initialisierung</span>
    digitalWrite(fernlicht, HIGH);
    digitalWrite(nebellicht, HIGH);
    digitalWrite(bremse, LOW);
    delay(<span class="hljs-number">1000</span>);               <span class="hljs-comment">// wait for a second</span>
    digitalWrite(fernlicht, LOW);
    delay(<span class="hljs-number">330</span>);
    digitalWrite(nebellicht, LOW);
    
  Serial.begin(<span class="hljs-number">115200</span>);
 
   
    
  
START_INIT:

    <span class="hljs-keyword">if</span>(CAN_OK == CAN.begin(CAN_500KBPS))                   <span class="hljs-comment">// init can bus : baudrate = 500k</span>
    {
        Serial.println(<span class="hljs-string">"CAN BUS Shield init ok!"</span>);
    }
    <span class="hljs-keyword">else</span>
    {
        Serial.println(<span class="hljs-string">"CAN BUS Shield init fail"</span>);
        Serial.println(<span class="hljs-string">"Init CAN BUS Shield again"</span>);
        delay(<span class="hljs-number">100</span>);
        <span class="hljs-keyword">goto</span> START_INIT;
    }
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span>
</span>{  
    tempo = <span class="hljs-number">10</span>;
    rpm = <span class="hljs-number">1000</span>;
    hgb = <span class="hljs-keyword">false</span>;
    blinker = <span class="hljs-number">3</span>;

    <span class="hljs-comment">//Umrechnung KMH</span>
    tempo = tempo * <span class="hljs-number">0.625</span> - (tempo*<span class="hljs-number">0.05</span>);
    
    <span class="hljs-comment">//Umrechnung RPM</span>
    rpm = rpm * <span class="hljs-number">0.0155</span>;
    
    
       
  <span class="hljs-comment">// send data:  id = 0x00, standrad flame, data len = 8, stmp: data buf</span>
    
    
    <span class="hljs-comment">//ABS</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp1[] = {<span class="hljs-number">0</span>,<span class="hljs-number">128</span>};
    CAN.sendMsgBuf(<span class="hljs-number">0x1A0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp1);
    
    
    <span class="hljs-comment">//RPM</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp4[<span class="hljs-number">4</span>] = {<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,rpm};
    CAN.sendMsgBuf(<span class="hljs-number">0x280</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp4);
    
    
    <span class="hljs-comment">//Lenkradschloss   </span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp6[<span class="hljs-number">2</span>] = {<span class="hljs-number">0</span>,<span class="hljs-number">128</span>};
    CAN.sendMsgBuf(<span class="hljs-number">0x3D0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp6);
    

    <span class="hljs-comment">//ESP &amp; KMH enabled</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp7[<span class="hljs-number">5</span>] = {<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};
    CAN.sendMsgBuf(<span class="hljs-number">0xDA0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp7);
   
  
    <span class="hljs-comment">//turning lights and backlight</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp5[<span class="hljs-number">3</span>] = {blinker,<span class="hljs-number">0</span>,hgb}; <span class="hljs-comment">//1,0 = links; 2,0 = rechts; 3,0 = Warn</span>
    CAN.sendMsgBuf(<span class="hljs-number">0x470</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp5);
   
    //repeat kph signal
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++){
      
      <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp[] = {<span class="hljs-number">1</span>,<span class="hljs-number">128</span>,tempo};
      CAN.sendMsgBuf(<span class="hljs-number">0x5A0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp);
      delay(<span class="hljs-number">30</span>);
      <span class="hljs-comment">//Serial.println(i);</span>
     
    }
   
    
    <span class="hljs-comment">//Read CAN-Bus</span>
    <span class="hljs-comment">/*
    unsigned char len = 0;
    unsigned char buf[8];

    if(CAN_MSGAVAIL == CAN.checkReceive())            // check if data coming
    {
        CAN.readMsgBuf(&amp;len, buf);    // read data,  len: data length, buf: data buf

        for(int i = 0; i&lt;len; i++)    // print the data
        {
            Serial.print(buf[i]);Serial.print("\t");
        }
        Serial.println();
    }
    */</span>
    
    delay(<span class="hljs-number">30</span>);                       <span class="hljs-comment">// send data per 100ms</span>
}</pre>The last big excluded code is to check what CAN commands go across the serial connection.<p>Here's a little video demonstration for this code snippet:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/VkZnTOGVucs" frameborder="0" allowfullscreen=""></iframe><p>Thank you for your big interest in this project!</p><p>Keep following. More updates coming soon.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19837-who-wanted-to-see-this">Who wanted to see this?</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19837#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19837"><p>I'm sure someone wanted to see the Polo Dashboard at 240kph!</p><p><img src="https://cdn.hackaday.io/images/7967671434958688168.JPG"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19946-how-to-find-out-register-addresses-on-can-bus-dashboards">How to find out register addresses on CAN BUS dashboards</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19946#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19946"><p>First of all you'll need to find the pin assignment of the T4 dash, because you have to know which pins are used for the CAN BUS data transfer.</p><p>Then you'll need the syntax of sending the CAN Broadcast over the CAN Bus Shield/Adaptor (here's what I used):</p><pre class="hljs cpp"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> stmp[<span class="hljs-number">8</span>] = {<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>};
CAN.sendMsgBuf(<span class="hljs-number">0x00</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp);</pre><p>The rest is just trying to find the right register addresses. I managed it with Brutforce (a simple "for loop")</p><p>Something like:</p><pre class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4096</span>; i++) {
<span class="hljs-keyword">    unsigned</span> <span class="hljs-keyword">char</span> stmp[<span class="hljs-number">8</span>] = {<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>};
    CAN.sendMsgBuf( i, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, stmp);
    serial.println( i ); <span class="hljs-comment">//Print out the actual register address</span>
    delay(<span class="hljs-number">100</span>); <span class="hljs-comment">//wait to check if there happened something on the dash</span>  
    }</pre><p>You should try to vary the values. Most of it worked with 128, 0, 64 or 255. The loop only has to go to 4095, because this is the maximum value for an 3 digit hexadecimal register address (register reaches from 0x000 to 0xFFF).</p><p>I hope this helps. Thanks for your interest!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/19956-it-works-ets2-connection-established">It WORKS!!! - ETS2 Connection established!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/19956#discussion-list">
                                    3 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19956"><p>Wow! I finally got it! The dashboard is now connected via the plugin from Silas Parker and the ETS2 Teletry API!</p><p>A proof of concept video can be found here:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/iniyGKYgp0w" frameborder="0" allowfullscreen=""></iframe><p>Thank you so much for your support!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6288/log/20384-new-can-codes-found">New CAN Codes found!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6288/log/20384#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20384"><p><a data-mention-user-id="75201" href="/hacker/75201">@Sepp</a> just found more CAN Codes for the dashboard!</p><p>He figured out, that we need to combine more than just one CAN Command for the speedometer.</p><p>See <a href="http://www.wikican.uni-bayreuth.de/wikican/index.php?title=VW_Passat_B6#Bedeutung_der_CAN-IDs">http://www.wikican.uni-bayreuth.de/wikican/index.php?title=VW_Passat_B6#Bedeutung_der_CAN-IDs</a> for more details.</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'WUGNk6B9-hIfu6ydKy8BwjJUyyI2WjbMRpU4';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>