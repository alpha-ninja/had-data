<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; commonCode (not exclusively for AVRs) &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F3828%2Flogs%3Fpage%3D2">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/3828-commoncode-not-exclusively-for-avrs">commonCode (not exclusively for AVRs)</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A shit-ton of things that are useful for a shit-ton of projects. (and, Think &#39;apt-get&#39; for reusable project-code)</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/40107-esoteric" title="Visit Profile">esot.eric</a><span>&bull;</span>
                
                7 months ago<span>&bull;</span><a href="/project/3828#discussion-list" title="See Comments">10 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/3828-commoncode-not-exclusively-for-avrs">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/3828/logs/sort/newest">Newest</option>
                    <option value="/project/3828/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/3828/log/20380-when-projects-collide">when projects collide</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/3828/log/20380#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20380"><p><a href="https://hackaday.io/project/4159-sdramthing45-logic-analyzer/log/20379-on-hold-weird-reminder-of-why">https://hackaday.io/project/4159-sdramthing45-logic-analyzer/log/20379-on-hold-weird-reminder-of-why</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3828/log/20770-pic32tcnter">PIC32+tcnter</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/3828/log/20770#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20770"><p><a href="https://hackaday.io/project/6450-operation-learn-the-mips-pic32mx1xx2xx/log/20769-wins-and-tcnter">https://hackaday.io/project/6450-operation-learn-the-mips-pic32mx1xx2xx/log/20769-wins-and-tcnter</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3828/log/22497-the-main-three-now-on-pic32">the main-three now on PIC32</a></h2>
                            <small class="authorship">8 days ago  &bull;
                                <a class="gray-link" href="/project/3828/log/22497#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22497"><p>The &apos;main three&apos; are now running on PIC32: &apos;heartbeat&apos;, &apos;polled-uat&apos; and &apos;polled-uar&apos;...</p><p>so we have I/O, timers, and a bitbanged UART. Now on to motion-control: <a data-mention-project-id="6892" href="/project/6892">#2.5-3D thing</a></p><p>See more about the PIC32 porting-process at: <a href="https://hackaday.io/project/6450/log/22496-finally">https://hackaday.io/project/6450/log/22496-finally</a> and <a data-mention-project-id="6450" href="/project/6450">#operation: Learn The MIPS (PIC32MX1xx/2xx)</a><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3828/log/23266-this-is-getting-confusing-video">This is getting confusing... + video!</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/3828/log/23266#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23266"><p>While, technically, these three projects are three *separate* projects (as in, they have different end-goals), they all feed into each other. I&apos;m talking about: </p><ul><li>&apos;commonCode&apos; (this project)</li><li><a data-mention-project-id="6450" href="/project/6450">#operation: Learn The MIPS (PIC32MX1xx/2xx)</a></li><li><a data-mention-project-id="6892" href="/project/6892">#2.5-3D thing</a></li></ul><p>A description of these three projects, and how they feed into each other, follows the video, so be sure to click the &quot;Read More&quot; link!</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/g6Wb8wJsOmA" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><h1>Click &quot;Read More!&quot;</h1><p><br></p><h2>This &quot;project,&quot; commonCode:</h2><p> is an attempt to make available to the public the commonCode libraries/system I&apos;ve been developing/using for over a decade. There&apos;s *quite a bit* to be done in this process... In addition to making the libraries/system available, there&apos;s also the plan to make them &quot;architecture-independent,&quot; standardize the flow, and more. And, as (ironically) mentioned in another project&apos;s log (<a href="https://hackaday.io/project/6450-operation-learn-the-mips-pic32mx1xx2xx/log/20769-wins-and-tcnter">https://hackaday.io/project/6450-operation-learn-the-mips-pic32mx1xx2xx/log/20769-wins-and-tcnter</a>):</p><p><a href="https://hackaday.io/project/6450-operation-learn-the-mips-pic32mx1xx2xx/log/20769-wins-and-tcnter"></a></p><blockquote>Basically, as-of little more than a few months ago, I seldom looked at 
commonCode as a project of its own... it&apos;s always been 
developed/improved as a result of some other project[s] that makes use 
of it... I&apos;m actually quite amazed at how much I accomplished that way, 
as looking at it *directly*, now, seems like a *huge* undertaking.</blockquote><h2><br><a data-mention-project-id="6450" href="/project/6450"></a></h2><h2><a data-mention-project-id="6450" href="/project/6450">#operation: Learn The MIPS (PIC32MX1xx/2xx)</a><br></h2><p>on the other hand, is a specific attempt at porting commonCode to a specific new architecture. In doing-so, however, I&apos;m getting a first-hand look at quite a bit of underlying commonCode which has been buried deep for quite some time... <strong>and...</strong> making that stuff architecture-independent! (Woot! One of the end-goals of *this* project (commonCode)!)</p><p>In addition, of course, that project is also a great learning-experience for a new-to-me microcontroller architecture, and more. And, also, compiles quite a bit of getting-started info--from various scattered sources as well as utter banging-of-the-head-on-the-table--on getting a PIC32 running with a minimum of entry-requirements (software/hardware)  that many &quot;hackers&quot; might already have laying around and can certainly be useful for other projects.<br></p><h2><a data-mention-project-id="6892" href="/project/6892">#2.5-3D thing</a></h2><p>finally(ish), is a specific project based on the porting of commonCode to the PIC32... Its specific end-goal is a 2D or plausibly 3D Cartesian system to be used e.g. for pen-plotting, lasering, or maybe even CNC-routing. A side-result of using the PIC32 in this system is that doing-so will force me to revisit my motion-control related commonCode, and... <em>make that stuff architecture independent (Woot!  One of the end-goals of the other two projects!)</em></p><p>In addition, this Cartesian-system has turned a bit into a mechanical challenge which could be quite interesting... A tiny 3-axis system which is assembled from little more than one sheet of laser-cuts... a &quot;business-card kit&quot; of sorts, which once snapped-together could be like a hand-driven etch-a-sketch and an optional snap-on attachment for motors.</p><h2>...others</h2><p>I say &quot;finally(ish)&quot; above, because, again... nearly all my code-bearing projects from the past decade use and contribute to my commonCode system, making use of several commonThings. Wee!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3828/log/23363-system-design">System Design</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/3828/log/23363#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23363"><p>Each commonThing typically has three
files: thing.h, thing.c and thing.mk (represented as a whole by the
green boxes in the following diagrams).</p><p>The commonCode system handles automatic
inclusion of nearly all aspects of each commonThing. E.G. for a
simple test program for the &apos;heartbeat&apos; commonThing, many other
commonThings are included: hfModulation (which handles
modulating/fading the LED), tcnter (which handles timing and is
useful for many other purposes), and timerCommon (which handles the
interface with the AVR&apos;s timer peripherals).</p><p><img src="https://cdn.hackaday.io/images/1917531439827324874.png"></p><p>When using defaults, main.c can be as
simple as:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#include _HEARTBEAT_HEADER</span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>
</span>{
    heart_init();

<span class="hljs-keyword">    while</span>(<span class="hljs-number">1</span>)
    {
        heart_update();
    }
}

</pre><p>Optionally, the following can be
added to the while() loop:</p><pre class="hljs cpp">static int blink = <span class="hljs-number">0</span>; <span class="hljs-regexp">//</span><span class="hljs-number">0</span> = fading <span class="hljs-keyword">in</span> <span class="hljs-keyword">and</span> out, <span class="hljs-keyword">not</span> blinking

<span class="hljs-keyword">if</span>(heart_getButton())
    heart_setBlink(blink++);
</pre><p>Since heartbeat is a good
starting-point for (and useful in) most projects, its &#x201C;test&#x201D; code
is a great place to start any project. Its &apos;makefile&apos; contains all
the necessary defaults and detailed explanations for each
configuration option. 
</p><p>Note that heartbeat.h contains a
usage-example, as shown above.</p><p>In the following examples, each of the
additions are shown assuming you&apos;ve started with the heartbeat test
application.</p><hr><img src="https://cdn.hackaday.io/images/8237311439827507738.png"><p>Addition of polled_uat (the bit-banged
universal-asynchronous-transmitter) is as simple as adding the
following lines to the original &apos;heartbeatTest&apos; makefile:</p><pre class="hljs makefile"><span class="hljs-constant">VER_POLLED_UAT</span> = 0.40
<span class="hljs-constant">POLLED_UAT_LIB</span> = <span class="hljs-variable">$(COMDIR)</span>/polled_uat/<span class="hljs-variable">$(VER_POLLED_UAT)</span>/polled_uat
include $(POLLED_UAT_LIB).mk
</pre><p>And this optional line defines the
baud-rate:</p><pre class="hljs makefile"><span class="hljs-title">CFLAGS</span> += -D<span class="hljs-string">&apos;BIT_TCNT=((TCNTER_SEC/9600))&apos;</span></pre><p>This process may seem ugly/complicated,
but it is thoroughly standardized throughout the commonCode system,
so that adding another commonThing, regardless of its dependencies,
is as simple as adding the first three lines, as appropriate.
Doing-so includes several pieces of each commonThing, including: a
makefile snippet which adds the commonThing to SRC for compilation,
creates a macro for the #include statement which contains the proper
version, (and, again, handles inclusion of dependencies, if not
already included). 
</p><p>Then in the previous heartbeatTest&apos;s
main.c add the following three lines in their respective locations
(note the argument: 0. There can be multiple puats!):</p><pre class="hljs cpp"><span class="hljs-preprocessor">#include _POLLED_UAT_HEADER_</span></pre><pre class="hljs cpp">puat_init(0);</pre><pre class="hljs cpp">puat_update(0); </pre><p>(and optionally: <strong>puat_sendByte(0,
byte)</strong><strong>;</strong>, etc. as-desired).	</p><p><br>Again, polled_uat.h contains a
basic usage-example showing these lines and where they belong.</p><p>That&apos;s it!</p><p>To make it a little bit more
sophisticated, the following adds transmission of a Period &apos;.&apos; once
every second (in the while() loop):</p><pre class="hljs cpp"><span class="hljs-keyword">static</span> tcnter_t lastTime = <span class="hljs-number">0</span>;

<span class="hljs-keyword">if</span>(tcnter_isItTime(&amp;lastTime, TCNTER_SEC)
    puat_sendByte(<span class="hljs-number">0</span>, <span class="hljs-string">&apos;.&apos;</span>);</pre><p>Note that tcnter_update() isn&apos;t called
in the while() loop, because tcnter and heartbeat are both so
commonly-used, tcnter_update() is by default automatically included
in heart_update(). (This like many such defaults, can be changed
and/or disabled by options in the makefile).</p><hr><br><p>Now, let&apos;s add the polled_uar (the
bit-banged universal-asynchronous-receiver):</p><p><img src="https://cdn.hackaday.io/images/4274411439827770412.png"></p><p>polled_uar is another commonThing, so
it&apos;s added in the same way as polled_uat (and, indeed heartbeat). Add
these lines to the makefile:</p><pre class="hljs makefile"><span class="hljs-constant">VER_POLLED_UAR</span> = 0.40
<span class="hljs-constant">POLLED_UAR_LIB</span> = <span class="hljs-variable">$(COMDIR)</span>/polled_uar/<span class="hljs-variable">$(VER_POLLED_UAR)</span>/polled_uar
include $(POLLED_UAR_LIB).mk </pre><p>(BIT_TCNT, defined earlier, also
applies to polled_uar)</p><p>And add these lines, in their
appropriate locations, to main.c:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#include _POLLED_UAR_HEADER</span>
</pre><pre class="hljs cpp">puar_init(0);
</pre><pre class="hljs cpp">puar_update(0);</pre><p>The polled-uar, of course, has the
ability to receive data, so something needs to be <strong>done</strong> with
the data it receives, so to implement &apos;echo&apos; you can add the
following to the while() loop, after puar_update(0):</p><pre class="hljs cpp"><span class="hljs-keyword">if</span>(puar_dataWaiting(<span class="hljs-number">0</span>))
    puat_sendByte(<span class="hljs-number">0</span>, puar_getByte(<span class="hljs-number">0</span>));</pre><p><strong>Conclusion:</strong></p><p>As you can see, this standardized
methodology is used throughout the commonCode system to include
commonThings assuring only those necessary pieces get compiled into
your application. Multiple versions of the same commonThings can
exist on your development system, allowing improvement of one without
interfering with another project being developed concurrently. Yet,
well-tested/implemented bug-fixes, etc. can be implemented such that
they trickle-down to all the projects which make use of that version
of that commonThing. Options for each commonThing allow for
sophisticated control over your project&apos;s implementation... These
allow for speed-improvements, code-size reduction, control of things
like baud-rate which will never change during run-time... Some
specific examples include: changing the tcnter source to another
timer-source (rather than the default AVR timer0), changing the
heartbeat to use a different pin (rather than the AVR&apos;s default MISO
pin), changing the baud-rates, pin-assignments, and/or number of
puar/ts, and much more. These options are clearly explained in the
respective commonThings&apos; test-code&apos;s makefile. No changes are
necessary to the commonThing&apos;s code itself, all options are
implemented via project-specific configuration-options (usually added
to the project makefile).</p><p>You can imagine, it gets significantly
more complicated as the commonThings become higher-level. E.G.
motion-control (with a motor) has many factors: Is speed-ramping used
to accelerate/decelerate the motor(s) as they move from one position
to another? The inclusion-tree can become quite complicated! Ramping
requires sineTravel, which requires sineTable, positioning requires
coordStuff, xyTracker, gotoPosition which requires holdPosition...
these can all be included automatically by adding the three-lines in
your makefile for &apos;gotoRamped&apos;, the appropriate gotoRamped_init() and
gotoRamped_update() functions to main.c, (and, of course, your actual
gotoRamp_setup() calls, which initiate the motion).</p><p><strong>TODO:</strong></p><p>It gets a bit more complicated when
considering the lower-level/hardware details, such as: Positioning a
motor... what kind of position-detection system does it use, a
quadrature encoder? Is that quadrature-encoder connected directly to
I/O pins, or does it go through a quadrature-decoder chip? What kind
of modulation is used to control the motor power? What are the
specific pin-requirements for the motor-driver/H-Bridge chip? These
sorts of specifics could be handled by a driver when using an
operating-system, but we&apos;re working &#x201C;bare-metal...&#x201D; so there
needs to be some sort of standardized interface for these sorts of
things. Similarly, these things don&apos;t change during runtime, so it
really doesn&apos;t make sense to have, say, a motion_init() function
which takes pointers to motor-control functions. Function-pointers,
function arguments, etc. weigh heavily on resources! Especially if,
in the end, the entire call could be boiled down (optimized, by the
compiler) to nothing more than a couple lines of code, e.g.
&#x201C;writePin()&#x201D; (which may boil down to nothing more than a single
assembly instruction!)</p><p>These sorts of things have definitely
been considered in much of commonCode. And as commonCode becomes more
architecture-independent, it still attempts to retain these levels of
optimization which are ideal for embedded architectures.</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=1" class="grey-gold-button prev-button show">Previous</a>
                    
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'UiMhfFbh-KWFIt8jZuqk2KxgwyfmCbYzguno';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>