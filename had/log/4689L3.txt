<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Improve the Haber process &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4689%2Flogs%3Fpage%3D3">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4689-improve-the-haber-process">Improve the Haber process</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">See if ultrasonic cavitation can be used to fixate atmospheric Nitrogen less expensively than the Haber process.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/56245-peter-walsh" title="Visit Profile">Peter Walsh</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4689#discussion-list" title="See Comments">23 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4689-improve-the-haber-process">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4689/logs/sort/newest">Newest</option>
                    <option value="/project/4689/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4689/log/19582-controlling-analog-systems-with-digital-pots">Controlling analog systems with digital pots</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4689/log/19582#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19582"><h2>Quick Summary</h2><p>1) Arduinos can only generate 28kHz signals to a resolution of 120 Hz. That's not enough for this project.<br></p><p>2) Using digital pots to control analog systems is totally feasible.</p><p>3) A simple control algorithm can get a resolution of <a href="http://graphemica.com/%C2%B1">±</a>2Hz.</p><p>3) An algorithm based on control theory might be even more accurate.</p><hr><h2>Arduino generated signals have poor resolution</h2><p>This project uses PWM signals in the ultrasonic range, around 28kHz. Since the transducer gets warm in operation, the resonant frequency changes which causes variations in the delivered power. For a consistent power output (and to prevent burning out the transducer) the system needs to adapt to these changes and make appropriate adjustments.<br></p><p>An Arduino can generate a repeating signal by connecting the CPU clock to an internal counter: every N CPU clocks the output changes state, making a square wave on the selected pin.<br></p><p><img src="https://cdn.hackaday.io/images/2057001434405807435.jpg" alt="" style="float: right; margin: 0px 0px 10px 10px;"></p><p>For Arduinos running at 16 MHz, this won't have enough frequency resolution. Taking 32kHz as the upper bound the output-compare counts 512 system clocks per cycle, and you have to change the output pin twice in each cycle so the output compare needs to count to 256 for each pin change.</p><p><img src="https://cdn.hackaday.io/images/1652411434406379657.gif" alt="" style="float: left; margin: 0px 10px 10px 0px;"></p><p>A table of counts and generated frequencies shows that this method doesn't have a lot of frequency resolution. Going from one count to the next changes the output by about 120 Hz, or 1%.</p><p>That's not a lot of resolution.</p><hr><p><img src="https://cdn.hackaday.io/images/8269481434406708220.png" alt="" style="float: right; margin: 0px 0px 10px 10px;"></p><p>So for the transducer project I decided to try controlling an analog signal generator using digital pots. The UC3525 is essentially an RC oscillator with a pulse width generator, both of which can be controlled by a fixed resistance.</p><p>A digital pot typically has 128 or 256 positions, and is "set and forget" from the microcontroller. This frees the micro for other tasks such as power monitoring and user input, and also simplifies the control software.</p><p><img src="https://cdn.hackaday.io/images/9928421434519310310.gif" alt="" style="float: left; margin: 0px 10px 10px 0px;"></p><p>Having 256 steps is still not enough resolution for the frequency range needed (I want to sweep from 20kHz to 32 kHz), but the range can be extended using two pots in series: a coarse setting of 50k<span class="_Tgc">Ω</span> in series with a 1K<span class="_Tgc">Ω fine setting gives effectively 3Hz resolution on the frequency setting.</span><br></p><p><span class="redactor-invisible-space"></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><br></span></span></p><hr><h2><br><br>Results</h2><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space">I was surprised at how well this actually works.<br></span></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space">The first image below shows the free-running (ie - no feedback) system for the first 10 minutes at startup. The frequency drifts higher over time, presumably due to components warming up. After warm-up the system shows slight variations over time, as seen in the second image. Considering that an Arduino-generated output will have a resolution of 120 Hz, the 150Hz variation over 10 minutes seems reasonable.</span></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><br></span></span></span></p><h2><img src="https://cdn.hackaday.io/images/8728291434408189660.png" alt="Frequency drift at startup"></h2><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/1083621434408471963.gif"><span class="redactor-invisible-space">The previous images had no feedback control from the micro. W</span></span></span></span>ith the controller measuring the output and adjusting the pots the variation in frequency becomes much less. In a 10-minute stretch of output the 1-second counts show a remarkable accuracy. The microcontroller adjusts the resistors 25 times each second, so the frequency will be high or low in any specific time slice, but the overall accuracy (total pulses per second) is quite accurate.</p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/547331434408496047.png"><span class="redactor-invisible-space"><br></span></span></span></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space">Setting the system to bump the frequency by 1 Hz shows a similar accuracy.</span></span></span></span></p><p><img src="https://cdn.hackaday.io/images/6553671434411799215.gif"></p><p>The feedback/control algorithm is a simple bang-bang control that increments or decrements the fine control pot as the measured frequency is below or above the setpoint.</p><p>A proper PID control system would probably have even more accuracy.</p><p>So in summary, microprocessor control of analog systems using digital potentiometers seems to work. It's a viable technique that could be used to control many types of analog systems.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4689/log/19935-software-and-hand-soldered-prototype">Software, and hand-soldered prototype</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4689/log/19935#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19935"><p>New board, 9000 lines of software, resistive load, drill-press frame.</p><hr><p>I managed to pick up a bug which slowed me down a little this week. Just wrote software and did a few minor tasks.</p><p>Someone at my space works for Linear Technologies (!), and knows LTSpice (!), and is an electronics designer, and has agreed to help me simulate the driver board and adjust it for clean output (!!!). When he comes back from vacation, in about 2 weeks. Woot!</p><p>Sorry for the haphazard placement of images and text. I'm finding that it is nigh impossible to predict what the Hackaday.io system will show after something is published. It's not WYSIWYG - things change after posting.</p><hr><p><img src="https://cdn.hackaday.io/images/3825411435117857424.jpg" alt="" width="293" height="231" style="float: left; width: 293px; height: 231px; margin: 0px 10px 10px 0px;"></p><p>I made a "soldered" version of  the control board. I'm hoping everything fits in a 4"x4" area, so that an ATX PSU case can be the project enclosure. Note: socketed Nano can be removed and used for other projects. I think I'll make that a part of the board design.</p><p>Remaining tasks:<br></p><p>a) Tune the driver board for clean output</p><p>b) Finish schematic capture of version 1 design</p><p>c) Board layout</p><p>d) Get some boards made</p><hr><p><img src="https://cdn.hackaday.io/images/1421941435117466366.jpg" alt="" width="189" height="423" style="float: left; width: 189px; height: 423px; margin: 0px 10px 10px 0px;"></p><p>I had some leftover I/Os on the Arduino Nano, so I decided to add some features:<br></p><p>a) Two digital inputs, which can be linked to the transducer by user commands: on/off control, triggered on-time, ESTOP, and so on.</p><p>b) Two digital outputs, which can be controlled by user command or linked to system functions (ie - "on" when transducer is on)</p><p>c) Two LED outputs which show system state</p><p>d) I'm thinking of adding a sonalert, so the system can beep when the xducer turns on.</p><p><span></span>e) The extra I/Os will be optoisolated, for robustness.</p><p>Other than these features, I can't think of anything else the system needs.</p><p>I've got 1200 lines of executable code (semicolon count) in 9000 source lines across 48 source files, all of which seems to work. </p><p>Remaining tasks (software):</p><p>a) Measure current usage and calculate power</p><p>b) Implement power tracking system</p><p>c) Code to implement the extra features mentioned above.</p><hr><p><img src="https://cdn.hackaday.io/images/7929631435116858044.jpg" width="143" height="338" alt="" style="width: 143px; height: 338px; float: left; margin: 0px 10px 10px 0px;"></p>A friend gave me an old drill press frame, without the drill.<p>I'm working up a new demo of the system in action - plastic welding or liquid mixing.</p><p>Here's the 50-watt transducer mounted.</p><hr><p><img src="https://cdn.hackaday.io/images/5385521435116635944.jpg" width="153" height="133" alt="" style="width: 153px; height: 133px; float: left; margin: 0px 10px 10px 0px;"></p>I found a 25<span class="_Tgc">Ω</span> 50W power resistor in some equipment that was being thrown away at the space. This will make a good resistive load substitute for the transducers. I can attach this to the driver board and see which noise is coming from the driver circuit versus back-EMF from the transducer equivalent circuit.<p>Here it is, mounted on some standoffs for heat dissipation.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4689/log/20610-final-stretch-begins">Final stretch begins</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4689/log/20610#discussion-list">
                                    1 comment
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20610"><p>TL;DR: First attempts at Ammonia production will begin in a couple of weeks.</p><p>I hope to have everything done and making first attempts at Ammonia production by August 17th, the Hackaday entry cutoff.</p><p>LEFT TO DO:</p><p>.) See if the power output can be tuned to a sin wave</p><p>.) Clean up/finish the power output board</p><p>.) Minor improvements to the controller board</p><p>.) Schematic capture/board layout of complete system</p><p>.) Get PCBS made for power supply</p><p>.) Final assembly of Ammonia production system</p><p>.) Make power supply plug/interface for mass flow controller</p><p>.) Make a couple of demo videos</p><hr><h2>Secret System</h2><p><img src="https://cdn.hackaday.io/images/9330601436305685676.jpg" alt="" width="266" height="183" style="float: right; width: 266px; height: 183px; margin: 0px 0px 10px 10px;"></p><p>Here's a sneak peek at the the secret system.</p><p>The whole purpose of this Hackaday prize entry is based on these two pieces.<br></p><p>How are they used? What are they for?</p><p><span></span>All will be revealed in a couple of weeks.</p><h2><hr></h2><h2>Updated resonance program<br></h2><p><img src="https://cdn.hackaday.io/images/7671951436304210726.png"></p><p>The next big project step is to get a tuned horn, so I spent some time updating ResonanceFinder to make this task easier.</p><p>The new version keeps and displays the previous 10 sweeps - now it's easier to see how the response changes during the tuning process. I also added some minor improvements and organized the directory better.</p><p>(The X-axis labels are messed up. That's apparently a bug in the graph library I'm using - I'll look into it later.)</p><hr><h2>CNC mount for Transducer Horn</h2><p><img src="https://cdn.hackaday.io/images/9657911436303832725.jpg" alt="" width="398" height="218" style="float: right; width: 398px; height: 218px; margin: 0px 0px 10px 10px;"></p><p>For proper resonance, a horn needs to be 1/2 wavelength long. Knowing the frequency of the transducer (28 KHz) and the speed of sound in Aluminum (5100 m/s) that comes out to about 91 mm of length.<br></p><p>In practice you always make the horn longer than needed and repeatedly shorten it while measuring the response. This usually involves many  chucking and unchucking steps as you switch between lathe end-cuts and measurements.</p><p>The horn has a node 1/4 of the way along its length which doesn't vibrate during the measurement process. It occurred to me that I might be able to clamp the horn at that point and measure the resonance while mounted on a CNC mill, so I made up a mounting clamp.</p><p>If this works it will greatly reduce the effort needed to tune the horns. Testing/horn tuning starts tomorrow.</p><h2><hr></h2><h2>Updated resonance circuit<br></h2><p>I added some convenience features to the interface circuit that sits between the Arduino and transducer, captured the schematic and made a board layout (and did some reorganization and administrivia).</p><p>The tuning circuit isn't worth having a board made, but I routed the PCB just in case someone doesn't want to hand-wire one. See below.<span></span></p><p>All files will be available on GitHub after the contest: source programs, CAD files for mounts and holders, circuit schematics and board layouts, and documentation.</p><p>(I'd make everything available now, but I'm putting off tasks that doesn't directly contribute to the prize until afterwards.)</p><p><img src="https://cdn.hackaday.io/images/8689251436304750126.gif" width="384" height="350" alt="" style="width: 384px; height: 350px; float: left; margin: 0px 10px 10px 0px;"></p><p><img src="https://cdn.hackaday.io/images/2396941436304778902.jpg" width="467" height="246" alt="" style="width: 467px; height: 246px; float: right; margin: 0px 0px 10px 10px;"></p><hr><h2>Miscellaneous</h2><p>Someone at my hackerspace makes mass flow controllers for a living... and gave me one! (Woot!)</p><p>This is/was the final piece of the system I was looking for. All that's left is putting things together and getting them to work.</p><p>Thanks Dave! You're awesome!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4689/log/21239-update-july-20">Update, July 20</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4689/log/21239#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21239"><p>1) Made final board schematic</p><p>2) Software is coming along</p><p>3) Lots of features added to board/software</p><p>4) Semi automated horn tuning seems to work<br></p><p>5) Horn blanks can be cut with a table saw</p><p>6) Power control works, but not very well. Probably due to noise.</p><hr><h2>Added lots of features...</h2><p>The Arduino controller had leftover g&apos;zintas and g&apos;zoutas so I added to the project:</p><p>1) Two inputs.</p><p>2) Two outputs.</p><p>3) Two LEDs.</p><p>4) A buzzer.</p><p>5) Power rails from the ATX controller brought out to screw connectors</p><p>Inputs and outputs are opto-isolated, so external equipment can be isolated from the controller. The I/O can be linked to software events in various ways. For example, a switch connected to an input can give direct control of the transducer output, an output can trigger a system when the transducer is on, and so forth.</p><p>Everything can be controlled by the serial interface, so the user can write their own logic to measure and control things. There&apos;s even a left-over I/O for future use.</p><p>Power rails from the ATX are convenient for powering user equipment: 3.3V, 5V, and 12V (and GND) are brought out to screw terminals.</p><p>(I &apos;kind of went overboard adding extra hardware and the software to drive it. The system can now be described as &quot;feature rich&quot; :-) On the plus side, I can&apos;t think of any more features the system needs.)</p><p>The software is controlled via 2(ish)-character commands over the serial port. Any serial port program (putty, hyperterm) can be used, direct user control isn&apos;t hard, and I have a perl interface library for program control.</p><hr><h2>Board schematic version 1.0</h2><p>The driver is still having some problems, but it&apos;s close enough that I&apos;m going to make boards and debug from there. The hand-wired board is getting a little tough to deal with.</p><p>The final schematic is in 4 sheets, here&apos;s one:</p><p><img src="https://cdn.hackaday.io/images/1889141437443902426.jpg" width="280" height="263" style="width: 280px; height: 263px;"></p><p>The power control isn&apos;t working very well, and I think this is due to noise in the circuit from the generated output: there&apos;s 2 volts of noise on the ground rail, and I think it plays hob with the RC timing of the PWM chip.</p><p>I&apos;m not sure what to do about this. I plan to proceed with board layout, and separate the driver and controller ground planes by a single trace that can be cut. Maybe a 100 ohm resistor between the two grounds will  dampen the noise. (There are decoupling caps on all ICs.)</p><p>Noise on the 12-volt rail also affects the current measurement, and putting this through an RC integrator doesn&apos;t seem to help. Maybe a stepped filter between the current measuring chip and the transformer would fix this.</p><p>I don&apos;t have an EE background, so it&apos;ll probably take awhile to sort this out.</p><p>Any suggestions?</p><hr><h2>Cutting aluminum on a radial-arm saw</h2><p>I tried a metal-cutting blade for slicing aluminum to make a new horn.</p><p>This seems to work well enough - the cut end has a shiny &quot;pebbled&quot; finish which looks nice artistically, but not the flat mirrored finish you get with machining. It&apos;s also very slightly angled relative to the body of the rod, so it still needs to be faced off.</p><p>Still, this is much *much* faster and more accurate than bandsaw cutting. I can cut about a horn a minute with this method, and they only need a quick 10 thou facing cut on the mill. Also, I can cut the horn to within 10mm of the desired length without having to worry about bandsaw creep.</p><p>I also got a metal blade for my table say. I&apos;m *considering* making a jig that positions a horn blank over the saw blade and allows the user to slowly rotate the blank. Possibly using bearings.</p><p>If that works, then it should be possible to make horns on a table saw without a lathe, which would put the project in range of many more hobbyists.</p><p><img src="https://cdn.hackaday.io/images/5672161437446742700.jpg"></p><p><img src="https://cdn.hackaday.io/images/9797691437446816147.jpg"></p><hr><h2>Semi-automated tuning</h2><p>A small CNC mill can automate much of the tuning process.</p><p>Normally, to tune the horn to length you chuck it, face off one end on the lathe, unchuck it, mount it on the transducer, and measure the frequency. This is tedious and time consuming.</p><p>I made a mount for the little sherline mill at the space and wrote a program to go back and forth over the end with an end mill.</p><p>Now I can keep the transducer and horn as one assembly, measure the frequency, and run the program to slice off a small piece. Much, *much* easier.</p><p>One thing of note: Unhook the transducer from the computer while milling. The generated back-emf from the transducer (due to vibration) can kill your serial port. TIL</p><p>Her&apos;s a picture of the setup. The laptop controls an Arduino via serial port, and a small interface board (hanging from the transducer wires) interfaces the Arduino to the transducer.</p><p>Measure, unplug, make a pass, replug, and remeasure. It&apos;s pretty simple.</p><p><img src="https://cdn.hackaday.io/images/5810451437447390569.jpg"></p><p><img src="https://cdn.hackaday.io/images/4737791437447408038.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4689/log/21945-project-roadmap">Project Roadmap</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/4689/log/21945#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21945"><p>We&apos;re coming to the run-up for the Hackaday Prize judging, and Mike Szczys mentioned offhand (at Artisan&apos;s Asylum, last week) that they&apos;re planning a blowout final interim prize before the Aug 17th deadline.<br></p><p>This seems like a good time to do a project roadmap and retrospective. I wanted to get my regrets out of the way before the contest begins in earnest :-)</p><hr><h1>Project Future Roadmap</h1><p>I&apos;ll be exploring the Haber process using various means (mostly ultrasonic) for the next couple of years. I was planning this before the contest announcement, and I&apos;m in it for the long haul. What this means is that The Hackaday Prize isn&apos;t my primary motivation. One way or another I&apos;ll be doing this long after the contest has ended; though, probably not with weekly updates in &quot;diary&quot; style.</p><p><strong></strong></p><p>So the roadmap for the project during the contest period, and after is:<br></p><ol><li>Take the project as far as possible in the Hackaday Prize contest. The prize awards are mid November, so that&apos;s an outer limit on this phase. (Estimate: End of August to mid November, depending on how far the project gets.)</li><li>Take some time off to decompress and cleanse my mental palate. (Estimate: 1 month.)</li><li>Do some project house cleaning: adding README&apos;s, verifying file headers, rearranging directories... general prep work for first release. (Estimate: two weeks.)</li><li>The ultrasonic system will go up on GitHub as a public repository. Anyone can download the schematics, source code, hardware layouts and everything else.</li><li>The chemistry/experimental side will go somewhere else, possibly Hackaday.io.</li><li>The GitHub account will be open to anyone who wants to join the project and otherwise help with development.</li><li>The chemistry part will be open to anyone who wants to discuss and make suggestions on what experiments to try. It&apos;ll also be open to collaborators (ie - join the Hackaday.io side as a contributer).</li></ol><hr><h1>Things that should be different</h1><p>I&apos;ve made a lot of progress in figuring out how to do things for the project, but there are some rough edges. Individual rough edges are not a problem, but they combine to make the final project a bit difficult. I&apos;ve been forging ahead due to contest requirements, but I really need to revisit some design decisions and rework some of the earlier phases.<span></span></p><hr><h2></h2><h1>Horn Tuning Circuit</h1><h2>Don&apos;t use the Arduino to generate frequency<br></h2><p><img src="https://cdn.hackaday.io/images/3388751438398312958.jpg" alt="" style="float: right; margin: 0px 0px 10px 10px;"></p><p>As mentioned in <a href="https://hackaday.io/project/4689-improve-the-haber-process/log/16065-measuring-resonant-frequency-the-easier-way">a previous build log</a>, an Arduino has about 100Hz of frequency resolution at 28KHz.</p><p>This seemed reasonable at the time, but in practice I&apos;m finding it difficult to tune the horns using that resolution. The transducer has a very thin resonance window, 25Hz or so, and you can&apos;t judge how close the horn comes to that frequency.</p><p>The image on the right shows the bare transducer response (orange) and horn response (green) during the tuning process. The 28KHz peaks &quot;mostly&quot; overlap, but it would be nice to see a more fine-grained resolution here.</p><p>Using a faster processor could work, but isn&apos;t the best solution.</p><h2>Don&apos;t use square waves</h2><p>Square waves are easy to generate, and it *seemed* like a good idea because you can turn them into sine waves by filtering. In reality, this bring a host of problems to the circuitry, and filtering never completely works. Especially at 400V and 100 watts.</p><h2>New design</h2><p>I&apos;ve been working out a better design using AD9850 to generate pure sin waves with sub Hz resolution. It&apos;s a little more expensive, but a demo board including resonator is about $8 on eBay, which is cheaper than the bare chip from DigiKey. It&apos;s &quot;set and forget&quot; from the uController, reduces the board chip count, and greatly simplifies the software. The pure sin waves should be easier to filter than square waves.</p><p>I think the generated sine can be split into positive-going and negative-going parts, then fed into a class-D amplifier to run the power driver board. The class-D PWM should generate a pure sin wave out of the transformer, while keeping the FETs either completely on or completely off.</p><p>I&apos;ll be working on the new design during the contest period.</p><hr><h1>Horn Tuning<br></h1><p>It&apos;s difficult to turn down horns on a lathe due to their length. A standard rest (follow or steady) will badly gouge the surface, so you need a &quot;wheeled&quot; rest, which is typically too small for a horn.<br></p><p>A metal cutting table saw (or radial arm saw) blade will reliably cut a horn blank, and a small CNC (one that can cut aluminum) can carve down the profile. Then the CNC can progressively face the ends while measuring the resonant frequency. This is *much* easier than chucking and unchucking the horn during the tuning process.</p><p>CNC horn cutting and tuning works well, and small CNC&apos;s are probably more hobbyist accessible anyway.</p><h2>Don&apos;t connect the transducer to anything while adjusting</h2><p><img src="https://cdn.hackaday.io/images/7788541438407027863.jpg" alt="" width="371" height="279" style="float: right; width: 371px; height: 279px; margin: 0px 0px 10px 10px;"></p><p>CNC&apos;ing the horn with the transducer attached generates massive voltage spikes into the measurement circuitry. Simply *attaching* the horn to the transducer while connected is enough to fry the measurement components. Sxperimentally determined, hindsight is 20-20.</p><h2>Isolate the transducer except while measuring</h2><p>The new power supply can make the AD9850 pure sin wave available, so you won&apos;t need a separate board for tuning.</p><p>Also, a relay can keep the transducer disconnected except during measurements. Otherwise the relay will short a low-value resistor across the transducer to prevent voltage spikes.</p><h2>Better mounting while tuning</h2><p>The transducer mount for the tuning process could be better. The system needs to hold the transducer and horn steady enough for the CNC to face the end, but lightly enough so that the tuning process still works.</p><p>Right now I&apos;m loosening the bracket before each measurements. If I could eliminate this step, I could completely automate the tuning process.</p><h2>Step horns don&apos;t work at all</h2><p><img src="https://cdn.hackaday.io/images/9822311438408287378.jpg" alt="" width="333" height="332" style="float: right; width: 333px; height: 332px; margin: 0px 0px 10px 10px;"></p><p>As part of the project I&apos;m reproducing <a href="http://www.imajeenyus.com/electronics/20110514_power_ultrasonic_driver/index.shtml">Lindsay Robert Wilson&apos;s</a> step horn - and not having any luck. My parabolic horn tuned up exactly as expected, but the step horns... nothing. The system behaves as if the step horns aren&apos;t connected at all, and I haven&apos;t the first clue why this is.</p><p>I&apos;ve got 3 step horns of various configurations, one shown here, and none of them seem to do anything.</p><p>I&apos;m completely at a loss as to why this is.<br></p><p>Anyone have experience with ultrasonic horns and can give me a hint?</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4689/log/22094-secret-sauce-revealed">Secret Sauce Revealed!</a></h2>
                            <small class="authorship">15 days ago  &bull;
                                <a class="gray-link" href="/project/4689/log/22094#discussion-list">
                                    4 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22094"><h2>Why this might work when other attempts have failed</h2><p>Several readers pointed out that others have tried to fixate Nitrogen using ultrasonics, and none succeeded.</p><p>Supeno&apos;s paper  <a href="http://www.collectionscanada.gc.ca/obj/s4/f2/dsk1/tape3/PQDD_0016/MQ57783.pdf">&quot;Sonochemical Fixation of Nitrogen&quot;</a> reviews the previous attempts and has a good explanation of the difficulties involved. If you&apos;re interested, it&apos;s an easy read and provides good background information for this project.</p><p>Of course you don&apos;t do what others have done and expect different results. For different results, you have to do something no one has tried. Preferably with a rationale for why the differences are important, and how they might lead to success.</p><p>So here at last is the secret sauce: what I intend to do that is <em>different</em> from previous attempts!</p><hr><h2>Difference 1: Focused ultrasonics</h2><p>Previous attempts used ultrasonics at low power density. More specifically, previous attempts made no attempt to focus the ultrasonic energy to high density.</p><p>Supeno experimented with a tuned chamber that, as far as I can tell, generates standing [planar] waves. The energy within the chamber is the transducer power divided by the base area times the Q of the tuned system.</p><p>He used roughly(*) 50 watts from a transducer 2.125&quot; in diameter, which is 2.2 watts/cm^2, which is not a high energy density. His paper doesn&apos;t list the tuned chamber specs, but if the Q is 20 then the energy density would still be only 44 watts/cm^2.</p><p>(*) Various depending on the experiment, but in this range.</p><img src="https://cdn.hackaday.io/images/4889291438831696767.jpg" alt="" width="263" height="138" style="float: left; width: 263px; height: 138px; margin: 0px 10px 10px 0px;"><p><img src="https://cdn.hackaday.io/images/4094091438840839178.jpg" alt="" width="270" height="235" style="float: right; width: 270px; height: 235px; margin: 0px 0px 10px 10px;"></p><p>For my experiments, I&apos;ve milled a rectangular end horn and a parabolic reflector anvil.</p><p>In theory, the rectangular horn should generate plane waves which will be concentrated by the parabolic reflector. This should produce enormous energy densities and pressures, which are different experimental conditions from the other attempts.<br></p><h2><hr></h2><h2>Difference 2: Directly sonicating the gas<br></h2><p>Previous attempts used Nitrogen and Hydrogen dissolved in water. Specifically, in previous attempts Nitrogen and Hydrogen were bubbled through water using an air stone, and sonicated.</p><p><img src="https://cdn.hackaday.io/images/6121321438834882494.gif"></p><p>Hydrogen and Nitrogen are largely insoluble in water, so one would expect such a system to have a poor yield.</p><p>...but note that previous experiments did produce tiny amounts of ammonia. That&apos;s important!</p><p>It takes 3 moles of Hydrogen to produce 1 mole of ammonia, so dividing the Hydrogen solubility by 3 tells us that the most ammonia we can get from 100cc of water using this method is about 50 <em>micromoles(*)</em>.</p><p>Further, the molar proportion of dissolved Nitrogen to Hydrogen is 0.8:1, which is nowhere near the ammonia ratio of 1:3. This reduces the maximum yield: with less Hydrogen available than needed, fewer activated Nitrogens will encounter Hydrogens to form ammonia.</p><p>Supeno experimented on 100cc batches and produced around 5 nanomoles of ammonia(**). Perhaps ultrasonic production of ammonia might work with a different setup.</p><p>(*) Gloss gloss, such as continually replenished gases and not accounting for sonification time.</p><p>(**) Various, depending on experiment, see paper.</p><hr><p><img src="https://cdn.hackaday.io/images/6495481438839188899.gif" width="270" height="361" alt="" style="width: 270px; height: 361px; float: right; margin: 0px 0px 10px 10px;"></p><p>My system uses a capillary tube to hold a small bubble of gas (mixed to molar proportions) at the focal point of the parabolic reflector.</p><p>The hope is that focused ultrasound will compress the bubble to high pressures, generated ammonia will dissolve into the surrounding water, the bubble will shrink, and gas will be replaced as needed by a mass flow controller.</p><p>For now I&apos;ll manually control the mass flow via serial port, but if ammonia is generated it seems reasonable to automate this using a webcam and OpenCV.<br></p><hr><h2>Modification of parameters</h2><p>Experimentation is a form of search, and to increase the chances of finding something you need a wide search area.<br></p><p>With this setup I can vary the ultrasonic power delivered to the bubble, the size of the bubble (a little), the temperature of the water, and the gas mixture (proportions, or adding a buffer gas such as Argon). I can also dissolve things in the water which might catalyze the reaction, and I can try to make other compounds such as oxides of Nitrogen.</p><p>My plan is to take measurements under various conditions, look for trends in ammonia formation (if any), and zero in on the most effective experimental regime. At that point I can estimate the efficiency and compare to the Haber process.</p><h2><hr></h2><h2>Video of the system in action<br></h2><p>Here&apos;s a video of the reaction chamber showing horn and anvil. It doesn&apos;t have a capillary tubing mount (under construction), but I have an air bell for collecting gas, Hydrogen and Nitrogen generators, and a mass flow controller.</p><p>This the same effect as the 2KW cavitation mentioned in the <a href="https://www.youtube.com/watch?v=YJliQ7I5E2E">a previously mentioned video</a>, at a smaller scale.<br></p><p>The cloudy wisps extending from the bottom of the horn are flows of cavitation bubbles. I think. Power output around 50 watts, through a cylindrical horn sculpted to a 44x12 mm rectangular(ish) end.</p><p><iframe width="500" height="281" src="//www.youtube.com/embed/tm6N9YQMaBI" frameborder="0" allowfullscreen=""></iframe><br></p><p><img src="https://cdn.hackaday.io/images/4115741439069298857.gif" alt="" width="344" height="604" style="float: left; width: 344px; height: 604px; margin: 0px 10px 10px 0px;"></p><p><img src="https://cdn.hackaday.io/images/3254931439069321555.jpg" alt="" width="421" height="589" style="float: right; width: 421px; height: 589px; margin: 0px 0px 10px 10px;"></p><br></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=2" class="grey-gold-button prev-button show">Previous</a>
                    
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'SSy1EQ03-DfUshxKHpyAHpkcszl54tPUb73Q';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>