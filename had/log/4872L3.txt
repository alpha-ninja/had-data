<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; SubPos - Positioning System &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4872%2Flogs%3Fpage%3D3">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4872-subpos-positioning-system">SubPos - Positioning System</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A &#34;dataless&#34; Wi-Fi positioning system that can be used anywhere GPS can&#39;t.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/16981-blecky" title="Visit Profile">Blecky</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4872#discussion-list" title="See Comments">64 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4872-subpos-positioning-system">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4872/logs/sort/newest">Newest</option>
                    <option value="/project/4872/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4872/log/19113-subpos-node-esp-firmware">SubPos Node ESP Firmware</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/19113#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19113"><p>I have released a version of the ESP8266 firmware based on the <a href="http://espressif.com/new-sdk-release/">esp_iot_sdk_v1.1.0_15_05_26</a> sdk. This firmware adds new Wi-Fi functions that don't write the configuration to flash once changed (more on this later). </p><p>These functions are an addition to the AT command set which uses the wifi_softap_set_config_current function that was added in the 1.0.0 SDK:</p><pre>AT+CWSAPID:
Set parameters of AP with exiting password and encryption.
AT+CWSAPID=&lt;ssid&gt;,&lt;channel&gt;

AT+CWSAPCH: 
Change AP channel.
AT+CWSAPCH=&lt;channel&gt;
<span class="redactor-invisible-space">
<span class="redactor-invisible-space">AT+CWSAPRI:
<span class="redactor-invisible-space">Re-initialises AP.
AT+CWSAPRI</span></span></span>
<span class="redactor-invisible-space"></span></pre>The firmware source and binaries are <a href="https://github.com/subpos/esp_firmware">available here</a>.<p>By default, the Makefile is set to build for 512kB flash modules (no "cloud" updating possible). So this should work fine on all ESP modules. This SDK also includes the AT+CWMODE_CUR and AT+CWSAP_CUR AT functions to change further AP modes.</p><p>Write eagle.flash.bin to 0x00000 and eagle.irom0text.bin to 0x40000 (if using the nodemcu programmer, program eagle.irom0text.bin first). </p><p>Note: </p><p>Baudrate = 115200<br>AT Commands have to be capitalized, and end with "/r/n"</p><p><img src="https://cdn.hackaday.io/images/6010741433674756464.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/19243-subpos-node-menu">SubPos Node Menu</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/19243#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19243"><p>I am hammering away at the development of the firmware for the micro on the SubPos Node. I currently have it talking to the ESP module via UART2 and have a user interface with UART1. Implemented as well is a setup wizard and EEPROM storage.</p><p>First boot (notice the CRC error at the start; data is stored with a CRC):<br></p><pre>SubPos Node - <a href="http://www.subpos.org">http://www.subpos.org</a>
fw ver 0.9.5 2015-06-27

error: eeprom data crc check failed, data not loaded.

error: settings data crc check failed, settings not loaded.

initialising esp module.

menu:
help - display this menu message.
wizz - guided configuration wizard.
show - show current settings.
hexd - enter pre coded hex data.
dbcn - disable beacons.
ebcn - enable beacons.
norm - set beacon mode normal.
acut - set beacon mode accurate timing.
freq - set beacon mode freq hopping (cyclic).
slat - set latitude.
slng - set longitude.
salt - set altitude.
clre - clear eeprom.
wree - write settings to eeprom.
chan - change beacon channel.

&gt; show
device id    : 0
latitude     : 0
longitude    : 0
altitude     : 0
tx power     : 0
alt mapping  : 0
3d mapping   : 0
path loss    : 0
reserved     : 0
app id       : 0
<span class="redactor-invisible-space">
<span class="redactor-invisible-space"><span class="redactor-invisible-space">freq hopping : 0
beacon timing: 0</span></span></span>

&gt; wizz
 pressing enter sets 0
 enter device id:
&gt; 1
 enter latitude (-+ to 7 dp):
&gt; 10
 enter longitude (-+ to 7 dp):
&gt; 10
 enter altitude (-+ cm relative to sealevel):
&gt; 10
 enter tx power (-+ dBm to 1 dp):
&gt; 10
 enable offset mapping (1 or 0):
&gt; 0
 enable 3d mapping (1 or 0):
&gt; 0
 enter reserved data (as decimal):
&gt; 0
 enter application id:
&gt; 0
 enter path loss co-efficient selection:
&gt; 0
done.

&gt; show
device id    : 1
latitude     : 100000000
longitude    : 100000000
altitude     : 10
tx power     : 100
alt mapping  : 0
3d mapping   : 0
path loss    : 2
reserved     : 0
app id       : 0

<span class="redactor-invisible-space">freq hopping : 0
beacon timing: 0</span>

&gt; wree
 data written to eeprom.
&gt;</pre><p>Reboot device (CRC check is sucessful and data is loaded into memory):</p><pre>SubPos Node - <a href="http://www.subpos.org" target="_blank">http://www.subpos.org</a>
fw ver 0.9.5 2015-06-27

<span class="redactor-invisible-space">eeprom data loaded successfully.
</span>
settings loaded successfully.

initialising esp module.

menu:
help - display this menu message.
wizz - guided configuration wizard.
show - show current settings.
hexd - enter pre coded hex data.
dbcn - disable beacons.
ebcn - enable beacons.
norm - set beacon mode normal.
acut - set beacon mode accurate timing.
freq - set beacon mode freq hopping (cyclic).
slat - set latitude.
slng - set longitude.
salt - set altitude.
clre - clear eeprom.
wree - write settings to eeprom.
chan - change beacon channel.

&gt; show
device id    : 1
latitude     : 100000000
longitude    : 100000000
altitude     : 10
tx power     : 100
alt mapping  : 0
3d mapping   : 0
path loss    : 2
reserved     : 0
app id       : 0
<span class="redactor-invisible-space">
<span class="redactor-invisible-space"><span class="redactor-invisible-space">freq hopping : 0
beacon timing: 0</span></span></span>

&gt; test the thing
 command_error
&gt;
</pre><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/19431-esp-receiver-firmware">ESP Receiver Firmware</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/19431#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19431"><p>Edit: I have converted the firmware that I created before to just output the SPS tagged SSIDs, RSSI and channel as comma separated values instead, as the ESP module doesn't have decent math libraries, doesn't do floating point arithmetic very well and is quite slow to update:</p><p><a href="https://github.com/subpos/esp_wifi_scanner">https://github.com/subpos/esp_wifi_scanner</a></p><p>You can use this firmware to do trilateration on another embedded platform. Plus you can possibly use multiple ESP receivers to do multiple scans at once (I will alter this firmware to scan on a GPIO active high shortly so you can trigger a scan).</p><hr><p>I am in the process of creating a basic ESP8266 based SubPos receiver (like a GPS receiver module). </p><p>An ESP8266 module with the  SubPos receiver firmware, will generate NMEA messages based on the currently visible nodes and calculate a position. This position could be used for indoor drones or the like. The ESP module returns a scan once every 2 second or so, so this module might be a little slow for some applications. You could increase this speed by limiting to a single channel to scan. </p><p><img src="https://cdn.hackaday.io/images/4023581434282511326.png"></p><p><img src="https://cdn.hackaday.io/images/9735601434282525730.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/19944-nodes-nodes-and-more-nodes">Nodes Nodes and More Nodes</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/19944#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19944"><p>I have finally finished hand soldering all the nodes up:</p><p><img src="https://cdn.hackaday.io/images/3769181435154657622.jpg"></p><p>So where to from here? </p><p>I am still making the final feature polishes to the <a href="https://hackaday.io/project/4872/log/19243-subpos-node-menu">SubPos Node firmware</a> for the PIC (the <a href="https://hackaday.io/project/4872/log/19113-subpos-node-esp-firmware">ESP module firmware</a> for the Node is done). Once that's done I want to get some new performance numbers in controlled conditions and tweak the Android API further.</p><p>Having done all that, I will start looking at a revision 2 of the Node PCB as well as a new SubPos receiver device that can use multiple ESP modules for spatial diversity and can be embedded into devices such as drones and the like.</p><p>Also stay tuned for a bigger and better demo video shortly.</p><p>Edit: Frequency hopping now working in the SubPos Node firmware. The firmware is pretty much complete for the moment.</p><p><img src="https://cdn.hackaday.io/images/3523311435482877832.png"></p><p>Edit 2: <a href="https://github.com/subpos/android_api/blob/master/SPSData.java">Rolling median and averaging filter now implemented</a> in the Android API. Initial tests seem to be giving much better results on distances.</p><p>Edit 3: Nodes programmed, stands built to hold nodes off the ground. Ready to do some testing tomorrow in an underground carpark and gather some data. I will be testing 4 nodes in a square arrangement about 6 meters apart from each other with a receiver at .5m intervals. I will then test 8 nodes in an octagon shape. Each test will be performed with both single channel and frequency hopping.</p><p>I will post the raw RSSI data as well as the positional data for anyone interested.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/20305-no-this-fun-2">No This Fun 2</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/20305#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20305"><p>Nothing is ever easy. I spent about 3 hours setting all of this up (not to mention the several hours of prep work to get it all ready) to test 8 nodes in a square formation with test points at 1m intervals:</p><p><img src="https://cdn.hackaday.io/images/123001435763098466.jpg"></p><p>It turns out there are a few issues:</p><ol><li>The length of the cables don't allow some of the Nodes to pull enough current (the voltage is fine), causing them to reset constantly.</li><li>Since the Nodes are connected to a common power supply (I used 2 batteries, one for each side), they all turn on at the same time and effectively start transmitting their beacons at the same time, causing a bunch of collisions (this isn't so much of a problem with frequency shifting, but I will add in some startup randomness).</li><li>Changing the channel on startup doesn't work straight away, so it starts with the default channel. I need a longer delay.</li><li>I was relying on the status LEDs to make sure they were programmed correctly. The status LEDs indicate issues with the ESP module and the like. Some of these Nodes appeared to be working, when they in fact weren't (more thorough testing required for each Node).</li><li>Each Node has the same MAC address by default, I will need to change the firmware to adjust the MAC address based on position parameters and ID. This isn't a major issue, except that some SSID viewing software sorts/replaces based on MAC address (this doesn't affect the Android API).</li></ol><p>So back to development... At least I got a neat animated gif:</p><p><img src="http://i.imgur.com/oMw2ISE.gif"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/20709-not-as-promised">Not as Promised</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4872/log/20709#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20709"><p>I was going to have a really nice video with lots of data and deliciousness, but with my unsucessful test run last week this will be on hold a little longer. </p><p>In the meantime I have made a quick video that shows the Node firmware and serial user interface in action. No audio, just annotations and running at normal speed:</p><p><iframe src="//www.youtube.com/embed/ytYdPqG3gAA" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/20851-a-fine-result">A Fine Result</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4872/log/20851#discussion-list">
                                    1 comment
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20851"><p>I got another chance today to set up the nodes as shown in <a href="https://hackaday.io/project/4872-subpos-positioning-system/log/20305-no-this-fun-2">this project log</a>. After some preliminary data analysis I can safely say everything is working as expected.</p><p>The nodes were setup up in a 6x6m array like so:</p><pre>[1]------[2]------[3]
 |                 |
 |                 |
[8]               [4]
 |                 |
 |                 |
[7]------[6]------[5]</pre>And samples were taken at 1 meter offsets:<pre>[1]------[2]------[3]
 |  .  .  .  .  .  |
 |  .  .  .  .  .  |
[8] .  .  .  .  . [4]
 |  .  .  .  .  .  |
 |  .  .  .  .  .  |
[7]------[6]------[5]</pre><p>The first three nodes listed there are at the far end next to the wall in the image (the North side). Each of these points were measured with a <a href="http://www.leica-geosystems.com/en/Leica-DISTO-D210_98412.htm">laser distance measure</a>.<br></p><p>I only got the chance to test the default mode without any special functions (frequency shifting etc.), but each Node was set to its own channel and the following average meter error plot was obtained:</p><p><img src="https://cdn.hackaday.io/images/6507201436712005792.png"></p><p>Plot Data:</p><pre>	1	2	3	4	5
1	 1.44m 	 1.35m 	 1.24m 	 1.51m 	 1.84m 
2	 1.31m 	 0.93m 	 0.96m 	 0.95m 	 1.29m 
3	 1.23m 	 0.51m 	 0.57m 	 0.72m 	 1.18m 
4	 1.05m 	 0.84m 	 0.57m 	 1.16m 	 1.19m 
5	 1.64m 	 1.18m 	 0.74m 	 1.24m 	 1.89m 
</pre><p>Each of the data points corresponds to the sample points above (same orientation). The data for this plot was obtained by scanning the SubPos nodes at  each sample point for 1 minute with a smartphone on a stand the same height as the Nodes (my Wi-Fi dongle on a stick had issues). This was then averaged and the error in meters was mapped out for each position (based on actual distance and the calculated path loss distance from RSSI). Every channel for each position was then averaged to create the plot above to show   the average error at each point (in +- meters).</p><p>Note that this is not the trilateration algorithm, it&apos;s just raw distance error calculations for some quick visualisation (I will run the data through this later to test the true accuracy of it).<br></p><p>As you can see, the area maintains a distinct border close to the Nodes (which was expected), but as you move towards the center,  the accuracy increases substantially (more than accurate enough to find your way in a shopping mall or underground carpark). In a much larger area with many Nodes this error will average out and err on the smaller side.<br></p><p>My next test will involve frequency switching (which I expect will smooth out the average), and then I will look to test in a much larger environment when a suitable location is found.</p><p>But for the moment, I am very very happy with the baseline results of the default Node mode.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/22025-introducing-the-subpos-node">Introducing the SubPos Node</a></h2>
                            <small class="authorship">17 days ago  &bull;
                                <a class="gray-link" href="/project/4872/log/22025#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22025"><p>In development is  revision 3 of the SubPos Node. This version is a simplified variant of the development Nodes and would be close (feature wise) to the final product:</p><p><img src="https://cdn.hackaday.io/images/1679491438515290398.jpg"></p><p>This version has a micro USB connector which is used to configure the device via a serial console as well as power it (it now uses a PIC18F25K50 to do this). In addition, the Nodes will allow for firmware flashing of both the ESP module and PIC over USB.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/22583-small-update-rev-02-boards">Small Update, Rev 02 Boards</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/4872/log/22583#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22583"><p>Not much going on this week while the videos are being made, they should be done by the end of the week. I have one of the Rev 02 Nodes made up and will repurpose some of the Rev 02 boards to test out the Rev 03 features. There won&apos;t be many of the Rev 02 boards as they are just a small change from <a href="https://hackaday.io/project/4872-subpos-positioning-system/log/17545-pcb-design">Rev 01.</a> The Rev 03 boards are shown <a href="https://hackaday.io/project/4872-subpos-positioning-system/log/22025-introducing-the-subpos-node">here</a>.</p><p>These boards use a Micrel <a href="http://www.micrel.com/_PDF/mic5209.pdf">MIC5209-3.3YS</a> LDO, with voltage input up to 20V. They also have reverse battery protection.  <br></p><p><img style="width: 279px; height: 303px;" src="https://cdn.hackaday.io/images/3155121439359557503.png" height="303" width="279"></p><p><img style="width: 281px; height: 304px;" src="https://cdn.hackaday.io/images/3547121439359580218.png" height="304" width="281"></p><p><img src="https://cdn.hackaday.io/images/6626381439359384165.jpg"></p><p>Here is the look at the prototype, Rev 01a and Rev 02 boards:</p><p><img src="https://cdn.hackaday.io/images/5501571439366278986.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/22892-how-to-use-the-node">How To Use the Node</a></h2>
                            <small class="authorship">4 days ago  &bull;
                                <a class="gray-link" href="/project/4872/log/22892#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22892"><p>Whether you are using the revision 01/02 or the newer (in development) revision 03 Node, they are all easily configured via a serial connection.</p><p>If you are using the 01/02 Nodes, you will need a UART(TTL) to USB converter to configure it via a serial console. With the 03 Nodes, plugging in the USB will both power it and provide a CDC based serial port which will install automatically in Linux or Windows 8.1/10 as a com port.</p><p>To power the Nodes, you will need at least a 3.3V supply @ &gt; 300mA (the 01 node only goes from 3.3-5V whereas the 02/03 Nodes have an input rating of 3.3-20V with reverse battery protection).</p><p>You can use any serial console emulator you like with the following serial port configuration:<br></p><ul><li>Baud Rate &#x2013; 9600</li><li>Bits &#x2013; 8</li><li>Parity &#x2013; None</li><li>Stop Bits &#x2013; 1</li><li>Flow Control &#x2013; None</li></ul><p>Once connected, you should get the following on boot:</p><pre>SubPos Node - <a href="http://www.subpos.org" target="_blank">http://www.subpos.org</a>
fw ver 0.9.9 2015-07-23

<span class="redactor-invisible-space">eeprom data loaded successfully.
</span>
settings loaded successfully.

initialising esp module.

menu:
help - display this menu message.
wizz - guided configuration wizard.
show - show current settings.
hexd - enter pre coded hex data.
dbcn - disable beacons.
ebcn - enable beacons.
norm - set beacon mode normal.
acut - set beacon mode accurate timing.
freq - set beacon mode freq hopping (cyclic).
slat - set latitude.
slng - set longitude.
salt - set altitude.
clre - clear eeprom.
wree - write settings to eeprom.
chan - change beacon channel.</pre><p>From here it is pretty simple to navigate, just type the command you want to run from the &quot;help&quot; menu and press enter. You can even correct mistakes before executing commands. </p><p>When you make changes to settings that need to be written to eeprom to remain persistant on reboot, an asterisk will show in the command area:</p><pre>*&gt;</pre><p>To save, just type &quot;wree&quot; to save current settings to eeprom.</p><p>The red LED will illuminate when the device is performing critical operations like writing to eeprom. During boot it will stay illuminated until the ESP module initialises. If this stays illuminated for more than 10 seconds, there is an issue communicating with the ESP module. On the 03 firmware, this will automatically try to reinitialise the device, but on older versions, make sure the jumpers are set correctly.</p><p>If the red LED continues to stay illuminated on boot, the ESP module may need flashing.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=2" class="grey-gold-button prev-button ">Previous</a>
                    
                    
                    <a href="?page=4" class="grey-gold-button next-button ">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '3q7EABRU-zVvy9EudA4xNd75UX0DeWPQ3WJI';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>