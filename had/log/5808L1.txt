<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Redtree Hydra: A modular platform for robotics &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F5808%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/5808-redtree-hydra-a-modular-platform-for-robotics">Redtree Hydra: A modular platform for robotics</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">The Redtree Hydra is the 1st computer for robotics designed to easily add components, communicate with groups of other robots and share data</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/68366-redtree-robotics" title="Visit Profile">Redtree Robotics</a><span>&bull;</span>
                
                3 months ago<span>&bull;</span><a href="/project/5808#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/5808-redtree-hydra-a-modular-platform-for-robotics">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/5808/logs/sort/newest">Newest</option>
                    <option value="/project/5808/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/5808/log/17933-the-redtree-story">The Redtree Story</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5808/log/17933#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17933"><p>For our first project log, I'll start with telling you our story - how we came to work on this project and some details about our background.</p><p>Tom and I met in grad school. Tom was doing an MEng in computer engineering and was inventing some kind of electromechanical valve train for cars. I had just finished my MSc in wireless mesh networks and was about to start a PhD in heterogeneous wireless networks (think of using all of the wireless there is - bt, wifi, 4g, etc. in combination or some subset of them). Tom and I both ta-ed a course together and started talking about robotics and wireless and how we could build something awesome together.</p><p>A little while later, Tom started working at a company (while still doing his masters) doing spectroscopy and robotics. One of the projects he was involved in was a Mars rover prototype for the Canadian Space Agency. It was here he started to notice how often the wheel is re-invented during robotics. Adding sensors, motors and components is the same work being done all over the world at similar companies. There was always complex circuits, specialized code and device drivers and customization. This is where we knew we could start to make a difference. Tom was also motivated by some previous work at a water engineering company which used Programmable Logic Controllers (PLCs). In the 1970s, the PLC was created so that people didn't need to re-invent the wheel in factories when connecting up machines.</p><p>After a bit of preliminary work in this direction, we also started to think about how I could bring my expertise to the mix. We knew that moving robots were going to be the future. With my research background and work on wireless network protocols, we knew that one of the challenges when things move is keeping them connected. We decided to start combining this ability to remain connected to other system to the idea of easily connecting sensors and parts. We created a software layer that made networks automatically organize themselves so that groups of robots could communicate easily.</p><p>Also motivated by the PLC, we wanted our robots to be focused on data. Increasingly we are now finding that this is important. Robots are often created to monitor environments where it is unsafe or impossible for humans. This means lots of sensors and lots of data. For this we added the ability to easily get sensor data into algorithms (for autonomy and for inter-operability with ROS, OpenCV and other common robot tools), and the ability to easily send this data to the Internet. We have created a simple cloud service on Amazon Web Services (AWS) that lets you see all of the robots in your fleet, monitor and visualize their data in real-time.</p><p>At the same time we were developing this, Tom was completing his PhD in computer engineering working on a food processing machine that trimmed the fat off of pork loins more efficiently and I worked on my PhD in wireless communications specializing in heterogeneous wireless networks. I also got involved in projects involving cognitive agents, machine learning and other things useful for robotics.</p><p>In the upcoming logs, we'll show off some of the features that work now in more detail, and describe the direction we'd like to see this project go in the future.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/17972-the-hardware-evolution-of-the-redtree-hydra">The Hardware Evolution of the Redtree Hydra</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5808/log/17972#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17972"><p>Today's log will bring you up to speed with the progress we have made up to until now from a hardware point of view (software side coming soon).</p><p>First, way back in 2011 when we were trying to figure out what was possible, we started to play around with a GumStix. It was attractive because we wanted built in wireless and a decent processor at the time (also fairly low power).</p><p>We quickly found out that to make the "plug-and-play" type of robotics we wanted, we would need a Field Programmable Gate Array (FPGA). This is sort of a software defined processor. It's useful in this project so that we can reconfigure the circuitry and connect hardware using different interfaces (I2C, Canbus, UART etc.) without a ton of external circuitry. </p><p>So after getting some of the code running on the Gumstix and convincing ourselves that this was worth pursuing we started on selecting a new platform that had an FPGA and some of the other features we wanted. </p><p>We ended up deciding on the MicroZed because it had a dual core ARM-a9 and an FPGA built-in. There also seemed to be a growing open-source community around the product, which was perfect since we also want to open source as much of our product as possible as well.</p><p>While it does not come with built-in wireless, we found a module called the TI Wlink8 which has WI-Fi and Bluetooth and had lots of documentation on getting in running with the microzed (and AVNET has been really helpful in working closely with us to get it up with our own board we developed).</p><p>After one hardware iteration, we had a fairly large footprint and the Microzed sitting on top of the board. In our next revision, we shrunk a little bit while sorting out some of the previous problems. The I/O connectors are now moved off onto external cards that would plug into the side of a case.</p><p>In our final production model, we are actually eliminating the Microzed completely and just utilizing the Zync 7010 processor and RAM (not sure how much yet, but likely more than 1GB).</p><p><img src="https://cdn.hackaday.io/images/6868241431693944435.png"></p><p>The above picture shows the evolution of the Redtree Hydra from around 2011 when it was mostly software running on a Gumstix to today where we are on revision 3 of our hardware and on the way to a manufactured production model sometime towards the end of this summer. The first version of our hardware was produced in April 2014, the smaller version in October 2014, the case in December 2014. We produced 15 of the most recent prototype which are being loaned out to early adopters at Universities and companies around North America. Our "manufacturing-ready" final version is expected in mid-to-late summer of 2015.</p><p><img src="https://cdn.hackaday.io/images/523811431694045362.png"></p><p>Above is a picture of the I/O boards on the side of the case that let you connect sensors, motors and other components to the Redtree Hydra. Eventually we think we can get the entire system down to this size or smaller so that people can incorporate the entire "chipset" into their own designs for mass production while retaining all of the features of the Redtree Hydra.</p><p><img src="https://cdn.hackaday.io/images/9465961431694143491.png"></p><p>This is the entire system - or what's in the box. Our final production model will eliminate the Microzed that sits on top of this prototype.</p><p><img src="https://cdn.hackaday.io/images/3325841431694197633.png"></p><p>This is a picture of us testing one of the original I/O cards that we produced.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/18157-prototype-system-redtree-rover">Prototype System - Redtree Rover</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5808/log/18157#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18157"><p>The first prototype system we built around the Redtree Hydra was a rover. We got a small rover online and added the Redtree Hydra to it, along with some QEIs to measure the wheelspeed, and xbox controller receiver to control it (although you can actually control it from a computer over the network as well) and some power electronics to power it from a drone battery. (I'll detail this more in a full build instruction type of post later for anyone interested in trying to build one of these themselves).</p><p>Here's a few pictures and videos of the first versions of the rover:</p><p><img src="https://cdn.hackaday.io/images/9278681432061148068.jpg"></p><p>(version 1: running on some really early prototype hardware - not all of our boards are being used yet - no I/O cards - just some hacked together stuff mostly to test the software out)</p><p><img src="https://cdn.hackaday.io/images/383301432061347156.jpg"></p><p>Our most recent version using the prototype I/O card and our full hardware as well the software. In addition to providing the motor control for the robot, it is also possible to add a variety of other sensors, cameras - even a full robot arm and control it all with this single computer. In other projects this is often done by adding another micro controller or processor every time a new component is added to system. By keeping everything connected to one unit, it becomes more maintainable and easier to work with.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/18220-prototype-system-odg-j5">Prototype System: ODG J5</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5808/log/18220#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18220"><p>After getting a couple of the Redtree Rover prototypes working, we set out to put our system on more of a "serious" robot. We connected with a local company called Ontario Drive Gear, that makes awesome all-terrain vehicles (most of them people drive and have up to eight wheels and can float). They also have a robot version - called the J5, which is used by the military. We set out to replace the computer that was currently used in it and see how quickly we could do it.</p><p>Inside, it ships with either no computer or a single board intel-based computer (basically a laptop without the case). While this type of setup has lots of processing power, the ability to add video cards to extra vision processing etc. it lacks the ability to easily add sensors and components to the system. The current method is usually just adding another USB --&gt; &lt;insert x standard&gt; + a bunch of software to make things work.</p><p>With the Redtree Hydra, since it is flexible and supports most standard interfaces its possible to connected directly to the CANbus for example and control the motors on the machine directly. More importantly, the same computer can also be used to connect LIDAR, IMUs, Manipulators and all sorts of other cool things directly and without a ton of extra adapters. Furthermore, the data from all these things is easily sharable with other robots (if you are building a swarm for example) or can be monitored live through our web interface.</p><p>Here's a few pictures and video's of our progress. </p><p><img src="https://cdn.hackaday.io/images/6466911432126584384.jpg"></p><p>Tom doing some CANbus programming on the Redtree Hydra so we can control the motors.</p><p><img src="https://cdn.hackaday.io/images/6404931432126664995.jpg"></p><p>Redtree Hydra inside the ODG J5 - also has a smaller footprint than most computers that control these types of robots (it is sitting on top of the existing computer it is replacing. Note: we steer the robot around with an Xbox 360 controller, but it is also possible to use a longer range controller like a Futaba, which is more common with these types of machines.</p><p><iframe width="500" height="281" src="//www.youtube.com/embed/V2E0IzKGH0A" frameborder="0" allowfullscreen=""></iframe>This video is our first test of the system running the robot! Overall, it took us about a day and a half to get it to work with this robot - and most of it was programming and debugging interoperability with the CANbus for the motor controllers - in the future - this will all be available for anyone using the Redtree Hydra so that type of code won't need to be re-invented again. It will be packaged as part of our API libraries.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/18286-prototype-3-redtree-hydra-drone-wip">Prototype 3: Redtree Hydra Drone (WIP)</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5808/log/18286#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18286"><p>This prototype system is a bit of a work in progress. To show that the Hydra system isn't just made for rovers, we wanted to also put it on some drones. We are working on a bolt-on kit for getting it integrated into the typical commercial drones such as 3DR and DJI, but in the meantime, we're also building one ourselves. </p><p>Here's a few of the original renders of it:</p><p><img src="https://cdn.hackaday.io/images/8550601432222515229.jpeg"></p><p><img src="https://cdn.hackaday.io/images/9320371432222522673.jpeg"></p><p>And here's what we have so far. We made a laser cut frame to put everything on (everyone keeps telling us it looks to heavy to fly, but we'll see - it feels pretty light, and according to Tom's calculations is something like 800grams, and each motor provides 1000grams of thrust, so should be okay (Our computer is pretty light as well).</p><p><img src="https://cdn.hackaday.io/images/744281432222664750.jpg"></p><p>And a foam "body" to go over top of it:</p><p><img src="https://cdn.hackaday.io/images/6745921432222693297.jpg"></p><p>And here's a quick video of the Hydra spinning up the props:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/pRwbPKFhDAU" frameborder="0" allowfullscreen=""></iframe><p>We just need to find some time to try to fly it and work on the stabilization now. More to come...</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/18325-the-redtree-hydra-software">The Redtree Hydra Software</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5808/log/18325#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18325"><p>The last few posts were pretty much all about progress so far related to hardware. This update will be focused on software. What makes the Redtree Hydra run, how do you program it and what is the current state.</p><p><strong>FPGA Configuration / Programming:</strong><br></p><p>Since the Hydra runs an FGPA - and this is how all of the peripherals are connected (enabling really flexible I/O assignments and near plug-and-play robotics) - we have a configuration tool being completed where you specify with a graphical interface exactly what you are connecting to the robot. For instance, you might some UARTs, and some analog I/O for your particular robot configuration. You might want to come back later and add I2C as well - that is all easy and possible. Our toolchain will then configure the FPGA bitstream for you so you don't have to program in VHDL or Verilog. </p><p><strong>Real-time Linux:</strong><br></p><p>Next for the operating system. One of the key limitations of many of the existing platforms people use for robotics is that they aren't real-time. In some cases - they are "deep-embedded" and don't run Linux so they are totally dependent on the libraries created for the platform. We have a customized Linux 3.14-RT kernel. This means you get the benefits of real-time along with the flexibility of full compatibility with anything that runs on Linux. Furthermore, we run Debian, so you can also take advantage of anything in the Debian armhf repositories.</p><p><strong>Library Compatibilities:</strong><br></p><p>We know that people who build robots like to use whatever tools are available, and we aren't interested in re-inventing good things ourselves. Our systems are compatible right out of the box with ROS, OpenCV and other popular robotics tools. Further down the line we can see compatibility with Matlab / Labview as well.</p><p><strong>Redtree Middleware:</strong><br></p><p>In order to make it easy to access data from the sensors, motors and components connected to the robot, we also provide a library of function calls that work with the FPGA side of things. In addition, this library also provides a framework for easily programming real-time tasks, tasks that fire on data changes and lots of other cool features we'll post about in future updates. Finally, because the Redtree Hydra comes with built-in Wi-Fi, Bluetooth, 4G/LTE and Zigbee - part of the middleware manages all of these networks for you. The software will automatically form mesh networks between groups of Hydras in range of each other. If one network goes down (eg: Wi-Fi) the Hydra will automatically continue to use another option (eg: 4G/LTE). The same libary also provides the ability to send any data point (ie: variable) into the cloud with a single function call. </p><p><strong>Wireless Configuration:</strong><br></p><p>On first boot of a Redtree Hydra, the system creates it's own Wi-Fi access point which the programmer can connect to with a computer. The programmer can then visit a webpage and configure it, similar to how setting up a DD-wrt router works. This is an early version that just lets you configure the Wi-Fi SSID, name the robot (this is important if you want to write code in one robot that depends on a very specific second robot), and some of the cloud connectivity.</p><p><img src="https://cdn.hackaday.io/images/392291432306347765.png"></p><p><strong>Cloud Connectivity:</strong><br></p><p>On the cloud side, anything from the robot can be visualized in near real-time (all the data is dumped to a MySQL DB so you can use the cloud infrastructure we are building or use your own - you own all of your own robot data). Here's a short video that shows a little bit about what this means:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/BO8v-5RollY" frameborder="0" allowfullscreen=""></iframe><p>There will be more details to follow including some sample code in the coming days, but hopefully some of this has piqued people's interest. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/19047-redtree-hydra-software-model">Redtree Hydra: Software Model</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5808/log/19047#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19047"><p>In the Redtree Hydra system, everything is an <i>m_module</i>. This could be algorithms, entire robots, sensors, motors or anything else which might make up the "robot". This class defines what makes up the component (data types, other m_modules, m_devices etc).<br></p><p>A special type of <i>m_module</i> is an <i>m_device</i>. This is similar to an m_module except that it has defined behaviour states for handling failures. This is useful for things like motors or sensors. You might wish to attempt to land a flying device on a sensor failure to try to avoid a crash.</p><p>Repeating executable functions are given the type <i>m_worker</i> in the Redtree Hydra system. Functions which should run once are given the type <i>m_job</i>.</p><h2><span class="mw-headline">m_module</span></h2><p>An m_module has several important functions which define the behaviour when the module loads.</p><span class="mw-headline">configure()</span><p>The configure() function is called for every single tag, device, and module in reverse creation order.</p><p>The configure function lets the user set data dependicies for m_extern tags and low level settings like queue sizes based on low level settings. Which means this step is to setup the device/module/etc. into a state that it can then be initialized.</p><span class="mw-headline">initialize()</span><p>The initialize function is used to apply the configuration that was created in the previous step. This steps are separated because parent modules and devices will likely change the configuration of child tags/devices, and modules. (i.e. A the CANOpen protocol module will change the baud rate tag of the CANBus Peripheral, or a Motor will configure the gains of its Control System Module)</p><span class="mw-headline">setup()</span><p>The setup function is provides an intermediate step between initialize and the device/module/or tag starting its runtime behaviour. Sometimes this is necessary depending on the complexity of module/device or tag.</p><span class="mw-headline">start()</span><p>Finally, the start method is called. The start function of any tag, module, or device must bring that component to its normal runtime state, and execute "Started = true;" once the unit is functional and runtime capable.</p><h2><span class="mw-headline">m_device</span></h2><p>An m_device inherits all of the previous functions specified from the m_module above. In addition, there are some extra functions which are used to handle failure cases.</p><h2><span class="mw-headline">m_worker</span></h2><p>In order for a module or device to run executable functions periodically or continually, the code must be wrapped as an m_worker. This allows the code to function with tags and take advantage of the real-time and seamless networking features of the Redtree Hydra system.</p><p>Here is an example of a globally available m_worker:</p><pre class="hljs cpp">m<span class="hljs-emphasis">_worker&lt;void, void&gt; my_</span>task{"my_task",[<span class="hljs-link_label">&amp;</span>](<span class="hljs-link_url"></span>){
<span class="hljs-code">	cout &lt;&lt; "Executing my task function" &lt;&lt; endl;</span>
 
}};</pre><p>And here is an example of an m_worker defined within a class:<br></p><pre class="hljs cpp"><span class="hljs-keyword">class</span> myclass : <span class="hljs-keyword">public</span> m_device
{
	<span class="hljs-keyword">public</span>:
		<span class="hljs-keyword">using</span> m_device::m_device;
		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{}
		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;
		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{}
		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{Started = <span class="hljs-keyword">true</span>;};
 
	<span class="hljs-keyword">private</span>:
		<span class="hljs-keyword">int</span> sockfd;
		<span class="hljs-keyword">struct</span> addrinfo *servinfo;
		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;
		m_worker&lt;<span class="hljs-keyword">void</span>, <span class="hljs-keyword">void</span>&gt; myclass{<span class="hljs-keyword">this</span>, <span class="hljs-string">"myclass"</span>, std::bind(&amp;myclass::my_task, <span class="hljs-keyword">this</span>)};
};
myclass my_instance{<span class="hljs-string">"my_instance"</span>};
 
<span class="hljs-keyword">void</span> my_instance::my_task(<span class="hljs-keyword">void</span>)
{
	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Executing my task function within a class"</span> &lt;&lt; endl;
}</pre><h2><span class="mw-headline">Periodic User Functions</span></h2><p>User functions within an m_module or m_device can be run every <i>x</i> microseconds.</p><p>For instance, if you have an m_worker called my_task, you can run it every 500ms as follows:</p><pre class="hljs cpp">my_task.run_every(500000)</pre><h2><span class="mw-headline">Continual User Functions</span></h2><p>You can also have a function run continually (it does not wake up on enforced time schedules - it is essentially a non-realtime task)</p><p>This is the type of function you would run a busy loop inside of if, for some reason you needed one. Note - in either of these cases - both of the functions never return - they will just be called over and over again.</p><pre class="hljs cpp">my_task.run_when(Started);</pre>Right now, it is only possible to run continual functions on a trigger (for example when the module has started) - but in the future we plan to allow functions to just "run" as soon as possible by removing the constraint. See triggered functions below.<br><h2><span class="mw-headline">Triggered User Functions</span></h2><p>Continual or periodic functions can run on a trigger or for the case of a periodic function, just run every x microseconds. Here are a couple of examples of triggered functions:</p><pre class="hljs cpp">my_task.run_when(Started); <span class="hljs-comment">//continual, triggered</span>
my_task2.run_every_when(<span class="hljs-number">250000</span>, Started); <span class="hljs-comment">//periodic, triggered</span></pre>In both of these cases, the functions won't run unless Started == true.<p>This information can also be found on the <a href="http://www.redtreerobotics.com/wiki/index.php/System_Model">Redtree Wiki</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/21757-complete-rover-build">Complete Rover Build</a></h2>
                            <small class="authorship">21 days ago  &bull;
                                <a class="gray-link" href="/project/5808/log/21757#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21757"><h2><span class="mw-headline">Assemble the Rover Frame</span></h2><p>We used a rover kit from Robotshop: <a rel="nofollow" class="external free" href="http://www.robotshop.com/ca/en/lynxmotion-tri-track-chassis-kit.html">http://www.robotshop.com/ca/en/lynxmotion-tri-track-chassis-kit.html</a>. Assemble it according to their instructions to build the frame and attach the motors. You can also use other kits, but you may need to make adjustments to the current outputted to the motors if you use something else. It should look something like this when you are done. </p><p><img src="https://cdn.hackaday.io/images/1261641438174883536.jpg"></p><p><img src="https://cdn.hackaday.io/images/3674601438174908214.jpg"></p><h2><span class="mw-headline">Attach the motor controller</span></h2><p><span class="mw-headline">We used a motor driver from Robotshop: <a class="external free" href="http://www.robotshop.com/ca/en/sabertooth-dual-regenerative-motor-driver.html">http://www.robotshop.com/ca/en/sabertooth-dual-regenerative-motor-driver.html</a> - wire up the motors to each channel, wire up power and ground from the battery and attach the wires to the motors. It should look like this when you are done:<br></span></p><p><span class="mw-headline"><img src="https://cdn.hackaday.io/images/2267651438174955422.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/278351438174971212.jpg"><span class="redactor-invisible-space"></span></span></span></p><h2><span class="mw-headline">Insert the Redtree I/O card into the Redtree Hydra</span></h2><div><span class="mw-headline">Insert the ribbon cable from the Redtree Hydra into the I/O card. Attach the I/O card wiring harness to the card and then wire the wires into the motor driver. You can configure which wires / pins control the signals with the <a href="http://www.redtreerobotics.com/wiki/index.php/Attach_a_Sensor" title="Attach a Sensor">FPGA configuration tool</a>. We attach the appropriate wires from the configuration tool to the signal wires on the motor driver. Our I/O card also provides power and ground so we attach these to the motor driver as well. The yellow wires are the signal wires and the black is the ground wire on the motor controller.<br></span></div><div><span class="mw-headline"><br></span></div><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/l1goSt8_IUs" frameborder="0" allowfullscreen=""></iframe><p><span class="mw-headline"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/7056211438175023794.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/4737991438175038584.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/8402601438175049748.jpg"><span class="redactor-invisible-space"></span></span></span><br></span></span></p><h2><span class="mw-headline">Attach Voltage Regulator</span></h2><div><span class="mw-headline">The Voltage regulator converts the battery from around 11 volts to 5 volts which is what the Redtree Hydra requires. We also added a switch here so we can turn the whole robot on and off. We have this wrapped in this black styrofoam / electrical tape to give it a bit of a cleaner look.<br></span></div><div><span class="mw-headline"><br></span></div><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/IHsenBLyfSM" frameborder="0" allowfullscreen=""></iframe><p><img src="https://cdn.hackaday.io/images/4489821438175094859.jpg"></p><h2><span class="mw-headline">Attach Xbox Receiver and Cleanup</span></h2><div><span class="mw-headline">The last hardware step is attaching the Xbox receiver: <a class="external free" href="http://www.amazon.ca/HDE-Wireless-compatible-Controllers-Platforms/dp/B0096PLB9O">http://www.amazon.ca/HDE-Wireless-compatible-Controllers-Platforms/dp/B0096PLB9O</a> since we are using an Xbox 360 controller to drive the robot around, and cleaning everything up. We basically just cable tie the wires and hot glue everything down so that it stays in place.<br></span></div><div><span class="mw-headline"><img src="https://cdn.hackaday.io/images/1043051438175120847.jpg"><span class="redactor-invisible-space"><br></span></span></div><h2><span class="mw-headline">Programming the FPGA</span></h2><div><span class="mw-headline">For more detailed information, see <a href="http://www.redtreerobotics.com/wiki/index.php/Attach_a_Sensor" title="Attach a Sensor">FPGA configuration tool</a>. In this step, we use the web tool which will be available at <a class="external free" href="http://www.redtreerobotics.com/fpga">http://www.redtreerobotics.com/fpga</a> to program the fpga. This tells the Hydra what pins on the I/O card are attached to the motor controllers. In this case, we are using two digital I/O, so we click &quot;digital out&quot; twice to add this to the pinout, and click finish. <br></span></div><div><span class="mw-headline"><img src="https://cdn.hackaday.io/images/2628761438175156308.png"><span class="redactor-invisible-space">When you click finish, the tool will automatically generate the files to program the FPGA when the Redtree Hydra is booted. Take the SDcard out of the Redtree Hydra and insert it into your computer. The two files &apos;boot.bin&apos; and &apos;system_wrapper.bit&apos; should be moved to the SDcard. The SDcard can then be ejected and re-inserted into the Redtree Hydra. <span class="redactor-invisible-space"></span><br></span></span></div><div><span class="mw-headline"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><br><img src="https://cdn.hackaday.io/images/9563511438175179811.png"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/1404391438175201243.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/3363631438175205094.jpg"><span class="redactor-invisible-space"></span></span></span></span></span></span></div><h2><span class="mw-headline">Programming the Robot</span></h2><div><p>Next, turn on the robot, connect to its Wi-Fi network (default is rtr), and ssh to the robot. Default IP is 192.168.8.1. The username and password is &quot;redtree&quot; and &quot;robotics&quot;.</p><p>Check out the &quot;hello rover&quot; example from the Redtree Apps repository:</p><pre><span class="kw2">svn co</span> http:<span class="sy0">//</span>www.redtreerobotics.com<span class="sy0">/</span>svn<span class="sy0">/</span>redtree-apps<span class="sy0">/</span>trunk<span class="sy0">/</span> redtree-apps
<span class="kw3">cd</span> redtree-apps<span class="sy0">/</span>hello_rover</pre><p>or if you prefer git:</p><pre><span class="kw2">git clone</span> https:<span class="sy0">//</span>github.com<span class="sy0">/</span>redtreerobotics<span class="sy0">/</span>redtree-apps.git
<span class="kw3">cd</span> redtree-apps<span class="sy0">/</span>hello_rover</pre><p>You&apos;ll notice a makefile, a header file, and a .cpp file file. The Makefile has been setup to download the Redtree libraries automatically. It is also set up to automatically compile together any .cpp that exist within the folder, so feel free to add your own .cpp files as your projects become more complicated.</p><p>Compared with the previous two examples, we have spit this one into a header and source files. This shows a slightly different way to organize the files instead of doing everything in the source file. Let&apos;s start with the header file. There are a few key things here.</p><p>First is including the &quot;rt_input_user&quot; file. This brings in all the code for handling user input from Joysticks, Xbox controllers etc.</p><p>Second is &quot;XBOX_Joystick Joystick{&quot;Joystick&quot;};&quot; - this defines the xbox controller module within our rover module. It has it&apos;s own initialization, configuration etc. that occurs without the programmer having to worry about it.</p><p>The last thing is the line that defines the control routine as an m_worker. This means it is a real-time task that we can run on specific intervals. There are more details on this in the source file.</p><pre><span class="co2">#ifndef HELLO_ROVER_H</span>
<span class="co2">#define HELLO_ROVER_H</span>
 
<span class="coMULTI">/*
 * Basic code that makes a driveable rover with
 * a controller
 * 
 * Jason Ernst, 2015
 * Redtree Robotics
 */</span>
 
<span class="co2">#include &lt;rtr.h&gt;</span>
<span class="co2">#include &lt;rt_input_user.h&gt;</span>
 
<span class="kw4">void</span> configure<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
<span class="kw4">void</span> initialize<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
<span class="kw4">void</span> setup<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
<span class="kw4">void</span> start<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
 
<span class="kw2">class</span> redtree_rover <span class="sy4">:</span> <span class="kw2">public</span> m_device
<span class="br0">{</span>
	<span class="kw2">public</span><span class="sy4">:</span>
		<span class="kw2">using</span> m_device<span class="sy4">::</span><span class="me2">m_device</span><span class="sy4">;</span>
 
		XBOX_Joystick Joystick<span class="br0">{</span><span class="st0">&quot;Joystick&quot;</span><span class="br0">}</span><span class="sy4">;</span>
		m_worker<span class="sy1">&lt;</span><span class="kw4">void</span>, <span class="kw4">void</span><span class="sy1">&gt;</span> Control_Routine<span class="br0">{</span><span class="kw3">this</span>, <span class="st0">&quot;Control_Routine&quot;</span>, std<span class="sy4">::</span><span class="me2">bind</span><span class="br0">(</span><span class="sy3">&amp;</span>redtree_rover<span class="sy4">::</span><span class="me2">control</span>, <span class="kw3">this</span><span class="br0">)</span><span class="br0">}</span><span class="sy4">;</span>
 
		<span class="kw4">void</span> configure<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span>
		<span class="kw4">void</span> start<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span>
		<span class="kw4">void</span> control<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span><span class="sy4">;</span>
 
<span class="co2">#endif</span></pre><p>Let&apos;s look in more detail at what is inside the hello_rover.cpp file. This file contains the code that will run on the robot. You can open this with your favourite editor and work on the code in here. Again there are a few key things to notice. First is that the Control Routine does not start running until the Joystick has started. When it does start running, it runs every 1/10 of a second. When our rover module starts, the first thing it does it start the Joystick module. Lastly, the Control Routine checks to see if the FPGA is present and then writes the Joystick values to it (after scaling and deadbanding to ensure it is in a correct range). Note: if this code is run on a computer instead of the robot it will just output the message &quot;NO FPGA FOUND&quot; instead of actually writing to the motors.</p><p>One final thing to note is the addresses to write to - these addresses are generated by the FGPA programming tool, but in a future release we will automate this part so that instead of addresses a textual define is used instead. For instance MOTOR_1 and MOTOR_2 (which the developer would specify in the FPGA tool).</p><p>When you open the file you should see something like this:</p><pre><span class="co2">#include &quot;hello_rover.h&quot;</span>
<span class="co2">#include &lt;iostream&gt;</span>
 
<span class="coMULTI">/*
 * Basic code that makes a driveable rover with
 * a controller
 * 
 * Jason Ernst, 2015
 * Redtree Robotics
 */</span>
 
redtree_rover rover<span class="br0">{</span><span class="st0">&quot;rover&quot;</span><span class="br0">}</span><span class="sy4">;</span>
 
<span class="kw4">void</span> redtree_rover<span class="sy4">::</span><span class="me2">configure</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
	Control_Routine.<span class="me1">run_every_when</span><span class="br0">(</span><span class="nu0">100000</span>, Joystick.<span class="me1">Started</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> redtree_rover<span class="sy4">::</span><span class="me2">start</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
	Joystick.<span class="me1">StartCommand</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> redtree_rover<span class="sy4">::</span><span class="me2">control</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
	<span class="kw1">if</span><span class="br0">(</span>m_fpga<span class="sy4">::</span><span class="me2">isFound</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
	<span class="br0">{</span>
		m_fpga<span class="sy4">::</span><span class="me2">write</span><span class="br0">(</span><span class="nu12">0xC00</span>,<span class="nu0">1500</span> <span class="sy2">+</span> <span class="br0">(</span><span class="kw4">int32_t</span><span class="br0">)</span>scale_deadband<span class="br0">(</span><span class="nu16">0.01</span>, <span class="nu0">3200</span>, Joystick.<span class="me1">Left_Joystick_Y</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
		m_fpga<span class="sy4">::</span><span class="me2">write</span><span class="br0">(</span><span class="nu12">0x800</span>, <span class="nu0">1500</span> <span class="sy2">+</span> <span class="br0">(</span><span class="kw4">int32_t</span><span class="br0">)</span>scale_deadband<span class="br0">(</span><span class="nu16">0.01</span>, <span class="nu0">3200</span>, <span class="sy2">-</span><span class="nu0">1</span><span class="sy2">*</span>Joystick.<span class="me1">Right_Joystick_Y</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
	<span class="br0">}</span>
	<span class="kw1">else</span>
		std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;NO FPGA FOUND&quot;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span>
<span class="br0">}</span></pre><p>This file is a bit more complicated than the simple <a href="http://www.redtreerobotics.com/wiki/index.php/Hello_Robot" title="Hello Robot">&quot;hello robot&quot;</a> example from earlier, but still pretty simple. Our toolchain and libraries take care of all of the rest of the work for you. To compile, just type make in the terminal where you checked out the code with subversion.</p><pre><span class="kw2">make</span></pre><h2><span class="mw-headline">Restart and Test the Robot</span></h2><p><span class="mw-headline">For now we require the robot is completely reset when it is reprogrammed (otherwise we can&apos;t guarantee the state of the system when new user code is loaded. So turn it off and turn it on again and it will automatically load the code you just compiled. It will take up to 30 seconds but once everything loads everything the robot should be drivable with the controller.<br></span></p><p><span class="mw-headline"><br></span></p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/R9NE3NTCT1g" frameborder="0" allowfullscreen=""></iframe></div></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'EkX0VBMe-tAorBy_na1jYADLTi2lVNPk_1lA';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>