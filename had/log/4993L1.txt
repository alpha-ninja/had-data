<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Dual Channel Battery Charger/Analyzer &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4993%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4993-dual-channel-battery-chargeranalyzer">Dual Channel Battery Charger/Analyzer</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">This is an efficient dual channel battery charger/analyzer for maintaining rechargeable batteries with programmable parameters and logging.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/10708-kc-lee" title="Visit Profile">K.C. Lee</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4993#discussion-list" title="See Comments">4 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4993-dual-channel-battery-chargeranalyzer">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4993/logs/sort/newest">Newest</option>
                    <option value="/project/4993/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4993/log/15788-history-lesson">History lesson</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/15788#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15788"><p>Note: Rev. 1.0 and 2.0 were designed with the parts I have on hand, while 2.1 is optimized for cost and production.<br></p><h2>Current revision: 2.1</h2><p>Planned features/improvements:</p><ul><li>Improve A/D performance</li><li>Port to cheaper processor: faster, larger FLASH memory, USB, 12-bit A/D, built-in debugger</li><li>Switch to Micro USB connector, support mobile phone chargers.</li><li>Increase charge/discharge current capacity</li><li>Improve firmware and PC software</li><li>Cost reduction, design clean up and be production ready.</li></ul><p>Lessons learnt so far from prevision revisions</p><h2>Revision 2.0:</h2><p>New features/improvements:</p><ul><li>Dual independent channels</li><li>USB, remote PC operation</li><li>Discharge circuit added</li><li>Reverse polarity added</li><li>LCD, buttons added for stand alone</li><li>New and improved PWM duty control scheme</li></ul>To be fixed in revision:<ul><li>Limited FLASH memory in Atmega 8A part</li><li>Limited A/D resolution to 10-bit</li><li>V-USB limitations</li></ul><h2>Revision 1.0:</h2><p>Single channel, charger only.  Programmable via current source. on external PWM controller chip.</p><p><img src="https://cdn.hackaday.io/images/3161931427651723527.png"></p><p>New features/improvements:</p><ul><li>External PWM uses high frequency, small component sizes, low ripples. </li><li>Battery voltage can be higher or lower than supply</li></ul>To be fixed in revision:<ul><li>Discrete gate driver cannot supply sufficient current to turn on/off MOSFET fast enough leading to efficiency losses.</li><li>Current feedback control stability issues</li><li>Limited A/D 8-bit resolution, limited uC I/O </li><li>Serial communication is so 1990's.</li><li>Limited user interface</li></ul></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/16054-url-get-pid">URL: Get PID!</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/16054#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16054"><p>Since I am no longer using V-USB, I'll need a new PID/VID for this project.  <br>HaD article:  <a href="http://hackaday.com/2015/04/03/usb-pids-for-all/">USB PIDs For All<br></a>GitHub link:   <a href="https://github.com/FPGA-Computer/pidcodes.github.com">Get your PID here</a></p><p>Above link should get a new PID for this project.   <br>I guess I should have read the instructions more carefully.  I'll get a new code when I actually get some code released.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/16087-nickle-dime-part-1">Nickle &amp; Dime - part 1</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/16087#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16087"><p>I did a search on digikey and here is what I found for microcontrollers with USB (prices sorted lowest first in QTY 1 Canadian dollars)</p><p><img src="https://cdn.hackaday.io/images/2065961428184034191.jpg"></p><p>Looks like SiLabs 8051 based uC are the ones with the most attractive pricing.  The ones that are likely to fit my requirement are the EFM8UB10F16G-B-QFN28 and the EFM8UB20F32G-A-QFN32.  The UB2 series is based on <a href="http://community.silabs.com/t5/8-bit-MCU/EFM8-is-Here/td-p/140086">older core</a> and doesn't have Charger Detection.</p><p><a href="http://elm-chan.org">Elm-chan</a> wrote <a href="http://elm-chan.org/junk/32bit/report.html">Invitation to 32-bit world</a> (Japanese report) which contains the follow code density efficiency comparison chart (lower is better)</p><p><img src="http://elm-chan.org/junk/32bit/size.png">One of the things to watch out for is that the 8051 family suffers quite a bit from low code density if you use a lot of complex and/or large data structures and memory moves.  There is a DP (Data Pointer?) which is the only register capable for indexing and accessing memory in the 16-bit address space. The rest of the code isn't too bad, but I'll stay away from floating point libraries.  So the 32kB part might be a safer bet than the 16kB at this time as there are no drop-in migration path for this new product line with higher memory density (yet). I could likely make my 2.0 8kB AVR code fit in 16kB 8051, but not the smartest move for an initial proto build.<br></p><p>So what does this buy me over the old Atmega8 used in my 2.0?  The "Universal Bee" family come with USB 2.0 Full Speed client H/W, USB BCv1.2 (USB charging), 12-bit ADC, built-in 3.3V LDO, on-chip debugger, internal 48MHz oscillator and the usual peripherals that you would expect for a 8-bit microcontroller.</p><p>FYI: AVR with USB are twice as expensive. The ARM chips (e.g. <a href="http://www.digikey.ca/product-detail/en/STM32F070CBT6/497-15099-ND/5051734">STM32F070CBT6</a>) with 128kB FLASH are cheaper than that.</p><p><img src="https://cdn.hackaday.io/images/7750431428188250997.jpg"></p><p>--------------------------------------------------------------------------<br>We are only human!?</p><p>Digikey used the wrong units for FLASH size for the EFM8U.  First one should be 8k bytes (not 20k bits) and the rest of the 16/32 k bits should be 16/32 k bytes.</p><p>Here is a not so min/typ/max for parameters D and E in the footprint.  The min should be 4.9.</p><p><img src="https://cdn.hackaday.io/images/5617781428289415718.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/16095-nickle-dime-part-2">Nickle &amp; Dime - part 2</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/16095#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16095"><p>The following shows the current sensing circuit in rev 2.0.  A <a href="http://en.wikipedia.org/wiki/Differential_amplifier">differential amplifier</a> is used to sense the voltage across the sampling resistor and is centered at mid-rail so that both charge/discharge currents can be measured.   This circuit requires precision matching resistors (10k and 1k) and a power supply rail high enough to extend common mode range of the opamp.</p><p><img src="https://cdn.hackaday.io/images/5909871428325626578.png"></p><p>There is also a hidden issue with this for high side sensing as voltage at the battery terminal is biased by the circuit roughly at mid rail. This makes it difficult to detect when there are no batteries connected.  That can be fixed by sensing current at the ground terminal.</p><p>Can we do better than that?  By sensing at the ground terminal, we have eliminated the common mode voltage (so no fancy circuits needed). The circuit simulated below is a variation of a voltage divider consists of R8 and R10 to bias the output so that both +/- currents can be measured in the uC.  What is different is that the lower branch of the divider is reference not to the ground, but to R6.  As the voltage across R6, so does the voltage of the divider.</p><p>As long as the battery internal resistance and R6 are kept<strong> small</strong>, this produces a rather linear relationship as show in the graph above.<br></p><p><img src="https://cdn.hackaday.io/images/8407831428191089126.jpg"></p><p>In this example, a 2.86A changes in current (from -1.43A to +1.43A) can be seen as a voltage change of 0.59V. Using a 12-bit ADC with 1.65V full scale, this corresponding to a change in numeric value of 1464. i.e. we have a resolution of about 2mA which is good enough for our application.</p><p>In rev. 2.0, the Atmega8 I used only has a 10-bit (vs 12) ADC and was using 3.3V (vs 1.65V) as a reference with the amplifier provides a 10X gain. i.e.1/4 * 1/2 * 10 = 1.25X the resolution. This new circuit has similar resolution but without the complexity.</p><p>For battery packs that has an internal <a href="http://en.wikipedia.org/wiki/Thermistor">thermistor</a> connected to the ground terminal, ground current sensing can introduce a DC offset of  I*Rsense. This was the reason why high side sensing was used in 2.0. The actual offset can be calculated and subtracted from the measurement. Alternatively, an additional (analog) I/O pin can be used to measure that offset in the ADC directly.<br></p><h2>Analysis</h2><p>To convince myself, I have <a href="http://www.linear.com/solutions/1815">exported</a> the raw data to Excel and used the regression analysis tool. The <a href="http://en.wikipedia.org/wiki/Errors_and_residuals_in_statistics">residual errors (fitting error)</a> are very small.  No wonder why LTSpice only generated 6 data points without using with directive: <em><strong>.dc v4 -0.5 0.5 0.001</strong></em></p><p><img src="https://cdn.hackaday.io/images/5334781428323933638.png"></p><p><img src="https://cdn.hackaday.io/images/4830381428324537819.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/16159-pwm-part-1">PWM - part 1</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/16159#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16159"><p>PWM output is a cheap way of generating an analog voltage from a digital output in a microcontroller.  There is a bit of trade off on the RC filtering of the AC ripples vs how fast the output settles.  (If you want fast performance and high resolution, you'll need a DAC.)</p><p>This is the old 2nd order filter used in 2.0.  The output ripple is around +/-2mV while the output starts to settle at around 100ms.  </p><p><img src="https://cdn.hackaday.io/images/3733361428332505602.png"></p><p>By going to higher order RC filter, I can improve both settling timing and ripples. Each stage gives you roughly a factor of 10 reduction in the ripple as you probe at the output of each of the subsequent stages.</p><p>The traditional way is to match the RC time constant, but the R values goes up 10x each stage to not to affect the previous one too much messing up the math.  I am however optimizing for manufacturing by using same values/resistor packs and playing in Spice instead. </p><p><img src="https://cdn.hackaday.io/images/583561428332922303.png"></p><p>I zoomed in to around 30ms mark when the output starts to settles down.</p><p><img src="https://cdn.hackaday.io/images/7160881428333101005.png"></p><p>So with an extra stage and playing with the RC values, I managed to decrease the settling time quite a bit.  This means the the PID update loop can be faster which helps to ramp up  the charge/discharge current. The long delay was an annoyance with 2.0. </p><p>Sometimes, I need put put some dimes back in to make it a better design...</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/16821-power-circuits-layout">Power Circuits Layout</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/16821#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16821"><p>Been busy with my other project.  Here is where I am at layout.  This is the new power section of the dual charger.  The layout in a switch mode power supply is actual easy once you have figure out how the high current AC paths in the circuit.  This is similar to the a high speed digital design in the sense that you want to minimize the size of the current loops and return paths. </p><p>The design is a mirror image centered around a dual MOSFET and its dual gate driver.</p><p><img src="https://cdn.hackaday.io/images/722031429758517455.jpg"></p><p>This is what it looks like in 3D.</p><p><img src="https://cdn.hackaday.io/images/4542711429758425587.jpg"></p><p>New power components: Dual MOSFET, coupled inductors, larger diodes, new MOSFET driver.  I'll talk about them in detail in  the next update.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/16890-power-components-more-nickel-dime-time">Power Components - more nickel &amp; dime time!</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/16890#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16890"><p><strong></strong>It is a bit ironic that the rev 2.0 was mostly built from parts that I have recycled from old electronics.  The goal this time however is trying to tweak the design for production which means that I have to use parts that can be sourced easily and available in quantities.</p><p><img src="https://cdn.hackaday.io/images/3266731429907457490.png" style="width: 754px; height: 516px;" width="754" height="516"></p><p><strong>MOSFET</strong></p><p>Alpha Omega AON7804: Dual N-MOS 30V, 22A, &lt;26mΩ, Ciss: 740pF   This is similar to the 20N03 I was using before.  It is a Dual N-MOS and is cheaper.  :)</p><p><strong>MOSFET Driver</strong></p><p>Contrary to the usual newies tendency of thinking of things only in the DC world, here is a lot of gate current needed to charge/discharge in a hurry.  The benefit of switching at high frequency - you only need to store a small amount of energy before the next burst is due. i.e. smaller L &amp; smaller C.  There is also less ripples at the outputs. In directly, it translates to cheaper/much smaller designs as it use less materials and cost less to ship.</p><p>It is important to minimize the amount of time that the MOSFET is spent in its <a href="http://electronics.stackexchange.com/questions/76071/meaning-of-mosfet-linear-region-in-the-context-of-switching-losses">transition</a> between fully on/off. These losses adds up very quickly if you are switching a few hundred thousand times a second.  I made the mistake in Rev. 1 of the design thinking that a discrete NPN/PNP buffer (~200mA sink/source capacity) was sufficiently for the job, but the MOSFET was getting too hot.  I switched to a TI 2A driver in rev 2.0 and the two MOSFET was barely warm.</p><p><img src="https://cdn.hackaday.io/images/3647681429903090101.png"></p><p><img src="https://cdn.hackaday.io/images/2736631429903804893.png"></p><p>The table above is from Microchip AN 799 "Matching MOSFET Drivers to MOSFETs". The recommended driver is 1.2A/1.5A  A rise/fall time of 20ns is just about right for my application.  (20ns *2 for ~250kHz switching frequency (4us period) is 1%.)</p><p>The TI <a href="http://www.ti.com/product/tps2812?keyMatch=tps2812&amp;tisearch=Search-EN-Everything">TPS2812D</a> was nice, but it was a bit overkill for this design.  I am going to use the much lower cost Microchip <a href="http://www.microchip.com/wwwproducts/Devices.aspx?product=TC4426A">TC4426A</a> part even though I have to implement the regulator that was include in the TI part with a few discrete parts.  Also having the choice of inverting/non-inverting is useful.</p><p><strong>Schottky Diode<br></strong>I want to increase the rating of the 1A diodes I used. It turns out that the 3A Schottky diodes was actually cheaper than the 2A one.  So I guess that an easy decision to make.</p><p><strong>Coupled Inductor</strong><br>I am going to use the <a href="http://www.bourns.com/ProductLine.aspx?name=power_ind_smd_dual_winding_shielded">Bourn SRF1260</a> Dual Winding Shielded inductors instead of my hand wounded inductors.   They have high saturation current which is important as there is a high amount of <a href="http://www.eetimes.com/document.asp?doc_id=1278582">circulating current</a> in a SEPIC topology.  There is also the taller and higher rating  SRF1280 series for the same footprint. </p><p><strong>Capacitor<br></strong>When you are dealing with high frequency switch mode power supplies with high AC currents, low ESR requirements, Multilayer Ceramic Capacitors (MLCC) are a good fit.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/17291-keeping-up-with-the-times-prototyping-with-qfn-and-bga">Keeping up with the times - Prototyping with QFN and BGA</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/17291#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17291"><p>These days if you want to use the latest parts or to keep manufacturing cost down, you have to deal with SMT packages. To bridge the gap between your prototype and manufacturing, you have to be able and willing to adapt.    Sometimes there are no easy alternatives as the manufacturers really care the most about their bulk customers.  I prototyped with a 0.4mm pitched CSB (Chip Scale BGA) in my other project because I have to.</p><p>Here are the lessons I have learnt from my other project: </p><ul><li>Their silk screen can be way off and might ended up on your pads (see picture below for 0.5mm QFN).  I guess using the silk screen outline  for eyeballing alignments is off the table.</li><li>Trust but verify!  Always verify your footprints especially for parts from a trusted libraries you haven't used before!  I have seen way too many of the Eagle PCB parts libraries with  <a href="https://hackaday.io/project/1347-fpga-computereval-board/log/5150-musical-chairs-human-sardines">their</a> <a href="https://hackaday.io/project/1347-fpga-computereval-board/log/6605-defect-list"> deviations</a> from the datasheet that I don't think I'll use them in future projects.  <a href="https://hackaday.io/project/1347-fpga-computereval-board/log/3276-project-log-update">This</a> is why you should check the footprint in 3D.  I make my shares of boo boo too.</li><li>The Chinese PCB place I used a year ago for my FPGA board has made some improvements.  They now can handle solder mask between 0.5mm fine pitched parts as well as my CSB!</li><li>They fix up design violations and tweak things for their process.</li><li>They have actually done etest on this batch.  Also saw it on my <a href="https://cdn.hackaday.io/images/2618011407596609933.jpg">last board (large image)</a> from them.</li></ul><p><img src="https://cdn.hackaday.io/images/7637541430573240115.jpg"></p><p>I saw actual mechanical scratch marks on the pads that were there before - they actually etested these boards for connectivities! Also evidence of them fixing the shorted traces by hand!</p><p><img src="https://cdn.hackaday.io/images/398181430574849896.JPG"></p><p>I usually specify 8 mils separation in my fills in the isolate parameter (picture below) out of habit and now I think it is a good idea!</p><p><img src="https://cdn.hackaday.io/images/9392121430575126327.jpg"></p><p>Here is how they deal with design violations.  They adjust the offending features!   It is not WYSIWYG anymore!<br>Notice the pads on either sides of the slots are narrower than the rest?</p><p><img src="https://cdn.hackaday.io/images/4990341430575862340.PNG"></p>Here is on on my Micro USB connector.  The two pads adjacent to the alignment holes have been trimmed.  That's something I couldn't have fixed that inside Eagle.   <p><img src="https://cdn.hackaday.io/images/9151111430575942394.PNG"></p><p>Seems like the PCB vendor adjusted the soldermask aperture on my 0.4mm pitched CSB for their tolerance.  It is good that they can handle the soldermask. Once again major silkscreen alignment issues on the x-axis and stray silkscreen speckle on pad! (2nd row, left most pad).  Also notice the strike marks near the center of the pads. They are made by their flying probes in etest. </p><p><img src="https://cdn.hackaday.io/images/4607691430577828397.PNG"></p><p>Edit:  Contrast that with OSH board I have just received in the mail in a purple package!  Almost perfect alignment and much tighter solder mask.  For some reasons, they do not have soldermask over the vias.  The silk screen alignment is tighter and they remove silks screen covering the exposed vias.   </p><p>(The trace going to the upper left hand corner is intentionally not connected to the pad directly.)</p><p><img src="https://cdn.hackaday.io/images/8881741431367331333.jpg"></p><p>This is how it looks after reflow.  (0402 capacitors in picture) That PCB works!</p><p><img src="https://cdn.hackaday.io/images/8538981430578994241.jpg"></p><p>As for soldering the QFN, DFN parts for <em>prototyping</em> with my previously method of reflowing pre-tinned pads, I recommend that the pads on the parts (except the heatsink pad) should also be pre-tinned. That seems to solve the issues of not having enough solder with <a href="https://hackaday.io/project/1347-fpga-computereval-board/log/4362-related-soldering-experiment-side-activities">my method</a> (or is it my madness?).  Have to make sure that the center heatsink pad do not have too much solder on it as the part can float above the rest of the pads.  I reflow the whole board afterwards to make sure that I haven't missed any of the connections as well as releasing out mechanical stresses because I was heating up a small section of the board at a time.</p><p>I also have a lot of luck reflowing small parts such as 0402 and smaller.  It make soldering extremely easy. They might seem intimidating to beginners, but they are actually easier than soldering.  Learn to adapt or be stuck. "We have the technology. We have the capability ..."  </p><p>I'll need to start shopping for a proper reflow tool and a better microscope.  </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/17299-to-bee-or-not-to-bee">To Bee or not to Bee?</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/17299#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17299"><p>Normally, I wouldn't bother with an eval board, but when it is the only tools that I know of would program the chip, that kind of limits my choice in the matter.  They didn't mention which of their current tools would support the new chip series at all. </p><p>While it was nice of them to have a on-board debugger that can be used for your own custom boards, but they certainly make it more difficult by picking a fine pitched (1.27mm) connector and not including a cable nor offers the option of buying one.  You know even a non-populated footprint for a common 2mm or 0.1" pitched connector in that vast empty space would have been nice.</p><p><img src="https://cdn.hackaday.io/images/164041430599850945.jpg"></p><p>The little green PCB was a quick and dirty last minute board that I made to break out the connection for 0.1" pitched header.   The connector on the eval board is a Samtec part, but I used a FCI <a href="http://www.digikey.com/product-search/en?lang=en&amp;site=us&amp;keywords=609-3759-ND&amp;x=0&amp;y=0">20021311-00020T4LF</a> as it was the cheapest through hole receptacle that has sturdy pins in the picture. Most of the 1.27mm pitched parts are surface mount as you have to start worrying about drill spacing clearances.  It was a bit of gamble as I have to order the eval board, the connector in the same order.  Sure enough the cheaper connector was sturdy and fits like a glove even when it wasn't from the same vendor!  (A bit of reading up the mechanical drawings of the parts help too.)</p><p><img src="https://cdn.hackaday.io/images/9010901430601475051.png"></p><p>Only the 6-pin connector is needed for this series, but I breakout the full set as it looks like the debugger is a custom Segger J-Link with the trace function for high end ARM chips.  To turn the eval board into a programmer, there is a hidden "Kit Manager" option that shows up when it is connected and allows you to select how the debugger is connected (In/Out/Off/MCU).  Order up some "Dupont" cable from your usual Chinese electronic places and you are all set to debugging your own design.</p><p>Lesson of the day is that you got to think ahead of how to program the chips in both development and for production.  This should be an important consideration for the chip vendor.</p><hr><p>The programming cable is critical .  I ran into a lot of stability issues with these loose wire Chinese "Dupont" cables..  Wasted more than 1 week chasing down the problem.  Now I made a short (3-4") one out of CAT5 patch cable and it seem to cure the issue.  Now that I looked their schematic, I think I know why.  They didn't use *any* series termination resistors on the signals!  74LVC series is fast, so you can get away under 2-3 inches or so of loose wire cabling.  The CAT5 twisted pairs helps a bit, but still too high impedance (~100 ohms) vs the LVC driver (probably in the 30 ohms range).  So really recommending adding 100 ohms or so series termination resistors at the connector for long and/loose cables.</p><hr><p>Their new IDE (based on Eclipse) now comes with a compliment license for Keil 8051 C Compiler and has source code/assembly debugger. Mac and Linux versions are also available!  How cool is that?</p><p><img src="https://cdn.hackaday.io/images/4273061430919123245.png"></p><p>Now it would be nice to have an option to turn off the disassembly as the big wall of text can be distracting.  </p><p>The registers are annotated and you can modify them on the fly just like everyone else. </p><p><img src="https://cdn.hackaday.io/images/1630061430917781185.png"></p><p>I played with some of the Configurator that generates code. When it works, it works reasonably well. Generating a skeleton for USB device is relatively painless as the low level is abstracted by their driver. This makes migrating between the families easy. The generated code is even readable.</p><p>Like I said before, the tools like hardware debugger makes a big difference if you are playing with a new chip. Buy the $30 eval board and you are all set.  Seriously, who wants to be stuck on a serial printf() statements that belongs to the 1980's any more?  When you compare the <a href="https://hackaday.io/project/4993-dual-channel-battery-chargeranalyzer/log/16087-nickle-dime-part-1">pricing, and features</a>, you can see why I am tempted to switch to this family for my 8-bit projects.</p><p>I found a few erratas and glitches with the IDE. So far email/forum supports was good - reasonably speed and knowledgeable staff. Hopefully, they'll get the few hiccups fixed in future updates. I heard that there is one update arriving very soon.  <br></p><p>BTW: I'll take any bribes from any sponsors for free tools, eval boards, free samples etc. If you want your parts to be designed in, you'll need to have competitive price, features and development tools.</p><hr><p>The glue on the LCD was starting to peel off due to the summer heat, so I take a look at what's under there.  That's what's under the LCD.  Found something interesting:  ST Inside!  There is also a SPI FLASH chip along with the STM32F103.</p><p><img src="https://cdn.hackaday.io/images/2848661434672088384.jpg"></p><p>For those who are interested, the following is what the embedded Segger debugger supports.</p><p><img src="https://cdn.hackaday.io/images/9107651434672224548.png"></p><hr><p>Learnt a few things so far:</p><ul><li>The Configurator tool didn't generate the code to initialize undervoltage detector as a reset source.  This causes a reset when your try to write to FLASH. I now have working code for EEPROM emulation ported from SiLabs app notes..</li></ul></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4993/log/18116-sawtooth-generator">Sawtooth Generator</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4993/log/18116#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18116"><p>In order to generate a PWM the analog way, I need a sawtooth wave.  Previously, I used a 555 timer along with a constant current source.  Is there a cheaper way of building this?</p><p><img src="https://cdn.hackaday.io/images/4957201431970968361.gif" alt="" style="margin: auto; display: block;"></p><p>I have decided to make my design out of comparator as it is cheaper.  So it turns out at QTY 1, a quad costs the same as a dual.  I&apos;ll probably going to use a dual footprint for either.<br></p><p><img src="https://cdn.hackaday.io/images/6023491431971837465.gif"></p><p><img src="https://cdn.hackaday.io/images/858551431971923410.gif"></p><p>Here is a squarewave oscillator from the LM193 datasheet.</p><p><img src="https://cdn.hackaday.io/images/3146011431973956095.gif"></p><p>Here is the circuit the circuit I came up with and simulated in LTSpice.  Q = C*V, it follows that dV/dt = I/C If we charge C2 with a <a href="http://en.wikipedia.org/wiki/Current_source">constant current source</a>, we&apos;ll get a linear ramp - close enough for my application.  Non-linearity, drifts are taken care off by the firmware PID feedback loops.  </p><p><img src="https://cdn.hackaday.io/images/5886731431970417253.gif"></p><p>As the voltage at C2 rises above 3.3V, U2 output goes low, thus discharging C2 and the whole cycle repeats itself.  (U2 is slow with a propagation delay of about 300ns, so the ramp rises to 3.6V.)  C1 provides a positive feedback during the transition.  The frequency is about 220kHz.</p><p>As seen from the plot of Ic(Q1), the amount of current varies by &lt;1% while the capacitor charges. The 555 circuit has a much faster comparator and a much steeper falling edge.  Since my design is not going to be near 100% duty cycle, the slope there have no effects.</p><p>This is the 555 design for comparison.</p><p><img src="https://cdn.hackaday.io/images/8760011437875722992.png"></p><p><img src="https://cdn.hackaday.io/images/7194251437875868990.png"></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'Ymk6uaxt-cnok8Crt6ElK7BD1Tik-8srC-Ag';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>