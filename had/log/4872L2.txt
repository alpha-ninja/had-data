<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; SubPos - Positioning System &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4872%2Flogs%3Fpage%3D2">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4872-subpos-positioning-system">SubPos - Positioning System</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A &#34;dataless&#34; Wi-Fi positioning system that can be used anywhere GPS can&#39;t.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/16981-blecky" title="Visit Profile">Blecky</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4872#discussion-list" title="See Comments">64 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4872-subpos-positioning-system">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4872/logs/sort/newest">Newest</option>
                    <option value="/project/4872/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4872/log/15867-pic16lf1824-programming">PIC16LF1824 Programming</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15867#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15867"><p>If you own the PICkit this is a pretty easy process, and I recommend if you are going to be doing a lot of PIC development to invest the small amount into one.<br></p><p>First you want to look at the following manuals:</p><p>PICkit 3 Programmer - <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/PICkit_3_User_Guide_51795A.pdf" target="_blank">http://ww1.microchip.com/downloads/en/DeviceDoc/PICkit_3_User_Guide_51795A.pdf</a><br>PIC16LF1824 Programming Specification - <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/41390D.pdf" target="_blank">http://ww1.microchip.com/downloads/en/DeviceDoc/41390D.pdf</a></p><p>The <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/41419A.pdf">datasheet</a> is also important.</p><p>Inside those documents you will find the information you need to connect the chip up to the programmer, ready to program.</p><p><span></span>In the PICkit 3 manual, you want to look at figure 1-2:</p><p><img src="https://cdn.hackaday.io/images/6669051427799828602.png"></p>And in the programming specification figure 2-6:<p><img src="https://cdn.hackaday.io/images/2102181427799862260.png"></p>In this case we have 5 pins to connect (the ones marked in bold in figure 2-6). Note: VDD needs to be connected even if using your own power supply. <p>We have an EUSART in the micro which we can use for one of the UARTs. Take note of the following table from the datasheet:</p><p><img src="https://cdn.hackaday.io/images/5004801427878767486.png"></p> Once you have connected them it should look something like this (I have also connected the ESP3288 and USB to UART too):<p><img src="https://cdn.hackaday.io/images/4694741427803515763.jpg"></p>You are now ready to start programming/debugging in MPLab. Make sure you select the correct variant (in this case the LF model without an internal voltage regulator) in MPLab.</div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/16205-nodes-working">Nodes Working</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/16205#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16205"><p>Just a quick update to show the nodes working with the PIC16LF1824:</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/Uo2qyw0wrI4" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>In the video you will still notice the old AP name when the new one appears, this is just Android not timing out older values for a bit. It is then being decoded by the Android application from a <a href="http://hackaday.io/project/4872/log/15743-android-position-decoder">previous post</a>.</p><p><img src="https://cdn.hackaday.io/images/4974261428408564207.png"></p><p>I will have these prototyped up shortly, then I can get onto some trilateration!</p><p>Edit: one down, 4 to go:</p><p><img src="https://cdn.hackaday.io/images/9273741428497954340.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/16510-trilateration">Trilateration</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/16510#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16510"><p><strong></strong>For the trilateration process in the Android application, I am using a tweaked <a href="http://en.wikipedia.org/wiki/Path_loss">path loss</a> algorithm to determine the distance with various coefficients that will be selectable with 2 of the reserved bits. </p><p>This algorithm would be application dependent, but the schema will recommend that the node installer determines what type of environment surrounds it, to generate a more precise position calculation (more on this later).</p><p>Once the application has determined the distance between the receiving device and the nodes, it uses a <a href="http://en.wikipedia.org/wiki/Non-linear_least_squares">non-linear weighted least squares</a> analysis technique to reduce the error from nodes situated further away from the receiver, while also determining its position.</p><p>The above is currently implemented and running so far, although it&apos;s a little slow so I will update once I&apos;ve optimised it further (this operation takes ~400ms on a mid range Android phone to calculate position from 5 points).</p><p>Here are some simulated points running through the trilateration algorithm (actual code output to verify it&apos;s working). The person indicates the actual client position and the blue point is the calculated output. The error in this instance is ~0.6meters (there is error from path loss estimates and rounding as well as the way the NWLS method handles points that are further away).</p><p><img src="https://cdn.hackaday.io/images/4650361429322761507.png"></p><p>Edit:</p><p>I have now created a new Android test application that will display the location of known nodes as well as calculate the current client position from these (and allow us to compare it with the current GPS position):</p><p><img src="https://cdn.hackaday.io/images/2920091429540000642.png"></p><p>Now all that&apos;s left to do is test this with all the nodes!</p><p>The <a href="https://hackaday.io/project/4872-subterranean-positioning-system-sps/log/15677-coder-update">coder</a> and <a href="http://hackaday.io/project/4872-subterranea-positioning-system-sps/log/15676-when-standards-arent">schema</a> are updated too.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/16960-nothing-good-comes-easy-mk2">Nothing Good Comes Easy MK2</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/16960#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16960"><p>I had a post up here the other day to show how to augment an existing wireless access point with the encoded SPS SSID data (on a Billion BiPAC 7800VDPX). As it turns out, the method I was using (URL encoding) had issues with sending the correct data through the web form. This is because "<a href="http://en.wikipedia.org/wiki/Percent-encoding">for a non-ASCII character, it is typically converted to its byte sequence in UTF-8</a>".</p><p>So I tried another method by trying to apply the SSID byte data via ssh/telnet to the router:</p><pre class="hljs bash">sh
wlctl <span class="hljs-operator">-a</span> wl0 down
wlctl <span class="hljs-operator">-a</span> wl0 ssid -C <span class="hljs-number">1</span> `<span class="hljs-built_in">echo</span> <span class="hljs-operator">-ne</span> <span class="hljs-string">"\x53\x50\x53\x3a\x41\x55\x53\x01\x01\x63\x3c\x15\x0b\x07\x3c\x76\xff\x31\x07\x5b\xcd\x15\x9c\xb0\x07\x01\x01\x20\xd5\x01\x32"</span>`
wlctl <span class="hljs-operator">-a</span> wl0 up</pre> Unfortunately any values greater than 0x7F were coming back as what looked like UTF-8 encoded multibyte values (in fact, the SSID being returned was an invalid length of 38 characters with the above), but in fact they weren't:<pre class="hljs bash">0xff =&gt; (-17,-93,-75)
0xcd =&gt; (-17,-65,-67) &lt;= SAME!?
0x9c =&gt; (-26,-71,-76)
0xc4 =&gt; (-17,-65,-67) &lt;= SAME!?</pre><p>This is certainly not standard.<br></p><p>After wasting a day on this, I decided instead to change the schema and coder hopefully for a last time in the interests of becoming close to 100% compatible with all devices. While the nodes support the old schema without problems, the process of getting existing devices to support SubPos should be trivial, rather than trying to hack them to work.</p><p><img src="https://cdn.hackaday.io/images/6656811430461086235.png"></p><p>The new coder source is <a href="https://bitbucket.org/blecky/subpos/src/f4c47478e4b087f19234ea6d9e4c2981e11ab166/coder/?at=master">here</a>.</p><p><span class="read-more-tag"><img src="https://cdn.hackaday.io/images/6758231430059999275.png"></span>I have removed the country code as it was slightly redundant (as well as the colon on the tag). I have also shifted the layout around to make decoding easier to read. I increased the range and precision of TX power values (most chipsets only give 0,1 decimal points of precision), increased the number of coefficient values and reduced the altitude bits to give a range of +-67km (deepest crust depth is ~50km and next smallest value possible is 33km; if you removed another bit).</p><p>The coding mask is now a two stage process, first we use the 21 effective bits out of 24 bits to encode out &gt;0x7f values (by removing removing the MSB of each byte and placing it into the coded data). These 21 bits are spread over 24 bits so they never become greater than 0x7f, i.e. this shifting step automatically codes them out. </p><p>There are now 32 bits with 28 effective bits used to remove unsupported characters. This has to now cover a total of 168+24+32=192bits (the SPS data, 0x7f mask and the unsupported mask). </p><p>For the entire SPS dataset, we could do things in 7 bit chunks instead of the 0x7f mask, but it makes it harder to be neater as 16/24/32 bits factor to 8 really well. So we sacrifice processing speed for readability (which it turns out to be relatively simple anyway in the code).</p><p>Notice the the coding masks become neat factors of 7. Although we do lose 7 bits in the entire process because as we can't use the MSB bits (since it might violate the 0x7f rule), but this is unavoidable as we have no way to code them out (you would need more bits to code them out then those bits might violate the rule, etc.).</p><p>Interestingly, now that we have done this, we no longer have to use the <a href="https://hackaday.io/project/4872/log/15715-nothing-good-comes-easy">hidden wifiSsid Android library</a> and we can just use the SSID string directly as it doesn't have issues with UTF-8 coding. This will be good if they decide to deprecate it at some stage and might come in handy when developing the iOS App.</p><p>All in all I am pretty happy with this update, I had thought about it earlier, but I thought most devices would have been more standard than not. It turns out most things aren't programmed to correctly accept proper octet arrays as they should, but this method allows us to err on the side of caution when it comes to compatibility and hopefully will now work with nearly every device on the market today. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/16962-augmenting-existing-access-points">&#34;Augmenting&#34; Existing Access Points</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/16962#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16962"><p><a href="https://hackaday.io/project/4872/log/16960-nothing-good-comes-easy-mk2">Now that we have updated the coding schema</a>, we can now make our router accept hex string ASCII SSIDs. </p><p>I mentioned earlier that you would be able to convert an existing Wi-Fi access point into a beacon node. I currently own a Billion BiPAC 7800VDPX and will show you how to perform this on it.</p><p>This router allows you to set additional SSIDs for a particular Wi-Fi adapter (2.4G) via this page <a href="http://192.168.1.254/wlswitchinterface0.wl" target="_blank">http://192.168.1.254/wlswitchinterface0.wl</a></p><p>You should be able to convert the position coder's hex character output to ASCII characters and copy and paste this into the SSID text field. If you have problems with this, then lets look at the post command for the form: </p><pre class="hljs perl">http:<span class="hljs-comment">//192.168.1.254/wlcfg.wl?wlSsidIdx=0&amp;wlEnableHspot=0&amp;wlEnbl=1&amp;wlHide=0&amp;wlAPIsolation=0&amp;wlSsid=potatoes&amp;wlCountry=AU&amp;wlMaxAssoc=16&amp;wlDisableWme=0&amp;wlEnableWmf=0&amp;wlSsid_wl0v1=wl0_Guest1&amp;wlHide_wl0v1=0&amp;wlAPIsolation_wl0v1=0&amp;wlDisableWme_wl0v1=0&amp;wlEnableWmf_wl0v1=0&amp;wlMaxAssoc_wl0v1=16&amp;wlEnbl_wl0v1=1&amp;wlSsid_wl0v2=wl0_Guest2&amp;wlHide_wl0v2=0&amp;wlAPIsolation_wl0v2=0&amp;wlDisableWme_wl0v2=0&amp;wlEnableWmf_wl0v2=0&amp;wlMaxAssoc_wl0v2=16&amp;wlEnbl_wl0v2=0&amp;wlSsid_wl0v3=wl0_Guest3&amp;wlHide_wl0v3=0&amp;wlAPIsolation_wl0v3=0&amp;wlDisableWme_wl0v3=0&amp;wlEnableWmf_wl0v3=0&amp;wlMaxAssoc_wl0v3=16&amp;wlEnbl_wl0v3=0&amp;wlSyncNvram=1&amp;sessionKey=44797442 </span></pre><p>If we modify the form data object "wlSsid_wl0v1" (this label corresponds with the "name" value of the textbox in the html code) with the following URL coded hex data (note that the Billion terminates its SSID string with the 0x00 null character and also doesn't like the space character, so I had to modify the coder to adjust the bitmask for this value too), we get the following post command:</p><pre class="hljs perl">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.254</span>/wlcfg.wl?wlSsidIdx=<span class="hljs-number">0</span>&amp;wlEnableHspot=<span class="hljs-number">0</span>&amp;wlEnbl=<span class="hljs-number">1</span>&amp;wlHide=<span class="hljs-number">0</span>&amp;wlAPIsolation=<span class="hljs-number">0</span>&amp;wlSsid=potatoes&amp;wlCountry=AU&amp;wlMaxAssoc=<span class="hljs-number">16</span>&amp;wlDisableWme=<span class="hljs-number">0</span>&amp;wlEnableWmf=<span class="hljs-number">0</span>&amp;wlSsid_wl0v1=<span class="hljs-variable">%53</span><span class="hljs-variable">%50</span><span class="hljs-variable">%53</span><span class="hljs-variable">%01</span><span class="hljs-variable">%01</span><span class="hljs-variable">%63</span><span class="hljs-variable">%3b</span><span class="hljs-variable">%15</span><span class="hljs-variable">%0b</span><span class="hljs-variable">%07</span><span class="hljs-variable">%3b</span><span class="hljs-variable">%76</span><span class="hljs-variable">%7f</span><span class="hljs-variable">%31</span><span class="hljs-variable">%07</span><span class="hljs-variable">%5b</span><span class="hljs-variable">%4d</span><span class="hljs-variable">%15</span><span class="hljs-variable">%1c</span><span class="hljs-variable">%30</span><span class="hljs-variable">%07</span><span class="hljs-variable">%01</span><span class="hljs-variable">%01</span><span class="hljs-variable">%21</span><span class="hljs-variable">%01</span><span class="hljs-variable">%11</span><span class="hljs-variable">%30</span><span class="hljs-variable">%62</span><span class="hljs-variable">%01</span><span class="hljs-variable">%07</span><span class="hljs-variable">%44</span>&amp;wlHide_wl0v1=<span class="hljs-number">0</span>&amp;wlAPIsolation_wl0v1=<span class="hljs-number">0</span>&amp;wlDisableWme_wl0v1=<span class="hljs-number">0</span>&amp;wlEnableWmf_wl0v1=<span class="hljs-number">0</span>&amp;wlMaxAssoc_wl0v1=<span class="hljs-number">16</span>&amp;wlEnbl_wl0v1=<span class="hljs-number">1</span>&amp;wlSsid_wl0v2=wl0_Guest2&amp;wlHide_wl0v2=<span class="hljs-number">0</span>&amp;wlAPIsolation_wl0v2=<span class="hljs-number">0</span>&amp;wlDisableWme_wl0v2=<span class="hljs-number">0</span>&amp;wlEnableWmf_wl0v2=<span class="hljs-number">0</span>&amp;wlMaxAssoc_wl0v2=<span class="hljs-number">16</span>&amp;wlEnbl_wl0v2=<span class="hljs-number">0</span>&amp;wlSsid_wl0v3=wl0_Guest3&amp;wlHide_wl0v3=<span class="hljs-number">0</span>&amp;wlAPIsolation_wl0v3=<span class="hljs-number">0</span>&amp;wlDisableWme_wl0v3=<span class="hljs-number">0</span>&amp;wlEnableWmf_wl0v3=<span class="hljs-number">0</span>&amp;wlMaxAssoc_wl0v3=<span class="hljs-number">16</span>&amp;wlEnbl_wl0v3=<span class="hljs-number">0</span>&amp;wlSyncNvram=<span class="hljs-number">1</span>&amp;sessionKey=<span class="hljs-number">44797442</span></pre><p></p>Pop that into your web browser and submit it (if it says invalid session key, just ignore it).You will see the new SSID<p> in the textbox. Make sure Enable is ticked and click Apply. Your new SubPos SSID will be available for positioning.</p><p><img src="https://cdn.hackaday.io/images/2584081430059957859.png"></p><p>Now you might want to restrict connections to that particular SSID, since enabling extra SSIDs on this router also creates an open network. To restrict all devices from connecting, go to the MAC Filter page for that interface:</p><p><img src="https://cdn.hackaday.io/images/1282821431005406934.png"></p>Once at that page, select "Allow" for "MAC Restrict Mode". This will deny all unless you specify an allowed device in the list.<p>SubPos is now enabled on your router!</p><p>I now get the following decoded data on the updated Android application, which corresponds to the dummy data <a href="https://hackaday.io/project/4872-subterranean-positioning-system-sps/log/16960-nothing-good-comes-easy-mk2">here</a>:</p><img src="https://cdn.hackaday.io/images/5790911430060182859.png"><p>Very lots much success!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/17303-positioning-demo">Positioning Demo</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/17303#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17303"><p>Here is a quick and dirty demo video to show off the completed system as it stands so far. The red markers are the known node positions (which are taped to the wall in the video) and the blue marker is the trilaterated position (where the phones are on the table). The nodes themselves are located around the room as you can see in the video.</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/WsMwbEYYzPs" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>The node GPS position is "faked" for obvious reasons, but the demo is live. You will also notice at 37 seconds that one of the phones is still waiting to get a beacon frame as the sampling rates differ between phones, but it eventually gets there (as I scroll around you see it go from 3 nodes to 4 nodes and the position then changes). The algorithm itself is performing an averaging function to smooth out the calculated distances from the path loss as well, but you only notice this when moving about.</p><p>The position of these nodes is too close to actually be that useful due to the inherent error in the system at the moment (about 1-2 meters so far), I am still working on getting this lowered with faster polling and beacon transmit rates (custom AP firmware) as well as better averaging. I will test more nodes across a larger area as well as more nodes with lower power at some stage when I get some time as well. The current Android application is capable of obtaining a rough position estimate from even just a single node (the position of the node and the radius/error).</p><p>Edit: the app binary has been <a href="https://bitbucket.org/blecky/subpos/src/743669882aa51f31ce801fa15426e9f9ef90fae7/android-app/subpos.apk?at=master">uploaded here</a> if anyone is interested in testing it. I will get an SDK available in the next couple of weeks.<br></p><p>Here is the positioning data I used for those interested, the room I was in is 370x370cm and the GPS coordinates correspond to this:</p><pre class="hljs http"><span class="hljs-attribute">Square</span>: <span class="hljs-string">370x370cm</span>

<span class="nginx"><span class="hljs-title">Elevation</span> <span class="hljs-number">3200cm</span>

Window Side
NE - A(<span class="hljs-number">1</span>) - -<span class="hljs-number">37</span>.<span class="hljs-number">8107630</span>, <span class="hljs-number">144</span>.<span class="hljs-number">9623010</span>
SE - B(<span class="hljs-number">2</span>) - -<span class="hljs-number">37</span>.<span class="hljs-number">8107940</span>, <span class="hljs-number">144</span>.<span class="hljs-number">9623150</span>

Kitchen Side
NW - C(<span class="hljs-number">3</span>) - -<span class="hljs-number">37</span>.<span class="hljs-number">8107750</span>, <span class="hljs-number">144</span>.<span class="hljs-number">9622620</span>
SW - D(<span class="hljs-number">4</span>) - -<span class="hljs-number">37</span>.<span class="hljs-number">8108060</span>, <span class="hljs-number">144</span>.<span class="hljs-number">9622760</span>

Device ID    : <span class="hljs-number">1</span>
\x53\x50\x53\x01\x01\x01\x69\x76\x09\x12\x56\x67\x7d\x62\x01\x01\x01\x01\x03\x21\x03\x78\x40\x01\x0b\x08\x04\x60\x07\x51\x40


Device ID    : <span class="hljs-number">2</span>
\x53\x50\x53\x01\x01\x02\x69\x76\x07\x5c\x56\x67\x7e\x6e\x01\x01\x01\x01\x03\x21\x03\x78\x40\x01\x0b\x01\x04\x60\x07\x51\x21


Device ID    : <span class="hljs-number">3</span>
\x53\x50\x53\x01\x01\x03\x69\x76\x08\x1a\x56\x67\x7c\x5c\x01\x01\x01\x01\x03\x21\x03\x78\x40\x01\x0b\x01\x04\x60\x07\x51\x21


Device ID    : <span class="hljs-number">4</span>
\x53\x50\x53\x01\x01\x04\x69\x76\x07\x64\x56\x67\x7c\x68\x01\x01\x01\x01\x03\x21\x03\x78\x40\x01\x0b\x08\x04\x60\x07\x51\x40

</span></pre><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/17545-pcb-design">PCB Design</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/17545#discussion-list">
                                    3 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17545"><p>Just a quick update. About to get these boards made up (a little more tidying to do):</p><p><img src="https://cdn.hackaday.io/images/6433621431345387651.png"></p><p>I have also moved to the Microchip PIC18F25K22-I/SO for this board due to some extra scope creep. Note that these boards are designed to become a self contained system (SubPos Node) that is easy to program and maintain (or use as a GPS position relay). These nodes are also designed to provide accurate timing as well to help with distance calculation accuracy.</p><p>If you just want a tiny throwie like device, you can get away with a "pre-programmed" ESP8266 module and a coin cell battery (I will make a variant of this shortly). In this instance, you will need to set the position in the ESP8266 module with AT commands as <a href="https://hackaday.io/project/4872-subpos-positioning-system/log/15624-no-this-fun">shown here</a>. On restart (depending on the firmware), the SSID stays stored in the flash on the ESP module. I will have a low power firmware that will work for both the node and throwie types soon.</p><p>Edit: I let the integrated antenna design go for the time being and I will use the ESP03 modules instead. I want the final product to integrate all these components individually, but I haven't had the time to go through antenna theory at the moment. These boards are designed for development work.</p><p>The "consumer" design will forgo the header arrangement as shown below and opt for a more ruggedised connector setup (reverse voltage protection) and interfacing (e.g. RS232/USB). These boards are already quite small (30.07x32.39 mm), so shrinking them further isn't a priority. If I go down the kickstarter route, I would also like to get FCC approval.  No those ESP modules with an FCC logo are NOT FCC approved when they are integrated into a final product (plus it's dubious as to whether those modules are also FCC approved as is anyway). The headers are used to allow for programming of the ESP module flash and general operation.</p><p>I am getting these boards made up on <a href="http://oshpark.com" target="_blank">http://oshpark.com</a>:</p><p><img src="https://cdn.hackaday.io/images/5796221431345622554.png"></p><p><img src="https://cdn.hackaday.io/images/1927941431345649739.png"></p><p>Don't worry, your eyes aren't broken. The ICSP connector holes are offset slightly to allow you to plug header pins without soldering.</p><p>Just realised the web address will be covered by the ESP03 module once assembled. Oh well :P<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/18053-javascript-ssid-coder">Javascript SSID Coder</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/18053#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18053"><p>Here is a javascript SSID coder for you to use to use with the <a href="https://github.com/subpos/ssid_coder/tree/master/android-app">Android App</a>:</p><p><a href="http://www.subpos.org/index.php?title=Javascript_SSID_Coder">http://www.subpos.org/index.php?title=Javascript_SSID_Coder</a></p><p>This can now be used in conjunction with  <a href="https://hackaday.io/project/4872-subpos-positioning-system/log/15624-no-this-fun">ESP8266 node(s)</a> to determine your position.</p><p>I will have the Android API released over the next few days along with more documentation (the SubPos standard).<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/18492-subpos-android-api">SubPos Android API</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/18492#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18492"><p>Here&apos;s what some of you have been waiting for, the (rough) Android API has been released! In addition, I have moved the project repositories to github: </p><p><a href="https://github.com/subpos/android_api">https://github.com/subpos/</a></p><p>In the open source API I have moved to another trilateration library from <a href="https://github.com/lemmingapex/Trilateration">here</a>. This relies on the <a href="http://commons.apache.org/proper/commons-math/">org.apache.commons.math3</a> library to work, so you need to include this library in your project.</p><p>This initial release has been adapted from the prototype code that has been <a href="https://github.com/subpos/ssid_coder/tree/master/android-app">worked on so far</a>, so bear with me if there are some errors or omissions, but I have tried to make it simple to use (also removing some of the experimental code until it&apos;s tested completely).</p><p>To integrate this API into an existing positioning application, all you need to do is create a SubPos object like so:</p><pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">yourClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span> </span>{
    SubPos subpos;
    <span class="hljs-annotation"><a href="https://twitter.com/Override" target="_blank">@Override</a></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>{
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        <span class="hljs-comment">//Create new SubPos service</span>
        subpos = <span class="hljs-keyword">new</span> SubPos(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//&quot;this&quot; passes the activity&apos;s context</span>
    }</pre><p>Then to get your position, call:</p><pre class="hljs java">SubPosPosition position = subpos.getPosition(); <span class="hljs-regexp">//</span>returns <span class="hljs-literal">null</span> if position is not calculated</pre>If you have any thoughts, ideas or fixes, by all means let me know if I have missed something, or if you would like to contribute to the API.<p>Unfortunately, in terms of releasing this on iOS, SubPos will currently not work on a <a href="https://code.google.com/p/iphone-wireless/wiki/Stumbler">non jailbroken</a> iPhone as they restrict access to the Wi-Fi API. Apple don&apos;t even allow <a href="http://stackoverflow.com/questions/24324184/scan-networks-ssids-on-ios-7-by-using-private-api">Wi-Fi scanning applications</a> (they <a href="http://www.imore.com/apple-removing-wifi-scanning-apps-app-store">removed existing ones</a> from the App store too). This is quite a disappointment, considering it is very basic functionality that the hardware is fully capable of supporting. It has also been speculated that this has been done to provide vendor lockin with their <a href="https://aaronparecki.com/articles/2014/06/09/1/ios8-wifi-changes-privacy-win-or-ibeacon-lock-in">iBeacon platform</a>. So while it would be great to get this working on all smartphone platforms, for the moment, unless someone has contacts within Apple to make this happen, it looks like we are stuck with every other device in the world with a Wi-Fi receiver for the time being.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/18531-subpos-node-v01a-parts-arrived">SubPos Node v.01a Parts Arrived</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/18531#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18531"><p>The parts for the <a href="https://hackaday.io/project/4872-subpos-positioning-system/log/17545-pcb-design">first run of PCBs</a> have arrived:</p><p><img src="https://cdn.hackaday.io/images/2445231432728100872.jpg"></p><p>Edit: PCBs arrived!</p><p><img src="https://cdn.hackaday.io/images/1415481432891695007.jpg"></p><p>Test fit:</p><p><img src="https://cdn.hackaday.io/images/7953281432892532065.jpg"></p><p>So purple! Thanks hackaday!</p><p>Edit2:</p><p>I haven't soldered SMD stuff for a while, so I'm definitely out of touch, especially for lead free SMD hand soldering. </p><p>The first board is done:</p><p><img src="https://cdn.hackaday.io/images/4217551432904365159.jpg"></p><p>It all powers up, but I have some programming to do now.</p><p><span></span></p><pre>Connecting to MPLAB PICkit 3...

Currently loaded firmware on PICkit 3
Firmware Suite Version.....01.36.10
Firmware type..............Enhanced Midrange

Now Downloading new Firmware for target device: PIC18F25K22 
Downloading AP...
AP download complete
Programming download...

Currently loaded firmware on PICkit 3
Firmware Suite Version.....01.36.10
Firmware type..............PIC18F

Target voltage detected
Target device PIC18F25K22 found.
Device ID Revision = 5

The following memory area(s) will be programmed:
program memory: start address = 0x0, end address = 0x7fff
configuration memory

Device Erased...

Programming...
Programming/Verify complete</pre><p>Hello world:</p><p><img src="https://cdn.hackaday.io/images/4496301433049226087.jpg"></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=1" class="grey-gold-button prev-button ">Previous</a>
                    
                    
                    <a href="?page=3" class="grey-gold-button next-button ">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'qaBlnqZS-BT_H1g-Wd8NELcWScWUsbYuq2q8';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>