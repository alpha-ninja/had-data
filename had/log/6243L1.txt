<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; IoTgreen - no-battery IoT sensors of the future &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6243%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6243-iotgreen-no-battery-iot-sensors-of-the-future">IoTgreen - no-battery IoT sensors of the future</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">This project creates a new platform for IoT enabled devices, which do not need a battery ... to save energy and conserve resources</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/73632-marek-novk" title="Visit Profile">Marek Nov√°k</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6243#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6243-iotgreen-no-battery-iot-sensors-of-the-future">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6243/logs/sort/newest">Newest</option>
                    <option value="/project/6243/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6243/log/19390-first-success-with-bq25570">First success with BQ25570</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6243/log/19390#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19390"><p>I have soldered my miniature boards with BQ25570 and tested out their capabilities. I left a good space for improvements and large solder pads on board to easily modify component values at critical places.</p><h2>RF harvesting</h2><p>I will try to do some tests in controlled environment (shielded room probably) beyond ETSI limits at 433 Mhz and 1 W (30 dBm) output power. Schematics of the test setup including power amplifier which will be used will be posted soon. Please be noted that running this amplifier in an unshielded area (e.g. at home) may result in a fine for violating ETSI / FCC / other rules.</p><p>These tests will be performed to prove that the energy harvesting may be used even for long range setups. The RF harvesting dream would be a dedicated frequency left for unlicensed operations with high power limits for certain applications (medical, industrial, highly dangerous environments etc.).</p><p>The firsts tests within ETSI/FCC were performed at 433 Mhz and 868 Mhz with maximum output power of 10 dBm. I used Texas Instruments TrxEB with CC110L modules transmitting at 1.2 kbps. This gave me a very simple RF source with about 75% duty cycle. The PCBs for 10dBm continuous carrier generator at 433 Mhz will arrive in a few days (around 18th June) so I won't reprogram the boards to produce continuous carrier.</p><p>On the attached video, you can see the process of charging the 220uF when the unit harvests energy from 433 Mhz, approx. 12 dBm source antenna at about 10 to 25 cm distance. I started at about 2 volts to avoid the LBOOST phase (LBOOST does the cold start - it has poor efficiency but it can charge a discharged capacitor from 330mV source). It seems that the short interrupts in between sending packets from the TrxEB board (about 300ms) cause the chip to power-down and after sufficient energy is again available, run the MPPT again (which takes about 250ms). This is probably the cause of very poor performance. Laser beam harvesting do not suffer from this. I will evaluate more after I will have the continuous carrier generator. But enough talking, here are the photos of my custom BQ25570 module with RF harvester:</p><p><img src="https://cdn.hackaday.io/images/7666091434136489104.JPG"></p><p>The long "wire" coming from the board is the 17 cm Anaren 433 Mhz antenna. There are actually two boards stacked on top of each other - the top one is the BQ25570 board. The bottom board is the HSMS285x RF to DC multiplier board.</p><p><em>What will be improved in next prototype and what will improve the performance, too:</em></p><p><em>Match the RF multiplier with load using my vector network analyzer (this may actually improve it a lot. I have measured the converter and its impedance at 433Mhz is about 80-90j Ohms. The VSWR is about 4. So more than 50% of power is reflected back into the antenna instead of being converted. I am looking forward to the results after matching in next prototype phase.</em></p><p><em>Use low-leakage capacitors</em></p><p><em>Wash the boards properly before testing (the remaining flux conducts electricity and may reduce the performance)</em></p><p>Video:</p><p><iframe width="500" height="281" src="//www.youtube.com/embed/GwQ0QnNTDgs" frameborder="0" allowfullscreen=""></iframe><br></p><h2>Laser beam harvesting</h2><p>For first tests, I was a bit more successful with the laser beam harvesting. With my red 30mW laser, I was able to achieve almost instantenous (matter of 5 seconds or so) charge of 220uF capacitor from zero to 5 volts.</p><p>I used the same BQ25570 board layout which I used for RF harvesting. The harvesting element is BPW34 photodiode. I was also able to power a nRF51822 for a few seconds from the capacitor. But I will show this in the next update, stay tuned ;-).</p><p>Photo of the laser beam harvesting unit</p><p><img src="https://cdn.hackaday.io/images/5042061434139438369.JPG"></p><p><em>What will be improved in next prototype and what will improve the performance, too:</em></p><p><em>Use low-leakage capacitors</em><br></p><p><em>Wash the boards properly before testing (the remaining flux conducts electricity and may reduce the performance)</em></p><p>Video:</p><p><iframe width="500" height="281" src="//www.youtube.com/embed/Ir2sw9EAZmQ" frameborder="0" allowfullscreen=""></iframe><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/19501-nrf51822-bluetooth-beacon-powered-by-laser-beam">nRF51822  Bluetooth Beacon powered by laser beam!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6243/log/19501#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19501"><p>I have used some one of my old custom Bluetooth beacon design with nRF51822 and I have successfully powered it by laser beam. As a Bluetooth packet sniffer, I have used the Intel Edison board. Next step will be to tune the buck converter power management system of BQ25570 to be reliable without using the power switch (it is just a matter of resistor divider settings, nothing complicated at all). Here is the video:</p><p><br><iframe width="500" height="281" src="//www.youtube.com/embed/K_hZKUOCS68" frameborder="0" allowfullscreen=""></iframe><br></p><p>The RF harvesting works exactly the same way, so I did not record another video.<br></p><p>.... I am quite excited about it :-) , getting closer to no-battery fully energy harvesting powered sensors :-).</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/19875-on-the-way-to-development-board">On the way to development board</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6243/log/19875#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19875"><p>The PCBs with all key parts of the harvesting powered sensor arrived. I kept them miniature to give you an idea about how small the solution can be. The PCB was divided into five individual modules. Here is the photo:</p><p><img src="https://cdn.hackaday.io/images/8505751435006839468.jpg"></p><p>The five modules that are present on the board are (from left to right) - nRF51822 board, RF to DC converter, BQ25570 energy harvesting circuit, LTC3105 circuit and BPW34 board. I decided to test more harvesting chips to compare their performance. After thorough testing, the BQ25570 had better performance with high impedance sources. It also has better and more capable power management circuitry and lower quiescent currents. Thus, I decided to use the BQ25570 in following phases of the project. The back side:</p><p><img src="https://cdn.hackaday.io/images/5439481435007594488.jpg"></p><p>On the back side of microcontroller board, you can see the Freescale MPL3115 which will be used as barometer and temperature sensor.</p><p>Further update will bring the development board preliminary design and specifications, Stay tuned ;-).<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/20430-the-energy-harvesting-project-will-fly-to-israel">The energy harvesting project will fly to Israel!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6243/log/20430#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20430"><p>Yesterday I won a Czech contest with a paper describing possible space applications of the energy harvesting principles I am evaluating and in October, I will present the results in Jerusalem, Israel at the SGC 2015 and IAC 2015 (the world's largest astronautical congress) as well :-)</p><p><img src="https://cdn.hackaday.io/images/6063871436021639862.jpg"></p><p>More electronic stuff will be coming in following days :-)</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/20882-preliminary-designs-of-first-prototype-product">Preliminary designs of first prototype product</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6243/log/20882#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20882"><p>Today I have completed the design of preliminary prototype product. It will be a no-battery wireless energy harvesting development kit. Vast majority of energy harvesting means can be used with this layout, including RF, solar, laser and even TEG (thermoelectric generator). As soon as the design will be completed and proven to be reliable, it will be published (including schematic files, board layout and software)  as open-source to enable you, other developers, to continuously improve the platform .. and go for the Tesla&apos;s dream, of course :-).</p><p>Hardware features:</p><ul><li>Size is 1.6 x 1.6 inches (40 x 40 mm)</li></ul><ul><li>nRF51422QFAA ultra-low-power wireless MCU with BLE/ANT/2.4 Ghz proprietary capability. 256 kB of ROM and 16 kB of RAM</li><li>Texas Instruments CC110L low-power transmitter capable of 433 Mhz / 868 Mhz / 915 Mhz. 868 Mhz and 915 Mhz will be enabled on the development board. I have been working with those quite a lot and the possible range can be up to 250 meters in urban areas.</li></ul><ul><li>Texas Instruments BQ25504 energy harvesting chip capable of cold start at 330 mV and continous harvesting up to 80 mV. I am stiill wondering how those little miracles work :-). Maybe some kind of oscillator with ultra low threshold voltage FETs?</li><li>Supercapacitor with capacity (different applications will need different capacities) varying from 0.1 Farads to 1 Farad. The voltage rating will be 5 V. Pretty much capacity to run some Bluetooth sensor for days without need of recharge.</li><li>Texas Instruments TPS62736 nanopower buck converter</li></ul><br><ul><li>Cheap, 2 layer PCB</li><li>No BGAs, no 0201 and smaller components -&gt; can be soldered at home using hot air gun and soldering paste</li><li>Separated sensor board with large LGA-like pads enabling easy customization of the platform. GPIO/SPI/I2C/UART being provided on the board.</li><li>The sensor board will have two power supply sources - one shared with the microcontroller and the other can be switched off by microcontroller to minimize standby current</li></ul><ul><li>The target current with nRF in sleep and board running is 1.5 microamps. The 1 Farad ultracapacitor with no leakage current would be discharged by this current from 5 volts to 2 volts in about 17 days. </li></ul><p>Software features</p><ul><li>Full Bluetooth and ANT stack provided by chip manufacturer, Nordic Semiconductor</li><li>Ultra-low-power examples and library created by me, enabling beginners with the platform to effectively create new applications with the board</li></ul><p>The expected manufacturing price of board and components is somewhere around 20 and 30 dollars. In next days I will order the first samples. Just a small teaser - here is the render of one of earliest versions (not identical to the one actually being manufactured) from POVRAY ;-)</p><p>Thanks to all of you guys for your skulls and support, I truly appreciate it :-).<br></p><p><img src="https://cdn.hackaday.io/images/6098371436822423510.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/21507-energy-harvesting-sensor-connected-with-intelr-iot-analytics">Energy harvesting sensor connected with Intel(r) IoT Analytics</a></h2>
                            <small class="authorship">25 days ago  &bull;
                                <a class="gray-link" href="/project/6243/log/21507#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21507"><p>Yesterday I successfully connected my light powered sensor with Intel IoT Analytics. I send BLE non-connectable advertising packets (beacon-like)? every five seconds from the harvesting sensor. In major and minor fields, they carry data about the ambient temperature and pressure. In final setup, I would not like to use BLE. Instead, I would use a partially proprietary protocol. The protocol would not act like beacons and would not follow the BLE structure. I would use the same modulation, frequencies and other link parameters to be able to receive those with Intel Edison. But I plan to transmit regular beacon packets as well to enable simple and fast read by smartphones and other BLE enabled gadgets.</p><p>Reasons why I would like to implement proprietary protocol for communication with Intel Edison:</p><p>- improved security (I plan to engrave a unique UUID and unique secret key number to each sensor; the secret key will not be advertised and will be used to encode all messages; thus, to enable the sensor in the system, the user must know the secret key and write it to the system)</p><p>- reduced payload length (if the payload is smaller, there is smaller chance to get the packet lost due to errors and it also saves battery a bit)</p><p>- more space for sensor data (based on my knowledge, the only way how to put some custom data into beacon packets without modifying their structure is by changing minor and major fields - that is four chars - 32 bits - which is not very much)</p><p>However, I need to take a closer look at the Bluetooth documentation if it is possible and if I do not violate laws and Bluetooth specifications by doing so.</p><p>Enough theory for now :-) - now the photos and implementation itself. Here is my preliminary sensor setup - I use my modules which I designed earlier and connected them with wires. I intensively work on the solution integrated on one PCB, it will be completed and posted with schematics and board layout soon.</p><p>The preliminary prototype of the sensor:</p><p><img src="https://cdn.hackaday.io/images/5215141437811656836.JPG"></p><p>The 5x5 cm (approx. 2x2 inch) solar panel is taped to the light. It harvests energy from the light and passes it to the BQ25570 energy harvesting chip which charges 0.47F supercapacitor to approx. 5 volts. It also features integrated ultra low power buck converter which provides 2 volts to the PCB with MPL3115 (temperature and barometer sensor) and nRF51822QFAB to acquire data samples. The lightbulb was a white 56-LED lightbulb with rated power of 12 watts. Here is how a beacon packet looks like when received by Intel Edison:</p><p><em></em></p><pre>&gt; 04 3E 2A 02 01 03 01 46 9B 3A B1 2C D7 1E 02 01 04 1A FF 59
  00 02 15 01 12 23 34 45 56 67 78 89 9A AB BC CD DE EF F0 25
  27 19 F0 C3 B9</pre><p><em></em></p><p>Most important parts:</p><p><em>01 12 23 34 45 56 67 78 89 9A AB BC CD DE EF F0</em> = Unique beacon UUID (this value is different for each beacon)<br></p><p><em>25 <em>27 19 F0</em><span class="redactor-invisible-space"> = major and minor value; first two bytes stand for barometric pressure and the rest is temperature</span></em>; Pressure (in Pascals divided by ten) = 0x2527 = 9511 = 95110 Pa; Temperature (multiplied by 256) = 0x19F0 = 6640 = 25.9375&#xB0;C ~ 25,9&#xB0;C</p><p><span class="redactor-invisible-space"><em>B9</em><span class="redactor-invisible-space"> - the last byte = RSSI = -0x46 dBm = -70 dBm<br></span></span></p><p>This data is decoded by Python script and sent to the iotkit application available on Intel Edison. After some configuration, it is possible to have the data transferred automatically to the cloud and displayed in a nice way:<br></p><p>As an example, here is a very quickly written Python script. I haven&apos;t been programming in Python much so I apologize that the code is not very clear now and is not as effective as it probably could be. However, it works fine.</p><pre class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> subprocess
<span class="hljs-keyword">import</span> time

<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> json

HOST = <span class="hljs-string">&quot;127.0.0.1&quot;</span>
PORT = <span class="hljs-number">41234</span>
INTERVAL = <span class="hljs-number">1</span>

proc = subprocess.Popen([<span class="hljs-string">&apos;sh&apos;</span>,<span class="hljs-string">&apos;/ble.sh&apos;</span>],stdout=subprocess.PIPE)
thing_index = <span class="hljs-number">0</span>
string_processed = <span class="hljs-string">&quot;&quot;</span>
firstline_tosave = <span class="hljs-string">&quot;&quot;</span>
secondline_tosave = <span class="hljs-string">&quot;&quot;</span>
thirdline_tosave = <span class="hljs-string">&quot;&quot;</span>
willbethirdline = <span class="hljs-number">0</span>     <span class="hljs-comment">#flag to notice the parser that a third line of packet is coming</span>
packetisok = <span class="hljs-number">0</span>          
BAROstring = <span class="hljs-string">&quot;&quot;</span>
TEMPstring = <span class="hljs-string">&quot;&quot;</span>

TEMP = <span class="hljs-number">0.0</span>
BARO = <span class="hljs-number">0</span>



<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register_metric</span><span class="hljs-params">(metric_name, metric_type)</span>:</span>
    msg = {
        <span class="hljs-string">&quot;n&quot;</span>: metric_name,
        <span class="hljs-string">&quot;t&quot;</span>: metric_type
    }

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.sendto(json.dumps(msg), (HOST, PORT))


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_data</span><span class="hljs-params">(metric_name, value)</span>:</span>
    msg = {
        <span class="hljs-string">&quot;n&quot;</span>: metric_name,
        <span class="hljs-string">&quot;v&quot;</span>: value
    }

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.sendto(json.dumps(msg), (HOST, PORT))

register_metric(<span class="hljs-string">&quot;temp&quot;</span>, <span class="hljs-string">&quot;temperature.v1.0&quot;</span>)
register_metric(<span class="hljs-string">&quot;baro&quot;</span>, <span class="hljs-string">&quot;barometer.v1.0&quot;</span>)


<span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
        line = proc.stdout.readline()
        <span class="hljs-keyword">if</span> line != <span class="hljs-string">&apos;&apos;</span>:
                <span class="hljs-comment">#the real code does filtering here</span>
                <span class="hljs-keyword">try</span>:                                             <span class="hljs-comment">#every new BLE packet begins with &gt;</span>
                        thing_index = line.rstrip().index(<span class="hljs-string">&apos;&gt;&apos;</span>)
                <span class="hljs-keyword">except</span> ValueError:
                        thing_index = -<span class="hljs-number">1</span>

                <span class="hljs-keyword">if</span> thing_index == <span class="hljs-number">0</span>:
                        firstline_tosave = line.rstrip().replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>)  
                        willbethirdline = <span class="hljs-number">0</span>
                        packetisok = <span class="hljs-number">0</span>
                <span class="hljs-keyword">else</span>:
                        <span class="hljs-keyword">if</span> willbethirdline == <span class="hljs-number">0</span>:
                          secondline_tosave = line.rstrip().replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>)[-<span class="hljs-number">18</span>:]
                          <span class="hljs-keyword">if</span> secondline_tosave[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>] == <span class="hljs-string">&quot;899AABBCCDDEEFF0&quot;</span>:       <span class="hljs-comment">#check if the UUID of the packet matches</span>
                            packetisok = <span class="hljs-number">1</span>                                        <span class="hljs-comment">#if so, packet is OK</span>
                            BAROstring = <span class="hljs-string">&quot;0x&quot;</span>+secondline_tosave[<span class="hljs-number">16</span>:<span class="hljs-number">18</span>]
                          willbethirdline = <span class="hljs-number">1</span>
                        <span class="hljs-keyword">else</span>:
                          thirdline_tosave = line.rstrip().replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>)[-<span class="hljs-number">18</span>:]
                          <span class="hljs-keyword">if</span> packetisok == <span class="hljs-number">1</span>:                                 <span class="hljs-comment">#this will be executed only if the packet is OK</span>
                             BAROstring += thirdline_tosave[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]
                             TEMPstring = <span class="hljs-string">&quot;0x&quot;</span>+thirdline_tosave[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>]
                             BARO = int(BAROstring, <span class="hljs-number">0</span>)*<span class="hljs-number">10</span>                     <span class="hljs-comment">#convert the hex values to decimals/float</span>
                             TEMP = round(float(int(TEMPstring, <span class="hljs-number">0</span>))/<span class="hljs-number">256</span>,<span class="hljs-number">1</span>)

                             <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;PACKET:&quot;</span>                                  <span class="hljs-comment">#display the data into console</span>
                             <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Barometric pressure: &quot;</span>+str(BARO)+<span class="hljs-string">&quot; Pa&quot;</span>     
                             <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Ambient temperature: &quot;</span>+str(TEMP)+<span class="hljs-string">&quot; deg C&quot;</span>
                             <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;END OF PACKET&quot;</span>                          
                             send_data(<span class="hljs-string">&quot;temp&quot;</span>, TEMP)                          <span class="hljs-comment"># send the data to cloud</span>
                             send_data(<span class="hljs-string">&quot;baro&quot;</span>, BARO)  
        <span class="hljs-keyword">else</span>:
                <span class="hljs-keyword">break</span></pre>
<p>In the same folder, there is also the &quot;ble.sh&quot; file which contains following code:</p><pre class="hljs bash">rfkill unblock bluetooth
sleep <span class="hljs-number">1</span>
hciconfig hci0 up
hcitool lescan --duplicates <span class="hljs-number">1</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;
hcidump -xR
</pre><p>What this code does is that it is a basic implementation of BLE packet sniffer. If you run it on its own, you get following output:</p><pre>HCI sniffer - Bluetooth packet analyzer ver 5.24
device: hci0 snap_len: 1500 filter: 0xffffffff

&lt; 01 0B 20 07 01 10 00 10 00 00 00
&gt; 04 0E 04 01 0B 20 0C
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 BF
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 BF
&gt; 04 3E 2A 02 01 03 01 46 9B 3A B1 2C D7 1E 02 01 04 1A FF 59
  00 02 15 01 12 23 34 45 56 67 78 89 9A AB BC CD DE EF F0 25
  2A 1A 30 C3 BF
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 BF
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 B6
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 C0
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 BF
&gt; 04 3E 2A 02 01 03 01 46 9B 3A B1 2C D7 1E 02 01 04 1A FF 59
  00 02 15 01 12 23 34 45 56 67 78 89 9A AB BC CD DE EF F0 25
  2A 1A 30 C3 BF
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 C0
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 C5
&gt; 04 3E 1B 02 01 03 01 87 79 14 8C B1 E8 0F 02 01 04 0B FF 00
  FF AB AB 00 00 00 00 00 01 C6</pre><p>As you can see, this outputs every packet it detects, not only the packets from sensors. The three line packets are the packets from sensors, while the other packets are from another device which I am currently testing for battery life. This is the output which is parsed in the Python script.<br></p><p>You can find an excellent tutorial about how to setup the Intel Edison to connect with Intel IoT Analytics on this page. I find sharing the page more useful than trying to describe the process on my own. If you will have any difficulties, don&apos;t hesitate to contact me</p><p><a href="https://software.intel.com/en-us/intel-iot-developer-kit-cloud-based-analytics-user-guide">https://software.intel.com/en-us/intel-iot-developer-kit-cloud-based-analytics-user-guide</a><br></p><p>The temperature is already prepared for you, you just need to create one more component - &quot;barometer&quot; with following settings:</p><p><img src="https://cdn.hackaday.io/images/8964941437825340849.png"><span class="redactor-invisible-space"><br></span></p><p>After a few hours of continuous logging, you can get an image like this - pretty quick setup with nice results I have to say. You can either use the interface on Intel website or export the data as .csv and plot the data on your own. The results may look like this:<br></p><p><span></span></p><p><img src="https://cdn.hackaday.io/images/147601437826083307.png"></p>
<p><span></span></p><p><img src="https://cdn.hackaday.io/images/3305641437826096570.png"></p>
<p>This measurements are approximately 16 hours long. </p><p>The sensor is capable of running continuously with only 30 minutes of charging with the lights on (from 0 volts to 5 volts). It is capable of running without any energy income for about 24 hours. On a sunny day, the sunlight in the room reflected from the light is enough to slowly charge the sensor. Please notice this is only a prototype and further improvements will be done in the first prototype PCB which is on the way. My target for the first product is 48 hours without any energy income and 20 minutes of direct light from a light source to fully charge the battery element.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/21526-iotgreen-new-name-new-logo-new-goals">IoTgreen - new name, new logo, new goals</a></h2>
                            <small class="authorship">25 days ago  &bull;
                                <a class="gray-link" href="/project/6243/log/21526#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21526"><img src="https://cdn.hackaday.io/images/7816251437839706368.png"><p>I decided to make a major change in the whole project. I began with a basic research on energy harvesting methods. Some of the things I explored were so new I even could not find enough research papers to compare my results with. This pushed me forward as I knew that I am exporing something novel and unpublished. As the time was going, I felt that the project needs to be pushed more towards the community and not focus only on the research but also on the applications and how to launch the technology I develop to the market to contribute in solving of the today&apos;s issues of energy conservation and pollution.</p><p>Currently the first prototype of &quot;energy harvesting sensor to cloud&quot; is working and I wait for the material for the first actual product-look sample product to arrive. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/22007-iotgreensense-10-first-product">IoTGreenSense 1.0 - first product</a></h2>
                            <small class="authorship">17 days ago  &bull;
                                <a class="gray-link" href="/project/6243/log/22007#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22007"><h1>IoTGreenSense 1.0</h1><p>Today I have completed the design of the first product - IoTGreenSense 1.0 - the no-battery sensor with virtually infinite lifetime. The sensor payload can be changed as the PCB is equipped with LGA pads for separate sensor board. The external dimensions are <strong>5 cm x 5 cm x 1.5 cm (approx. 2 inch x 2 inch x 0.6 inch)</strong>. The capacity of internal storage element is 0.47 Farads. The output voltage can be adjusted by changing on-board resistors values. This is the photo of real product:<br></p><p><img src="https://cdn.hackaday.io/images/9310421438458428482.JPG"></p><h1><img src="https://cdn.hackaday.io/images/3985681438464671580.jpg"></h1><h1>Examples of use for this sensor:<br></h1><ul><li><strong>Datacentres, warehouses</strong> - monitoring of hot spots</li><li><strong>Agri</strong><strong>cuitural sensors</strong> - plants monitoring, hydroponics method monitoring</li><li><strong>Home se</strong><strong>curity sensors</strong> - window/door manipulation sensor, window break sensor</li><li>No-battery simple home <strong>meteostation</strong></li></ul><p>... and many more<br></p><h1>Q&amp;A for developers</h1><h2></h2><h2>How does the power supply circuitry work?</h2><p>Please take a look at BQ25504 datasheet to know more about this energy harvesting chip. The small solar panel is used as energy source to charge the internal supercapacitor up to 5 volts. This energy is used to generate voltage for microcontroller and sensors using ultra low power buck converter. The overall quiescent current of whole setup is sub-microamp. With this first prototype, I was able to achieve quiescent current under 6 microamps with this setup (including microcontroller in sleep with RTC running, sensors and CC110L).<br></p><h2>Are there any problems with cold start of the sensor?</h2><p>In first prototype I had problems with cold start of the sensor as the nRF MCU seemed to draw high amounts of energy during start-up at low voltages. However, this prototype does not suffer from such issues as hysteresis is implemented. When cold starting, the internal circuitry waits for the voltage of ultracapacitor to reach 3.3 volts. When discharging, the voltage goes down to 3.0 volts before cutting off the buck converter. Thus, there are no more problems with cold start.</p><h2>How much energy can I save with this sensor?</h2><p>Let&apos;s assume a scenario with a sensor in datacenter or warehouse - sensor about 5 centimeters from 24/7 running LED light source. Under this setup I was able to harvest about 8 mW of energy at 2.7 volts. With this amount of energy it is possible to make a grid of sensors and implementing a 2.4 Ghz mesh protocol to avoid 868 Mhz and multiple receivers. It is also possible to use non contact temperature sensors to monitor hardware temperature directly. The sensor running at this power consumption would drain the 600 mAh CR2450 battery in 9 days. The situation with 2xAAA and 2xAA batteries is not significantly different, maximum of one month of battery life is possible in this setup. However, using IoTGreenSense, the lifetime is not restricted unlimited. This carries a huge environmental savings - one thousand IoTGreenSense devices running for one year may <strong>save up to 44000 pieces of CR2450 lithium batteries. And I am not talking about human effort to replace the batteries and so on.</strong></p><h2>How to program the nRF51822 microcontroller?</h2><p>I use Segger J-Link for the programming together with TagConnect programming cable because of its tiny footprint. In next, development version of the board, there will be a standard SWD connector. It is possible to solder wires to the TagConnect pads and connect them with programmer. Please visit the NordicSemiconductor website for information about software development for the nRF51822.</p><h2>Which solar panel I have to use? Do I have to use only solar panels?<br></h2><p>No, you can use virtually everything which provides you with voltage from 0.3 volts to 5 volts and reasonable current (100 microamps and more is recommended). Piezo elements are not supported now. See the project description and project updates for RF to DC converters and photodiodes for laser harvesting. If you do not wish to use energy harvesting, there are also solder pads for CR2450 battery.</p><h2>What is the range?</h2><p>When using 2.4 Ghz, I was able to achieve about 8 meters with this first prototype. With 868 Mhz, the range is significantly better, about 40 to 80 meters, depending on conditions. This is caused by lower free space path loss as 868 Mhz and higher output power (10 dBm compared to 0 dBm when transmitting via Bluetooth).</p><h2></h2><h2></h2><h2></h2><h2>What will come next?</h2><p>Next device will be a development kit which will be, in fact, the same design with some extra features like changeable voltage thresholds, even more customizations and the most important thing - <strong>mikroBUS socket</strong><strong></strong> and <strong>Arduino shield</strong> to allow you to use <strong>mikroElektronika Click(TM) boards</strong> and <strong>Arduino shields </strong>in your designs. You will just have to be careful because we are still powering the board by energy harvesting so every microamp counts :-).</p><p>Also, I am designing a hub based on Intel Edison for these sensors incorporating nRF51 and CC110L based 868 Mhz receiver. it will run Zetta and/or Intel IoT Analytics to handle the sensor data easily and effectively to the cloud.</p><h2><br></h2><h1>Schematics and board layout of base board</h1><p>All schematics and board layouts are published under CC BY-SA. Please note that these layouts are not final and/or properly tested. Thus, there may be small design mistakes which may reduce performance of the system. If you plan to make some sensors or make modifications to the layout, please share some photos with me. Thank you in advance.</p><p>Eagle 5 layout files can be found on link below. Contact me on my e-mail ( marek.novak@mnhs.cz ) if you need Gerber files only.<br></p><p><a href="http://www.iotgreenproject.com/uploads/iotgreensense_rev1.zip">www.iotgreenproject.com/uploads/iotgreensense_rev1.zip</a><br></p><h2>Bill of material (BOM)</h2><p><span></span></p><pre class="hljs cpp">Qty Value              Device             Parts                      
<span class="hljs-number">1</span>   <span class="hljs-number">0</span>R                 R-EU_R0402         R12                        
<span class="hljs-number">1</span>   <span class="hljs-number">1.2</span>M               R-EU_R0402         ROK3                       
<span class="hljs-number">1</span>   <span class="hljs-number">1</span>M                 R-EU_R0402         R12SET                     
<span class="hljs-number">4</span>   <span class="hljs-number">1</span>n                 C-EUC0402          C11, C21, C27, C28         
<span class="hljs-number">1</span>   <span class="hljs-number">1</span>p5                C-EUC0402          C15                        
<span class="hljs-number">1</span>   <span class="hljs-number">1u</span>                 C-EUC0402          C40                        
<span class="hljs-number">1</span>   <span class="hljs-number">2</span>n2                C-EUC0402          C6                         
<span class="hljs-number">1</span>   <span class="hljs-number">3.9</span>nH              R-EU_R0402         L1                         
<span class="hljs-number">1</span>   <span class="hljs-number">3</span>M3                R-EU_R0402         R2                         
<span class="hljs-number">4</span>   <span class="hljs-number">4.7</span>M               R-EU_R0402         R5, ROK1, ROV1, RUV2       
<span class="hljs-number">1</span>   <span class="hljs-number">4u</span>7                C-EUC1206          C16                        
<span class="hljs-number">1</span>   <span class="hljs-number">5.3</span>M               R-EU_R0402         R4SET                      
<span class="hljs-number">1</span>   <span class="hljs-number">5.6</span>M               R-EU_R0402         RUV1                       
<span class="hljs-number">2</span>   <span class="hljs-number">6.8</span>M               R-EU_R0402         R3SET, ROK2                
<span class="hljs-number">1</span>   <span class="hljs-number">7.9</span>M               R-EU_R0402         ROV2                       
<span class="hljs-number">6</span>   <span class="hljs-number">9</span>p                 C-EUC0402          C1, C2, C3, C4, C18, C19   
<span class="hljs-number">3</span>   <span class="hljs-number">10</span>M                R-EU_R0402         R3, R4, R6                 
<span class="hljs-number">1</span>   <span class="hljs-number">10</span>k                R-EU_R0402         ROK4                       
<span class="hljs-number">1</span>   <span class="hljs-number">10</span>n                C-EUC0402          C8                         
<span class="hljs-number">1</span>   <span class="hljs-number">10</span>n                C-EUC0603          C13                        
<span class="hljs-number">1</span>   <span class="hljs-number">10u</span>                C-EUC1206K         C41                        
<span class="hljs-number">1</span>   <span class="hljs-number">10u</span>H               MS50               L3                         
<span class="hljs-number">1</span>   <span class="hljs-number">16</span>Mhz              CX3225_2           Q2                         
<span class="hljs-number">1</span>   <span class="hljs-number">22u</span>                C-EUC1206          C24                        
<span class="hljs-number">1</span>   <span class="hljs-number">22u</span>F               C-EUC1206          C23                        
<span class="hljs-number">1</span>   <span class="hljs-number">22u</span>H               MS50               L2                         
<span class="hljs-number">1</span>   <span class="hljs-number">26</span>Mhz              CX3225_2           Q3                         
<span class="hljs-number">1</span>   <span class="hljs-number">32.768</span>kHz          ABS06              Q1                         
<span class="hljs-number">2</span>   <span class="hljs-number">47</span>n                C-EUC0402          C5, C10                    
<span class="hljs-number">1</span>   <span class="hljs-number">56</span>k                R-EU_R0402         R1                         
<span class="hljs-number">6</span>   <span class="hljs-number">100</span>n               C-EUC0402          C7, C17, C20, C25, C26, C39
<span class="hljs-number">1</span>   <span class="hljs-number">2450</span>BM14E0003      <span class="hljs-number">2450</span>BM14E0003      B1                         
<span class="hljs-number">1</span>   ANTENNAS2450AT45A  ANTENNAS2450AT45A  ANT1                       
<span class="hljs-number">1</span>   ANTENNA_868        uSplatch <span class="hljs-number">868</span> Mhz   ANT2                       
<span class="hljs-number">1</span>   BQ25504            BQ25504            IC6                        
<span class="hljs-number">1</span>   CC110L             CC110L             IC5                        
<span class="hljs-number">1</span>   CC110_BALUN        <span class="hljs-number">0868</span>BM15C0001      B2                         
<span class="hljs-number">1</span>   CR2450_SMTHOLDER   CR2450_SMTHOLDER   U$<span class="hljs-number">6</span>                        
<span class="hljs-number">1</span>   ESD_3V3            DIODE-SOD323-W     D1                         
<span class="hljs-number">1</span>   NRF51822QFAB       NRF51422           IC1                        
<span class="hljs-number">1</span>   SUPERCAP_S5R5H105A SUPERCAP_S5R5H105A U$<span class="hljs-number">8</span>                        
<span class="hljs-number">1</span>   TPS22860           TPS22860           IC4                        
<span class="hljs-number">1</span>   TPS62736           TPS62736           IC7                    </pre><h1>Schematics and board layout of sensors</h1><p>Currently two LGA modules were designed - one capable of measuring temperature, barometric pressure and humidity and another which features MMA8453 accelerometer. Eagle 5 design files:</p><p><a href="http://www.iotgreenproject.com/uploads/iotgreensense_bthaccmodule.zip">http://www.iotgreenproject.com/uploads/iotgreensense_bthaccmodule.zip</a><br></p><p>The barometer, temperature and humidity sensor module may be used as it is - on one PCB, or it may be put away on cable to avoid heating from the light source. That is why connectors are present at the device.</p><h2>BOM</h2><pre>Qty Value            Device           Parts
2   10k              R-EU_R0402       R1, R2        
4   100n             C-EUC0402        C1, C2, C3, C7
2   Molex 53398-04   53398-04         X1, X2        
1   HDC1008          HDC1008          IC2           
1   MPL3115          MPL3115          IC1   </pre><pre class="hljs nginx"><span class="hljs-title">Qty</span> Value            Device           Parts 
<span class="hljs-number">2</span>   100n             C-EUC0402        C1, C2
<span class="hljs-number">1</span>   MMA845x          MMA845x          IC1</pre><h1>More photos from development and making first samples</h1><p>Bare boards</p><p><img src="https://cdn.hackaday.io/images/6480511438463387190.JPG"></p><p>Components placed into soldering paste</p><p><img src="https://cdn.hackaday.io/images/449001438463400082.JPG"></p><p>After soldering (IR preheat and hot air)<br><img src="https://cdn.hackaday.io/images/2529011438463410126.JPG"></p><p>Testing<br><img src="https://cdn.hackaday.io/images/8883691438463422099.JPG"></p><p>One base board, two different sensor payloads</p><p><img src="https://cdn.hackaday.io/images/9850631438463432933.JPG"></p><p>Milling the plastic enclosure out of a piece of acrylic.</p><p><img src="https://cdn.hackaday.io/images/7093241438463447694.JPG"></p><h1>Software, plastic enclosure etc.<br></h1><p>This will be added as another update. I am setting up my GitHub repository to effectively share the software with you. Thank you for your patience. More hardware related stuff is also on the way.</p><p>Next week, I will also post a system description document.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/22685-sensor-board-assembly-instructions">Sensor board ‚Äì assembly instructions</a></h2>
                            <small class="authorship">6 days ago  &bull;
                                <a class="gray-link" href="/project/6243/log/22685#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22685"><p>In this project log you will find more detailed instructions about how to solder the sensor board. The sensor board schematics, layout and BOM were published in previous update.<br>
</p><h2>1) Board soldering</h2><p>The board is a
2-layer PCB. The finest-pitch package is the 0.4 mm QFN. The QFN
packages do have thermal pads. Thus, the recommended way of soldering
is to use solder paste and hot air / oven.
The temperature should not exceed 260&#xB0;C at
any point and should not be over 200&#xB0;C for longer than 1 minute.
Excessive overheating may damage the chips or dramatically increase
quiescent currents, thus reducing the performance. The heat-up and
cool-down should not be too quick, the temperature rise and fall
should not exceed 8&#xB0;C per second. This
supports the correct soak-in of the paste and prevents &#x201E;popping&#x201C;
of the paste. The
total number of heating of the board over 200&#xB0;C should not exceed
two times. In case you do not have a paste dispenser or SMT
stencil, it is possible to solder passive components using a
soldering iron with fine tip and after
that, solder the fine-pitch components with solder paste. Check
the pins carefully using magnifying glass or microscope.
Especially at the fine-pitch QFN it is likely that short circuits in
between of pads will be created.</p><p>After the soldering,
it is recommended to properly wash the board using isopropylalcohol.
The total quiescent current of all components is about 3
microamperes. In these conditions, even the remaining flux may rise
the quiescent current and reduce the performance.</p><p>Do not solder the
R12 (value of 0R) resistor now as it will be connected to the
harvesting circuitry after the quiescent current of micrcontroller
and sensors will be checked. In order to reduce the heat stress of
supercapacitor, you may connect a smaller aluminium capacitor (for
example 470 uF value) to test the harvesting circuitry. The reason is
that after checking of the electronics, the LGA sensor board which is
near supercapacitor will be soldered and this could cause excessive
heating to the supercapacitor which could increase leak currents and
decrease its capacity.</p><h2>Known errors on the
board (will be corrected in next revision of sensor boards)</h2><p><strong>Cause: </strong>The
supercapacitor is placed very close to the sensor board LGA pads</p><p><strong>Problem</strong><strong>:</strong> During the
soldering of LGA sensor board, the supercapacitor may be excessively
overheated. 
</p><p><strong>Workaround: </strong>Solder
the supercapacitor in place after soldering the LGA sensor module</p><p><strong>Cause:</strong> The power
input to the is connected to supercapacitor, instead of connecting to
VSTOR pin of BQ25504</p><p><strong>Problem</strong><strong>:</strong> In the
datasheet, it is stated that the load should be connected to the
VSTOR pin and not to the VBAT pin.</p><p><strong>Workaround: </strong>None,
but this issue probably does not reduce the performance. I have
tested both setups and there does not seem to be measurable
difference in overall performance.</p><h2>2) The harvesting
circuitry</h2><p>Connect 3.3V to 5V
with a series resistance of 10kOhm to the GND and INPUT pads on the
left bottom part of PCB. The voltage of the capacitor should be
increasing. When it reaches approx. 3.3 volts, the buck converter starts and 2.7 volts should
appear at the R12 resistor. If everything works, you may pass to the
next step. If not, check the PCB once again for possible shorts or
not properly soldered parts.</p><h2>3) The
microcontroller and surrounding circuitry</h2><p>Power the
microcontroller part of the board using the programming connector or
by using two pins on bottom right part of the board. Program the S110
v7 stack from Nordic Semiconductor and the user software which may be
downloaded from my GitHub to the microcontroller using the J-Link.
Measure the current. Without the sensor board, the sleep current
should not exceed 10 microamps. The typical quiescent current is 3 to
5 microamps.</p><h2>4) Sensor board</h2><p>Solder the sensor
board. Use only a small amount of soldering paste to prevent creating
shorts in between pads. Test if it works fine and the microcontroller
communicates with the sensors properly.</p><h2>5) Finalize the
board</h2><p>Solder the
supercapacitor and place the R12 (0R) resistor in place
(alternatively use a bead of solder to connect the two pads). To
reduce waiting time, connect the 3.3V or 5V supply in series with
470R resistor. After several minutes, the board should be advertising
data via Bluetooth Low Energy non-connectable advertising packets and
868 Mhz packets.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6243/log/22883-intel-edison-based-hub-hw-design">Intel Edison based hub - HW design</a></h2>
                            <small class="authorship">4 days ago  &bull;
                                <a class="gray-link" href="/project/6243/log/22883#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22883"><h1>Introduction</h1><p>This log will be about the Intel Edison based hub. The hub features:</p><ul><li>Powered by USB-B cable</li><li>Based on Intel Edison </li><li>Nordic nRF51422QFAA microcontroller for 2.4 Ghz proprietary protocols and ANT protocol</li><li>Texas Instruments CC110L for short and medium range 868 Mhz communication</li><li>3 indication LEDs</li></ul><p>The photo of the hub:</p><p><img src="https://cdn.hackaday.io/images/2602161439644963560.JPG"></p><h1>Hardware design<br></h1><p>The Eagle 5 files can be found here:</p><p><a href="http://www.iotgreenproject.com/uploads/iotgreenhub_rev1.zip">www.iotgreenproject.com/uploads/iotgreenhub_rev1.zip</a><br></p><p>The PCB is 2-layer, the finest pitch smallest package is 0.4mm QFN (nRF51422QFAA).</p><h1>BOM<br></h1><pre>Qty Value             Device            Parts                           
1                     10-XX             S1                              
3                     LEDSMT1206        LED1, LED2, LED3                
3   0R                R-EU_R0402        R5, R6, R46                     
4   1k                R-EU_R0402        R4, R7, R8, R9                  
6   1n                C-EUC0402         C7, C11, C21, C27, C28, C29     
1   1p2               C-EUC0402         C15                             
1   1u                C-EUC0402         C40                             
1   2n2               C-EUC0402         C6                              
6   9p                C-EUC0402         C1, C2, C3, C4, C18, C19        
1   10k               R-EU_R0402        R13                             
5   10u               C-EUC0805K        C8, C13, C30, C31, C53          
1   10u               C-EUC1206K        C41                             
1   16 Mhz            CX3225_2          Q2                              
1   26Mhz             CX3225_2          Q3                             
1   32.768kHz         ABS06             Q1                              
2   47n               C-EUC0402         C5, C10                         
1   56k               R-EU_R0402        R1                              
7   100n              C-EUC0402         C9, C12, C14, C20, C26, C32, C39
1   270R              R-EU_R0402        R10                             
3   330R              R-EU_R0402        R12, R14, R15                   
1   470R              R-EU_R0402        R3                              
1   560R              R-EU_R0402        R11                             
1   2450BM14E0003     2450BM14E0003     B1                              
1   ANTENNAS2450AT45A ANTENNAS2450AT45A ANT1                            
3   BC846             BC846             T1, T2, T3                      
1   BEAD              R-EU_M1206        R2                              
1   CC110L            CC110L            IC5                             
1   CC110_BALUN       CC110_BALUN       B2                              
1   FT232RQ           FT232RQ           IC2                             
1   DF40C-70DS-0.4V   Hirose 70pin      U$7  (Intel Edison receptacle header)
1   NRF51422QFAA      NRF51422          IC1                             
2   REG1117           REG1117           IC3, IC4                        
1   TC2030_NL         TC2030_NL         X1                              
1   TPD2E1B06         TPD2E1B06         IC6                             
1   USB_B THT         PN61729-S         X2                              
1   none              R-EU_R0402        L1                              
1   uSplatch 868 Mhz  ANTENNA_868       ANT2      </pre>              <h1>Instructions</h1><div>Solder all components except for R5 and R6. Plug the USB B connector into the port and check the voltage on the LDOs. The output voltage of the IC3 LDO is 3.8V, while the output voltage of the IC4 LDO is 1.8 volts. The FT232RQ should enumerate as a USB to UART device. If this is OK, solder the R5 resistor and connect the Intel Edison board to the socket. Plug in the USB connector and run PuTTY or other terminal at 115200 baud rate. You should be able to login to the Edison board. If so, disconnect the USB connector and solder the R6 resistor. Check if you can program the nRF51422 using SWD. </div><h1>Software  <span></span><span></span></h1><div>Tomorrow I am leaving for a conference in Denmark. Thus, the software will be published with a little delay (presumably around 25 to 28th August). The software package will include software for Intel Edison and for nRF51822 microcontroller.</div><ul><li>The nRF51422 will act like a 868 Mhz to UART bridge to provide IoTGreenSense 868 Mhz packets to Intel Edison board</li><li>Intel Edison will upload the packets to a MySQL database on my webhosting, where they can be further analyzed</li></ul><p>The software for Intel Edison will be written in Python or NodeJS.</p><ul><li><span></span></li></ul></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'zsgUyQ8V-YuKcFIOO6dnAdYQqAUO9QCePl9U';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>