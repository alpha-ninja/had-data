<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; GPS Disciplined TCXO &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6872%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6872-gps-disciplined-tcxo">GPS Disciplined TCXO</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A DIY GPS disciplined 10 MHz reference clock</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/45439-nick-sayer" title="Visit Profile">Nick Sayer</a><span>&bull;</span>
                
                a month ago<span>&bull;</span><a href="/project/6872#discussion-list" title="See Comments">4 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6872-gps-disciplined-tcxo">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6872/logs/sort/newest">Newest</option>
                    <option value="/project/6872/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6872/log/21327-picking-a-frequency">Picking a frequency</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21327#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21327"><p>When I asked on Twitter if there would be any interest in such a product, one response said that 10 MHz might be a better choice.</p><p>The limitations on which frequency you pick are twofold: availability of a suitable oscillator, and the tension between sample count, granularity, and locking speed.</p><p>10 MHz is certainly an available frequency. For my needs, I wanted the fastest clock I could get that would still operate an ATMega processor, so I went with 20. Faster is better because it gives you greater granularity in counting clock cycles between occurrences (in our case of the PPS signal, but it could also be of the frequency you&apos;re counting). You can make up for that by increasing the counting window. In our case, even with 20 MHz, a single count either way out of 20 million is only a granularity of &#xB1;50 ppb, while the stability of the oscillator is &#xB1;20 ppb. The plan at the moment is to keep a rolling 10 second window of counts for the feedback loop. That will get us down to a granularity of &#xB1;5 ppb, which squares pretty well with our D/A trimming granularity of near &#xB1;1 ppb.</p><p>Going with 10 MHz without changing anything still gives us a sampling granularity of &#xB1;10 ppb, which is still fine. You just have to tell the firmware what to expect and nothing should really change.</p><p>It would be a little worse if you tried to go with 5 MHz or some oddball frequency like 3.579545 MHz or 16 MHz or something like that. I&apos;m not planning on going there.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21335-to-sine-or-not-to-sine">To sine or not to sine</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21335#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21335"><p>Another design choice is selecting the output. It&apos;s most convenient for me to just use LVCMOS square wave output. To that end, I&apos;ve selected a clock fan-out buffer chip to protect the oscillator. It sends one output to the controller and the other three to a 6 pin .1&quot; DIP header as the main output of the device. </p><p>This is going to wind up just being a board for sale on Tindie, so I&apos;m not going to go to a great deal of trouble making it fancy. And for my use-case, a square wave is more useful.</p><p>But when you&apos;re trying to design a product, sometimes you have to give deference to what your customers prefer.</p><p>It&apos;s easier to turn a sine wave into a square wave (using a Schmidt trigger buffer most likely) than vice versa (you&apos;d use a crystal BPF for that).</p><p>What does everyone think? Maybe turn one of the digital outputs into a 1v p-p 50 ohm sine output? Please comment / vote. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21379-oops-ad5601-ad5061">Oops AD5601-&gt;AD5061</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21379#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21379"><p>I went into a bit of a tizzy just now. I looked up the AD5601 thinking that it was the DAC that I had picked, and discovered it was an 8 bit part. I then went on a search for a replacement and then realized that I had meant to say AD5061, which is the 16 bit part with the mid-point POR behavior that I had thought it was.</p><p>Whew.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21389-firmware">Firmware</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21389#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21389"><p>I pulled an all-nighter last night and wrote a first cut of the firmware. It was pretty heavily influenced by the previous work I&apos;d done. It&apos;s mostly interrupt driven. There are interrupt handlers for the ICP capture interrupt and an overflow handler used to extend the number of bits of the 20 MHz counter.</p><p>The non-interrupt driven portion of the program mostly camps out on the serial port waiting for NEMA sentences. We wait for $GPGSA, and check for whether the fix is 3D or not. If it&apos;s not, then the GPS is not locked. The oscillator is allowed to free-run whenever that&apos;s the case. Immediately after the GPS becomes locked, we begin acquiring samples. After the sample buffer is full if the total drift within the sample window is below a threshold, we&apos;ll indicate a lock. If the drift is within a relatively small window, we&apos;ll &quot;nudge&quot; the oscillator by a single trim unit (which is only ~0.2 ppb). If the drift value is larger than that, we&apos;ll hit it in proportion to how far out it is, but only up to a maximum value.</p><p>Every four hours of running time, we update a location in EEPROM with the trim value, and reload that at startup, hopefully reducing the lock time on restart. Of course, adding a CR1220 battery to the board will allow the GPS to warm-start and obtain a fix much more quickly as well.</p><p>At the moment, the firmware is written in the Arduino IDE and it uses digitalWrite(), Serial and delayMicroseconds(), but that&apos;s quite wasteful, and that&apos;s not counting the timer0 mills() interrupt infrastructure for which we have no use. I&apos;m fairly confident the raw AVR libc equivalents could be used instead, resulting in much more lean and efficient code, and after the initial proof of concept, I hope to do just that.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21391-and-now-we-wait">And now, we wait</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21391#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21391"><p>Unfortunately, this is sort of where things pause for a bit. I&apos;ve got boards into OSHPark right now for Crazy Clock calibrators that use fixed OCXOs with the same footprint as what I intend to use here, and I want to build those before I design too far ahead of myself.</p><p>What I may do, however, is try and build a breakout board for the DAC. That by itself is one of the bigger unknowns, and it has a sort of whacky SOT23-8 footprint. I also want to experiment with the clock fanout buffer, but that&apos;s an ordinary SOIC-8, so breakout boards for that are easy to come by. One thing I want to do is try and breadboard the equivalent of using the fanout buffer as a driver and receiver with a &quot;long&quot; 50 ohm cable between the two to simulate actual service. The sending termination will be a 10 ohm series resistor (to eat reflections), and on the receiving end a 50 ohm resistor and 0.1&#xB5;F cap in series to ground (AC termination). If that works, I can design yet another Crazy Clock calibrator that simply takes in an external reference clock and therefore eat my own dog food.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21473-minor-updates-to-the-circuit">Minor updates to the circuit</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21473#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21473"><p>I spoke today with a more experienced EE at work, and he explained the purpose of a couple of the components that I had left out of the circuit on the Connor Winfield application note. I hadn&apos;t left them out intending to leave them out so much as I wanted to add correct values once I understood what their purpose was.</p><p>The two items were a loading resistor on the output of the chopper amp buffer, and the RC filter on the output of the DAC. Both are intended for noise reduction. In the first case, it reduces the loading impedance of the OCXO control voltage input, and in the latter case, it&apos;s a low-pass filter on the output of the DAC.</p><p>That said, I believe there is an error on the circuit from the application note. They have the V- pin of the chopper amp connected <em>through a capacitor</em> to ground. That effectively disconnects the DC path for the power supply. That just can&apos;t be right.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21525-boards">Boards</a></h2>
                            <small class="authorship">25 days ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21525#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21525"><p>I&apos;ve shared the board design over at OSHPark. Some details not obvious from the schematic:</p><ul><li>The power supply path from the input all the way to the supply pin of the OCXO is 32 mils wide, which is extra width because that&apos;s the highest current path in the whole project. The rest of the 3.3V+ supply rails are 16 mils wide.</li><li>A bunch of the bypass caps are lumped together in the schematic near the regulator. Whenever you see that in a schematic you should understand that they&apos;re not physically located near each other. Rather, they&apos;re scattered around near Vcc pins of ICs for decoupling.</li><li>Not shown on the schematic is that the clock output lines from the fan-out buffer have &quot;meanders&quot; in them to try and make the traces the same physical length. It&apos;s unlikely that this will actually matter at 10 MHz (or even 20), or with a stability of only 20 ppb, but it doesn&apos;t cost anything to do.</li></ul><p>I&apos;m probably going to order the first set of boards today, but I want to make sure the D/A chips fit in the layout before I commit. They&apos;re the last untested footprint. I&apos;m also probably going to try and breadboard one and feed it with a basic sawtooth sketch (a tight loop that writes a continuously incrementing value to the D/A) to test it.</p><p>The OSHPark shared board used to be linked here, but that board isn&apos;t going to work - the 3.3V regulator will overheat badly. I&apos;ll link to the final board once it&apos;s tested (in about a week and a half).</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21548-da-test-success">D/A test success!</a></h2>
                            <small class="authorship">24 days ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21548#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21548"><p>So today, I did this:</p><p><img src="https://cdn.hackaday.io/images/291971437857128346.jpg"></p><p>That&apos;s a <a href="http://www.schmartboard.com">SchmartBoard</a> with an AD5061-2 on it hooked up to my PDIP ATMega328p on the breadboard. I took my firmware test code and uploaded it and got a very, very slow ramp. Even clocked at 20 MHz, it takes ~488 &#xB5;s to do the bitbang upload into the D/A chip. I&apos;m confident that using the actual SPI functionality of the ATMega I could make it go faster than that, but the truth is, this only has to at most do one D/A operation per second, so it doesn&apos;t really matter. After adjusting the firmware to do a divide-by-16 (that is, increment the value by 0x10 instead of 1), I was able to get this:</p><p><img src="https://cdn.hackaday.io/images/1958881437857105967.jpg"></p><p>And, of course, I was able to confirm that the part fits perfectly on the footprint on the board.</p><p>The next thing is to test the fan-out chip. I&apos;m going to try and stick one between the oscillator and the controller, but I don&apos;t have a lot of doubts that it&apos;s going to work. I think I will pull the trigger on the boards.</p><p>P.S. Replacing digitalWrite() with direct operations on PORTB results in a 10x improvement. Writing to the DAC now takes 48 microseconds.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21552-nb3n551-ftw">NB3N551 FTW</a></h2>
                            <small class="authorship">24 days ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21552#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21552"><p>And here&apos;s the next thing:</p><p><img src="https://cdn.hackaday.io/images/7944881437859435400.jpg"></p><p>That&apos;s two NB3N551 clock fanout buffer chips. The bottom one is being fed by a 20 MHz oscillator and the wire leaving from pin 2 is around 4 feet long before coming back to pin 1 of the top one. By the time it gets there, on the scope, it&apos;s almost a triangle wave. But after exiting pin 4 and going over to the ATMega, it&apos;s just as pristine as the square wave leaving the oscillator. The first stage of the NB3N551 is, so far as I can tell, a very, very fast comparator comparing the input to Vcc/2. You should be able to feed it just about anything and it&apos;ll turn it into a square wave, as long as it is over the Vcc/2 threshold 50% of the time. &#xA1;Me gusta!</p><p>Now, this circuit doesn&apos;t have any bypass caps on it and there&apos;s no termination on any of the clock lines. So it&apos;s working more or less perfectly under definitely the worst case conditions.</p><p>So I feel good!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6872/log/21577-atmega328p-attiny4313">ATMega328p -&gt; ATTiny4313</a></h2>
                            <small class="authorship">24 days ago  &bull;
                                <a class="gray-link" href="/project/6872/log/21577#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21577"><p>Looking at the schematic and seeing all of the not-connected pins made me moody.</p><p>It turns out that the ATTiny4313 is an almost perfect fit for this project. It has a 16 bit timer with input capture, a USART, a watchdog timer, can run with an external oscillator clock input, and will run at 10 MHz (this used to say 20 MHz, but it turns out that was wrong) at 3.3 volts.</p><p>I&apos;ve already ordered boards with an ATMega, but I&apos;ve already written new firmware that compiles without the Arduino IDE (with just the GNU AVR toolchain and AVR libc). Converting that over to using an ATTiny4313 was just a matter of reassigning the appropriate pins and renaming some of the registers.</p><p>If this prototype run works, I&apos;ll get another run made with the ATTiny SOIC footprint and test that out. Assuming that works without any big problems, then that will be the way forward.</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'EQoMHfyQ-1m1Go6Nbsgbth8r8OXIqg6KrWZU';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>