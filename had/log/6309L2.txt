<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; SPI and TTL Serial VGA Graphics Card - VGATonic &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6309%2Flogs%3Fpage%3D2">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic">SPI and TTL Serial VGA Graphics Card - VGATonic</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">640x480 Color VGA Video Card for Microcontrollers and Single Board Computers</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/18962-pk" title="Visit Profile">PK</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6309#discussion-list" title="See Comments">22 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6309/logs/sort/newest">Newest</option>
                    <option value="/project/6309/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6309/log/20759-a-tiny-4x6-pixel-font-that-will-fit-on-almost-any-microcontroller-license-mit">A Tiny 4x6 Pixel Font That Will Fit On Almost Any Microcontroller (License: MIT)</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20759#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20759"><p><img src="https://cdn.hackaday.io/images/6303721436504672536.png"></p>
<p>I won't ruin the surprise about what feature I'm working on right now for VGATonic (it's a crazy one), but I needed to add a font.  Let me rephrase - a tiny font.  Let me be more specific - the most space efficient font possible.</p><p><br>My searching first led me to the 4x6 font here: <a href="http://robey.lag.net/2010/01/23/tiny-monospace-font.html">http://robey.lag.net/2010/01/23/tiny-monospace-font.html</a> made with an assist by 'Robey' by Brian Swetland of Palm Pilot fame (I've got a working Palm Pilot with a minor crack in the screen in the office).  Further clicking led me here, where "Dr_Acula" had already encoded it into 96x3 bytes: <a href="http://forums.parallax.com/discussion/comment/1073601#Comment_1073601">http://forums.parallax.com/discussion/comment/1073601#Comment_1073601</a><span class="redactor-invisible-space"></span></p><p>We can do better, though - you see, it's <em>really</em> a "<strong>3x5</strong>" font, with whitespaces. </p><p> 3x5 = 15, which is less than 16 (one word, or 2 8 bit bytes).  You guessed it - I wrote up some python to make it even smaller, and jammed each character into 2 bytes.  It's so small, I'm going to post it<em><strong> in its entirety</strong></em> here (in C, for AVR - easy enough to convert for your favorite language):</p><pre class="hljs cpp"><span class="hljs-comment">// Font Definition</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">uint8_t</span> font4x6 [<span class="hljs-number">96</span>][<span class="hljs-number">2</span>] PROGMEM = {
 {  <span class="hljs-number">0x00</span>  ,  <span class="hljs-number">0x00</span>  },   <span class="hljs-comment">/*SPACE*/</span>
 {  <span class="hljs-number">0x49</span>  ,  <span class="hljs-number">0x08</span>  },   <span class="hljs-comment">/*'!'*/</span>
 {  <span class="hljs-number">0xb4</span>  ,  <span class="hljs-number">0x00</span>  },   <span class="hljs-comment">/*'"'*/</span>
 {  <span class="hljs-number">0xbe</span>  ,  <span class="hljs-number">0xf6</span>  },   <span class="hljs-comment">/*'#'*/</span>
 {  <span class="hljs-number">0x7b</span>  ,  <span class="hljs-number">0x7a</span>  },   <span class="hljs-comment">/*'$'*/</span>
 {  <span class="hljs-number">0xa5</span>  ,  <span class="hljs-number">0x94</span>  },   <span class="hljs-comment">/*'%'*/</span>
 {  <span class="hljs-number">0x55</span>  ,  <span class="hljs-number">0xb8</span>  },   <span class="hljs-comment">/*'&amp;'*/</span>
 {  <span class="hljs-number">0x48</span>  ,  <span class="hljs-number">0x00</span>  },   <span class="hljs-comment">/*'''*/</span>
 {  <span class="hljs-number">0x29</span>  ,  <span class="hljs-number">0x44</span>  },   <span class="hljs-comment">/*'('*/</span>
 {  <span class="hljs-number">0x44</span>  ,  <span class="hljs-number">0x2a</span>  },   <span class="hljs-comment">/*')'*/</span>
 {  <span class="hljs-number">0x15</span>  ,  <span class="hljs-number">0xa0</span>  },   <span class="hljs-comment">/*'*'*/</span>
 {  <span class="hljs-number">0x0b</span>  ,  <span class="hljs-number">0x42</span>  },   <span class="hljs-comment">/*'+'*/</span>
 {  <span class="hljs-number">0x00</span>  ,  <span class="hljs-number">0x50</span>  },   <span class="hljs-comment">/*','*/</span>
 {  <span class="hljs-number">0x03</span>  ,  <span class="hljs-number">0x02</span>  },   <span class="hljs-comment">/*'-'*/</span>
 {  <span class="hljs-number">0x00</span>  ,  <span class="hljs-number">0x08</span>  },   <span class="hljs-comment">/*'.'*/</span>
 {  <span class="hljs-number">0x25</span>  ,  <span class="hljs-number">0x90</span>  },   <span class="hljs-comment">/*'/'*/</span>
 {  <span class="hljs-number">0x76</span>  ,  <span class="hljs-number">0xba</span>  },   <span class="hljs-comment">/*'0'*/</span>
 {  <span class="hljs-number">0x59</span>  ,  <span class="hljs-number">0x5c</span>  },   <span class="hljs-comment">/*'1'*/</span>
 {  <span class="hljs-number">0xc5</span>  ,  <span class="hljs-number">0x9e</span>  },   <span class="hljs-comment">/*'2'*/</span>
 {  <span class="hljs-number">0xc5</span>  ,  <span class="hljs-number">0x38</span>  },   <span class="hljs-comment">/*'3'*/</span>
 {  <span class="hljs-number">0x92</span>  ,  <span class="hljs-number">0xe6</span>  },   <span class="hljs-comment">/*'4'*/</span>
 {  <span class="hljs-number">0xf3</span>  ,  <span class="hljs-number">0x3a</span>  },   <span class="hljs-comment">/*'5'*/</span>
 {  <span class="hljs-number">0x73</span>  ,  <span class="hljs-number">0xba</span>  },   <span class="hljs-comment">/*'6'*/</span>
 {  <span class="hljs-number">0xe5</span>  ,  <span class="hljs-number">0x90</span>  },   <span class="hljs-comment">/*'7'*/</span>
 {  <span class="hljs-number">0x77</span>  ,  <span class="hljs-number">0xba</span>  },   <span class="hljs-comment">/*'8'*/</span>
 {  <span class="hljs-number">0x77</span>  ,  <span class="hljs-number">0x3a</span>  },   <span class="hljs-comment">/*'9'*/</span>
 {  <span class="hljs-number">0x08</span>  ,  <span class="hljs-number">0x40</span>  },   <span class="hljs-comment">/*':'*/</span>
 {  <span class="hljs-number">0x08</span>  ,  <span class="hljs-number">0x50</span>  },   <span class="hljs-comment">/*';'*/</span>
 {  <span class="hljs-number">0x2a</span>  ,  <span class="hljs-number">0x44</span>  },   <span class="hljs-comment">/*'&lt;'*/</span>
 {  <span class="hljs-number">0x1c</span>  ,  <span class="hljs-number">0xe0</span>  },   <span class="hljs-comment">/*'='*/</span>
 {  <span class="hljs-number">0x88</span>  ,  <span class="hljs-number">0x52</span>  },   <span class="hljs-comment">/*'&gt;'*/</span>
 {  <span class="hljs-number">0xe5</span>  ,  <span class="hljs-number">0x08</span>  },   <span class="hljs-comment">/*'?'*/</span>
 {  <span class="hljs-number">0x56</span>  ,  <span class="hljs-number">0x8e</span>  },   <span class="hljs-comment">/*'@'*/</span>
 {  <span class="hljs-number">0x77</span>  ,  <span class="hljs-number">0xb6</span>  },   <span class="hljs-comment">/*'A'*/</span>
 {  <span class="hljs-number">0x77</span>  ,  <span class="hljs-number">0xb8</span>  },   <span class="hljs-comment">/*'B'*/</span>
 {  <span class="hljs-number">0x72</span>  ,  <span class="hljs-number">0x8c</span>  },   <span class="hljs-comment">/*'C'*/</span>
 {  <span class="hljs-number">0xd6</span>  ,  <span class="hljs-number">0xba</span>  },   <span class="hljs-comment">/*'D'*/</span>
 {  <span class="hljs-number">0x73</span>  ,  <span class="hljs-number">0x9e</span>  },   <span class="hljs-comment">/*'E'*/</span>
 {  <span class="hljs-number">0x73</span>  ,  <span class="hljs-number">0x92</span>  },   <span class="hljs-comment">/*'F'*/</span>
 {  <span class="hljs-number">0x72</span>  ,  <span class="hljs-number">0xae</span>  },   <span class="hljs-comment">/*'G'*/</span>
 {  <span class="hljs-number">0xb7</span>  ,  <span class="hljs-number">0xb6</span>  },   <span class="hljs-comment">/*'H'*/</span>
 {  <span class="hljs-number">0xe9</span>  ,  <span class="hljs-number">0x5c</span>  },   <span class="hljs-comment">/*'I'*/</span>
 {  <span class="hljs-number">0x64</span>  ,  <span class="hljs-number">0xaa</span>  },   <span class="hljs-comment">/*'J'*/</span>
 {  <span class="hljs-number">0xb7</span>  ,  <span class="hljs-number">0xb4</span>  },   <span class="hljs-comment">/*'K'*/</span>
 {  <span class="hljs-number">0x92</span>  ,  <span class="hljs-number">0x9c</span>  },   <span class="hljs-comment">/*'L'*/</span>
 {  <span class="hljs-number">0xbe</span>  ,  <span class="hljs-number">0xb6</span>  },   <span class="hljs-comment">/*'M'*/</span>
 {  <span class="hljs-number">0xd6</span>  ,  <span class="hljs-number">0xb6</span>  },   <span class="hljs-comment">/*'N'*/</span>
 {  <span class="hljs-number">0x56</span>  ,  <span class="hljs-number">0xaa</span>  },   <span class="hljs-comment">/*'O'*/</span>
 {  <span class="hljs-number">0xd7</span>  ,  <span class="hljs-number">0x92</span>  },   <span class="hljs-comment">/*'P'*/</span>
 {  <span class="hljs-number">0x76</span>  ,  <span class="hljs-number">0xee</span>  },   <span class="hljs-comment">/*'Q'*/</span>
 {  <span class="hljs-number">0x77</span>  ,  <span class="hljs-number">0xb4</span>  },   <span class="hljs-comment">/*'R'*/</span>
 {  <span class="hljs-number">0x71</span>  ,  <span class="hljs-number">0x38</span>  },   <span class="hljs-comment">/*'S'*/</span>
 {  <span class="hljs-number">0xe9</span>  ,  <span class="hljs-number">0x48</span>  },   <span class="hljs-comment">/*'T'*/</span>
 {  <span class="hljs-number">0xb6</span>  ,  <span class="hljs-number">0xae</span>  },   <span class="hljs-comment">/*'U'*/</span>
 {  <span class="hljs-number">0xb6</span>  ,  <span class="hljs-number">0xaa</span>  },   <span class="hljs-comment">/*'V'*/</span>
 {  <span class="hljs-number">0xb6</span>  ,  <span class="hljs-number">0xf6</span>  },   <span class="hljs-comment">/*'W'*/</span>
 {  <span class="hljs-number">0xb5</span>  ,  <span class="hljs-number">0xb4</span>  },   <span class="hljs-comment">/*'X'*/</span>
 {  <span class="hljs-number">0xb5</span>  ,  <span class="hljs-number">0x48</span>  },   <span class="hljs-comment">/*'Y'*/</span>
 {  <span class="hljs-number">0xe5</span>  ,  <span class="hljs-number">0x9c</span>  },   <span class="hljs-comment">/*'Z'*/</span>
 {  <span class="hljs-number">0x69</span>  ,  <span class="hljs-number">0x4c</span>  },   <span class="hljs-comment">/*'['*/</span>
 {  <span class="hljs-number">0x91</span>  ,  <span class="hljs-number">0x24</span>  },   <span class="hljs-comment">/*'\'*/</span>
 {  <span class="hljs-number">0x64</span>  ,  <span class="hljs-number">0x2e</span>  },   <span class="hljs-comment">/*']'*/</span>
 {  <span class="hljs-number">0x54</span>  ,  <span class="hljs-number">0x00</span>  },   <span class="hljs-comment">/*'^'*/</span>
 {  <span class="hljs-number">0x00</span>  ,  <span class="hljs-number">0x1c</span>  },   <span class="hljs-comment">/*'_'*/</span>
 {  <span class="hljs-number">0x44</span>  ,  <span class="hljs-number">0x00</span>  },   <span class="hljs-comment">/*'`'*/</span>
 {  <span class="hljs-number">0x0e</span>  ,  <span class="hljs-number">0xae</span>  },   <span class="hljs-comment">/*'a'*/</span>
 {  <span class="hljs-number">0x9a</span>  ,  <span class="hljs-number">0xba</span>  },   <span class="hljs-comment">/*'b'*/</span>
 {  <span class="hljs-number">0x0e</span>  ,  <span class="hljs-number">0x8c</span>  },   <span class="hljs-comment">/*'c'*/</span>
 {  <span class="hljs-number">0x2e</span>  ,  <span class="hljs-number">0xae</span>  },   <span class="hljs-comment">/*'d'*/</span>
 {  <span class="hljs-number">0x0e</span>  ,  <span class="hljs-number">0xce</span>  },   <span class="hljs-comment">/*'e'*/</span>
 {  <span class="hljs-number">0x56</span>  ,  <span class="hljs-number">0xd0</span>  },   <span class="hljs-comment">/*'f'*/</span>
 {  <span class="hljs-number">0x55</span>  ,  <span class="hljs-number">0x3B</span>  },   <span class="hljs-comment">/*'g'*/</span>
 {  <span class="hljs-number">0x93</span>  ,  <span class="hljs-number">0xb4</span>  },   <span class="hljs-comment">/*'h'*/</span>
 {  <span class="hljs-number">0x41</span>  ,  <span class="hljs-number">0x44</span>  },   <span class="hljs-comment">/*'i'*/</span>
 {  <span class="hljs-number">0x41</span>  ,  <span class="hljs-number">0x51</span>  },   <span class="hljs-comment">/*'j'*/</span>
 {  <span class="hljs-number">0x97</span>  ,  <span class="hljs-number">0xb4</span>  },   <span class="hljs-comment">/*'k'*/</span>
 {  <span class="hljs-number">0x49</span>  ,  <span class="hljs-number">0x44</span>  },   <span class="hljs-comment">/*'l'*/</span>
 {  <span class="hljs-number">0x17</span>  ,  <span class="hljs-number">0xb6</span>  },   <span class="hljs-comment">/*'m'*/</span>
 {  <span class="hljs-number">0x1a</span>  ,  <span class="hljs-number">0xb6</span>  },   <span class="hljs-comment">/*'n'*/</span>
 {  <span class="hljs-number">0x0a</span>  ,  <span class="hljs-number">0xaa</span>  },   <span class="hljs-comment">/*'o'*/</span>
 {  <span class="hljs-number">0xd6</span>  ,  <span class="hljs-number">0xd3</span>  },   <span class="hljs-comment">/*'p'*/</span>
 {  <span class="hljs-number">0x76</span>  ,  <span class="hljs-number">0x67</span>  },   <span class="hljs-comment">/*'q'*/</span>
 {  <span class="hljs-number">0x17</span>  ,  <span class="hljs-number">0x90</span>  },   <span class="hljs-comment">/*'r'*/</span>
 {  <span class="hljs-number">0x0f</span>  ,  <span class="hljs-number">0x38</span>  },   <span class="hljs-comment">/*'s'*/</span>
 {  <span class="hljs-number">0x9a</span>  ,  <span class="hljs-number">0x8c</span>  },   <span class="hljs-comment">/*'t'*/</span>
 {  <span class="hljs-number">0x16</span>  ,  <span class="hljs-number">0xae</span>  },   <span class="hljs-comment">/*'u'*/</span>
 {  <span class="hljs-number">0x16</span>  ,  <span class="hljs-number">0xba</span>  },   <span class="hljs-comment">/*'v'*/</span>
 {  <span class="hljs-number">0x16</span>  ,  <span class="hljs-number">0xf6</span>  },   <span class="hljs-comment">/*'w'*/</span>
 {  <span class="hljs-number">0x15</span>  ,  <span class="hljs-number">0xb4</span>  },   <span class="hljs-comment">/*'x'*/</span>
 {  <span class="hljs-number">0xb5</span>  ,  <span class="hljs-number">0x2b</span>  },   <span class="hljs-comment">/*'y'*/</span>
 {  <span class="hljs-number">0x1c</span>  ,  <span class="hljs-number">0x5e</span>  },   <span class="hljs-comment">/*'z'*/</span>
 {  <span class="hljs-number">0x6b</span>  ,  <span class="hljs-number">0x4c</span>  },   <span class="hljs-comment">/*'{'*/</span>
 {  <span class="hljs-number">0x49</span>  ,  <span class="hljs-number">0x48</span>  },   <span class="hljs-comment">/*'|'*/</span>
 {  <span class="hljs-number">0xc9</span>  ,  <span class="hljs-number">0x5a</span>  },   <span class="hljs-comment">/*'}'*/</span>
 {  <span class="hljs-number">0x54</span>  ,  <span class="hljs-number">0x00</span>  },   <span class="hljs-comment">/*'~'*/</span>
 {  <span class="hljs-number">0x56</span>  ,  <span class="hljs-number">0xe2</span>  }    <span class="hljs-comment">/*''*/</span>
};

<span class="hljs-comment">// Font retreival function - ugly, but needed.</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> <span class="hljs-title">getFontLine</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> data, <span class="hljs-keyword">int</span> line_num)</span> </span>{
  <span class="hljs-keyword">const</span> <span class="hljs-keyword">uint8_t</span> index = (data-<span class="hljs-number">32</span>);
  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> pixel = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">if</span> (pgm_read_byte(&amp;font4x6[index][<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">1</span> == <span class="hljs-number">1</span>) line_num -= <span class="hljs-number">1</span>;
  <span class="hljs-keyword">if</span> (line_num == <span class="hljs-number">0</span>) {
      pixel = (pgm_read_byte(&amp;font4x6[index][<span class="hljs-number">0</span>])) &gt;&gt; <span class="hljs-number">4</span>;
  } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(line_num == 1)</span> </span>{
      pixel = (pgm_read_byte(&amp;font4x6[index][<span class="hljs-number">0</span>])) &gt;&gt; <span class="hljs-number">1</span>;
  } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(line_num == 2)</span> </span>{ 
      <span class="hljs-comment">// Split over 2 bytes</span>
      <span class="hljs-keyword">return</span> (((pgm_read_byte(&amp;font4x6[index][<span class="hljs-number">0</span>])) &amp; <span class="hljs-number">0x03</span>) &lt;&lt; <span class="hljs-number">2</span>) | (((pgm_read_byte(&amp;font4x6[index][<span class="hljs-number">1</span>])) &amp; <span class="hljs-number">0x02</span>));
  } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(line_num == 3)</span> </span>{
      pixel = (pgm_read_byte(&amp;font4x6[index][<span class="hljs-number">1</span>])) &gt;&gt; <span class="hljs-number">4</span>;
  } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(line_num == 4)</span> </span>{
      pixel = (pgm_read_byte(&amp;font4x6[index][<span class="hljs-number">1</span>])) &gt;&gt; <span class="hljs-number">1</span>;
  }
  <span class="hljs-keyword">return</span> pixel &amp; <span class="hljs-number">0xE</span>;
}</pre>
<p>To decode, you pass in the character you want (ASCII, so say 'c' or 0x63) and a line number.  Line 0 through 4 will be the magic lines, so set up your loop accordingly.</p><h2>And the Descenders? ('g', 'j', 'p', 'q', 'y')</h2><p>I manually changed the descenders to have a '1' in the LSB of the second byte.  That's the second line of the decoder program - if there is a one in that spot, I shift the whole thing down a line.  (Why waste a bit, right?  I think the CPLD work in those tight conditions is in my head still).</p><p>I manually edited the 'j' and the 'z', but before you ask - it can stay as the MIT license.  Enjoy, and please let me know it you use it!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20830-whats-old-is-new-again-xmodem-and-serial-transfers-meet-vgatonic">What&#39;s Old is New Again - XMODEM and Serial Transfers meet VGATonic!</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20830#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20830"><p>I'm playing with the USART on the ATTiny 2313a currently.  Since I have all of the SPI writes working excellently, the first thing I wanted to do was have a simple method of blasting writes over the (new, since we didn't have it before!) serial connection to VGATonic!</p><p>Instead of writing a new protocol from scratch, I looked into some of the early methods of file transfer over (slow, at least relative to today) early modems.</p><p>In 1977, Ward Christensen released a protocol called 'XMODEM' for a terminal program he was making.  XMODEM's algorithm is relatively simple (Christiansen referred to it as a "hack" - was it ever featured on Hackaday?):</p><pre class="hljs sql">1) SOH - <span class="hljs-operator"><span class="hljs-keyword">Start</span> <span class="hljs-keyword">of</span> Header Packet
<span class="hljs-number">2</span>) Sequence - Counter <span class="hljs-keyword">to</span> <span class="hljs-number">255</span> (the packet <span class="hljs-keyword">order</span>)
<span class="hljs-number">3</span>) <span class="hljs-number">1</span><span class="hljs-string">s Complement of Sequence: (255 and seq) xor 255
4) 128 Bytes of Data
5) Checksum - add all data bytes together and disregard the carries
6) Receiver sends back 'ACK' or 'NAK', ACK being a match and 
    NAK meaning 'resend, there is a mismatch'</span></span></pre>
<p>As Christiansen put it, his resulting XMODEM protocol may very well be the most modified code (and supported file transfer protocol!) of all time.  It's quite efficient: 4 bytes of overhead for 128 Bytes of data.  (With 8-N-1 Serial you <em><strong>also</strong></em> lose 2 bytes every 10 due to start and stop bits)</p><p>Instead of reinventing the wheel, I'm basing my protocol on XMODEM.  Here's what I've got working:</p><pre>1) Escape character
    a) Receiver sends back '&gt;'
2) Start Packet (I'm using a 'W')
    b) Receiver sends back '#'
3) x = message length (One byte, so 0 - 255)
    c) Receiver echos size
4) Send x single bytes
5) Receiver sends back ACK</pre>Note that I don't care about checksums, and VGATonic will never ask for a resend - a slight pixel difference is fine for our application.<p>So, We've got 7 bytes of overhead for (up to) 255 bytes of data, or roughly 97.3% <em><strong>channel efficiency</strong></em>.  Now, multiply the 262 bytes by (10/8) (the inverse of the efficiency of our asynchronous serial connection)  to find how many 'raw' bytes from the serial connection are needed:</p><pre>Bytes Needed:            (10/8) * 262 = 327.5
Bits Needed:               327.5*8 = 2,620
Data Bits Transferred: 255*8 = 2,040

Overall Efficiency: 255/327.5 = 77.86%</pre>
<p> Now that you've got an idea of overhead - almost a quarter(!) - you can calculate how some of the VGATonic screen writes would work:</p><pre>640*480*8 bit depth needs 2,457,600 bits, which would take 
3,156,330 bit transfers after overhead.

... (etc)

320*240*4 bit depth needs 307,200 bits, which would take 
394,541 bit transfers after overhead.

... (etc)

80*60*1 bit depth needs 4,800 bits, which would take 
6,165 bit transfers after overhead.</pre>
<p> I've tested it at 9,600 baud and 38,400 baud - common enough speeds.  For those 3 (Remember, we have all 16 combinations if we want them):</p><pre class="hljs perl"><span class="hljs-number">640</span>*<span class="hljs-number">480</span><span class="hljs-variable">@8bpp</span> (<span class="hljs-number">256</span> color)
<span class="hljs-number">9</span>,<span class="hljs-number">600</span> Baud: <span class="hljs-number">328.8</span> seconds per frame ( <span class="hljs-number">5.5</span> minutes(!) )
<span class="hljs-number">38</span>,<span class="hljs-number">400</span> Baud: <span class="hljs-number">82.2</span> seconds per frame ( <span class="hljs-number">1.4</span> minutes )

<span class="hljs-number">320</span>*<span class="hljs-number">240</span><span class="hljs-variable">@4bpp</span> (<span class="hljs-number">16</span> color)
<span class="hljs-number">9</span>,<span class="hljs-number">600</span> Baud: <span class="hljs-number">41.1</span> seconds per frame
<span class="hljs-number">38</span>,<span class="hljs-number">400</span> Baud: <span class="hljs-number">10.3</span> seconds per frame

<span class="hljs-number">80</span>*<span class="hljs-number">60</span><span class="hljs-variable">@1bpp</span> (B&amp;W)
<span class="hljs-number">9</span>,<span class="hljs-number">600</span> Baud: .<span class="hljs-number">64</span> seconds per frame
<span class="hljs-number">38</span>,<span class="hljs-number">400</span> Baud: .<span class="hljs-number">16</span> seconds per frame</pre>
<p>Okay, that's a slideshow at <em><strong>best</strong></em> (other than, arguably, the 6.25 frames per second we can get out of our most modest resolution/color depth at 38,400 baud). </p><p>Worse, I'm also leaving out <em><strong>latency</strong></em>, so it will be even slower than the above waiting for responses before continuing.</p><p>Anyway, it's in the code now - and hopefully this post also illuminates why terminal emulators were so popular - getting a lot of <em>useful-to-humans-data</em> across 'slow' asynchronous connections.  <a href="https://www.youtube.com/watch?v=qo9iJGTwuEo&amp;feature=youtu.be">Demos of VGATonic connected to Raspberry Pis running Doom at 25 frames per second</a> over SPI (a <em>synchronous</em> serial connection, remember!) are fun, but it's making these <strong>slow</strong> connections useful which is really driving the work on VGATonic.</p><p>All of this is thanks to, of course, protocols like XMODEM which paved the way - before yours truly was even born!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20869-announcing-odroid-c1-support-plus-hardware-acceleration">Announcing Odroid C1 Support(!), Plus Hardware Acceleration</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20869#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20869"><p>I know you expected an update on the microcontroller with all the serial work I've been doing, but today I've got something even more interesting.  Here's <a href="https://github.com/dqydj/VGAtonic/tree/master/VGATonic_Linux_Drivers">VGATonic announcing Odroid C1 support (link to drivers on Github)</a> by surfing to the Odroid C1 product page on an Odroid C1: </p><p><img src="https://cdn.hackaday.io/images/3508381436770020872.png"></p><p><br>For those who haven't used one of these boards, it's my go-to for this project, and I haven't had any problem with it corrupting disk images.</p><p>That said, this driver supports the Raspberry Pi 2 Model B as well.</p><p>Okay, let's discuss the exciting features!  Today we've got hardware acceleration through color depth and resolution changes, as well as some interesting color depth macros you can borrow.</p><h1>Release Notes</h1><p>To change the resolution with these drivers, do this once VGATonic is loaded:</p><p>fbset -fb /dev/fb# -xres XXX -yres YYY -depth <a data-mention-project-id="6309" href="/project/6309">ZZ</a></p><p><em>Resolutions: 640x480, 320x240, 160x120, 80x60</em></p><p><em>Color Depth: </em><span class="redactor-invisible-space">8 bpp, 4 bpp, 2 bpp, 1 bpp, 16bpp (virtual - you may need this to launch X)</span></p><p>Other:<br><span class="redactor-invisible-space"></span></p><p><span class="redactor-invisible-space">VGATonic will multiply your framerate automatically, up to 60, depending on how you scale down your mode:</span></p><blockquote><span class="redactor-invisible-space">Say you have a board that does 15 frame per second at 640*480*8bpp, and you scale it down to 320*240*8bpp.  VGATonic's driver will automatically adjust your refresh rate to 60Hz - maxing out the refresh rate for the 640x480 mode we chose.</span></blockquote><p><span class="redactor-invisible-space">VGATonic automatically does color conversions.  They could use some adjustment, but here are bit shifting macros to convert from 5-6-5 RGB to our 4 color modes:</span></p><h1><pre class="hljs cpp">#define RGB565toRGB332(c) ( ((c&amp;0xE000)&gt;&gt;8) | ((c&amp;0x0700)&gt;&gt;6) | ((c&amp;0x0018)&gt;&gt;3) )

#define   RGB565toRGBI(c) ( ((c&amp;0x8000)&gt;&gt;12) | ((c&amp;0x4000)&gt;&gt;14) | ((c&amp;0x0400)&gt;&gt;8) | ((c&amp;0x0200)&gt;&gt;9) | ((c&amp;0x0018)&gt;&gt;3) )

#define     RGB565to4G(c) ( ((c&amp;0xC000)&gt;&gt;14) | ((c&amp;0x0600)&gt;&gt;9) | ((c&amp;0x0018)&gt;&gt;3) )

#define     RGB565toBW(c) ( ((c&amp;0x8000)&gt;&gt;15) | ((c&amp;0x0400)&gt;&gt;10) | ((c&amp;0x0010)&gt;&gt;4) )</pre>Installation</h1><h2>Raspberry Pi:</h2><p>Install all of the normal build tools and a recent gcc/g++.  You may need an updated kernel - I'm using some 3.18 flavor (no device tree); you can match me like so:</p><pre class="hljs bash">sudo rpi-update <span class="hljs-number">07179</span>c0ab486d8362af38c6<span class="hljs-built_in">fc</span>99643ded953b99d
rpi-source</pre><p>cd into Driver directory</p><p>sudo make clean ; sudo make</p><p>sudo modprobe sysfillrect; sudo modprobe syscopyarea; sudo modprobe sysimgblt; sudo modprobe fb_sys_fops; sudo insmod vgatonic.ko; sudo insmod rpi_vgatonic_spi.ko</p><p>(You should see activity.  Or just do a 'cat /dev/urandom &gt; /dev/fbX' to see writes!)<br></p><h2>Odroid C1:</h2><p>I'm on this kernel: Linux odroid 3.10.80-94</p><p>sudo -i</p><p>Install all of the normal build tools.  cd into VGATonic directory.</p><p>make clean ; make</p><p>sudo modprobe spicc; sudo modprobe spidev; sudo modprobe sysfillrect; sudo modprobe syscopyarea; sudo modprobe sysimgblt; sudo modprobe fb_sys_fops; sudo insmod vgatonic.ko; sudo insmod odroid_vgatonic_spi.ko</p><p><span class="redactor-invisible-space">(You should see activity.  Or just do a 'cat /dev/urandom &gt; /dev/fbX' to see writes, just ike our Raspberry Pi bretheren!)</span></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/21109-announcing-beaglebone-black-support">Announcing BeagleBone Black Support!</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/21109#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21109"><p>Hey everyone, I&apos;m very happy to announce <a href="https://github.com/dqydj/VGAtonic/tree/master/VGATonic_Linux_Drivers">support for the BeagleBone Black</a> today!</p><p>As per custom, here is the BBB rev 3 displaying itself with VGATonic!</p><p><img src="https://cdn.hackaday.io/images/7240151437181755318.png"></p><p><strong>Difficulties</strong></p><p><strong></strong>Unfortunately, we had a few difficulties in getting VGATonic to run on the BBB (an initially frustrating yet ultimately successful experience!).  </p><p>First, SPI DMA seems to be broken, which is a major issue with the BBB since the SPI driver in the <a href="https://github.com/beagleboard/linux/blob/606bc20386143fe852ab43ef1bcc423daa976402/drivers/spi/spi-omap2-mcspi.c">kernel automatically does DMA when over 160 bytes are sent</a> (we send 307,200 for 640x480x8bpp mode...).  I&apos;m using a 3.8.xx kernel and had some issues upgrading due to missing scripts, however it does appear this <a href="http://comments.gmane.org/gmane.linux.kernel.spi.devel/19335">bug cropped up</a> again <a href="https://groups.google.com/forum/#!searchin/beagleboard/spi%7Csort:date/beagleboard/udVR5aJvifg/Ziaajv4Kf78J">even in recent kernels</a>.  I&apos;ll revisit it when there is a fix, though, since I would like to squeeze out maximum performance on the popular BBB, and I think it was working at some point <a href="http://e2e.ti.com/support/embedded/linux/f/354/p/373022/1312607">in the 3.14.* kernels</a>.  (Please ping me if you see an update or know more!)</p><p>It was an easy enough workaround, though: write 159 bytes at a time, maximum.  VGATonic&apos;s main driver needed an update to support this, but it does seem a useful feature (it looks like the Edison will need something similar).  Here are the gory details of how that function works now.  It should be relatively self-explanatory, but let me know if you would like more explanation:</p><pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vgatonic_write_data_buf</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vgatonicfb_par *par, u8 *txbuf, <span class="hljs-keyword">int</span> size)</span>
</span>{
	<span class="hljs-comment">/* Chip Select low to warn VGATonic something is coming */</span>
	gpio_set_value(par-&gt;cs, <span class="hljs-number">0</span>);

	<span class="hljs-keyword">int</span> bytesLeft = size;
	<span class="hljs-keyword">int</span> retval = <span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span> (bytesLeft &gt; <span class="hljs-number">0</span>) {

	  <span class="hljs-keyword">if</span> (bytesLeft &gt; par-&gt;maxSPIBytes) {
	
	    <span class="hljs-comment">/* Full Speed SPI */</span>
	    <span class="hljs-keyword">struct</span> spi_message	m;
	    <span class="hljs-keyword">struct</span> spi_transfer	t = {
	      .tx_buf		= txbuf+(size-bytesLeft),
	      .len		= par-&gt;maxSPIBytes,
	      .speed_hz         = par-&gt;spiSpeed,
	    };
	    spi_message_init(&amp;m);
	    spi_message_add_tail(&amp;t, &amp;m);
	    <span class="hljs-keyword">int</span> retval = spi_sync(par-&gt;spi, &amp;m);
	    bytesLeft -= par-&gt;maxSPIBytes;
	  } <span class="hljs-keyword">else</span> {
	    	    <span class="hljs-comment">/* Full Speed SPI */</span>
	    <span class="hljs-keyword">struct</span> spi_message	m;
	    <span class="hljs-keyword">struct</span> spi_transfer	t = {
	      .tx_buf		= txbuf+(size-bytesLeft),
	      .len		= bytesLeft,
	      .speed_hz         = par-&gt;spiSpeed,
	    };
	    spi_message_init(&amp;m);
	    spi_message_add_tail(&amp;t, &amp;m);
	    <span class="hljs-keyword">int</span> retval = spi_sync(par-&gt;spi, &amp;m);
	    bytesLeft = <span class="hljs-number">0</span>;
	  }
	  
	  
	}
	
	<span class="hljs-comment">/* Chip Select high to warn VGATonic something is done */</span>
	gpio_set_value(par-&gt;cs, <span class="hljs-number">1</span>);


	<span class="hljs-keyword">return</span> retval;
}</pre><br><strong></strong><p> So, we keep doing 159 byte chunks until we have sent 307,200.  And, yes, this does hurt performance.</p><p><strong>Performance</strong></p><p><strong></strong>In theory, the BBB is an excellent candidate for VGATonic since it can support 48 MHz SPI.  That&apos;s a nice 19.5 Frames Per Second worst case for 640x480x8bpp (and over 60 for most other modes!).  Unfortunately, due to SPI overhead due to the small transfers and not using DMA, most functions are closer to 7-10 FPS (Dropping to 320x240 on the BBB looks excellent though, and often maxes out the 60Hz refresh!).  Here&apos;s an example of what I mean, where mouse movements can drive SPI to take up 50% of the CPU:</p><p><img src="https://cdn.hackaday.io/images/9290261437182896884.png"></p><p>I will say this, though - it&apos;s very usable even with the 159 Byte sends - a credit to a nice platform!  I&apos;m happy to update the driver when the SPI issue is fixed - or if I can find a kernel where it is patched already.  But, for now, this is a great start - let me know if you get it working! <br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/21367-asynchronous-serial-and-terminal-emulator-support">Asynchronous Serial and Terminal Emulator Support</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/21367#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21367"><p>Today, the ATTiny 2313a comes alive!<br></p><p>Serial support (or, as I discussed today in the Hacker Channel, other names you might know it as - &quot;Asynchronous Serial&quot;, &quot;RS-232 TTL&quot;, &quot;TTL Serial&quot;, etc.) was always on the roadmap for VGATonic, but my <em>Terminal Emulator Support</em> comment was a joke.</p><p>Of course, once I put it out there in the universe, I had to try to make it reality - despite only having 128 bytes of RAM to work with on the 2313a!</p><p><strong>The Serial Framebuffer</strong></p><p><strong></strong>The serial framebuffer works mostly as I <a href="https://hackaday.io/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic/log/20830-whats-old-is-new-again-xmodem-and-serial-transfers-meet-vgatonic">telegraphed a few articles back</a>, but as I was running low on a different resource (flash memory), I modified it a bit so all framebuffer transmits are 255 bytes long.  If you are doing one of these pixel transmissions and you are transmitting less than 255 bytes over UART, you&apos;ll have to transmit in a 255 byte block (or if it is at the end of the transmission, you can transmit random characters or all 0s or something).</p><p>This means you can use VGATonic over asynchronous serial almost exactly as you&apos;d use it over SPI - that is, drawing pixel by pixel.<br></p><p><strong>The Terminal Emulator</strong></p><p><strong></strong>The main feature, though, is the terminal emulator.  I decided to attempt to reproduce the vt52 character codes as best as I could, and got most of them.  I got the 3x5 (4x6 with white space) <a href="https://hackaday.io/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic/log/20759-a-tiny-4x6-pixel-font-that-will-fit-on-almost-any-microcontroller-license-mit">font I discussed</a> the other day to fit in EEPROM and Flash on the 2313, and I use it in 160x120 mode for an effective 40x15 character terminal.  For background and foreground color changes, we go beyond spec (16 colors) of the vt52, and allow you to set any of 256 colors supported by RRRGGGBB in one byte, our selected 8 bit color mode.</p><p><strong></strong><strong></strong>I used the <a href="http://www.yardley.cc/atari/compendium/atari-compendium-chapter-3-BIOS.htm#vt52emulator">vt52 escape code listing</a> I found here.  The ones that involve memory of multiple lines or writing more than 40 characters I compromised, either going to a newline (line wrap) or zooming to the beginning of the line when I change line numbers.  I will make another article listing the escape codes VGATonic supports.</p><p><strong>How Did You Do It?</strong></p><p><strong></strong>Since this is Hackaday, I figured I better explain how I got 600 bytes of screen... plus foreground colors, background colors, and line changes... into 128 bytes of memory.</p><p>The short answer?  I used the <a href="https://hackaday.io/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic/log/20230-hardware-acceleration-working">hardware acceleration capabilities</a> I built into VGATonic to avoid overwriting lines that had already been written.<strong></strong>  If I&apos;m on line 7, for example, I don&apos;t need to send commands to update lines 1 through 6 - I just tell VGATonic to skip to line 7 (Internally, since it is in 160x120 mode it&apos;s more like &quot;skip to line 56&quot;).  I then only maintain a buffer of the current line.</p><p>It&apos;s a nifty trick, and I will put it in my next video demo so you can see it in action without procuring a VGATonic (just yet!).  It&apos;s a feature I couldn&apos;t have done terminal emulation without, but it&apos;s also a great demonstration of my hardware acceleration scheme working - that specification will be fully published with the final product so you can do something similar without delving into the source code, if you so choose!<br><strong></strong></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/21395-vt52-compatible-commands-on-vgatonic-and-customadministrator-sequences">VT52 Compatible Commands on VGATonic, and Custom/Administrator Sequences</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/21395#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21395"><p> VGATonic has a terminal emulator built in, and this post will detail how that works.  It uses VT52 compatible commands, and also shows special sequences I added to control how VGATonic works.</p><p><em>For all of these, you need to hit &apos;escape&apos; or send ASCII 27 first for VGATonic to respond.</em><br></p><h2>VT52 Compatible Commands</h2><p><strong></strong>To use escape codes, first hit the &apos;escape&apos; key (or ASCII 27 in base 10 in your program), then hit the second key to execute the command.<strong></strong><br></p><pre class="">	  A - Move the cursor to beginning of line above.
	  B - Move the cursor to beginning of line below.
	  C - Move the cursor right by one.
	  D - Move the cursor left by one.
	  E - Clear the screen and place the cursor in the upper left corner.
	  H - Move the cursor to the upper left corner.
	  I - Move the cursor to beginning of line above.
	  J - Erase all lines after our current line
	  K - Clear the current line from the current cursor position.
	  M - Delete the current line.
	  Y - &apos;Goto&apos; Coordinate mode - first will change line number, then cursor position (both ASCII - 32)
	  b - Byte after &apos;b&apos; sets new foreground color.
	  c - Byte after &apos;c&apos; sets new background color.
	  d - Erase all lines above current line.
	  e - Enable the cursor.
	  f - Disable the cursor.
	  l - Erase current line line and place the cursor at the beginning of the row.
	  o - Erase the current line from the beginning to the current cursor.
	  p - Invert background and foreground color.
	  q - Invert background and foreground color.</pre><h2>VGATonic Framebuffer Codes</h2><p><strong></strong>The main point of the project is, of course, being a video card... not a terminal emulator.  I added some codes which are <em>solely</em> meant to control VGATonic, so you can choose to not use the terminal emulator while in serial mode and use it similar to how it works over SPI and write a pixel at a time.  I built in 9600 bps and 38400 bps 8-N-1 asynchronous serial modes, so you&apos;d have to be a masochist to use 640x480x8bpp mode (here are <a href="https://hackaday.io/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic/log/20830-whats-old-is-new-again-xmodem-and-serial-transfers-meet-vgatonic">some example transfer times</a> - i.e. 38.4k at top resolution/depth in 82.2 seconds for one frame!), but something like 80x60x1bpp or 80x60x2bpp might be bearable as more than a slideshow.</p><p>Obviously, these only work on VGATonic - if you have a VT52 somewhere, they won&apos;t work there, haha:<br></p><pre>	  % - Administrator Mode (see next section)
	  W - &apos;W&apos;rite framebuffer mode (pass through pixels from UART, 255 at a time)
	  Z - Send control character to VGATonic.  (Position or Resolution or Bit Depth change)
	  m - Become &apos;m&apos;aster of CPLD (Disable external SPI writes and put Microcontroller in control)
	  r - &apos;r&apos;elease CPLD (Allow external SPI writes)
	  s - &apos;s&apos;elect CPLD (Warn CPLD a new frame write is coming)
	  u - &apos;u&apos;nselect CPLD (Inform CPLD current frame write is done)</pre><strong> </strong><strong><h2>VGATonic Administrator Mode</h2></strong><p><strong></strong>If you hit the &apos;%&apos; key after an Escape key, VGATonic puts you into administrator mode.  You would come here to fine tune the PLL for your monitor, or to change the speed of asynchronous serial (it starts at 9600 bps 8-N-1, but you can set it to 38400 bps for a tiny, yet relatively large, speed bump.)</p><p>Here is a link to the <a href="http://cds.linear.com/docs/en/datasheet/69034fe.pdf">LTC6903 data sheet</a> so you can see what adding/subtracting one does with the PLL.  We&apos;re only changing the second byte, and not allowing you to change the last 2 bits, so you have 2^6 options.<br></p><pre>	  &lt; - 9600  Baud Serial Terminal (Default)
	  &gt; - 38400 Baud Serial Terminal
	  + - Add one to LTC6903 PLL Scaler
	  - - Subtract one from LTC6903 PLL Scaler
	  &amp; - VGATonic default PLL Scaler, 0B01011110
	  | - Burn current PLL Scaler to EEPROM</pre><strong></strong><br><strong><h2>Some Example Sequences</h2></strong><p>VGATonic starts up with the ATTiny in control.  It quickly calibrates asynchronous serial (and sets it for 9600 bps 8-N-1), sets the PLL to 2x the VGA pixel clock (actually around 50.344 MHz if you don&apos;t change it), changes VGATonic&apos;s mode to 160x120x8bpp and draws a green screen to prove it is alive.  It then gives up the bus.  Here are a few sequences you can use to get into different modes:</p><p><em>To Get Into Terminal Emulator Mode:</em></p><blockquote><ol><li><em></em>Connect to VGATonic at current speed of serial (default: 9600 bps 8-N-1)</li><li>Optional: Change serial speed to 38400 bps:<em></em><ol><li>Escape % &gt;</li><li>Reconnect at 38400 bps 8-N-1</li></ol></li><li>Escape m <ol><li>(Become master of VGATonic)</li></ol></li><li>Escape s <ol><li>(VGATonic chip select; drives SPI low)</li></ol></li><li>Escape Z r<ol><li>(Set VGATonic to 160x120x8bpp - the only supported terminal mode, just in case it was changed)</li></ol></li><li>Escape E<ol><li>(Clears the screen - in case it was changed to something else)</li></ol></li></ol></blockquote><p><strong></strong></p><p>VGATonic starts calibrated to 50.344 MHz, but this might not work with the PLL on all monitors.  There is a way to change the PLL&apos;s setup - although, of course, you should try calibrating the monitor first before changing VGATonic&apos;s calibration!  Consider this your last option, but always available (you get 100,000 EEPROM writes, however, so don&apos;t worry too much about changing it).</p><p><em>To Change the PLL Calibration</em></p><blockquote><ol><li><em></em>Either:<ol><li>Escape % -<ol><li>Decrease PLL calibration</li></ol></li></ol><ol><li>Escape % +<ol><li>Increase PLL Calibration</li></ol></li></ol></li><em></em><li><em></em>Then, when happy:<em><br></em><ol><li><em>Escape % |</em><ol><li>Burn PLL Calibration to EEPROM</li></ol></li></ol></li></ol></blockquote><p>Of course, it&apos;s possible you set VGATonic to a PLL calibration where you can&apos;t get any picture on your VGA monitor.  Check all other connections, but if you feel the PLL setting is preventing the monitor from syncing, you can reset to factory:</p><p><em>To Reset PLL to Factory</em></p><blockquote><ol><li>Escape % &amp;<em></em><ol><li>Reset the PLL calibration to roughly 50.344 MHz</li></ol></li><li>Escape % |<ol><li>Burn this calibration to EEPROM<strong></strong></li></ol></li></ol></blockquote><h2>Compromises and One Improvement<br></h2><p>I did my best with the VT52 commands - but there are a few limitations that I had to compromise on due to only having 128 bytes of RAM.  Some RAM is taken up by global variables - FG/BG colors, row/column location, a buffer for ASCII characters sent over serial, etc.  A bit is also reserved for local variables, such as counters and offsets (and putting functions return addresses on the stack).  </p><p>The &apos;main&apos; buffer is 40 (or, actually, 41 for the null character) bytes long and comprises one column in VGATonic.  That means any commands that require multiple line memory we had to skip, and any time we move the cursor up or down we need to go to the &apos;beginning&apos; of the line.  Here is a <a href="http://www.yardley.cc/atari/compendium/atari-compendium-chapter-3-BIOS.htm#vt52emulator">listing of VT52 escape sequences</a> so you can see the sorts of commands that use those constructs.  We also are stuck with the 40 byte limit, so we are always overflowing to the next line instead of wrapping while typing.</p><p>Finally, we aren&apos;t supporting a few control characters - vertical tabs and bells (I mean, we don&apos;t have sound...) for example.  Return/new line and delete are fully supported, though, of course!</p><p>Our main improvement is color: the VT52 supported &apos;high brightness&apos; and &apos;low brightness&apos; 3 bit color, which is better known now as 4 bit RGBI, where the I is an intensity bit.  We support the full gamut of 256 colors, so if you use escape characters to change the BG or FG colors, whatever ASCII character you send next will use the full RRRGGGBB color set.<br></p><p>As for improvements?<br> </p><h2>Prior Art</h2><p><strong></strong>VGATonic isn&apos;t the first AVR terminal emulator, of course - Martin K. Schr&#xF6;der released a <a href="https://github.com/mkschreder/avr-vt100">mostly VT100 compatible emulator</a> (with better 40x40 row x column support!)<strong> </strong>for 4k RAM and some smaller parts some time back.  If you&apos;re considering a similar project, I hope you&apos;ll take a look at his code.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/21769-new-drivers-uploaded-beaglebone-black-dma-fixed-intel-edison-added">New Drivers Uploaded: BeagleBone Black DMA Fixed!  Intel Edison Added!</a></h2>
                            <small class="authorship">21 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/21769#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21769"><p>I&apos;ve got to head off to the day job so I&apos;ll add details later, but this is a big one - Intel Edison support is added and BeagleBone Black DMA is fixed!!!  The Edison can do 25 MHz SPI with DMA, so you&apos;re looking at 10.1 FPS at 640x480x8bpp, or 40.4 if you drop to 320x240 (both at 5V SPI, which, I can now verify, works!).</p><p>Also, the BBB&apos;s SPI DMA is working!  We can do 19.5 FPS since we&apos;ve got 48 MHz SPI.  SPI doesn&apos;t even show up in top anymore. Here&apos;s a shot of OpenTTD on the BBB (between XOrg and OpenTTD - which is rendering in software, remember - it peaks at around 60-70% of the CPU.  A fine result!).  You can see the CPU meter in the bottom right didn&apos;t top out while I was scrolling around.</p><p><img src="https://cdn.hackaday.io/images/6458231438185715872.png"></p><p>Okay, don&apos;t take my word on the Edison - it&apos;s a big one so I&apos;ll write something up and do a video.  For now, you can get the new stuff on the <a href="https://github.com/dqydj/VGAtonic">Github repo, here</a>.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/21841-proof-of-video-life-on-the-intel-edison">Proof of Video Life on the Intel Edison!</a></h2>
                            <small class="authorship">20 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/21841#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21841"><p>I&apos;m finally ready to announce <strong>A</strong><strong> Big Conquest</strong>: adding graphics to a headless Linux part!  </p><p>While the BBB, Odroid C1 and Raspberry Pi support was great to add and taught me a lot, getting VGATonic working on headless parts was a higher priority goal for me from the beginning.  It just so happens that the Intel Edison was the first headless part I finished - and the results look great. </p><p>I got clean DMA 25 MHz SPI  from the Edison (complete writeup is in a new project <a href="https://hackaday.io/project/7025-a-vga-display-for-the-intel-edison">which you can find here</a>.  Let me know if you reproduce it!).  And, of course, it&apos;s tradition to pick an id Software game to run as proof your video project is working... so here&apos;s a video showing it running Quake at over 40 frames per second (and other software as well, haha - 2:11 it begins):</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/jMW791veOA8" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>I will attempt to do the PogoPlugs as well, but probably after the August 17th deadline.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/21984-updated-bill-of-materials">Updated Bill of Materials</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/21984#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21984"><p>Because last year I only purchased enough parts to make 4 boards (whoops), I recently had to buy VGATonic components again.  We&apos;ve had a few price increases over the last year (and some minor drops), so this is as good a time as any to update our Bill of Materials.  Some of these are last year prices (since I had 10-20x of some).</p><p>Assuming you buy enough components to make 10 (like me): </p><h1>$20.53<br></h1><p>I spent around $3.08 a board in shipping total, but you can beat that.  There are also 95 cents worth of options (technically some of the resistors are optional too in the RCA output stage - I don&apos;t have a firmware using it yet).</p><p>If you are lucky/willing on eBay or with non-authorized stock or pulls, I have no doubt you can do ~ $15 - but I, of course, encourage ordering new/authorized for support reasons.<br></p><table>
	
	<tbody>
		<tr>
			<td><strong><i>Part Name</i></strong></td>
			<td><strong><i>#/Board</i></strong></td>
			<td><strong><i>Cost/Part</i></strong></td>
			<td><strong><i>Cost/Board</i></strong></td>
			<td><strong><i>Where?</i></strong></td>
			<td><strong><i>Part Number</i></strong></td>
		</tr>
		<tr>
			<td><strong>ATTiny 2313a</strong></td>
			<td>1</td>
			<td>1.11</td>
			<td>1.11</td>
			<td>Newark</td>
			<td>68T3554</td>
		</tr>
		<tr>
			<td><strong>Bourns PTC Reset Fuse</strong></td>
			<td>1</td>
			<td>0.134</td>
			<td>0.134</td>
			<td>Newark</td>
			<td>83K0399</td>
		</tr>
		<tr>
			<td><strong>47uF 1206 Tantalum</strong></td>
			<td>1</td>
			<td>0.4029</td>
			<td>0.4029</td>
			<td>Newark</td>
			<td>60R5862</td>
		</tr>
		<tr>
			<td><strong>LTC6903</strong></td>
			<td>1</td>
			<td>3.14</td>
			<td>3.14</td>
			<td>Newark</td>
			<td>57M0173</td>
		</tr>
		<tr>
			<td><strong>10uF 1206 Tantalum</strong></td>
			<td>2</td>
			<td>0.168</td>
			<td>0.336</td>
			<td>Newark</td>
			<td>01M8216</td>
		</tr>
		<tr>
			<td><strong>USB B Connector</strong></td>
			<td>1</td>
			<td>0.5528</td>
			<td>0.5528</td>
			<td>Newark</td>
			<td>14N8154</td>
		</tr>
		<tr>
			<td><strong>VGA Connector</strong></td>
			<td>1</td>
			<td>1.3</td>
			<td>1.3</td>
			<td>Newark</td>
			<td>54M6031</td>
		</tr>
		<tr>
			<td><strong>NCP1117ST33T3G</strong></td>
			<td>1</td>
			<td>0.387</td>
			<td>0.387</td>
			<td>Newark</td>
			<td>67H7013</td>
		</tr>
		<tr>
			<td><strong>XC95144XL</strong></td>
			<td>1</td>
			<td>7.25</td>
			<td>7.25</td>
			<td>Digikey</td>
			<td>122-1372-ND</td>
		</tr>
		<tr>
			<td><strong>IS61LV5128AL-10TLI</strong></td>
			<td>1</td>
			<td>4.45</td>
			<td>4.45</td>
			<td>Jameco</td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>.1uF 0603 Ceramic X7R</strong></td>
			<td>11</td>
			<td>0.008</td>
			<td>0.088</td>
			<td>Jameco</td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>PCB Service</strong></td>
			<td>1</td>
			<td>1.19</td>
			<td>1.19</td>
			<td>Elecrow</td>
			<td>PCB</td>
		</tr>
		<tr>
			<td><strong>1uF 0603 Ceramic</strong></td>
			<td>1</td>
			<td>0.008</td>
			<td>0.008</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>Male Headers</strong></td>
			<td>18</td>
			<td>0.001</td>
			<td>0.018</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>10k 0805 1% Resistor</strong></td>
			<td>6</td>
			<td>0.008</td>
			<td>0.048</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>4.7k 0805 1% Resistor</strong></td>
			<td>1</td>
			<td>0.008</td>
			<td>0.008</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>510 0805 1% Resistor</strong></td>
			<td>4</td>
			<td>0.008</td>
			<td>0.032</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>1k 0805 1% Resistor</strong></td>
			<td>5</td>
			<td>0.008</td>
			<td>0.04</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>2k 0805 1% Resistor</strong></td>
			<td>4</td>
			<td>0.008</td>
			<td>0.032</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><strong>4k 0805 1% Resistor</strong></td>
			<td>1</td>
			<td>0.008</td>
			<td>0.008</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td>$20.53</td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td>Shipping</td>
			<td>1</td>
			<td>3.079</td>
			<td>3.079</td>
			<td>Various</td>
			<td><br></td>
		</tr>
		<tr>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td>Optional Part #</td>
			<td><strong><i>#/Board</i></strong></td>
			<td><strong><i>Cost/Part</i></strong></td>
			<td><strong><i>Cost/Board</i></strong></td>
			<td><strong><i>Where?</i></strong></td>
			<td><strong><i>Part Number</i></strong></td>
		</tr>
		<tr>
			<td>RCA Connector</td>
			<td>1</td>
			<td>0.732</td>
			<td>0.732</td>
			<td>Newark</td>
			<td>89K7618</td>
		</tr>
		<tr>
			<td>3 Bit DIP Switch</td>
			<td>1</td>
			<td>0.22</td>
			<td>0.22</td>
			<td>eBay</td>
			<td><br></td>
		</tr>
		<tr>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td><br></td>
		</tr>
		<tr>
			<td><br></td>
			<td><br></td>
			<td><br></td>
			<td>$0.95</td>
			<td><br></td>
			<td><br></td>
		</tr>
	</tbody>
</table></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/22045-productization-a-suitable-logo-for-vgatonic">Productization &amp; A Suitable Logo For VGATonic </a></h2>
                            <small class="authorship">16 days ago  &bull;
                                <a class="gray-link" href="/project/6309/log/22045#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22045"><p><img src="https://cdn.hackaday.io/images/5865101438551643877.png"></p><p>I wanted to add a logo with a tagline to VGATonic for some time now, a la <a data-mention-user-id="16981" href="/hacker/16981">@Blecky</a> &apos;s great logo for his <a href="https://hackaday.io/project/4872-subpos-positioning-system">SubPos indoor positioning system</a>. <br></p><p>I wanted to make something which vaguely reminded me of the early 1990s and late 1980s.  While stressing over how to create something in time to add to my video entries, I came across an excellent site for developing <strong><em>exactly </em></strong>this type of text logo: <a href="http://textcraft.net/">Textcraft</a>.  I highly suggest using them if you&apos;ve got a similar project requirement!</p><p>Thank you to Textcraft for the logo generator; I feel this logo evokes <em>just </em>enough retro nostalgia to fit my product well.  Also, thank you to my wife who turned me away from the bad looking color combinations, haha.</p><p>Here&apos;s what it looks like while displayed on VGATonic itself (640x480x8bpp, dithering):</p><p><img src="https://cdn.hackaday.io/images/5017331438552727346.jpg"></p><h2>Productization</h2><p>One of the requirements for the fourth stage of the contest is a rendition of the &apos;productized&apos; look and feel of the product: </p><blockquote>&quot;Post an artist&#x2019;s rendition of the &#x201C;productized&#x201D;
design/look and feel of the project&quot;</blockquote><p>I have one 3D model (that&apos;s artistic, right?) from my initial KiCAD work last year which looks pretty good as, perhaps, a box cover/illustration (for a sufficiently technical audience):</p><p> <img src="https://cdn.hackaday.io/images/6600391438561509060.jpg">For a move generalized audience, something cleaner and more web 3.0 like would probably play.  Overlaying the logo on the design document comes out well:</p><p><img src="https://cdn.hackaday.io/images/2232731438554550144.jpg"><br></p><p>As for the prototype video, I&apos;ll have it posted soon!<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=1" class="grey-gold-button prev-button ">Previous</a>
                    
                    
                    <a href="?page=3" class="grey-gold-button next-button ">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'HTeb8KWe-oQ4PIPEX6fY3w6ufRbhxbKKJaDs';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>