<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; operation: Learn The MIPS (PIC32MX1xx/2xx) &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6450%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6450-operation-learn-the-mips-pic32mx1xx2xx">operation: Learn The MIPS (PIC32MX1xx/2xx)</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Having been exclusive to a certain uC-line for over a decade, it&#39;s time to learn something new (and port commonCode!)... Enter MIPS</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/40107-esoteric" title="Visit Profile">esot.eric</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6450#discussion-list" title="See Comments">10 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6450-operation-learn-the-mips-pic32mx1xx2xx">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6450/logs/sort/newest">Newest</option>
                    <option value="/project/6450/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6450/log/20020-a-page-written-on-the-matter-a-while-back">A &#34;page&#34; written on the matter a while back...</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20020#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20020"><p>This is a repost of some thoughts from my "page" of a few months back: <a href="https://hackaday.io/page/884-whats-this-a-page-pic32-contemplations">https://hackaday.io/page/884-whats-this-a-page-pic32-contemplations</a></p><p>Mainly a reminder regarding this link: <a href="http://wise-ware.org/wiki/index.php?n=Pic32.Gcc4Pic">A pretty decent write-up on LD (linker) scripts and PIC32s</a></p><p>Currently contemplating PIC32's...</p><p>PICs have always seemed a 
bit backwards to me... They've so many peripheral-features, come in so 
many packages, have so many different architectures (8-bit 16-bit...), 
Yet (if I understand correctly) there's *very little* open-source 
support for 'em.</p><p>I'm sorry, being stuck with Windows for developing for a microcontroller seems utterly-ridiculous to me. And more...</p><p>But, there's the PIC32...</p><p>And, somewhere, I read it's designed around a MIPS core.</p><p>Now somehow that appeals to me...</p><p>Maybe
 it's something to do with a project of a few months back... I tried to 
see what I could do with an old Cable (TV) Box that had an unknown 
processor in it.  Thought maybe I could install linux on it, if I tried 
hard enough (apparently no one else has?). Or something, I dunno. But I 
spent a few weeks (months?) at it, and learned a lot about JTAG and 
MIPS. At the end I couldn't figure out the memory-mapping stuff, that 
was a bit beyond my reverse-engineering-skills. But, I was able to blink
 the two LEDs, and was pretty proud of that. (the UART was a no-go). </p><p>I
 do know that MIPS has been around long enough that certainly I could 
eventually find a resource that resonates with my learning-style... </p><p>Ages and ages ago, as part of my undergraduate-research I developed a system around an Atmel ARM-7...</p><p>I'd
 been doing AVRs for a while at that point, so thought this particular 
ARM7 (with internal FLASH and RAM) was going to be like working with an 
AVR... Boy was I wrong.</p><p>I got it working... I mean, really, it *worked*... The code I wrote *worked*, on the system I developed.</p><p>But
 even after designing a 4-layer PCB and ordering and soldering all those
 parts and *running* the system with my code... there was one thing I 
could never wrap my head around...</p><p>Basically, memory-mapping. (again).</p><p>That
 blasted thing was running my code straight off the FLASH memory... 
which seemed fine to me... That's how AVRs do it! ...Until it came to my
 attention that the FLASH was slowing my (what was it, 100MHz?) system 
to slower than my AVR projects. Quite literally, the FLASH embedded in 
this chip rated for 100MHz was *slower* than the FLASH embedded in AVRs.</p><p>Fine, move that code to SRAM!</p><p>How?</p><p>The Linker, of course!</p><p>Right,
 I fought that danged thing for ages, just *barely* grasping its 
functionality, let alone its obscure language. In the end, I honestly 
thought it'd be easier to write the code to do the transfer by hand, in 
assembly.</p><p>A little wiser (probably not much) now, I realize that 
maybe doing that transfer (from FLASH to SRAM) by hand would be 
difficult, since all the jumps, etc, (in my C-compiled code, meant to 
run from FLASH) probably couldn't be guaranteed to be relative, etc. </p><p>So,
 MIPS... no easier, really... Plausibly more complicated with its 
virtual-memory mapping (does ARM do that? I never got that far).</p><p>On the plus side, apparently <a href="http://wise-ware.org/wiki/index.php?n=Pic32.Gcc4Pic">some dude has a pretty decent write-up</a> on using mips-gcc with PIC32's, including a pretty decent explanation of the linker-script.</p><p>It
 looks to be a *significant* amount of more work to get a PIC32 running 
than an AVR... no header-files, no linker-script, etc... but at least 
there's a resource, and a little more learning-experience.</p><p>It's a contemplation, anyhow.</p><p>OTOH, now that ARMs are everywhere, is this a worthwhile endeavor?</p><p>Well,
 for one thing, some PIC32s (yes 32-bit processors) apparently come in 
DIP packages, but no 40-pin?!! And *several* variants, to boot. 
Plausibly even drop-in-replaceable with some of my old AVR projects(?)</p><p>And,
 some of those may only be a handful of bucks ($3 for a 40MHz 32 bit 
processor/FLASH/RAM?! and it doesn't require fine-pitch soldering?!)</p><p>I'm kinda intrigued.</p><p>Contemplations forgotten:</p><p>How'm
 I gonna program this thing...? Research suggests OpenOCD via JTAG might
 be feasible... Took quite a bit of Googling to find anything even 
*remotely* to the affirmative. (Burried under tons of pages of people 
*asking* whether it was possible to program via JTAG met with little 
conclusive besides "there's a brief mention in the data-sheet"... Most 
of which, apparently, are on microchip's site...) This search reminded 
me, too, of another reason I'd avoided PICs for so long... I didn't have
 a programmer, and I certainly wasn't 'bouts to buy one for 
experimenting with just a handful of chips... but if JTAG'll do it... 
we'll see! </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20033-necessary-pins">Necessary Pins</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20033#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20033"><p>First, working out which pins/circuitry need to be connected as a bare-minimum. (Reminder: I'm going for JTAG-programming, here... If you're planning to use MPLABX and/or a Microchip programming-dongle, or if you're looking for this to be *correct*, you're probably better-off using someone else's documentation, check out those links suggested in this project's "comments" by  <a data-mention-user-id="739" href="/hacker/739">@Bruce Land</a><a data-mention-user-id="739" href="/hacker/739"></a> ! Thanks for those! Especially: <a href="http://tahmidmc.blogspot.com/2013/11/introduction-to-pic32-basics-getting.html">Tahmid's Introduction To PIC32</a>) <br></p><p>I've documented my overly-wordy thought-process, but I won't bore you with those details here. I'll probably upload those docs at a later-date. </p><p>This is, pretty much, "AS I UNDERSTAND" which may be "not at all" or somewhere inbetween. I tried to be rigorous, but I haven't wired anything up yet....</p><pre>  ( '#' = MUST BE CONNECTED per section 2.1 )
  ( Minimal WITHOUT USB, WITHOUT ANALOG DECOUPLING INDUCTOR )

3V3
 ^
 |
 \
 / 10K           PIC32
 \                  MX2xxFxxxB       3V3
 /                ___________         ^
 |  1k           |    |_|    |        | .1uF
 +-/\/\-- /MCLR -|1*#     #28|- AVDD -+--||--.
 |        RA0   -|2       #27|- AVSS / AGND -+-&gt; GND
===.1uF   RA1   -|3        26|- RB15
 |        RB0   -|4        25|- RB14
 |        RB1   -|5       +24|- RB13
 |        RB2   -|6     (#)23|- VUSB3V3 ---&gt; 3V3
 v        RB3   -|7        22|- RB11
GND&lt;---- GND/VSS-|8#       21|- RB10     10uF TANT/CER
 ^        RA2   -|9       #20|- VCAP ----||--.
 |        RA3   -|10      #19|- VSS / GND ---+-&gt; GND
===.1uF   RB4   -|11      *18|- RB9/TDO
 |        RA4   -|12      *17|- RB8/TCK
 +------ V+/VDD -|13#     *16|- RB7/TDI
 |       TMS/RB5-|14*     *15|- VBUS (N/C OK?)
 v               |___________|  (input to detect USB)
3V3
</pre>This pinout is pretty much the same for the MX1xxFxxxB, but there are distinct differences:<p>NOTE: 1xx/2xx are mostly pin-compatible<br>      NOTICED DIFFERENCES:<br>        14  TMS (2xx)<br>        15  RB6 vs VBUS<br>        21  5V tolerant vs NOT<br>        22  5V tolerant vs NOT<br>            ALSO NOT TMS (2xx)<br>        23  RB12 vs VUSB3V3<br></p><p>JTAG:<br></p><p>I'm having some difficulty figuring out the TRST/SRST scenario... but I'm piecing it together from various sources... I THINK TRST is a N/C, and I THINK SRST is connected to /MCLR. Again, this is not yet tested. FROM PAST-EXPERIENCE with the Freescale part, it was possible to connect openOCD to the Freescale chip with NO reset pin connected... Albiet a bit unweildy. So, I think that'll be my first-attempt.</p><p>As It Stands:</p><pre>FT2232 pinout: (AD#)
                               _______
                              |       |
(plausibly: -&gt;VREF) N/C nTRST |1     2| GND (VSS)
                   (AD1) TDI  |3     4| GND (VSS)
                   (AD2) TDO  |5     6| GND (VSS)
                   (AD3) TMS  |7     8| GND (VSS)
                   (AD0) TCK  |9    10| GND (VSS)
   (likely: /MCLR)  N/C nSRST |11 (12)|  (Index, don't populate)
                     N/C DINT |13   14| VREF N/C
                              |_______|      
                      (VREF: PIC32's VDD -&gt; JTAGger?)
</pre><p>... today ... so-far unique amongst most my days... lots-learned, tons outside the realm of electronics... hopefully some of that will stick around.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20138-jtag-go">JTAG = GO</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20138#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20138"><p>Lots of fiddling, finally got connection with openOCD...</p><p>Who knows whether it'd've worked without some of the additional-fiddling (e.g. figuring out where /MCLR should connect, etc.) but it does work now. THE BIG "DUH" was I was *certain* I breadboarded the MX2xx series chip, but apparently had breadboarded the MX1xx series chip, instead. (They've *very slightly* different pinouts). Swapped it out, and it connects.<br></p><p>I'll update the "details" section with better pinout info, and whatnot.</p><p></p><p>Yesterday's unposted post:<br></p><p>Not sure what's wrong with my setup, but it's not detecting my chip yet...</p><p>Had to reinstall openocd, as apparently the last time I used it was on a different (and now defunct) computer. So, thought maybe something was wrong with the setup, but apparently I'm using the exact same version (actually, installed from the same .deb)... And did some searching 'round the web and found that others have had [some amount of] success with even older versions.</p><p>A couple useful resources:</p><p>This page suggests it's possible, and with my version, and using a configuration-file that exists... (Rather'n having to configure each setting manually)<br> <a href="https://forum.sparkfun.com/viewtopic.php?f=18&amp;t=28623">https://forum.sparkfun.com/viewtopic.php?f=18&amp;t=28623</a><br> <br>This page suggests TRST should be connected to pin1 /MCLR<br> <a href="https://github.com/kinsamanka/PICnc-V2/wiki/OpenOCD-PIC32-Programmer">https://github.com/kinsamanka/PICnc-V2/wiki/OpenOCD-PIC32-Programmer</a></p><p>Tried TRST on MCLR, both directly-connected and through a transistor-inverter... Still nogo.</p><p>Finally, decided to hook up the ol' Cable Box again, just to make sure the danged FT2232 board still works... It didn't, at first, but then I connected nTRST to VREF and it did. So.... Something to think about, in here... I don't know what, exactly.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20238-hah-mikes-the-man">Hah! Mike&#39;s the man!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20238#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20238"><p>Round ROUND-about way of coming to this HaD article/video of years before from <a data-mention-user-id="5" href="/hacker/5">@Mike Szczys</a> himself: <a href="http://hackaday.com/2012/09/27/beginners-look-at-on-chip-debugging/#comment-2628854">http://hackaday.com/2012/09/27/beginners-look-at-on-chip-debugging/#comment-2628854</a></p><p>Having some difficulty with my ancient version of openOCD, so looking through the release-logs of the newer versions led me to that link. Go Mike!</p><p>---------</p><p>Otherwise... it's connecting, I managed to manually twiddle one byte in the FLASH from "blank" to "nop" and can single-step to verify it works as expected.</p><p>So... I found another resource which suggests it should be as simple as typing "program &lt;file.hex&gt;" (as of 0.60). So I'll be compiling 0.90 soon...</p><p>Though, I don't yet have a hex-file to program... that'll be the next hurdle, I suppose. Have the mips-cross-compiliing/debugging toolchain from when I worked with the old cable box... but there's a bit more to that, as I understand... need some linker-scripts and some chip header-files...</p><p>I'm keeping a pretty wordy log of my progress/results/links, but it's FAR too wordy and round-about for public-consumption... I'll eventually strip it down to the bare-minimum "build instructions"(?) to get it going.</p><p>And This Guy: <a href="https://github.com/kinsamanka/PICnc-V2/wiki/OpenOCD-PIC32-Programmer">OpenOCD PIC32 Programmer · kinsamanka/PICnc-V2 Wiki</a> actually uses a RaspPi as his JTAGger, but besides that, his script and stuff is quite informative and should turn out to be quite handy...<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20288-toolchain-difficulties">toolchain difficulties</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20288#discussion-list">
                                    6 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20288"><p>I dunno what's wrong with my search-fu, 'cause the signs all point to that *people are doing it*... but all I can seem to find is really low-level weird ways of doing it.</p><p>There's more to a toolchain than just the compiler; compiled code can run in many forms... "bare-metal" or as an application atop an OS... Once it's compiled, it's gotta be "linked" appropriately, which in a bare-metal situation means the linker needs to know *where* to put the compiled machine-language on the machine. Interrupts in certain locations, initial boot stuff at the beginning, whatnot. Then there's these newfangled chips with their newfangled abilities to run code from the RAM (WHAT?!)... but that code has to be *stored* in the FLASH, then *relocated* into RAM before it's executed... blah blah blah.</p><p>The gist of it is that: Yeah, the Microchip IDE handles all that, specifically for their chips. Of course. And alternatively, yeah, there's a MIPS cross-compiler for gcc, and many other such tools... but basically, it seems, most of the nitty-gritty described above is... beyond my search-fu.</p><p>So, it would seem, the way it's done is one of two paths: </p><p>A) write your own linker-scripts, header files, etc... for each different chip you work with... or if you're lucky you'll find someone who's done-so already. Then, use mips-gcc... e.g. <a href="http://wise-ware.org/wiki/index.php?n=Pic32.Gcc4Picâ">http://wise-ware.org/wiki/index.php?n=Pic32.Gcc4Pic</a> which is well-written, but a lot of work and a bit incomplete. Or...</p><p>B) download and install Microchip's IDE, and get its linker-scripts, header-files, etc. Then plausibly apply them to a more generic build-chain. e.g. <a href="http://www.paintyourdragon.com/uc/osxpic32/">http://www.paintyourdragon.com/uc/osxpic32/</a></p><p>Either way seems utterly ridiculous. And neither makes a bit of sense as the way people do it considering how much effort apparently has already gone into supporting these devices at the lower-levels (JTAG/flash-programming via openOCD, etc.).</p><p>So, apparently, I just don't know what to search for, right?</p><p>Well, as it stands, I'm half-assing option B: I'm downloading MPLAB XC32 from Microchip... there's a Linux version, so who knows. On the plus-side, no need for writing linker-scripts, etc. On the minus-side, it's a bit crippled unless you're willing to pay for a license (I'm not). And it kinda takes away from this being a totally open-source method. But... maybe I'll actually be able to run some code on my chip soon, which'd be a nice improvement over having to dig out the instruction-set reference and create op-codes, uploaded one-by-one by hand ;) (yeah, I didn't get beyond 0x00000000 NOP).</p><p><a href="http://www.microchip.com/pagehandler/en-us/devtools/mplabxc/home.html">http://www.microchip.com/pagehandler/en-us/devtools/mplabxc/home.html</a></p><p>That's, basically, the equivalent of a regular "tool-chain" except distributed and slightly crippled by Microchip. Allegedly it's got xc32-gcc which is allegedly open-source, as well as the linker-scripts, headers, etc. which are explicitly NOT OPEN SOURCE. This is different from the IDE, it's the toolchain the IDE uses. Again, I'm not too fond of IDEs, in general, so this'll probably be a happy-medium for now. Still, it's 60+MB, which means I've had plenty of time to write this, look at various other links, download documentation, and am still at less than 2/3rds downloaded.</p><p>And, again, even if it's not open-source, at least the entry-requirements are free. That's a plus. <br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20335-mplab-kills-commoncode">MPLAB kills commonCode</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20335#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20335"><p>(updated a couple days later... <strong>Figured out the problem</strong>, but noting that <strong>at the end...</strong> otherwise: a couple typos fixed)<br></p><p>commonCode has run on well-over a half-dozen different versions of GCC... Apple's from 10.5.8, several different versions of avr-gcc, now gcc on linux... spanning gcc's from 4.0.something (was it 3.something?) through 4.7.2...</p><p>but xc32-gcc/cpp seems to be mangling it quite royally. (See the fix at the end)</p><p><br></p><p>makefile:</p><pre class="hljs makefile"><span class="hljs-constant">COMDIR</span> = ../../../_commonCode

<span class="hljs-constant">VER_BITHANDLING</span> = 0.95
<span class="hljs-constant">BITHANDLING_HDR</span> = <span class="hljs-variable">$(COMDIR)</span>/bithandling/<span class="hljs-variable">$(VER_BITHANDLING)</span>/

<span class="hljs-constant">CFLAGS</span> += -D'_BITHANDLING_HEADER_="<span class="hljs-variable">$(BITHANDLING_HDR)</span>/bithandling.h"'</pre><p>the end-result (when running gcc with -E -dM) should be:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> _BITHANDLING_HEADER_ "../../../_commonCode/bithandling/0.95/bithandling.h"</span></pre><p>(yes, in quotes)</p><p>Then main.c uses:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#include _BITHANDLING_HEADER_</span></pre><p>Yeah, it's a little ugly on the makefile side, but there's reason for it.</p><p>There's a name for it: "Computed Includes" and there's a whole section in 'info cpp', including mention of using the command-line option -D to do-so...</p><p>And, a significant portion of <a data-mention-project-id="3828" href="/project/3828">#commonCode (not exclusively for AVRs)</a> relies on this technique<a data-mention-project-id="382" href="/project/382"></a>, and has for several years.<br></p><p>Instead, with xc32-gcc (Microchip's toolchain) what I get is:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> _BITHANDLING_HEADER_ ../../../_commonCode/bithandling/0.95</span></pre>Notice: <p>1) No quotes (where'd they go? BASH didn't mangle 'em, I can compile this on avr-gcc and linux's gcc on the same system, same 'bash', same 'make' without trouble).<br></p><p>2) It completely dropped everything after $(BITHANDLING_HDR) (/bithandling.h"')</p><p>No complaints about missing endquotes...</p><p>And a few more hacks resulted in even weirder stuff... Including Macros whose closing-parentheses were apparently never reached, and never complained about.. Like this:</p><pre class="hljs makefile">CFLAGS += -D<span class="hljs-string">'_QUOTETHIS_( x)=\#x'</span>
CFLAGS += -D<span class="hljs-string">"_BITHANDLING_HEADER_=_QUOTETHIS_(<span class="hljs-variable">$(BITHANDLING_HDR)</span>/bithandling.h)"</span>
</pre>
<p> which results in:</p><p>../../../_commonCode/heartbeat/2.05/heartbeat.h:319:11: error: unterminated argument list invoking macro "_QUOTETHIS_"<br>  #include _BITHANDLING_HEADER_<br>           ^</p><p>which doesn't make an ounce of sense, clearly it's terminated, Even tried ' instead of " and various others...</p><p>And, even weirder, the output results in:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> _BITHANDLING_HEADER_ _QUOTETHIS_(../../../_commonCode/bithandling/0.95</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> _QUOTETHIS_(x) #x</span></pre>... so, clearly, '/' isn't the problem...<p>... and it seems to be cut-off at the same place... immediately after the *makefile* variable... which shouldn't even appear to any of the xc32 utilities... and is, in fact, the same make used by the other gcc-toolchains that work fine.</p><p>Maybe it's because of this crippled ("free license") version, but that's some REALLY WEIRD SHIZZLE.</p><p>...right?</p><p>--------------</p><p>Update a couple days later:</p><p>Turns out: xc32-gcc is removing the quotes, *all of them* wherever they lay in the command-line. No, it's not bash's doing, no it's not make's doing... the compiler shouldn't be doing this, right? Maybe it has something to do with its being aimed at Windows rather'n linux?</p><p>Anyhow:</p><p>The Fix is explained <a href="http://stackoverflow.com/questions/2410976/how-to-define-a-string-in-gcc-command-line">here</a> at stack-overflow, as that's also where I figured out the problem. The end-result is a necessity to:</p><p>1) remove '  and replace " with \"</p><p>2) replace \" with \\\"</p><p> That first bit's just for an alleged portability-increase for the original <em>-D'...="..."'</em> method to <em>-D...=\"...\"</em></p><p>That should be effectively the same as the original in all cases, while also plausibly being compatible with other operating-systems I haven't tried.</p><p>The next bit is the oddity of xc32-gcc... apparently the quotes need to be escaped *again* dispite already being escaped...</p><p>thus the regular escaped-quote that bash passes into xc32-gcc: \" is removed, unless it's *escaped again* with \\\"</p><p>Again, oddly, this isn't a bash-thing, this is definitely an xc32-gcc thing. Weird.</p><p>So, now commonCode tests which compiler you're using and extra-escapes if necessary. (ultimately, maybe, there might be a more automatic way of detecting whether this is necessary, regardless of the CC used... TODO)<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20427-its-alive">It&#39;s Alive!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20427#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20427"><p>_commonCode's 'heartbeat' program is now running on the PIC32! Woot!</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/LFvetQbyOsE" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>So... basically... that means the _commonCode *system* now works with the PIC32 and its toolchain, so I guess it's time to start doing some code-abstraction (where necessary).</p><p>Actually, there's some learning to be done... The "fade cycle" is supposed to be 8 seconds, so obviously I need to look into the timers. And peripherals in general, and registers... and basically, I know nothing about this chip ;)</p><p>...actually, I should probably get the full/functional schematic and pinouts and whatnot documented soon, if not first... Nevermind the procedure/configuration for flashing via JTAG... as it stands, that's a FTDI2232H breakout-board used as a JTAGger. (and, no, /MCLR is not connected to nT/SRST). I'm using openOCD 0.90 (anything above 0.60 should work). Programming the flash takes about 10 minutes, but it's "falling back from bulk-write mode"--ish so there's probably a configuration I could change to make it faster. </p><p>Oh, and... there were a few things I had to figure out regarding getting _commonCode to run with xc32-gcc, which required using a separate "fork" (maybe?) resulting in a lot of general compatibility improvements, etc... so that should be merged at some point.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20769-wins-and-tcnter">wins! and tcnter!</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20769#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20769"><p>Woot! I won a couple prizes for the Sponsors' contests! Thanks HaD, Microchip, and Freescale!<br></p><p>Finally got the 'heartbeat' code running <em>with the 'tcnter'</em> (on the PIC32)...</p><p>'tcnter' implements a long-duration high-accuracy timer without necessitating interrupts. I use it for timing the heartbeat to 8 seconds per fade-in/out cycle and one second per blink. I also use it as the timing-basis for *several* other commonThings, including bit-banging of UARTs, etc.<br></p><p>So, basically, the idea is that once the heartbeat is running with tcnter, it means serial-communication is coming soon.</p><p>Embedded-project-development-wise, that's the path... and, in general, going from nada to heartbeat to bit-banged serial, and beyond is a matter of a few hours' work. This time, not so much... There's been a bit of a learning-curve with this PIC32/MIPS system... and, more importantly, a lot of work on <a data-mention-project-id="3828" href="/project/3828">#commonCode (not exclusively for AVRs)</a> ... It's that "<em>not exclusively for AVRs</em>" part that's being improved significantly as part of this process. New ideas on how to decouple the system from the architecture even further... Better documentation, whatnot... It's a daunting amount of work, we'll see how it goes.</p><p>Basically, as-of little more than a few months ago, I seldom looked at commonCode as a project of its own... it's always been developed/improved as a result of some other project[s] that makes use of it... I'm actually quite amazed at how much I accomplished that way, as looking at it *directly*, now, seems like a *huge* undertaking.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20840-wherein-we-discover-with-some-amount-of-certainty">wherein we discover with some amount of certainty...</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20840#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20840"><p>...that the world doesn&apos;t really exist. Or something like that.</p><p>Regardless:</p><p>Apparently, the trick to getting openOCD to use the fast-writing method is to hack it in two ways.</p><p><strong>THESE ARE &apos;INSTRUCTIONS&apos; TO SPEED UP PIC32 PROGRAMMING</strong></p><p><strong>(Without them, it takes nearly 10 MINUTES to flash! With, just a handful of seconds.)</strong><br><strong></strong></p><p><br></p><p>First: Apparently there&apos;s a test that determines whether the fast-write data buffer is safe...</p><p>This test, apparently, is faulty...</p><p>basically it tests: &quot;offset + size&quot;, whereas it should test &quot;offset + size -1&quot;</p><p>(say the offset/start address is 0, and the size is 8 bytes, then it thinks the *last-used* byte is 8, rather than byte 7...)</p><p>Fine, bad-programmer, right? Lucky, I suppose; musta been using some set-up wherein the data-buffer was somehow created not-immediately-after the working-buffer... &apos;spose it&apos;s plausible. Regardless, unless these buffers use &apos;null-termination&apos; this is a glaring mistake..</p><p>Second: After that&apos;s fixed, there&apos;s a new &quot;register &apos;a0&apos; not defined&quot; message... which is special... because, apparently, this message... only appears after you fix the above, right...?</p><p>But, no, it comes back to haunt us again later...</p><p>For now, yeah, apparently the MIPS32 registers are listed as &quot;r0&quot;-&quot;r31&quot;, but should be given more-relevent names, one of which is &quot;r7&quot; which should be &quot;a0&quot; (as I recall).</p><p>I guess our friend &quot;Serge&quot; fixed this way back in 0.60, but somehow it came back...?</p><p><a href="http://sourceforge.net/p/openocd/mailman/message/28333633/">http://sourceforge.net/p/openocd/mailman/message/28333633/</a><br></p><p>Regardless, this is the weird part...</p><p>Fixing that doesn&apos;t fix the problem... fast-write still doesn&apos;t work. I can&apos;t recall the message off-hand, but somehow it led me to look into fixes, wherein we find... wait, just a minute, I gotta point this out: Without Fast-Write mode, it takes TEN MINUTES to flash 64kb... and my program&apos;s really only like 2k... so there&apos;s that, too... TEN FRIGGIN&apos; MINUTES every time I make a code-change. Yeah, no.</p><p>So, the problem, no we&apos;re not yet at the &quot;weird part&quot; yet... I&apos;ll get to it, Promise...</p><p>Anyways, the new weird message leads to this page:</p><p><a href="http://openocd.zylin.com/#/c/977/">http://openocd.zylin.com/#/c/977/</a></p><p>which says &quot;abandoned&quot; because, apparently &quot;Not needed. We can play with adapter_khz and/or scan_delay in queued mode to make it work nearly safe and faster.&quot;</p><p>Ohhh, OK, so all&apos;s I hads to do&apos;s was adjust adapter_khz... apparently it was too fast, the program running on the pic for fast-write was executing too slowly, and my fast 4000khz adapter_khz was too fast, causing polling of whether the program had completed to fail... I think I get it...</p><p>Fine, back to the Unhacked version of openOCD-0.90... the freshly-compiled version, straight from the source... this time with adapter_khz of 400, rather&apos;n my old 4000</p><p>And, low-and-behold: &quot;falling back to non fast-write&quot; as well as &quot;register &apos;a0&apos; not defined&quot;</p><p>Whoa, now, wait a minute... the &apos;a0&apos; issue was due to the fact that fast-write is *being executed*, no? That&apos;s how I understood it... that &apos;a0&apos; thing was only happening *because* I fixed the overlapping-memory-test, before... when that overlapping-memory-test failed, it resorted to &quot;non fast write&quot; mode... So, then, when I fixed the overlapping-memory-test, it was then *able* to *attempt* fast-write, wherein we discovered the &apos;a0&apos; bug in the &apos;fast-write&apos; algorithm... RIGHT?</p><p>So, then, why does changing adapter_khz to 400 somehow *ignore* the overlapping-memory-test failure in the original version, and *go into fast-write mode*?!</p><p>Alright, I dunno... So, adapter_khz 4000 works with *slow-writing* on the default 0.90</p><p>400 causes the &apos;a0&apos; issue to appear, on the default 0.90</p><p>OK</p><p>And in the hacked-version...?</p><p>adapter_khz 4000 results in falling-back to non-fast-write, and if I recall, actually fails... No, that ain&apos;t right... it results in the &apos;a0&apos; message... no, that ain&apos;t right, either, &apos;cause I just fixed that... so, what was the weird error that caused me to look into the &quot;zylin&quot; page...? I can&apos;t recall, but there was some weird message that caused me to look into the &quot;zylin&quot; page... and that page basically said to try a slower adapter_khz, and my having-done-so resulted in a REALLY FAST WRITE.</p><p>So, two changes were necessary, in openOCD&apos;s source-code:</p><p>First: fix that overlapping-memory-test, so that fast-write can execute (using the memory-buffer tested for overlap)</p><p>Second: replace the &apos;r&apos; registers with their better names... so that, apparently, the code that&apos;s supposed to run for &quot;fast-write&quot; mode, can execute *at all*...</p><p>Then, of course, the third step is to change adapter_khz to 400 (from 4000)</p><p>Fine.</p><p>For posterity: Here&apos;s where we&apos;re at... this world doesn&apos;t exist. Logic is irrelevent. Programming is bullshit, code... code only functions when you don&apos;t understand *how* it functions. Or something. I&apos;m ready for the next level, so I&apos;m not going to write this up in any easier format, &apos;cause, frankly, even if I did, this wouldn&apos;t help you, because the universe, or whatever it is, would find a completely different path-of-confusion for you.</p><p>So, here&apos;s the diffs:</p><pre class="hljs objectivec">diff -x <span class="hljs-variable">.DS_Store</span> -r openocd-<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>_fresh/src/target/mips32<span class="hljs-variable">.c</span> openocd-<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>_hacked/src/target/mips32<span class="hljs-variable">.c</span>
<span class="hljs-number">47</span>a48
&gt; <span class="hljs-preprocessor">#if 0</span>
<span class="hljs-number">163</span>a165,<span class="hljs-number">214</span>
&gt; <span class="hljs-preprocessor">#else</span>
&gt; <span class="hljs-comment">//meh:</span>
&gt; <span class="hljs-comment">// per:</span>
&gt; <span class="hljs-comment">// <a href="http://sourceforge.net/p/openocd/mailman/message/28333633/">http://sourceforge.net/p/openocd/mailman/message/28333633/</a></span>
&gt; <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">struct</span> {
&gt; 	<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">id</span>;
&gt; 	<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name;
&gt; 	<span class="hljs-keyword">enum</span> reg_type type;
&gt; 	<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *group;
&gt; 	<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *feature;
&gt; 	<span class="hljs-keyword">int</span> flag;
&gt; } mips32_regs[] = {
&gt; 	{  <span class="hljs-number">0</span>,  <span class="hljs-string">&quot;zero&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">1</span>,  <span class="hljs-string">&quot;at&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">2</span>,  <span class="hljs-string">&quot;v0&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">3</span>,  <span class="hljs-string">&quot;v1&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">4</span>,  <span class="hljs-string">&quot;a0&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">5</span>,  <span class="hljs-string">&quot;a1&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">6</span>,  <span class="hljs-string">&quot;a2&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">7</span>,  <span class="hljs-string">&quot;a3&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">8</span>,  <span class="hljs-string">&quot;t0&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{  <span class="hljs-number">9</span>,  <span class="hljs-string">&quot;t1&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">10</span>,  <span class="hljs-string">&quot;t2&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">11</span>,  <span class="hljs-string">&quot;t3&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">12</span>,  <span class="hljs-string">&quot;t4&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">13</span>,  <span class="hljs-string">&quot;t5&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">14</span>,  <span class="hljs-string">&quot;t6&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">15</span>,  <span class="hljs-string">&quot;t7&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">16</span>, <span class="hljs-string">&quot;s0&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">17</span>, <span class="hljs-string">&quot;s1&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">18</span>, <span class="hljs-string">&quot;s2&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">19</span>, <span class="hljs-string">&quot;s3&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">20</span>, <span class="hljs-string">&quot;s4&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">21</span>, <span class="hljs-string">&quot;s5&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">22</span>, <span class="hljs-string">&quot;s6&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">23</span>, <span class="hljs-string">&quot;s7&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">24</span>, <span class="hljs-string">&quot;t8&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">25</span>, <span class="hljs-string">&quot;t9&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">26</span>, <span class="hljs-string">&quot;k0&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">27</span>, <span class="hljs-string">&quot;k1&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">28</span>, <span class="hljs-string">&quot;gp&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">29</span>, <span class="hljs-string">&quot;sp&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">30</span>, <span class="hljs-string">&quot;fp&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">31</span>, <span class="hljs-string">&quot;ra&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">32</span>, <span class="hljs-string">&quot;status&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cp0&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">33</span>, <span class="hljs-string">&quot;lo&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">34</span>, <span class="hljs-string">&quot;hi&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">35</span>, <span class="hljs-string">&quot;badvaddr&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cp0&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">36</span>, <span class="hljs-string">&quot;cause&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cp0&quot;</span>, <span class="hljs-number">0</span> },
&gt; 	{ <span class="hljs-number">37</span>, <span class="hljs-string">&quot;pc&quot;</span>, REG_TYPE_INT, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;org.gnu.gdb.mips.cpu&quot;</span>, <span class="hljs-number">0</span> },
<span class="hljs-number">164</span>a216,<span class="hljs-number">285</span>
&gt; 	{ <span class="hljs-number">38</span>,  <span class="hljs-string">&quot;f0&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">39</span>,  <span class="hljs-string">&quot;f1&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">40</span>,  <span class="hljs-string">&quot;f2&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">41</span>,  <span class="hljs-string">&quot;f3&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">42</span>,  <span class="hljs-string">&quot;f4&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">43</span>,  <span class="hljs-string">&quot;f5&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">44</span>,  <span class="hljs-string">&quot;f6&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">45</span>,  <span class="hljs-string">&quot;f7&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">46</span>,  <span class="hljs-string">&quot;f8&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">47</span>,  <span class="hljs-string">&quot;f9&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">48</span>, <span class="hljs-string">&quot;f10&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">49</span>, <span class="hljs-string">&quot;f11&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">50</span>, <span class="hljs-string">&quot;f12&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">51</span>, <span class="hljs-string">&quot;f13&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">52</span>, <span class="hljs-string">&quot;f14&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">53</span>, <span class="hljs-string">&quot;f15&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">54</span>, <span class="hljs-string">&quot;f16&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">55</span>, <span class="hljs-string">&quot;f17&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">56</span>, <span class="hljs-string">&quot;f18&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">57</span>, <span class="hljs-string">&quot;f19&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">58</span>, <span class="hljs-string">&quot;f20&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">59</span>, <span class="hljs-string">&quot;f21&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">60</span>, <span class="hljs-string">&quot;f22&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">61</span>, <span class="hljs-string">&quot;f23&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">62</span>, <span class="hljs-string">&quot;f24&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">63</span>, <span class="hljs-string">&quot;f25&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">64</span>, <span class="hljs-string">&quot;f26&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">65</span>, <span class="hljs-string">&quot;f27&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">66</span>, <span class="hljs-string">&quot;f28&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">67</span>, <span class="hljs-string">&quot;f29&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">68</span>, <span class="hljs-string">&quot;f30&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">69</span>, <span class="hljs-string">&quot;f31&quot;</span>, REG_TYPE_IEEE_SINGLE, <span class="hljs-literal">NULL</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">70</span>, <span class="hljs-string">&quot;fcsr&quot;</span>, REG_TYPE_INT, <span class="hljs-string">&quot;float&quot;</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; 	{ <span class="hljs-number">71</span>, <span class="hljs-string">&quot;fir&quot;</span>, REG_TYPE_INT, <span class="hljs-string">&quot;float&quot;</span>,
&gt; 		<span class="hljs-string">&quot;org.gnu.gdb.mips.fpu&quot;</span>, MIPS32_GDB_DUMMY_FP_REG },
&gt; };
&gt; <span class="hljs-preprocessor">#endif</span>
diff -x <span class="hljs-variable">.DS_Store</span> -r openocd-<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>_fresh/src/target/mips_m4k<span class="hljs-variable">.c</span> openocd-<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>_hacked/src/target/mips_m4k<span class="hljs-variable">.c</span>
<span class="hljs-number">1171</span>,<span class="hljs-number">1172</span>c1171,<span class="hljs-number">1186</span>
&lt; 	<span class="hljs-keyword">if</span> (address &lt;= fast_data_area-&gt;address + fast_data_area-&gt;size &amp;&amp;
&lt; 			fast_data_area-&gt;address &lt;= address + count) {
---
&gt; 	<span class="hljs-keyword">typeof</span>(fast_data_area-&gt;address) fd_addr = fast_data_area-&gt;address;
&gt; 
&gt; 	<span class="hljs-keyword">typeof</span>(fd_addr) fd_lastAddr = fd_addr + fast_data_area-&gt;size -<span class="hljs-number">1</span>;
&gt; 
&gt; 	<span class="hljs-keyword">typeof</span>(address) lastAddr = address + count -<span class="hljs-number">1</span>;
&gt; 
&gt; 	<span class="hljs-comment">//meh:</span>
&gt; 	<span class="hljs-comment">//THE ABOVE CAN&apos;T BE RIGHT, right?</span>
&gt; 	<span class="hljs-comment">// lastAddr shouldn&apos;t be address + count,</span>
&gt; 	<span class="hljs-comment">//  otherwise, we&apos;d have e.g. 0x00 + 0x08 = 0x08 = lastAddr</span>
&gt; 	<span class="hljs-comment">//  but the lastAddress SHOULD be 0x07... No?</span>
&gt; 
&gt; 	<span class="hljs-comment">//if ( (address &lt;= (fast_data_area-&gt;address + fast_data_area-&gt;size))</span>
&gt; 	<span class="hljs-comment">// &amp;&amp;  (fast_data_area-&gt;address &lt;= (address + count)) )</span>
&gt; 	<span class="hljs-keyword">if</span> ( ( address &lt;= fd_lastAddr ) &amp;&amp; ( fd_addr &lt;= lastAddr ) )
&gt; 	{
<span class="hljs-number">1176</span>a1191,<span class="hljs-number">1194</span>
&gt; 		LOG_ERROR(<span class="hljs-string">&quot;fast_data: (0x%8.8&quot;</span>PRIx32<span class="hljs-string">&quot;-0x%8.8&quot;</span>PRIx32<span class="hljs-string">&quot;).&quot;</span>,
&gt; 				fd_addr, fd_lastAddr);
&gt; 		LOG_ERROR(<span class="hljs-string">&quot;address:   (0x%8.8&quot;</span>PRIx32<span class="hljs-string">&quot;-0x%8.8&quot;</span>PRIx32<span class="hljs-string">&quot;).&quot;</span>,
&gt; 				address, lastAddr);
</pre><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6450/log/20899-gpio-defaults-cannot-read-pin-input">GPIO Defaults CANNOT read pin input</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6450/log/20899#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20899"><p>NOTE:</p><p>(Update: Now, if I&apos;da just read <a href="http://tahmidmc.blogspot.com/2013/11/introduction-to-pic32-basics-getting.html">Tahmid&apos;s intro</a> from the start, as well as all the way through its first section, then I&apos;da saved a LOT of time!)<br></p><p>Summary: Put this early-on in your code!</p><pre><span class="hljs-regexp">//</span>Pins which are shared <span class="hljs-reserved">with</span> Analog peripherals <span class="hljs-reserved">default</span> to ANALOG <span class="hljs-keyword">by</span>
<span class="hljs-regexp">//</span><span class="hljs-reserved">default</span>... This causes all READS from PORTx to be <span class="hljs-number">0</span>
//Set ANSELx bits to 0 for PORTx reads to be valid!
<span class="redactor-invisible-space">//Below takes care of PORTA inputs, use ANSELB, etc. for PORTB...</span>
ANSELA = <span class="hljs-number">0x0000</span>;
</pre><p></p><p>Frankly, the documentation is downright confusing at times. Somewhere I&apos;m sure I read that the defaults result in the GPIO pins defaulting to inputs.</p><p>But, no... That&apos;s not enough... Because if you&apos;re *not* planning on using the ADC, you *still* need to look into it... Because later down-the-line it also says something like GPIO pins that are shared with analog peripherals default to ANALOG mode. Which, apparently, explicitly *disables* PORT [input] reads on those pins... So, even if you&apos;re *not* planning to use any analog stuff, and just want to read a pushbutton on a pin, you *still* need to acknowledge (and learn the intricate details regarding) the fact that the pin is shared with an analog peripheral... even though those analog peripherals default to OFF.</p><p>It took me two days to figure this one out.<br></p>The takeaway, here, I guess, is to make sure that all your inputs are set to digital mode, until you decide to use them otherwise. Just do it: ANSELx = 0;<p><br><a href="http://tahmidmc.blogspot.com/2013/11/introduction-to-pic32-basics-getting.html"></a></p><br></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'zdjVMr7D-aef_ZGC8k1D5ZYYPot_FcOq3uBA';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>