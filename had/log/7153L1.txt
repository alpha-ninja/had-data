<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Squidpad &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F7153%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/7153-squidpad">Squidpad</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Replace lots of stick notes and scraps of paper around the house with one Slim Quality Uncostly Intuitive Drawing Pad - [WIP]</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/85598-arthur-admiraal" title="Visit Profile">Arthur Admiraal</a><span>&bull;</span>
                
                9 days ago<span>&bull;</span><a href="/project/7153#discussion-list" title="See Comments">4 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/7153-squidpad">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/7153/logs/sort/newest">Newest</option>
                    <option value="/project/7153/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/7153/log/22436-log-1-initial-commit">Log 1: Initial commit</a></h2>
                            <small class="authorship">8 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/22436#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22436"><p><strong>About myself</strong></p>  <p>I guess it would be a good idea to introduce myself, as this is my first post. I&#x2019;m a sixteen-year-old electronics hobbyist from the Netherlands. I have always been interested in science and technology, but ever since my parents gave me an Arduino three years ago, I have been hooked. Yes, I&#x2019;m one of them Arduino kiddies. (I hope you don&#x2019;t find my code and PCB layout too appalling.)</p>    <p>Anyhow, on to the project.</p>  <p><strong> </strong></p>  <p><strong>Intention</strong></p>  <p>Some years ago I had an odd job at a high-tech company, programming an embedded system. It was quite challenging to come up with algorithms sometimes, you really needed to be able to visualise them. Normally, I would have sketched it out on a piece of paper to kind of control my thought flow. However, this just so happened to be a paperless company, so I had to find another means to do it. Suffice it to say that <i>MS Paint</i> didn&#x2019;t really cut it.</p>    <p>I think there is a need for a device that replaces scraps of paper, sticky notes and the like. It should have the same ease of use as paper, but not be as messy. Since digital devices have some more possibilities than paper, the experience should also be enhanced. For example, the device should have the ability to save your drawings as vector files for documentation and do some semi-automatic things, such as making your wrangled lines straight. Also, it would arguably be more environmentally friendly than paper in the long run.</p>    <p>There are some devices currently on the market that come close. Drawing tablets, for example are quite nice input devices. Their only drawback &#x2013; no pun intended - is that the cheap models have no screen for visual feedback. This means that you can&#x2019;t just have them laying around somewhere and use one on a whim, they need to be connected to a computer at all times. Also, you need some degree of hand-eye coordination to use them. As far as I could find, the devices that do somewhat meet my requirements, such as the Sony digital paper, cost upwards of a thousand euros.</p>    <p>I should probably mention at this point that I like to design my projects as if they were products, for practice. This means that you are going to see some design for manufacture (or, at least if I do my job properly).</p>    <p><strong>Requirements and nice-to-haves</strong></p>  <p>So what makes paper so much easier to use than a tablet? Well, I think it boils down to the following core issues:</p>  <ul><li>You can rest your hand on paper while drawing, which you can&#x2019;t do on a tablet.</li><li>You can accurately pick a point on paper to draw from, which you can&#x2019;t on a tablet. This is most evident when trying to write something on a tablet.</li><li>Paper <i>just looks nicer</i> than a tablet. It has a better viewing angle and doesn&#x2019;t emit light into your eyeballs.</li><li>Paper is easily available. It doesn&#x2019;t have a long start-up time, and can&#x2019;t run out of battery power. You can just pick it up and start drawing.</li><li>An easy-to-use searchable system for organizing the notes.</li><li>Some tools to draw perfect shapes, such as circles and regular polygons.</li><li>Tools to beautify lines drawn by the user. They should make somewhat straight lines perfectly straight, and somewhat curvy lines perfect curves.</li><li>Easy control over thickness of the line, and preferably colour as well.</li><li>As good as an integration with a computer as possible.</li></ul>          <p>As mentioned earlier, I would like to go beyond just fixing the issues of drawing on computers, and also enhance the user experience. For that I would like to implement the following:</p>              <p>I want to try to design something that could be sold for about &#x20AC;350, at a maximum. Applying the 2,6-rule, yields that the project may only cost about &#x20AC;135, which I guess would be in about a 1k volume.</p>    <p>Also, for some reason I think that it would be really cool to have the design be waterproof. This may be more of an exercise for me than anything else, but the concept of having a paper replacement that works where paper could never work just fascinates me to no end.</p>    <p>Please note that these requirements are not really set into stone. I have no idea how many I will be able to fulfil, but I&#x2019;ll try to design my project with these requirements in mind. Maybe I will even add some later.</p>    <p>And another quick disclaimer up front: I don&#x2019;t finish all of my projects, and I have no idea whether I&#x2019;ll be able to finish this one. We&#x2019;ll see.</p>    <p><strong>Documentation</strong></p>  <p>I&#x2019;ve actually been designing this project for a few weeks now, but I&#x2019;ve waited with posting my progress here because &#x2013; as mentioned above &#x2013; I didn&#x2019;t know whether I would actually finish this project. Because of this, I&#x2019;m writing the documentation &#x2018;from the future&#x2019;, but I&#x2019;ll still try to document all the steps that I&#x2019;ve taken. This might even include minute details if I feel like writing about them. But please forgive me if I mix up the tenses every now and then, the fact that English isn&#x2019;t my native language doesn&#x2019;t help me there.</p>    <p>I&#x2019;m going to try to post one log daily the following days, to get the documentation up to date. The details section will be the aggregate of those logs, but it won&#x2019;t contain any information on the struggles I encountered while designing the project.</p>    <p><strong>License</strong></p>  <p>All the files will be released under something like a <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a> or more open license. You can use this documentation under a <a href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International</a> license</p>    <p><strong>State of the project at the present day</strong></p>  <p>Currently, I&#x2019;ve ordered most parts for the electronics. The design for the enclosure is almost done, and I&#x2019;m contacting local fablabs to see what it takes to produce it. I don&#x2019;t expect to be able to have the PCB&#x2019;s in before the first deadline, so I don&#x2019;t think I will be able to have a prototype up and running before the deadline. I might try to experiment with some algorithms needed in the software though.</p>    Well, I hope you have a bit of an idea what I&#x2019;m trying to achieve now. I guess you should keep reading if it interests you.</div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7153/log/22533-log-2-overall-electronics-design">Log 2: Overall electronics design</a></h2>
                            <small class="authorship">8 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/22533#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22533"><p>Before I actually started to ponder the nitty-gritty details of the hardware and software design for the project, I thought up some overall solutions to the problems.</p>    <p>First and foremost, accurate localisation of the tip of a stylus without detection of hands is arguably the most important part of this project. When looking over Wikipedia&#x2019;s <a href="https://en.wikipedia.org/wiki/Touchscreen">list of touchscreen technologies</a><a href="https://en.wikipedia.org/wiki/Touchscreen"></a>, I couldn&#x2019;t really find anything suitable. All technologies would detect either specifically human hands, or all objects that touch their surface.</p>    <p>So, I tried to think up something better. Eventually, I figured that a system using <a href="https://en.wikipedia.org/wiki/Trilateration">trilateration</a> could be used to determine the position. If you haven&#x2019;t heard about trilateration before, it is the calculation that is used to localize GPS modules.<span class="read-more-tag">---------- more ---------</span></p>It works like this: you have a number of base stations with a known location. The number depends on the number of axis on which you want to localize. Now, you measure your distance to these stations. You don&#x2019;t use a long piece of measuring tape of course, but rather you can calculate your distance to a base station by measuring the propagation delay.     <p>You see, the speed of sound or light through a certain medium is mostly constant. So if we give both the device that needs to be localized and the base station synched clocks, we can send a signal to a base station, and then time how long it takes the signal to reach it. We can then just calculate the distance between the objects using a simple formula, which may look familiar if you have done any physics at a high school level or higher:<img src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20%5CDelta%20d%20%3D%20v%20%5Ccdot%20%5CDelta%20t"></p><p>In which <em>d</em> is the distance between the objects in m, <em>v</em> is the speed of the signal through the medium in <em>m/s</em> and <em>t</em> is the time it took the signal to reach the base station in s.</p>    <p>So now we&#x2019;ve gotten a few distances. So what? Well, we can use these distances to construct imaginary circles around our base stations (or spheres if you&#x2019;re doing this in 3D), like in the picture below.</p>    <p><img src="https://cdn.hackaday.io/images/3673081439322887398.png"></p>    <p>The device is at the intersection of the circles. That is how trilateration works in a nutshell. <i>The more you know.</i></p>    <p>So my idea is to put a small ultrasound transducer in the stylus, which will vibrate the tip. It must be ultrasound so that the device won&#x2019;t annoy people too much. Now if the stylus is placed on some medium &#x2013; I guess it has to be glass since you need to be able to see a screen under it &#x2013; the sound wave will be coupled in to it. If I place some ultrasound microphones around the perimeter of the glass plate, I can trilaterate the position of the source of the ultrasound signal from the data I get from them. They&#x2019;re basically the base stations in the above example. </p>    <p>Of course when I googled my idea, I found that it had existed for a long time and that currently versions are being <a href="https://www.youtube.com/watch?v=C9w2oEWZ-mY">integrated in tablets</a>. This is also when I found out about <a href="https://en.wikipedia.org/wiki/Graphics_tablet">drawing tablets</a><a href="https://en.wikipedia.org/wiki/Graphics_tablet"></a>, and with them the technology that enables them. But that didn&#x2019;t stop me from pursuing this design, as it seems like it is the easiest to implement of all the drawing tablet designs.</p>    <p>There are two catches with this design. Firstly, you need to know the time at which the stylus emits the signal. Secondly, the glass plate needs to be really thin, or else you&#x2019;ll need to do more complicated 3D calculations.</p>    <p>Normally I would&#x2019;ve implemented an rf communications link from the squidpad to the stylus, on which a signal could be sent to let the stylus emit an ultrasound signal. Because the speed of light is much higher then the speed of sound, any latency on the signal would be negligible in the calculation. But doing this would necessitate some rf design, which I&#x2019;ve not done yet. It would make everything quite complicated. Instead, I think it is possible to let the stylus periodically emit the signal, and then calculate the exact time at which it was emitted.</p>    <p>You may know that to solve a system of equitations, you need to have as much equitations as variables that you want to solve for. Since the stylus only needs to be located on two axis, two distance measurements are needed to locate it. <em></em>  However, the time of the ultrasound signal emission must also be calculated, and thus adds a third variable. Because of this a third distance measurement is needed to get the third equitation needed. This is probably nothing new either, since something like the <a href="http://www.shotspotter.com/">shot spotter</a> system would need to perform these types of calculations.</p><em></em>Quick note here: in the figure above I used drew 3 circles. That&apos;s because having only two distance measurements results in getting two answers. Mathematicians still consider this finite set of solutions a solution. Normally, this would mean that we needed to add an extra microphone, but we know a range in which the coordinates must fall, so we won&apos;t need it.    <p>A good source for strong, high quality thin glass can actually be found in screen protectors. The thinner they are, the less noticeable they are for the users, and the high quality models are usually made from gorilla glass to prevent scratches. I think that I could easily laser cut them to the correct size.</p>    <p>The system needs to be easily available to start drawing on any moment. Because of this, it needs to have a long battery life, and a really good sleep mode from which it can be awaken at any moment. Also, it would be nice to have the screen be a little more pleasant than a regular TFT LCD screen. An e-ink display can solve both of those issues. Not only is it the lowest power display technology currently available (at least that I know off, there might be some specific cases where it isn&#x2019;t), but also looks a lot like real paper. All the half-decent e-readers have it. It is the perfect fit for this project. The only downside is that I have no idea where to get one, or how to drive one if I even get one. <a href="http://lmgtfy.com/?q=e+ink+display+reverse+engineering">To Google!</a></p>    <p>Okay, it turns out to be easier then I thought. <i>Petteri Aimonen</i> of <i>Essential scrap </i>has reverse engineered the<strong> </strong>ED060SC4 display than can be bought of off e-bay for around $20. The coolest thing is that he has documented the entire interface, allowing me to design the display into this project. The ED060SC4 has just the right size and the right prize for this type of device. I will definitely use it as for the display. There is one catch though. (Again!?)</p>    <p>The big downside of e-ink displays is their low update rate. Loading a full frame takes a long time. However, I don&#x2019;t need to load a full frame. I just have to add a few pixels every time the user draws a line, as e-ink displays keep their contents (they call this a bi-stable display). I should be able to do that quick enough to not form a nuisance to the user. </p>    <p>Oh, and the e-ink display isn&#x2019;t a fancy coloured one, but I don&#x2019;t think color is really needed for simple notes. It might be possible to implement some greyscale grading though.</p>    <p>And since this system needs to be able to be used detached from a computer, it needs some sort of battery. The only acceptable choice for a product like this is a rechargeable one, for obvious reasons. I&#x2019;m going with a Lithium battery, because of the high energy density and somewhat low price point.</p>    <p>If a user can make drawings on the go, they need to be saved somewhere. I think the easiest way to add a lot of memory is to put a micro-SD card socket on the PCB. The SPI interface is easy to use, the memory density is really high and high capacity micro-SD cards are quite cheap these days. This way a user could also swap it out if he/she wanted more memory, or if it ran out of space.</p>    <p>Then that leaves the recharging and the interface to the computer. These two things could either be done wireless, or wired. I don&#x2019;t see a huge advantage in being able to constantly stream data to the computer without a wired connection, as drawing could be done on the go, so whenever connectivity with the computer is required, the user would probably be right in front of it to see the screen. Then a wireless connection will only suck the energy out of the poor battery, so there should be a wired connection for communication. The most suitable protocol for this is USB, and if that&#x2019;s plugged in, why not also charge the device with it? A USB port it is then.</p>    <p>Those are the overall design decisions I made regarding the electronics; I think I will post about overall design decisions for the mechanical side of the project tomorrow.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7153/log/22619-log-3-overall-mechanical-design">Log 3: Overall mechanical design</a></h2>
                            <small class="authorship">6 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/22619#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22619"><p><img style="display: block; margin: auto;" alt="Mockup of interals of mechanical design" src="https://cdn.hackaday.io/images/823751439413943940.png"></p><p>The only real mechanical part of this project is the enclosure. As mentioned before, I want to make it waterproof. Also, it needs a glass plate for the stylus localisation.</p>    <p>When trying to write on a device, you hand may be positioned next to it, which could put stress on you hand. To alleviate this, I want to make the device as thin as possible. This calls for a strong, solid material. Because of the small physical size, I had to make a rough case design before actually laying out the PCB to know the space constraints.</p>    <p>I want the design to be openable, so that it can be serviced. I came up with a host of ideas to achieve this, but only one was practical.</p>    <p>At first I considered making a case entirely out of glass, with one open side. Because the glass is already transparent, all functionality of the case could be put in this one part, which made it easy to waterproof it: the electronics would be shoved in, after which the whole would be potted. However, I didn&#x2019;t like the idea of not being able to service the design. This is where the openability requirement was born.</p>    <p>After that, my mind turned to aluminium. Aluminium is strong enough for such a thin design, is easy to work with, and its high thermal conductivity makes it feel nice to the touch.</p>    <p>I&#x2019;ve never worked with aluminium before, but I know that for an intricate enclosure, a 3D CNC router is the tool for the job, so I went on to design it with that in mind. I have fiddled around with freecad in the past, but I deemed it too unstable for this project, so I tried working with Blender, but that wasn&#x2019;t really the tool for the job, so I ultimately ended up using designspark mechanical. It isn&#x2019;t an open tool, but at least it&#x2019;s free.</p>    <p>I considered milling a pocket out of a block of aluminium, and putting an O-ring on the top of the walls. The glass plate could then be placed up on that, after which a vacuum could be formed through a small hole that would then be plugged, preferable by some easily removable means (although not to easily).</p>    <p>Because this would be quite challenging to make, I came up with another idea. I would keep the same design for the bottom half of the case, but glue little pieces of aluminium to it, along the sides of the case. These could then be screwed to the side of the case (from the outside), to keep the glass plate in place, and the O-ring seal under pressure. These pieces would, of course, need O-ring seals around the screws as well, since else water could leak through the screw holes into the design, as the screws leave just a little gap open. This would take up a lot of space, not to mention the difficulty of assembly.</p>    <p><img style="display: block; margin: auto;" alt="Cross section of O-ring" src="https://cdn.hackaday.io/images/3952611439413975456.png"></p>    <p>Apart from the assembly, the other big problem with these designs is the stress put on the fragile, thin glass plate. This is where the fourth and final design was born. By splitting up the aluminium enclosure in a top half and bottom half, the glass can get the much-needed support. By having a cut out for the screen in the top part of the case, the design is kept thin. Gluing the glass to the top part of the case ensures a waterproof cut out. The screen may have to be glued to the glass plate for added support. An O-ring seal can be made halfway in the walls (see picture above (note: the bottom should come down and touch the two &apos;teeth&apos;, but I am not done designing the enclosure yet)). If the screws are placed only around the perimeter, the O-ring can loop around them, so water wont leak in via the screw holes. To prevent the aluminium from rusting, the parts can be <a href="https://www.youtube.com/watch?v=3ZhVOy-ytJY">anodized</a>.</p>    <p>There are some potential problems with this design though. The speed of sound in anodized aluminium could be higher than that in tempered glass. Because of this, the aluminium could absorb part of the signal, and get it to the ultrasound microphones quicker then the glass could, which would mess up the calculations. Also, if the bond between the glass plate and the aluminium top part of the case is too strong, the aluminium could end up absorbing too much of the signal for the glass to be able to pass it through to the ultrasound microphones. I&#x2019;m hoping that the plasticity of the glue will allow the glass to vibrate freely, and thus pass the wave on with a relatively low loss, in which case both of these problems should be non-existent.</p>    <p><strong>Cosmetics</strong></p>  <p><img style="display: block; margin: auto;" alt="Uggly glossy service on portable gaming device" src="https://cdn.hackaday.io/images/9974211439414224584.jpg"></p>  <p>There is one thing in product design that I just hate to no end. So much in fact, that I&#x2019;ve decided to never do this in my own designs: glossy surfaces. You can easily see every fingerprint on a glossy surface, while diffuse surfaces keep looking just as good as when they came straight out of the package. Anodized aluminium keeps the same surface finish as the aluminium underneath. Normally, this would be polished, so that the anodized surface would be my arch nemesis: a glossy surface. To create a nice diffuse surface, the part can be sandblasted prior to anodizing. Sand is too rough for this however, so glass beads are used, and then the process is called peening. But glass beads can get stuck in the aluminium, which can be decrease the quality of the anodising. According to <a href="http://www.cnczone.com/forums/metal-finishing-plating/47937-anodizing-sandblasted-aluminum.html">this CNC machinist forum</a>, aluminium oxide yields the best results. I&#x2019;ll try if I can peen my part with that, but I&#x2019;m afraid that I will have to resort to regular glass beads.</p>    <p>Anodizing actually allows you to color or dye the surface. I&#x2019;d like to color it black for some reason. On the picture below you can see a mockup of what I think the aluminium might look like. On the right it is straight from the polishing, in de middle it has been peened, and on the left, it has been anodized.</p>    <p><img alt="Mockup of the various stages of the aluminium" style="display: block; margin: auto;" src="https://cdn.hackaday.io/images/5128641439414352185.png"></p><p>Well, that were all the general design decisions, in the next posts I&apos;m going to dive into the details of the hardware design.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7153/log/22696-log-4-choosing-pcb-software">Log 4: Choosing PCB software</a></h2>
                            <small class="authorship">6 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/22696#discussion-list">
                                    3 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22696">  <p>I have only ever used eagle to design my PCB&#x2019;s. It has suited me fine for the three years that I&#x2019;ve worked with it, but its limitations bundled with the lack of advanced functionality, such as push and shove routing is starting to get on my nerves. KiCad has been looking more and more promising by the day ever since CERN got involved with it, but the stable release will arrive just to late to be able to design the project on it in time, so it sadly wasn&#x2019;t an option. I might try it in the future though.</p>    <p>Altium Circuitmaker did arrive in time though, and its feature set looks just plainly terrific, so I went ahead and installed a copy. I wish I hadn&#x2019;t. I had of course heard about the cloud-only nature of the software, but since this is an open project, I didn&#x2019;t expect this to be a problem.</p>    <p>So I start up the software, fiddled around with it, and get a bit lost. You know, the typical routine when using a new tool, nothing that can&#x2019;t be fixed by some practice and a few tutorials. But as I struggled to create my first custom component, it dawned upon me that everyone could see and import this part. Every error I made could upset a lot of people. This made me feel quite uncomfortable. Also, I couldn&#x2019;t pick the license myself, and didn&#x2019;t have control over my source files. All of the above made the barrier to entry really large, too large in fact.</p>    <p>So I&#x2019;m basically stuck with eagle for the time being. It is the tool I&#x2019;m familiar with, and the tool I&#x2019;m going to use for this project. It&#x2019;ll probably come back to bite me in the long run.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7153/log/22812-log-5-detailed-electronics-design">Log 5: Detailed electronics design</a></h2>
                            <small class="authorship">5 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/22812#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22812">  <p>High-level design choices are nice, but they still need to be translated into circuitry. I reckoned that it should be possible to have the electronics mostly be 1mm thick (excluding the 0,8mm PCB of course). If any parts extended a bit past that, a pocket could be milled out in the bottom of the case.</p>    <p><strong>Driving the e-ink display</strong></p>  <p>As mentioned before, I closely followed <a href="http://essentialscrap.com/eink/electronics.html">the design</a> of <strong><i></i></strong><i>Petteri Aimonen</i> of <i>essential scrap</i>. However, I didn&#x2019;t like the amount of power supply circuitry, so I decided to use the <a href="http://www.mouser.com/ds/2/405/tps65185-448927.pdf">Texas Instruments TPS65185RGZR</a>, which is a dedicated power management IC. I just carbon copied the typical application circuit in the datasheet. I briefly considered replacing the thermistor that is being used to detect the display overheating with a fixed resistor, as I don&#x2019;t really need to monitor the temperature, but I went ahead and used it anyway.<strong></strong></p>  <p><strong> </strong></p>  <p><strong>Cost optimization</strong><strong></strong></p>  <p><strong></strong>As mentioned earlier, I try to put some thought into design for manufacture. The TPS65185 had some quite stringent requirements on parts, which increased the number of parts on the BOM quite a bit. Because of that, I reused a coil and a bunch of resistors and capacitors in the design. This way fewer feeders would be needed when assembling this design using pick-and-place machines, which would decrease manufacturing costs.<strong></strong></p>  <p><strong> </strong></p>  <p><strong>Filtering</strong><strong></strong></p>  <p><strong></strong>As this design uses multiple switching power converters that introduce a lot of noise in the system, it is important to thoroughly filter the power lines. I&#x2019;ve got small .1uF capacitors on every IC, and bigger capacitors on the converters themselves.<strong></strong></p>  <p><strong> </strong></p>  <p><strong>Choosing a rechargeable battery</strong><strong></strong></p>  <p><strong></strong>I needed a thin lithium battery to power the design. I found a company called <a href="http://www.powerstream.com/thin-lithium-ion.htm"><i>Powerstream</i></a> that makes really thin ones. However, shipping to the Netherlands would be about $86, I guess because of precautions that need to be taken against exploding batteries. <strong></strong></p>  <p><strong> </strong></p>  <p><strong></strong>I didn&#x2019;t like the idea of spending so much on a battery, so I decided to pull off the same trick I used to get a cheap e-ink display: to free-ride along with the buyers of big quantities of electronics. Smartphones are getting thinner by the day, and so are their batteries. Replacements can be bought cheaply of the shelf. So, I went to a PDA replacement part shop, and looked for thin stuff. I ended up on an iPod nano V7 battery, but I couldn&#x2019;t find the footprint of the connection pads on there. So I looked at other iPod nano batteries, and eventually, I found the ideal battery. I&#x2019;m talking about the iPod nano V5 battery. It has a nice, big 240mAh of capacity, it&#x2019;s footprint (being a simple .1&#x201D; land pattern) is easily guessed with some pixel-measuring techniques, it&#x2019;s thin, and best of all: for only &#x20AC;12,95 it&#x2019;s shipped to my doorstep in a day! I found its pinout printed on the silkscreen layer on the back of the flat flex cable on <a href="http://www.online-electronic.net/images/l/are/A-839854.jpg">some picture</a> of some online store. I hope to be able to get 200 hours of drawing time out of it, but I&#x2019;m certain that I can at the very least get 20.<strong></strong></p>  <p><strong> </strong></p>  <p><strong>Finding tiny ultrasound microphones</strong><strong></strong></p>  <p><strong></strong>If the electronics is only going to be 1,8mm thin, what ultrasound microphone is going to fit in there? I scoured the Internet for parts. I began my search with looking for small electret microphones, but all of them were just too thick. I then looked into using piezo elements, but their frequency responses didn&#x2019;t seem good enough. At some point I discovered that MEMS microphones are really tiny, albeit a bit on the expensive side. Knowles seems to be the first to make an <a href="http://www.digikey.com/product-detail/en/SPH0641LU4H-1/423-1402-1-ND/5332430">ultrasonic MEMS microphone</a>. However, I found the power consumption of 5mA a bit prohibitive. Then I found out that and ultrasound transducer was basically what I was looking for. It is behaves sort of like a piezo element, in that it converts ultrasonic sound pressure into electrical signals. However, the only SMD ultrasonic transducer I could find was <a href="http://www.murata.com/en-global/about/newsroom/news/product/sensor/2014/0311">some unreleased part</a> of Murata. I eventually found <a href="http://www.hexamite.com/sensors.htm">this weird small part</a>, that I couldn&#x2019;t seem to buy anywhere. I later realised that this is the transducer that is in the small cans on the cheap ultrasound modules you can get from China. I decided to use the information I found on this part as an estimate for the dimensions of the ones in the cans, and order a few them to try to get them out with a rotary tool and use them in this project.<strong></strong></p>  <p><strong> </strong></p>  <p><strong>Choosing a microcontroller</strong></p>  <p><strong></strong>After googling for a &#x201C;USB enabled microcontroller&#x201D;, the first page that cam up was about MSP430 peripherals. Not only are the MSP430 microcontrollers ultra-low power microcontrollers, their USB peripherals also look quite good (although I&#x2019;m not an expert on that, I might have fallen for the marketing speak). Couple that with the fact that you can buy a programmer in the form of a Launchpad on the cheap, and I&#x2019;m sold. I went with the MSP430F5514IRGCR in case I need the 64k of program space. The parts with the lower specs are pin compatible, so I can always switch to them when I&#x2019;ve done some optimization, but for development, it is nice to have some breathing room.<strong></strong></p>  <p><strong> </strong></p>  <p><strong>USB input protection</strong></p>  <p><strong></strong>I wanted to try adding some input protection to the design. I haven&#x2019;t bothered with such stuff in the past, but it is necessary for serious projects, so I better start learning how to design it now.</p>    <p>I did a bit of reading, most notably <a href="http://www.digikey.com/Web%20Export/Supplier%20Content/Tyco_8004/PDF/te-appnote-usb2-usb3-protection.pdf?redirected=1">this document</a>. Apparently you want to constrain the voltages on both the power and data lines using Zener diodes, in case of overvoltage events. TVS-diodes are used to protect against ESD. Polyfuses (resettable fuses) are then needed to constrain the current to the above parts.</p>    <p>What happens, is that in an overvoltage event or an ESD shock, some high voltage is applied to the diodes. This voltage will be higher than their breakdown voltage, so they will start to conduct current, even though they&#x2019;re reverse biased. Since a low impedance path has now formed, all the current will flow to the diodes, rather than through the protected device. All this current would cause the diodes to blow up, so we place a fuse on the way to the diodes. That way, when the current starts flowing, the fuse trips, and the device is protected. However, it would be annoying to have to replace the fuse every time you accidentally zapped your device. Because of that, we use a resettable fuse. This is basically a resistor with a really high positive temperature coefficient. As soon as a large current starts flowing, it heats up, and because of that its resistance increases, which causes it to warm up even more. This cycle continues until almost no current flows through the part anymore.</p>    <p>Luckily for us, parts are sold that have almost all input protection built in. The only external part we need is a polyfuse for the power line. I used the STF202-22T1G for input protection, coupled with the miniSMDC260F-2 polyfuse:<strong></strong></p>  <p><strong> </strong></p><p><img style="display: block; margin: auto;" alt="Input protection" src="https://cdn.hackaday.io/images/504741439580677040.png"></p>Normally common-mode chokes would also be used to filter out conducted EMC noise, but I read that they are not really needed if you don&#x2019;t have another external power supply connected. I think this sounds logical, as noise could only enter the system via that exact USB port, and unless your circuit has some heavy badly filtered switching power supplies, it shouldn&#x2019;t generate that much noise itself, so there should be no way of actually generating enough noise to warrant that extra level of filtering.<strong></strong>  <p><strong> </strong></p>  <p><strong>Auto switching power supply</strong><strong></strong></p>  <p><strong></strong></p><p><img alt="Auto-switching power circuit" style="width: 194px; height: 240px; display: block; margin: auto;" src="https://cdn.hackaday.io/images/6881411439580711967.png" height="240" width="194"></p><p><strong></strong></p>  <p><strong></strong>This project needs to be able to be used without external power, so it has an internal battery. The tricky thing is: you can&#x2019;t draw current from the battery while it is charging, and you do wan the device to be usable while charging.</p>    <p>The reason you can&#x2019;t draw current from the battery while it&#x2019;s charging, is because it would trip up the battery charging circuitry. It monitors the current going to the battery, and when you start drawing current from it, it detects a sudden rise in charging current. This may make it shutdown, or supply less current to the battery, which would increase charging times.</p>    <p>To solve this, we need to switch between internal and external power intelligently. You want a circuit that is as efficient as possible, and disrupts the power while switching as little as possible. I looked for existing solution on the internet, and eventually found <a href="http://electronics.stackexchange.com/questions/96059/switch-between-battery-and-usb-power-no-microcontroller-circuit">something that strikes my fancy</a> on the electronics stackexchange. It is explained pretty well there, so I won&#x2019;t repeat it here.</p>    So those are most of the details on the electronics design, except for the capturing of the delays between the ultrasound signals. This is quite complicated, and I think it deserves its own post. I will post that next time.<strong></strong></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7153/log/22909-log-6-capturing-the-ultrasound-signal">Log 6: Capturing the ultrasound signal</a></h2>
                            <small class="authorship">4 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/22909#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22909"><p><strong></strong>Now for the tricky part: accurately measuring the delay between the incoming ultrasound signals on the microphones. First, I amplify the signal using some cascaded negative feedback opamp circuits.<strong></strong></p>  <p><strong> </strong></p>  <p><strong></strong></p><p><img style="display: block; margin: auto;" alt="Input stage for microphones" src="https://cdn.hackaday.io/images/4285761439662451848.png"></p>  <p><strong> </strong></p>  <p><strong></strong>There is actually only so much gain you can get of an op-amp at a given frequency. The gain-bandwidth product has to remain constant. To get around this, you can cascade them. That is what I did here, to increase the overall amplification.</p>    <p>I&#x2019;m only interested in the presence of the signal. Amplifying the negative peaks of the signal would be a duplicate of amplifying the positive peeks, just in the other direction. I don&#x2019;t bother with that, and just clip those. To accomplish this, I have ground as the reference level of my amplifier. Everything above that will become higher, everything below will become lower. The negative-going peaks will become more negative, but since the output of the amplifier can&#x2019;t go below the negative supply voltage, which is ground in our case, the output will just stay at ground. </p>    <p>The second amplifier is then hooked into a peak detector circuit.</p>    <p>When the amplifier detects the ultrasound signal, it steers its output pin to V+. This signal then charges a capacitor through a diode. When the signal dips down to GND again, the capacitor can&#x2019;t discharge because of the diode. I get to why this continuous high signal is important in a bit.</p>    <p>I&#x2019;ve connected the feedback pin of the second opamp beyond the diode, to mitigate the forward voltage of the diode. It will try to compensate for the voltage drop in the diode, ensuring that the signal is always amplified correctly.</p>    <p>I then pass the signal to a comparator. It has a lower threshold than the microcontroller, so it will detect the signal more easily. This reduces the need for amplification. </p>    <p>After all the delays have been measured, the capacitors can be discharged for the next cycle. I&#x2019;ve hooked each up to a pin of the microcontroller. I didn&#x2019;t want to connect them together using diodes, in case the leakage current would be so high that one capacitor could charge up the others. The microcontroller pins can stay in a high impedance state, until it is time to discharge the capacitors. Here comes a flaw in my design: I didn&#x2019;t think to put resistors between the capacitors and the pins. Because of this, if I&#x2019;m not careful when programming, I can short out power lines, if the output of the opamp happens to be at V+ when I pull the microcontroller pin low. To avoid this I have to only have the pins in either a high impedance state or switched to the internal pull-down resistors.<strong></strong></p>  <p><strong> </strong></p>  <p><strong>Measuring the delays</strong></p>  <p>I wanted to have a decent resolution on the position of the stylus. I drew some letters, as small as I could, and measured the height of them. They were about 2mm tall. I figured that 16 data points in the height would be enough, so that gives a resolution of 0,125mm. I read <a href="http://www.engineeringtoolbox.com/sound-speed-solids-d_713.html">here</a> that the speed of sound in glass is about 4000 m/s, but since I will be using tempered glass, which is harder, I can only expect the real speed to lie a bit above that, so I scaled it up to about 5000 m/s. To calculate the time we want to discern, we just have to divide these:<img src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20%20%5CDelta%20t%20%3D%20%5Cfrac%7B%5CDelta%20x%7D%7B%5CDelta%20v%7D%20%3D%20%5Cfrac%7B1%2C25%5Ccdot%2010%5E%7B-4%7D%7D%7B5%2C0%5Ccdot%2010%5E3%7D%20%3D%202%2C5%20%5Ccdot%2010%5E%7B-8%7D%5Ctext%7Bs%7D%20%3D%2025%20%5Ctext%7Bns%7D"></p>    <p>Wow. That&#x2019;s very little. And let&#x2019;s also calculate the maximum value we need to register, assuming the maximum distance is about 20cm:<img src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20%5CDelta%20t%20%3D%20%5Cfrac%7B%5CDelta%20x%7D%7B%5CDelta%20v%7D%20%3D%20%5Cfrac%7B2%2C0%5Ccdot%2010%5E%7B-1%7D%7D%7B5%2C0%5Ccdot%2010%5E3%7D%20%3D%204%2C0%20%5Ccdot%2010%5E%7B-5%7D%5Ctext%7Bs%7D%20%3D%2040%20%5Cmu%5Ctext%7Bs%7D"></p>The frequency that would be needed to capture such small intervals would then be:  <img src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20f%20%3D%20%5Cfrac%7B1%7D%7BT%7D%20%3D%20%5Cfrac%7B1%7D%7B25%5Ccdot%2010%5E%7B-9%7D%7D%20%3D%2040%5Ctext%7BMHz%7D">    <p>The number of bits needed to store the range of values then is:</p>  <img src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20N%20%3D%20%5Ctext%7Bceil%7D(%5Clog_2(%5Cfrac%7B20%7D%7B0%2C0125%7D))%20%3D%2011%20%5Ctext%7B%20bits%7D">    <p>At first I wanted to use some counter logic IC&#x2019;s, attached to a fixed clock. The first pulse would enable them, and the second disable them. The amount of pulses could then be read in from their outputs., probably using shift registers. Of course, the chips had to be special high-frequency logic chips, such as the <a href="http://nl.mouser.com/ProductDetail/Fairchild-Semiconductor/74VHC4040MTCX/?qs=sGAEpiMZZMutXGli8Ay4kMNgEp6F%2fk5etQwxEdFTFlo%3d">Fairchild 74VHC4040MTCX</a>. This could&#x2019;ve worked, but I&#x2019;m not really comfortable with such frequencies yet.</p>    <p>So I set out to look for some kind of stopwatch IC, that would start counting on one pulse, and stop on the next, and have some nice digital read-out. I eventually found a datasheet for the <a href="http://datasheet.octopart.com/TPL7200PWR-Texas-Instruments-datasheet-12091239.pdf">Texas instruments TPL7200</a>. Which does exactly what I want. It has even higher resolution than I need. However, this chip doesn&#x2019;t exist. Instead TI has marketed it as the <a href="http://www.ti.com/lit/ds/symlink/tdc7200.pdf">TDC7200</a>. There is only one disadvantage: the price. The power consumption may also seem high at 1,35mA, but this is only in measurement mode, which will only happen periodically in short bursts.</p>    <p>I&#x2019;ve three microphones. The signal will always arrive at one of them first, and then another and then another. I only need to measure two delays, but they are always between different microphones. I only need two of these expensive chips each measurement cycle, but to capture the delays in all cases, I need three. Or do I?</p>    <p>I&#x2019;ve devised a way to route the signal two only two TDC7200s, depending on which microphone first picks up a signal.</p><p><img alt="Microphone input switching" style="display: block; margin: auto;" src="https://cdn.hackaday.io/images/8365551439662837413.png"></p><p>First, one microphone detects a signal. This is coupled to the start pulse of both pins. It doesn&#x2019;t matter on which one the signal arrives, as they have all been connected using a diode or-gate.</p>    <p>Now it is determined which signal goes to which IC. For this I use a 4053D multiplexer IC. This chip basically contains 3 digital relays. It contains 3 modules in which you can select which of two pins you connect to a pin. I only use two of them.</p>    <p>I have one input of both modules connected to the middle microphone, and the other pins connected to the top and bottom microphone, for each module respectively. The signals determining the routing have also been connected to the top and bottom microphone. The standard position of the modules is on the top and bottom microphone.</p>    <p>This way, when a signal comes in on the middle microphone, it sends the start signal, but the other microphone signals are routed to the stop signals. When one of the outer microphones is the first to receive the signal, it will send the start signal, and route the middle pin to its end signal.</p>    <p>It is for this switching that the peak detection circuits were necessary, so that the routes wouldn&#x2019;t be temporary.</p>    <p>I&#x2019;ve hooked some interrupt pins of the microcontroller up to the microphone signal so I know which one received the signal the first, and how the delays were measured.</p>    <p>When the signals of the outer microphones hit first and do their switcheroo, they can still pass through, but they will hit the TDC7200 when it isn&#x2019;t ready to except the stop signal yet. However, if they aren&#x2019;t the first the signal should register.</p>    So those were all the details on the electronics design. Next time I&#x2019;ll write about the PCB layout.</div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7153/log/23155-introductory-video-and-system-design-document">Introductory video and system design document</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/23155#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23155"><p>Before continuing the logs, I thought it might be a good idea to <em>actually fulfill the requirements of the competition</em>.</p><p><strong>Introductory video</strong><br></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/ZoOaSFRIdns" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p><strong>Script</strong><br></p><p>Hello world!</p>    <p>My name is Arthur Admiraal and I am a 16-year-old electronics hobbyist from the Netherlands.</p>    <p>In this video I&#x2019;m going to tell you a bit about my entry to the Hackaday prize: the Squidpad.</p>    <p>Ever tried to draw something on a computer? When I did, the user experience was cumbersome at best. On most devices, you can&#x2019;t lay down your hand on the device as you do with paper, the accuracy is terrible and booting up just takes far too long.</p>    <p>For that reason, I find myself falling back to paper whenever I need to make a quick sketch to organize my thoughts, do some quick math or draw a schematic.</p>    <p>Paper is messy though. Serious effort is needed to organize it, and it isn&#x2019;t natively searchable. Also, it doesn&#x2019;t have the same advanced functions that digital media has. Ever tried to resize something on paper? Not easy, I can tell you that.</p>    <p>There are of course devices that make drawing on a computer easier, but they are either really expensive, lack a screen, are not mobile, or don&#x2019;t fully fulfill my requirements.</p>    <p>In my opinion, a device is needed that is specifically designed to replace sticky notes and scraps of paper scattered around the average household. It should have the same ease-of-use as paper, but add the advanced functionality of digital media to it, such as searchability and semi-automatic drawing tools.</p>    <p>I&#x2019;ve spent the last few weeks designing such a device and I have dubbed it the Squidpad. It will feature a 6&#x201D; e-ink display, a CNC-routed 5.2mm thin aluminium enclosure, accurate localisation of the stylus using ultrasound signal trilateration, a USB compatible interface to download your drawings saved on the internal micro-SD card to your computer and between 20 and 200 hours of battery life depending on how good I am at low power design. I have ideas for other, more advanced features, but I want to get these basics working first.</p>    <p>As of creating this video, the electronics design is done, and I&#x2019;ve been documenting it while waiting for the parts to come in. Because of this, I haven&#x2019;t been able to build a prototype and test anything yet.</p>    <p>Apart from documentation, I&#x2019;m currently working on designing the enclosure.</p>    <p>I have made all files available on GitHub under a CC-BY-NC-SA license.</p>    <p>Well, I hoped you liked that quick introduction to the Squidpad, feel free to check out the logs in which I describe the project in more detail, as there is only so much that you can explain in a two-minute video.</p><p><strong>System design document</strong></p><p>Here is a high-level block diagram of the device:</p><p><img style="display: block; margin: auto;" alt="Squidpad block diagram" src="https://cdn.hackaday.io/images/5882981439764738836.png"></p><p>I&apos;ve described how the ultrasound delay measurement works in log 6. I still have to explain the basic operation of the other electronics. So, without further ado, here is a high-level explanation of the typical operation.</p><p>The stylus sends out an ultrasound pulse. As I haven&apos;t designed any part of the stylus yet, I haven&apos;t included it in this diagram. During testing I will just be using an ultrasound transducer hooked up to a signal generator. The ultrasound pulse reaches the microphones. The delays between the pulses hitting the microphones are measured via the procedure described in log 6. The micrcontroller now reads out these these delays, and calculates the position of the stylus with them, as described in log 2. It then calculates the pixel which need to be marked to form a line between a current position and the last position. These, and only these pixels are marked on the e-ink display. By forgoing a full update, the power consumption is lowered and any problems with the low refresh rate are mitigated. These pixels are also marked on a bitmap file stored on the micro-SD card   which also serves as a frame buffer, in case anything needs to be erased. The microcontrollers RAM would be too small for such a full frame buffer. The micro-SD card is connected to a separate SPI-bus so that a SPI signal to other chips won&apos;t <a href="http://forum.arduino.cc/index.php?topic=149504.0">prevent it from entering sleep mode</a>. I wasn&apos;t sure if this would be a problem, but I prefer not to take chances.</p><p>A new line can also be drawn in a SVG-file on the micro-SD card. A few past coordinates could be stored in RAM so that the curves could be optimized somewhat on the fly.</p><p>Between pulses, all devices enter sleep mode for reducing power consumption. The input signal from the microphones interrupts both the microcontroller and timer ICs, so that the pulse can be registered and the microcontroller can activate other important devices.<br></p><p>When connected to the computer via USB, the device switches to USB power, and initiates charging. This is described in log 5. The microcontroller can then appear as a mass storage device, and the files can be copied to the hard disk of the user&apos;s computer. The device has some input protection on the USB as described in log 5.</p><p>Whether the device is switched to its internal battery or external USB power, the 3.3V switching converter will generate a voltage for most ICs to use, except for the switching converter powering the e-ink display, which also uses the raw input voltage for increased efficiency. This one is only activated when the e-ink screen needs updating however.  <br></p><p>As mentioned before, currently all electronics is designed, but not yet built en tested.</p><p>The regularly scheduled logs will resume tomorrow.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7153/log/23472-log-7-pcb-design">Log 7: PCB Design</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/7153/log/23472#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23472"><p>I thought it would be fun to tell a bit about my PCB design process.</p><p>I start out by loading in all the parts in the PCB editor. Often, my schematic is not complete at this stage, but I like to experiment with parts placement in advance.</p><p><img src="https://cdn.hackaday.io/images/2188321439833250637.png"></p><p>I then group parts by function. For example, the input amplifier is one small group.</p><p><img style="width: 266px; height: 238px; float: left; margin: 0px 10px 10px 0px;" alt="" src="https://cdn.hackaday.io/images/1032101439833364258.png" height="238" width="266"><img style="width: 311px; height: 236px;" src="https://cdn.hackaday.io/images/3807211439833420243.png" height="236" width="311"></p><p>After that, I try to place the parts in such a way that the rats-nest wires are as short as possible.</p><p>The next step is the actual routing. I often change the parts placement during routing, because I see a better way.</p><p><img style="width: 404px; height: 227px; float: left; margin: 0px 10px 10px 0px;" alt="" src="https://cdn.hackaday.io/images/6638501439833537514.png" height="227" width="404"></p><p><img style="width: 226px; height: 222px;" src="https://cdn.hackaday.io/images/5376261439833586613.png" height="222" width="226"></p><p>While routing, I still keep the power connections in mind, but I don&apos;t worry about it too much, as I often add a ground plane. I later add jumpers for any signal I couldn&apos;t route without them.</p><p><img src="https://cdn.hackaday.io/images/8099631439833926661.png"></p><p>As a last step, I beatify the silkscreen, so that it is actually readable.</p><p><img style="width: 243px; height: 169px; float: left; margin: 0px 10px 10px 0px;" alt="" src="https://cdn.hackaday.io/images/7252371439834075923.png" height="169" width="243"><img style="width: 330px; height: 170px;" src="https://cdn.hackaday.io/images/1879721439834086533.png" height="170" width="330"></p><p>I delete all values of the components, as I can easily look them up in the schematic, or I could create a list for them. I set the text size to .8128mm (0.032&quot;), which I think is the smallest silkscreen size that is still relatively readable when produced by cheap PCB fabs. I also switch the font to vector, as it is fixed and the fab won&apos;t change it from my design. I also sort of like its look. I keep the ratio at 8%.</p><p><strong>Challenging parts</strong></p><p>Prior to this project, I had actually never lain out a switching converter, so I stuck to the application notes as close as possible, and tried to make everything as compact as possible. I tried to keep the analog section as far away of the switching converters as possible, to minimize noise coupled into them from the relatively high currents in the converters. All the modules were joined to each other with big buses of wires.</p><p><img src="https://cdn.hackaday.io/images/2175851439834896586.png"></p><p>I actually changed the signal net connections to the microcontroller to hugely simplify the routing.</p><p><strong>Fitting everything</strong><strong> together</strong></p><p>Because of the need to pack a lot of parts as close together as possible, it was sometimes challenging to route. To solve this, I briefly used thinner traces in some place. This technique is know as necking. Also, I rotated some parts 45 degrees to further assist in routing.</p><p><img src="https://cdn.hackaday.io/images/6038691439837733087.png"><span class="redactor-invisible-space"></span><strong>Signal integrity</strong></p><p>I haven&apos;t done much in the way of signal integrity in the past. This is the first project that I have actually consciously thought about it. I can&apos;t say that I&apos;m an expert, but I tried some basic things to achieve better signal integrity.</p><p>Apparently it is important to minimize the loop area of your traces. You see, the amount of energy picked up by a coil is proportional to the loop area. Switching power converters with their coils will generate quite a magnetic field. So, by minimizing the loop area, you minimize the noise picked up on the line.</p><p>Now, the loop area is the area between your signal trace and it&apos;s return path to ground. I&apos;ve used some slits in my ground plane to hopefully force the current to go a certain way, in order to minimize the loop area.</p><p><img src="https://cdn.hackaday.io/images/3140701439835966070.png"></p><p>Looks like there might be a lot of noise on that power bus, guess I should have added some via&apos;s.</p><p><strong>Other edits</strong><span class="redactor-invisible-space"></span></p><p><span class="redactor-invisible-space">After getting all the circuitry perfectly laid out, I add my logo. I actually spend three full evenings getting my logo on the PCB. At first, I tried to use the <a href="https://github.com/cmonr/Eagle-ULPs/blob/master/svg2poly.ulp">svg2poly ulp</a>, but because it doesn&apos;t support import of curved svg files, I had to subdivide the curves a bunch of times to make them look decent. Since eagle doesn&apos;t support polygons with a hole, I had to carefully divide my logo in multiple pieces. After two evenings of carefully assembling them, I sent my file to OSHpark, only to encounter a timeout. It turned out the svg-files had become too large. So I had to import my file as a bitmap and manually trace every detail of it. Not fun, especially since after the work of CERN on the module editor, a svg file can just be imported with a single click in KiCad. Why eagle, why!?</span></p><p><span class="redactor-invisible-space">   </span></p><p><img src="https://cdn.hackaday.io/images/9291651439836618862.png"></p><p>Just before sending out my PCBs to be manufactured, I realised that I had the solder pads for the battery on the bottom of the PCB, while I had the components on the top. This meant that the PCB wouldn&apos;t sit flush in the enclosure, which would cost me an extra 0.2mm. Because of this, I decided to quickly change it to the other side.</p><p><img style="float: left; width: 292px; height: 299px; margin: 0px 10px 10px 0px;" alt="" src="https://cdn.hackaday.io/images/2861271439837192485.png" height="299" width="292"></p><p><img style="width: 325px; height: 298px;" src="https://cdn.hackaday.io/images/4385411439837203643.png" height="298" width="325"></p>All the stuff on the right are values that I removed later. That was a lot of unwanted text.<p>As a last touch, I rounded the corners of the PCB so that I can handle it more easily.</p><p><img src="https://cdn.hackaday.io/images/8164391439837283050.png">I should mention that the PCB could be shrunk a lot, but since I wanted to minimize the risk of noise, I spaced out all the parts as much as possible. The big cutout in the PCB is needed to make room for the flat flex cable of the e-ink display. Oh, and I shared the PCB on OSHpark now so that it can be easily ordered. Click <a href="https://oshpark.com/shared_projects/YPgzkuQtâ€‹">here</a> to take a look at it. Alternatively, you can always look at PDF printouts <a href="https://github.com/SeagullDesign/Squidpad/tree/master/Project/Easily%20viewable">on GitHub</a>.</p><p>As of this log, the documentation is up to date with my development. Because of this, you won&apos;t see any logs for a while. This means that I will actually be able to spend some time refining the design of the enclosure, which I haven&apos;t had much time for because of the large amounts of time I spent documenting the project. But, I&apos;ll be sure to grab the keyboard whenever there is some significant new development, such as when I finally build my prototype.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'gE0l9LYq-WuLRPZH0gYyenIuXNWg_HH3uLY4';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>