<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; A Versatile Labtool &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6490%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6490-a-versatile-labtool">A Versatile Labtool</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A cost effective data acquisition tool with reasonable accuracy. Equipped with a Python Library and several Apps.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/35701-jithin" title="Visit Profile">Jithin</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6490#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6490-a-versatile-labtool">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6490/logs/sort/newest">Newest</option>
                    <option value="/project/6490/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6490/log/20143-add-on-board-24-bit-adc-18-bit-dac">Add-on board: 24-bit ADC, 18-bit DAC</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6490/log/20143#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20143"><p><img src="https://cdn.hackaday.io/images/212581435529350058.jpg"></p><p>This was a breakout board built for trying out the ADS1248 24-bit ADC as well as the AD5680 18-bit DAC.  The final version should include opto-isolation and a standard 20-pin header compatible directly with the expansion slot on the base board among other things.</p><p>+2.5, -2.5 volt regulators ( TPS76325, TPS72325 ) are present in order to provide reference voltages for the ADC.</p><p>In order to get data from the ADC using a simple python script, the 
SPI as well as the power supply connections must be made to the base 
board. Following which, carefully perusing the datasheet will let us 
construct Python functions such as</p><pre class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writeRegister</span><span class="hljs-params">(self,regname,bytes)</span>:</span>
	I.SPI.start(csn) <span class="hljs-comment">#lowers Chip select</span>
	reply=[]
	reply.append(I.SPI.send8(<span class="hljs-number">0x40</span>|regname))
	<span class="hljs-keyword">if</span> len(bytes):
		reply.append(I.SPI.send8(len(bytes)-<span class="hljs-number">1</span>))
		<span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> bytes:
			reply.append(I.SPI.send8(a))
	I.SPI.stop(csn) <span class="hljs-comment">#raise chip select</span>
	<span class="hljs-keyword">return</span> reply
</pre><p>This board has not been fully tested , and I expect the built in excitation current sources will come in very handy for measuring voltage drops across resistive loads such as RTDs and load cells.</p><p>A 22-BIT ADC board with three MCP3550 on board.  Two of these have level shifted inputs, while the third is a direct in.<br>A ref196 has been placed as the voltage reference IC.<br><br></p><p><img src="https://cdn.hackaday.io/images/4109461439729058939.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/20189-nrf24l01-based-wireless-nodes">NRF24L01+ based wireless nodes</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6490/log/20189#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20189"><p>The base unit has a dedicated wireless transceiver, and the slave node PCBs have arrived.</p><p><img src="https://cdn.hackaday.io/images/3767131435585431406.png"></p><p>The layout is minimal</p><p><img src="https://cdn.hackaday.io/images/7811221435526590150.png"></p><p>Basic functions have been broken out into berg strips. Digital functions include SPI/I2C/EUSART ports. Several inputs can also serve as analog inputs connected to a 10-bit ADC. There is also an 8MHz clock generator, and an 8-bit DAC. For now I&apos;ve marked the default functions of the pins on the PCB wherever applicable.<br>Should&apos;ve thought of adding a boost regulator for battery powered applications. </p><p> I&apos;ll make the next prototype using the PIC24E since it has separate I2C and SPI ports in addition to a wide array of other peripherals.<br></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/7VAGckFzVlc" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>In addition to the basic functions, the PIC16F has several interesting peripherals such as angular timers(<a href="http://ww1.microchip.com/downloads/en/DeviceDoc/30010090A.pdf">http://ww1.microchip.com/downloads/en/DeviceDoc/30010090A.pdf</a>), hardware PID etc.  These may soon come in handy for implementing science demos/experiments.</p><p><img style="width: 267px; height: 213px;" src="https://cdn.hackaday.io/images/4360021435585834775.jpg" height="213" width="267"></p><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/21563-standalone-mode-using-a-128x64-oled">Standalone Mode using a 128x64 OLED</a></h2>
                            <small class="authorship">24 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/21563#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21563"><p>In keeping with the modular design that enables costs to be kept to a minimum without compromising on capabilities, a standalone mode of operation is being added to the firmware. </p><p>This will display a few basic measurements such as capacitances, voltages, frequencies etc on an ssd1306(128x64) OLED if it is detected on the I2C port when the device powers up.  The device can be run off of batteries or other power sources.</p><p>Once it receives data from the PC, it will automatically exit the standalone mode and a remote/hard reset will be required to restore it.</p><p><img src="https://cdn.hackaday.io/images/2869691437905636556.jpg"></p><p>The Picture Above shows the present state of development of the standalone mode.<br>Polynomial based calibrations are not applied , and instead nominal values for references are used.<br><br>CH1,CH2 are floating, and are displaying a few fluctuating readings.  The capacitance of 1uF capacitor is calculated using constant voltage charging mode, and the potential developed across it at the end of the charge cycle is also shown.  If a diode is plugged in instead of a capacitor, this voltage approximately represents the barrier potential.</p><p>The frequency of the clock fed to the AD9833 DDS is also measured.  However, since the clock source is correlated to the 12MHz TCXO that is also used as a reference for the frequency counter by means of a PLL, the readout may have an error of up to 2.5ppm as stated in the datasheet of the FOX924b 12MHz TCXO. <br><br>The display projecting out awkwardly isn&apos;t a good solution, so a centrally placed four pin I2C header has been added to the next layout sent for fabrication.<br><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/21564-controlling-daisy-chained-addressable-leds">Controlling Daisy Chained Addressable LEDs</a></h2>
                            <small class="authorship">24 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/21564#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21564"><p>One of the pins from the expansion slot carries signals to drive daisy chained WS2812B RGB LEDs (Certain Neopixels from Adafruit use this model ).  Each RGB LED supports 24-bit color(16-million shades) and they can be addressed using a simple python command that accepts a 2D array containing color info for each LED.</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/E7Q4B1jeKH0" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>A demo app was written using the ColorPicker button that&apos;s part of the PyQtGraph toolkit that&apos;s used extensively with the vLabtool. The button launches a QColorPicker Widget for each LED in the chain, and the colors are set using</p><pre class="hljs python"><span class="hljs-id">#Set</span> <span class="hljs-tag">colors</span> <span class="hljs-tag">red</span>, <span class="hljs-tag">green</span>, <span class="hljs-tag">and</span> <span class="hljs-tag">cyan</span> <span class="hljs-tag">on</span> <span class="hljs-tag">LEDs</span> 1,2,3
<span class="hljs-tag">I</span><span class="hljs-class">.WS2812B</span>( <span class="hljs-attr_selector">[ [255,0,0]</span>,<span class="hljs-attr_selector">[0,255,0]</span>,<span class="hljs-attr_selector">[0,255,255]</span> ] ) </pre><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/21584-4-pole-35mm-socket-for-sensors-that-speak-i2c">4-Pole 3.5mm socket for sensors that speak I2C</a></h2>
                            <small class="authorship">23 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/21584#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21584"><p><img style="width: 768px; height: 426px;" src="https://cdn.hackaday.io/images/3624881437945076090.jpg" height="426" width="768"></p><p>Having to Plug in numerous wires in a particular order each time is an unnecessary hassle as well as a risk. In case of sensors that speak I2C , four connections (Vcc,GND,SCL,SDA) need to be made.   The Clock and Data lines can e shared over multiple devices.</p><p>Using a 4-pole socket has numerous advantages</p><ul><li>It eliminates the need to make multiple connections for one device, and also rules out the possibility of errors and mishaps.</li><li>Since these cables are already a mass market product, good quality ones can be procured at affordable rates.</li><li>4-pole splitters can be designed in order to Plug and play multiple sensors [However, The wireless nodes may also be considered here if one can live with a 3mS round trip delay].</li></ul><p><img src="https://cdn.hackaday.io/images/3478491437945469383.jpg"></p><p style="margin-left: 20px;">At this point, I2C lines are available on the 20-pin expansion slot, a 4-pin berg pin on the center of the top panel, and over the 4-pole 3.5mm socket<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/21958-artists-impression-of-finished-product">Artist&#39;s impression of finished product</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/21958#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21958"><p>So far I&apos;ve designed a 3D enclosure using SolidWorks. The bottom will be 3D printed for now, and any errors can be rectified before going for an injection mould. The top plate will be laser cut and engraved in translucent acrylic, and added .<br></p><p><img style="width: 473px; height: 388px;" src="https://cdn.hackaday.io/images/4463001438426181629.png" height="388" width="473"></p><p style="margin-left: 200px;">Figure:3D rendering of the PCB designed with KiCAD.</p><br><p style="margin-left: 20px;">A <strong>SolidWorks render will have to do as an &apos;artist&apos;s&apos; impression</strong><br><br></p><p>Here is an exploded view of the designed 
case. It would&apos;ve been great to be able to use the 3D generated objects 
from KiCAD, but it seemed impossible to use them in a SolidWORKS 
assembly.  Instead, I took a screenshot of the PCB, and overlaid it on a
 65x95 part with similar thickness.  The overlay allows me to roughly 
determine the position of objects without referring to KiCAD, or 
measuring manually. AUX jack shown was a quick sketch-extrude-cut job.<br><br></p><p><img src="https://cdn.hackaday.io/images/4721951439761631498.png"></p><p>I really wish the kicad 3D output had played nice with SolidWorks.  Now you&apos;ll have to picture the fully populated circuit board yourself.  And you&apos;ve already seen the 3D printed box on the main page anyway.</p><p><img src="https://cdn.hackaday.io/images/8740781439761658296.png"></p><p>Here&apos;s the Splash screen for the App framework.  The PNG is transparent.<br>Was created with GIMP.</p><p><img style="width: 648px; height: 341px;" src="https://cdn.hackaday.io/images/6237301439761830185.png" height="341" width="648"><br><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/21961-building-blocks-28-bit-sinetriangle-wave-generator">Building Blocks: 28-bit sine/triangle wave generator</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/21961#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21961"><p style="margin-left: 20px;">A waveform generator is a must for studying a variety of electronic phenomena such as resonant frequencies, filter characteristics, etc. ,  and the vLabtool includes a 28-bit DDS( 0.03 Hz resolution at 16MHz clock.) with manual amplitude control from +/-20mV to +/-4V. <br></p><p style="margin-left: 20px;"> The DDS(Direct Digital Synthesis) Approach to waveform generation involves a pre-programmed lookup table containing the amplitudes of the waveform to be generated.  The processor then loops continuously through this table, and feeds each amplitude to a DAC, resulting in an analog waveform being generated at the output.</p><p><img style="width: 324px; height: 276px;" src="https://cdn.hackaday.io/images/5426111438427571254.png" height="276" width="324"></p><p>Initially, I ordered a couple these breakout boards for the AD9833 DDS. Once the communication protocols and usability were confirmed, it was added to the base board. The output of this breakout is 0.6v p2p (DC blocked with a capacitor).</p><p><strong>Additional circuitry required to make a usable output.</strong></p><ul><li>The amplitude of the AD9833 is fixed at 0V - 0.6V for the sine and triangular waves.  This felt rather restrictive . Adding a level shifter, and manual gain control results in a bipolar output which can be adjusted from +/-10mV to +/-4V.  </li></ul><p><strong>Frequency control</strong><br></p><ul><li>Two 28-bit frequency registers are present on this IC. This is aimed at applications like Frequency Shift Keying. Once both frequencies have been loaded, one can quickly toggle between the two. The maximum clock frequency is 25MHz , and this allows generating waveforms from 0MHz up to 12.5MHz(If you&apos;re okay with 2 points per waveform). On the vLabtool, the DDS is driven with a 16MHz clock generated by the PIC24E . <strong>16MHz,28-bit</strong> <strong>equals 0.03Hz</strong> <strong>resolution</strong>. Neat looking frequencies can be seen up to 2MHz. Beyond this, the scarcity of points will force using another analog filter.</li><li>A 12-bit phase register is also present, and this can be used to set a fixed phase difference between two AD9833 ICs running off the same clock, and outputting the same frequency( or a harmonic ).  The phase registers have been used on the <a href="http://hackaday.com/2015/06/05/hackaday-prize-entry-python-powered-scientific-instrumentation/">Python Powered Scientific Instrumentation Tool</a> since it has two AD9833s on the base board itself.  Phase control won&apos;t be useful on the vLabtool unless an Add-on board with another AD9833 is used. Keeping this in mind, the 16MHz clock of the AD9833 is also routed to the 20-pin expansion slot.</li></ul><p style="margin-left: 20px;"><img src="https://cdn.hackaday.io/images/2430121438429745291.png"></p><p>This is the portion of the schematic that deals with the AD9833.  The gain control slider is a 50K dial potentiometer.</p><p>Choosing an appropriate DC blocking capacitor is essential for achieving constant amplitude throughout the frequency range.  I actually experienced this when I accidentally used 0.1uF instead of the 10uF.  Since the vLabtool also has an oscilloscope, it was used to record the output for frequencies spanning the intended range. The output curves were fitted using Scipy, and the extracted amplitudes were plotted against the corresponding frequency.</p><p><img style="width: 532px; height: 408px;" src="https://cdn.hackaday.io/images/7676941438430175290.png" height="408" width="532"></p><p style="margin-left: 100px;">Figure: <strong>ERRONEOUS frequency response curve of the DDS</strong> resulting from a misplaced capacitor! . Ignore the blue trace, it&apos;s not relevant here.</p><p><strong>Replacing the 0.1u with the right value(10uF) gave an extremely flat amplitude response at 4V starting from 5Hz.</strong></p><p style="margin-left: 20px;">The SPI input of the AD9833 is very picky when it comes to modes. Both CKE, and CKP must be set to 1.  Accidentally pushing values with wrong mode settings causes the IC to  not respond until a hard reset.  All this has been taken care of in the firmware. In case you&apos;re not familiar with CKE, CKP terminology, here&apos;s a map (taken from <a href="http://www.rosseeld.be/DRO/PIC/SPI_Timing.htm">here</a>).</p><p><img style="width: 757px; height: 211px;" src="https://cdn.hackaday.io/images/7587101438429152855.png" height="211" width="757"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/21996-building-blocks-15khz-standalone-sine-wave-generator">Building Blocks: 15KHz standalone sine wave generator</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/21996#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21996"><p>In an effort to keep costs low, the vLabtool only has one high resolution DDS sine wave generator incorporated onto the base board. However, certain electronics experiments(such as Amplitude modulation) require two waveforms.</p><p>Therefore, a fixed frequency quadrature oscillator was added at the cost of an op-amp and a few passive components. The output waveform is bipolar, with a fixed amplitude.</p><p><img src="https://cdn.hackaday.io/images/5320741438458334386.png"></p><p>This fairly common circuit generates a sine wave and a cosine at the same frequency. D4,D5 are 4v7 zener diodes.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/22089-calibrating-the-uc-adc-for-maximum-accuracy">Calibrating the uC ADC for maximum accuracy</a></h2>
                            <small class="authorship">15 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/22089#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22089"><p><strong>UPDATE(11-Aug)</strong><br></p><p>First, the results of the calibration!</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/oPVh_IaMU_g" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>Random values are input to CH1, and CH3 of the vLabtool, and are simultaneously monitored via a KEITHLEY2100 DMM in order to highlight the accuracy, and noise levels of the different input channels. The DMM seems to add noise to the voltage source, and this is highlighted towards end of the video, wherein one can see that disconnecting the DMM improves the signal quality.</p><p><img style="width: 550px; height: 218px;" src="https://cdn.hackaday.io/images/7185311439286800801.png" height="218" width="550"></p><p>Sample test results for CH3.  a 0-3.3V sweep was generated with a 12-bit DAC, and the errors were plotted<br></p>------------------------------------------------------------------------------------------------------------------------------------
<p>When it comes to digitizing analog levels, a number of factors prevent the output codes of the ADC from corresponding perfectly with the input voltage. Even if one somehow reduces noise levels to far below the resolution of the ADC, non-linearity issues as shown in the following image will persist. And these are inherent to ADCs.</p><p><img style="width: 585px; height: 410px;" src="https://cdn.hackaday.io/images/481471438630829386.png" height="410" width="585"></p><p>For obtaining the data shown in the above picture, things were kept simple, and no input buffers/gain stages were used. </p><p>The output of a DAC was fed directly to an analog input, and the same voltage was also monitored using a calibrated 24-bit voltmeter.</p><p>Therefore, if the reference voltage of the  ADC (3.3v) does not change, this pattern should be easily repeatable. In order to ensure that, the vLabtool uses a 3.3V voltage reference (REF196) which will stay consistent to within a few ppm over a wide temperature range. The Vref does however, have an initial offset up to 10mV which can be trusted to not drift more than the specified accuracy.</p><p><strong>How does one calibrate the uC ADC?</strong></p><p><strong>A)</strong> The easiest way would be to record the deviations for each input code, and save them in a lookup table. Since the resolution of the ADC is only 12-bits, you&apos;ll have a lookup table with 4096 entries. If each entry is a byte, you&apos;ll need 4kB of storage.</p><p>*  In the picture shown , the resolution appears to be much better than 12-bits at 0-3.3V (theoretical resolution = 3300./4096 mV) , and this is the result of oversampling .</p><p><strong>B) </strong>Another approach would be to simply fit the curve with a finite polynomial, and use the equation for calibration.  However, the arbitrary non-linear staircase pattern has proven to be very hard to approximate to an equation.</p><p>Here&apos;s a polynomial fit of the above. A second order polynomial was generated using numpy.polyfit and numpy.poly1d.<br></p><p><img style="width: 594px; height: 416px;" src="https://cdn.hackaday.io/images/5071031438631710848.png" height="416" width="594"></p><p>What one could do , is store the fitting polynomial, as well as the deviations from the fitting polynomial.</p><p>And a two step calibration can then be applied to obtain a pretty accurate 12-bit ADC performance from your uC.</p><p><br><strong></strong></p><p><strong>Will one have to store calibration tables for each analog input (most uC have multiple analog inputs)?</strong><br><strong></strong></p><p><strong><strong></strong></strong>Not likely. Each input is usually routed to the same analog to digital convertor internally via a multiplexer (refer to the datasheet). </p><p>So in summary, only one table will have to be stored per ADC, and polynomial fitting functions will be required for each analog input in case you&apos;re using opamp buffers or other components which introduce predictable slopes and offsets.</p><p><br><strong></strong></p><p><strong>What does this mean for the vLabtool?</strong></p><p>The vLabtool has several analog inputs with various voltage ranges (+/-16V, +/-3.3V , 0-3V 0-9V ... ) , but after associated analog circuitry ( hopefully all will have only smooth variations from the actual ) , the signals end up at the same ADC. For two-channel, and four-channel capture routines, a total of four sample and hold capacitors are present, and these take a snapshot of the voltage which are then digitized one by one by the same ADC.</p><p>Therefore, the approach I have decided to follow, is to store the deviations for the ADC in a 4KB space in the flash memory, as well as polynomial coefficients for each of the various analog inputs<strong>.</strong></p><p>Preliminary results -</p><p><img src="https://cdn.hackaday.io/images/5083031438633571703.png"></p><p><strong></strong></p><p>The Red trace represents the deviation of the ADC from the actual input voltage over a 0-3.3V range [ the non-linearities at the ends of the spectrum are not shown]</p><p><strong>After the calibration table is applied, one ends up with the yellow trace whose maximum deviation from the actual value stays within 250 micro volts throughout the usable range of the ADC!</strong><br><strong></strong></p><p>If the user requires better resolution and accuracy , they can always choose an add-on board that best fits their needs. The one used as a DMM for the above results was an AD7718 which was calibrated against a KEITHLEY 2100 DMM. The add-on PCB used highly-linear op-amps as buffers, and a REF196 voltage reference. The add-on board has been documented <a target="_blank" href="https://hackaday.io/project/5971-python-powered-scientific-instrumentation-tool/log/19516-add-ons-high-resolution-adcs">here</a>, and the automated calibration process is <a target="_blank" href="https://hackaday.io/project/5971-python-powered-scientific-instrumentation-tool/log/19637-calibrating-the-calibrator">here</a></p><p><br><a target="_blank" href="https://hackaday.io/project/5971-python-powered-scientific-instrumentation-tool/log/19637-calibrating-the-calibrator"></a></p><p><strong>Calibrating all inputs together, and storing values to flash...<br><br></strong></p><p><img src="https://cdn.hackaday.io/images/9057081438797271864.png"></p><p>The white trace is data measured from an unbuffered, unaltered analog input , and represents the deviation from the actual value. The sawtooth nature of this curve is the non-linearity of the ADC itself, and will be subtracted from all subsequent readings from the other channels. After this correction, the slopes and offsets of each channel will be stored to flash along with the INL lookup table.</p><p>In the figure, the continuous lines represent errors of the uncalibrated inputs, and the dotted lines are generated by applying the two step calibration. Unipolar(0-3.3V) inputs are accurate to less than 200uV, and bipolar inputs (+/-16.5V) are accurate to less than 1 mV after calibration.</p><p>if you&apos;re wondering why the steps are much wider for CH2, and CH1 (green and orange traces ), it&apos;s because the steps are characteristic of the ADC, and these inputs can accept voltages between -16.5V and 16.5V . These voltages are then scaled and shifted into a 0-3.3V range, following which the actual digitization takes place. So a 0-3.3V range for CH1 / CH2 is actually something like 1.65V to 1.97V for a direct analog input like AN3(the white trace) . The step widths will match if you scale by a factor of ten.</p><p><strong>UPDATE</strong>(11-aug)<br>Calibrated three units for the Best Product category yesterday, and managed to test the performance against a KEITHLEY2100 multimeter.</p><p><img style="width: 727px; height: 407px;" src="https://cdn.hackaday.io/images/8134921439244057984.jpg" height="407" width="727"></p><p>The calibration rig that was used.   A custom PCB with an AD7718 24-bit ADC was first built and calibrated against a 6 digit DMM. It was then connected to the SPI portion of the expansion slot of the vLabtool, and used for the calibration process.</p><p>The process itself involved sweeping the output of a 0-3.3V DAC and feeding it to inputs CH1,CH2,CH3,CH4, AN3 and the AD7718.</p><p>AN3 is directly connected to the uC, and is used to obtain the INL of the ADC. The slopes and offsets of the other channels are calculated after subtracting the INL.  The AD7718 serves as the &apos;actual&apos; value readout.</p><p><br>The calibrated units were then tested against the Keithley2100 connected via USB, and interfaced using python-usbtmc.  The test results and video are right at the top of this log</p><p><strong></strong></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6490/log/22174-first-attempt-at-a-3d-printed-case">First attempt at a 3D printed case</a></h2>
                            <small class="authorship">14 days ago  &bull;
                                <a class="gray-link" href="/project/6490/log/22174#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22174"><p>3D printing is a fantastic tool to rectify errors before investing in an injection mould.</p><p>Here are some of the prints I got made from the Maker&apos;s Asylum, New Delhi .  The lid will be a laser cut acrylic sheet with appropriate markings for all the connectors, but it isn&apos;t ready yet.<br><br></p><p><img style="width: 683px; height: 385px;" src="https://cdn.hackaday.io/images/2397151438796642663.jpg" height="385" width="683"></p><p>Image: Enclosure for the vLabtool. Slight errors were found, and a revised design has been prepared</p><p><img style="width: 588px; height: 489px;" src="https://cdn.hackaday.io/images/3581321438796679816.jpg" height="489" width="588"></p><p>Image: A wireless node inside its case.  An altimeter has been plugged into it.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'yY4VG1AZ-gSuN_m6DS-GNCOcXSHGXlwKzOVQ';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>