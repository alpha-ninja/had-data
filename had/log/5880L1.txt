<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Crazy Clock &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F5880%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/5880-crazy-clock">Crazy Clock</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A replacement controller for Lavet stepper clock movements</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/45439-nick-sayer" title="Visit Profile">Nick Sayer</a><span>&bull;</span>
                
                3 months ago<span>&bull;</span><a href="/project/5880#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/5880-crazy-clock">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/5880/logs/sort/newest">Newest</option>
                    <option value="/project/5880/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/5880/log/20050-accuracy-problems">Accuracy problems</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/5880/log/20050#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20050"><p>As described, there's an error in the design of the crazy clock. I incorrectly assumed that the low frequency crystal oscillator in the ATTiny45 had the correct capacitive loading for the 12.5 pF 32.768 crystal called for in the design. It turns out, this is not true. As a result, the oscillator runs around 120 ppm fast.</p><p>The hardware fix is to add two 15 pF caps, one from each crystal lead to ground. The result is correct loading for the crystal, which is the most desirable outcome.</p><p>If you don't want to fix the hardware, however, it is possible to work around the problem in the firmware.</p><p>The firmware now has a SW_TRIM facility. This will use a two byte two's compliment integer stored in EEPROM as a correction factor. The value is in tenths-of-a-ppm, and positive numbers slow the clock. So a value of approximately 0x490 (expressed in little endian as 0x90, 0x04) has been experimentally determined to be correct for the current inventory of controllers in the store. The correction factor is written in bytes 0x4 and 0x5 of the EEPROM, immediately adjacent to the 32 bit PRNG seed at addresses 0-4.</p><p>Additionally, if you have access to a very accurate PPS signal, such as from a GPS receiver, you can load a special firmware into the controller that will count PPS pulses until a long enough interval goes by that the accumulated error becomes significant. It will then write the error value specific to your controller directly to EEPROM. All you have to do is load a clock firmware after that and it should be accurate to within 0.5 ppm.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/20802-making-it-manufacturable">Making it manufacturable</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/5880/log/20802#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20802"><p>One of the categories for the 2015 Hackaday prize is "best product." According to the contest home page, the criteria are to deliver three beta test units and prove that it's manufacturable.</p><p>In order to increase the manufacturability of the Crazy Clock, I've recently created a modified design. This design alter the shape of the PCB (preserving the schematic) to be an exact replacement for the circuit board that is found in the Quartex Q80 clock movement. I've obtained an initial production run of a few hundred of these boards and a few hundred Quartex clock movements. Using the new boards, I can retrofit a Quartex movement in only a couple of minutes.</p><p>There are two next steps to turn the Crazy Clock into a product.</p><p>1. Obtain a retail partner to provide a way for people to buy complete clocks. I'd love to talk to the folks at ThinkGeek, as I am fairly confident that they'd be the absolute best store for this product.</p><p>2. Do a deal with Primex (the folks who make the Quartex Q80 clock movements) to get them to build my board into the movements during manufacturing in lieu of their own board. I tried to talk to them about this last year, but talks bogged down. If I had a retail partner that was interested in sufficient volume (see 1 above), then that would go quite a way towards providing the leverage necessary to make this more likely.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/20806-hackaday-prize-2015">Hackaday Prize 2015</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/5880/log/20806#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20806"><p>I've decided to enter the Crazy Clock in the Hackaday Prize 2015, in the Best Product category.</p><p>At first, I was loathe to do so because the theme this year has very noble overtones. The Crazy Clock can't make serious aspirations to solve a pressing problem of mankind. It's a joke, plain and simple.</p><p>But let me make a very distinct point. The Crazy Clock serves a humorous purpose, but as a product and an engineering project, it has been and continues to be no joke at all. I have a serious goal of putting the Crazy Clock on retail store shelves. This has already forced me to solve a number of problems that have popped up along the way. And as things are now, I have what I believe is an eminently manufacturable design. I am currently tooling up to manufacture movements in the "hundreds." And at that scale, the price point already not completely unreasonable. In the scale of "thousands," the clock could be made for a minimal price premium over an ordinary clock movement.</p><p>What I need right now is a combination of marketing muscle and a retail presence. And that's the hardest problem to solve of all.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/20944-accuracy-measurement-follies">Accuracy measurement follies</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/5880/log/20944#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20944"><p>So you&apos;ll recall that there was some trouble with an earlier design of the clock with the (absence of) loading capacitors causing accuracy problems. In investigating and checking the new design, one of the things I needed was a way to actually check a given board&apos;s frequency. This is a challenge, because the frequency is quite slow, but must be very accurate.</p><p>The first challenge is actually getting at the frequency to test. Attempting to probe the crystal while it&apos;s in circuit is a bad idea, as the loading will alter the conditions enough to mess with the crystal. So you need to proxy the crystal frequency on one of the output pins of the controller itself, or use the controller to actually perform the calibration.</p><p>My first pass at this was a board that simply provided the GPS PPS as an input to the controller. It would run firmware that would watch the PPS input and count the oscillations of the system clock using one of the timers. The problem is that the clock is also the CPU execution clock. Unless you prescale the timer, you can&apos;t read it quickly enough to catch it before it changes its value. And if you do prescale it, then the test just takes far longer to complete. I did get it working, but each run would take 45 minutes to complete. There had to be a better way.</p><p>That better way was centered around separating the execution clock from the crystal clock being measured. Unfortunately, there&apos;s no way to do that on the ATTiny45, so the only option was to move the measurement to an external processor. To do that, we still need to load firmware into the ATTiny, but that firmware&apos;s job would be to simply mirror the system clock on an I/O pin. To do that, you simply configure one of the timers to toggle one of the pins when it overflows, and set it to &quot;count to zero.&quot; The net result is a 16.384 kHz (nominal) square wave. That can be fed into the ICP1 pin of an ATMega328p. The magic there is that you can configure the timer so that rising edges on that pin will &quot;capture&quot; the timer value at that moment. That means that the timer can run at the system clock rate for maximum resolution. And by clocking it at 20 MHz (the maximum for an ATMega328p), one second&apos;s worth of capture data would have a resolution of 50 ppb.</p><p>Initial tests with that system on a breadboard with just an ordinary 20 MHz crystal have shown it to be a workable solution. In fact, checking the crystal against GPS shows that it&apos;s only ~2.5 ppm off (though it is quite sensitive to changes in temperature). The next step will be to build the circuit for real with a TCXO. Hopefully the TCXO (the one I&apos;ve selected is rated for 50 ppb) will line right up with GPS and be a good standard.</p><p>However, the other particularly good news is that with the correct loading capacitance, the prototypes of the new(er) controllers show that they&apos;re landing pretty close to 0 drift (modulo their 10 ppm tolerance).</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/21025-oddities-in-capacitative-loading">Oddities in capacitative loading</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/5880/log/21025#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21025"><p>When I was struggling with the correct capacitative loading for the latest design, I iterated through 4 different crystals at DigiKey before settling on the one from Citizen Finedevice that&apos;s specified.</p><p>First, a little background on how you properly use crystals. I&apos;m sure there are more details that a real perfectionist could delve into, but I&apos;m just going to touch on enough high points to arrive at the correct design.</p><p>I came at this being used to the DS1307 RTC chip. It&apos;s datasheet says that it&apos;s oscillator is designed with the proper loading built-in for a 12.5 pF 32.768 kHz crystal. So for that chip, all you do is hook the crystal straight up (with short leads and a keep-out zone around the crystal, its traces and pins, and so on). When I came to design the Crazy Clock, I looked at <a href="http://www.atmel.com/images/doc8333.pdf">this application note</a>. In particular, it showed pictures of bare crystals being attached directly to the leads of microcontrollers for testing. No loading caps. That was how I arrived at the erroneous design that runs ~115 ppm fast.</p><p>In actual fact, the ATTiny datasheet says that the low frequency crystal oscillator provides 18 pF on one pin and 8 pF on the other. The actual loading capacitance presented to a crystal is the product of the sums of the capacitance on each pin divided by the sum of the capacitance on each pin. (18+8)/(18*8) is around 5.5. Well under half the capacitance required.</p><p>Crystals exhibit an inverse logarithmic relation between their frequency and loading capacitance. The logarithmic asymptote is chosen by the manufacturer to be well below the target frequency so that the correct loading lines it right up to the target. Doing this allows the &quot;flatter&quot; portion of the curve to be near the calibration point, making the crystal less sensitive to the accuracy of the loading. Of course, &quot;less&quot; and &quot;zero&quot; aren&apos;t the same thing, and even NP0 caps are still +/- 5% generally.</p><p>So back to the sampling of crystals. Adding 12 pF loading caps to each lead of the crystal lands us, in theory on 12 pF. The traces on the board are quite short, but will still contribute some loading. In principle, that should bring us up to at least 12.5 pF. The weird part? Three out of four of the crystals I sampled still ran slightly fast. The last crystal? It ran *way* fast. For that last crystal, I tried using 15 pF caps instead. Using 15 pF results in a loading capacitance of  13.5 pF or so. The result? It was spot on.</p><p>And so, the mystery is complete. The Citizen Finedevice crystal I&apos;m using in all of the prototypes with 15 pF loading caps results in units that calibrate almost perfectly - well inside of 10 ppm for the most part.</p><p>Even if my calibration methodology is wrong, that still doesn&apos;t account for the observed differences among all of the manufacturers. According to what I have observed, for Citizen Finedevice, 13.5 is the new 12.5.</p><p>I wrote them and asked. Their reply was indicative of an impenetrable language barrier. I gave up on trying to chase it down. All I know is that the combination I&apos;ve picked appears to be what works the best.</p><p>We&apos;ll see when the manufactured samples arrive tomorrow.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/21053-tcxo-accuracy-ftw">TCXO accuracy FTW</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/5880/log/21053#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21053"><p>The TCXO arrived today. For those unfamiliar with the term, TCXO stands for Temperature Compensated Crystal Oscillator. Recall that the biggest factor in determining the stability of a crystal is the ambient temperature. To work around that, there are two ways you can go: you can either &quot;steer&quot; the crystal by altering the loading of it in response to temperature changes, or you can place the crystal in a temperature controlled environment (this is done with an OCXO - an Oven Controlled Crystal Oscillator. More on that later).</p><p>One issue that I was concerned about when I ordered the TCXO was that it was a 3.3 volt unit, and the ATMega328P I&apos;m using to do the counting is running at 5 volts. Fortunately, I&apos;ve had quite a bit of experience with reading 3.3 volt logic with 5 volt ATmel controllers without difficulty, and it turns out this was no exception. The ATMega in this case needs to be fused for an external oscillator, which is fed into the XTAL1 pin (one side benefit of this is that you get back PB7 as a digital I/O pin, though there&apos;s no need for it in this case). With the recommended loading capacitance on the output and the recommended power supply filtering, the circuit worked first time perfectly.</p><p>I loaded the GPS calibration sketch into the controller. This one is the same as the code for testing clock units, but it&apos;s set up to sample a 1 Hz signal for 10 seconds instead of a 16.384 kHz signal for 1 second. I&apos;ve left it run for several hours now and with everything set up just using &quot;dead bug&quot; wiring on my breadboard, the oscillator has a base drift of 0.185 PPM - it&apos;s losing 37 cycles out of 200,000,000. An uncompensated crystal oscillator I had set up as a test was nearly an order of magnitude further off than that (and fluctuated rather wildly with temperature). I haven&apos;t varied the temperature a lot (though it is an unconditioned garage, and it was quite warm today), but for the range of temperatures that that garage is going to experience, the TCXO should stay (according to its datasheet) &#xB1;10 counts out of 200,000,000 - 50 parts per <em>billion</em>.</p><p>And given that I can repeat this test any time I wish, I believe I can say with a straight face that the $5 calibration service I perform as an option for the movements I sell on Tindie should be able to peg the initial drift of the crystal within 0.5 ppm (in actuality the granularity of the trimming is 0.1 ppm, and I am shooting for +/- 2 units) relative to GPS.</p><p>I have an OCXO on order. It will have a stability of 20 ppb instead of 50 ppb, so it&apos;s stability will be within &#xB1;4 counts out of 200,000,000.</p><p>However, both of them have an initial calibration of only +/- 1 ppm. Fortunately, all this means is that I can calibrate it against GPS to find its actual drift (for this TCXO, it&apos;s going to be 0.2 ppm) and then subtract that (because the oscillator is running slow) from the trim value for a particular clock.</p><p>They make voltage controlled TCXO and OCXOs. These allow you to trim the frequency to perform calibration against an external standard. I could use such a mechanism to &quot;dial in&quot; the oscillator so that its drift versus GPS is zero. The problem with that is that you need a very, very stable voltage reference. By comparison, just storing the observed drift value in EEPROM and compensating for it in software is a lot easier.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/21113-manufactured-samples">Manufactured samples</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/5880/log/21113#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21113"><p>The first batch of samples came back from <a href="http://www.smallbatchassembly.com/">Small Batch</a> today. Here&apos;s one panel out of four that arrived:</p><p><img src="https://cdn.hackaday.io/images/9724001437201988876.jpg"></p><p> I pulled 6 out of the batch semi-randomly to see how their initial drift came out. All of them were functional without any rework. Of those, all but one were inside of &#xB1;10 ppm. The last one was at +15 ppm - a bit of an outlier. I didn&apos;t do the math rigorously, but the average for the batch was on the positive side of 0, so on average, they&apos;re running a touch fast. That indicates that the loading is on the low side. An astonishing conclusion given that the loading caps are 15 pF on each lead for a 12.5 pF crystal (and the micro imposing 18 pF on one lead and 8 pF on the other). Recall that the loading is (Cl1*Cl2)/(Cl1+Cl2), which in this case works out to 13.55 pF - and that&apos;s not counting any parasitic capacitance on the board. Still, if you take the +15 ppm outlier as one end of the range, it would span from there to -5 ppm, and all of the samples *were* inside that range, so it&apos;s conceivable that the average for the whole batch is something like +5 ppm or so. Of course, it would take sampling all of them to be completely sure. I don&apos;t know statistics well enough to know how many I need to sample to obtain sufficient confidence that the average and standard deviation are representative. I do have confidence that all of the boards will have a normal distribution. The only task is to determine what the mean is and make that the &apos;standard&apos; calibration for the batch. If people want the initial drift zeroed out for their specific movement, I can do that too.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/21273-vcocxo-trimming">VCOCXO trimming</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/5880/log/21273#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21273"><p>Well, I can&apos;t help myself. I decided to give a try to using a VCOCXO as the frequency standard.</p><p>When I left off, I said that I was probably just going to subtract away the error in firmware, but if nothing else my own curiosity got the better of me. My TCXO solution is adequate for the task, but if it&apos;s worth doing, it&apos;s worth overdoing. :)</p><p>I actually went down the road of seeing if I could use a 20 MHz reference clock with a GPS receiver to calibrate a clock module, but I ran into a problem.</p><p>To use the 20 MHz clock as a reference, you need to be able to use the Input Capture system of the ATMega328. The problem there is that there&apos;s only one input capture pin, but in order to do this, you need to capture both the GPS PPS output and the clock&apos;s output. You could OR the two together, but that means that during the PPS pulse, you lose the ability to lock at the clock output. It&apos;s just too messy.</p><p>So instead, I&apos;m going to set up a testing station with a 2 line LCD and a three pin header that puts out a 1.8 volt supply and takes a signal straight in to the capture pin of the 328. It will be clocked with a VCOCXO with a 20 turn trimpot feeding the control voltage. I&apos;ll load firmware in to show the drift of the 1 PPS signal sampled for 10 seconds (a granularity of 5 ppb), and use the trimpot to zero the drift out (after letting it warm up for several hours).</p><p>The 3 pin header (1.8v, ground and input) can either connect up to a clock board for testing (1.8 volts is supplied to the board under test to simulate a AA battery so that the conditions will be as similar as possible to real usage - the boost converter will turn the 1.8 volts into 3.0 volts, and in principle it doesn&apos;t matter that the input voltage is slightly high), or to a GPS calibration fixture. For that, I&apos;m going to put the same boost converter, an AdaFruit Ultimate GPS module, a battery, a U.FL antenna connector, a FIX led and a couple of three pin headers (the second will be the module&apos;s serial port, just in case I need to talk to it). To calibrate the calibrator, I&apos;ll hook this board up and load the &quot;1 Hz&quot; firmware for trimming it. To calibrate clocks, I&apos;ll hook a clock up instead and load the &quot;16.384 kHz&quot; calibrating firmware.</p><p>Another question I had in deciding on this was how to hook the trimpot up to the VCOCXO&apos;s control pin. Obviously, the voltage on that pin must be exceedingly stable. The &quot;steering&quot; ratio is around 7 ppm per volt. And the ability to make really accurate voltage isn&apos;t nearly as easy as making really accurate frequencies. Conner Winfield (the manufacturer of the oscillators I&apos;ve been using) has an application note that includes a reference voltage circuit that starts with an SPI D/A converter, which feeds into a chopper op-amp configured for unity gain, and then the CV pin of the oscillator. The amplifier&apos;s purpose is to protect the D/A converter from excessive loading, but the input impedance of the oscillator is listed as 100k. I wrote them and asked, and they suspected that simply using a trimpot alone would be fine. I&apos;ve decided to hedge my bets a bit. I&apos;m leaving the footprint for the amp on the board, but connecting the input and output with a normally closed solder jumper. I&apos;ll leave the amp unpopulated to start with, but if adding the amp becomes necessary, I won&apos;t need to re-order the board.</p><p>It&apos;s entirely possible that I could, instead, go with the SPI D/A converter and perform the calibration automatically in firmware, storing a correction factor in EEPROM. I could envision a fully automatic system that switches the ICP pin between the board under test and the GPS receiver. But that&apos;s too much overkill even for me. The only thing I regret is not including either a switch or a button on the board to swap the firmware from GPS to 16 kHz mode without reloading the firmware. Oh well.</p><p>EDIT: Actually, it turns out it&apos;s <em>not</em> overkill even for me. It is, however, a <a href="https://hackaday.io/project/6872-gps-disciplined-tcxo">separate project</a>.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/22093-one-tricky-part">One tricky part</a></h2>
                            <small class="authorship">15 days ago  &bull;
                                <a class="gray-link" href="/project/5880/log/22093#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22093"><p>One thing I&apos;ve discovered a couple of times now is that the retrofit process for removing the manufacturer&apos;s oscillator PCB and replacing it with the purpose-built one is not completely trivial.</p><p>The pins that are soldered to the board aren&apos;t actually held in place by much of anything. They have the magnet wire from the coil wrapped around them below the board and they&apos;re just sitting in molded plastic sockets, sort of. What this means is that you must be extraordinarily careful to insure that the pins are completely free from the board before you attempt to pull it away. Otherwise, you risk putting undue tension on the coil wires. If you break those wires, repairing them is virtually impossible. The wires are incredibly fine and they&apos;re insulated. Stripping the insulation off without breaking the wire (again) is very difficult. It&apos;s not so bad if you break the wire coming from the outside of the coil. You can simply take one turn off the coil and have some slack. But if you break the inside wire, you&apos;re hosed.</p><p>This isn&apos;t such a big deal for me - I&apos;m used to the process. But it does make it just a little bit tedious. I could do a batch of a few hundred in a weekend for a &quot;starter&quot; retail order, but in larger volumes, it&apos;s going to be necessary to restart the conversation with Primex to see how a manufacturing run could be done substituting the crazy board for theirs.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5880/log/22237-the-final-calibration-solution">The final calibration solution</a></h2>
                            <small class="authorship">13 days ago  &bull;
                                <a class="gray-link" href="/project/5880/log/22237#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22237"><p>Now that the prototypes of the <a href="https://hackaday.io/project/6872-gps-disciplined-tcxo">GPS disciplined oscillator</a> has proven to be a success, I&apos;ve made up the final solution to the crazy clock calibration.</p><p>It&apos;s more or less the same solution as before - an ATMega328p connected up to a 2x16 LCD as a &quot;backpack.&quot; There&apos;s a 1.8 volt LDO to supply the clock board being tested with power, and the pin carrying the 16.384 kHz square wave from the calibration firmware goes into the ICP pin. Rather than an oscillator on the board, there&apos;s an 74LVC1G17 Schmitt trigger buffer chip that acts as a clock &quot;reconstitution&quot; chip. It&apos;s fed from a 3.3 volt LDO (so that its input voltage range is more compressed - a 3.3 volt logic output will successfully clock the controller). The input comes from a 50 ohm Thevenin terminator right after a DC blocking capacitor. That, in turn, is fed from a header that&apos;s connected via a cable to the GPSDO. This configuration should work not only with the 3.3 volt LVCMOS square wave from the GPSDO, but with a 1v P-P sine wave.</p><p>The firmware is the same as I was running before, but is set up for a 10 MHz clock rather than 20 MHz. That done, the special self-calibration mode of the firmware reports a 0.00 ppm error when it&apos;s hooked up to a GPS module. That&apos;s as you&apos;d expect, of course, seeing as how that&apos;s just testing whether two otherwise identical GPS receivers can agree to within 10 ppb.</p><p>I&apos;ve now already used this solution to calibrate clock controllers for a customer, so... yay!</p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'vUDk03j3-l9CpthJ-2eoZyaR9WOyFm0gNEHo';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>