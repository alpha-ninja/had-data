<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; AYTABTU - Discrete Computer &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6668%2Flogs%3Fpage%3D2">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6668-aytabtu-discrete-computer">AYTABTU - Discrete Computer</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">After the apocalypse we have to build computers from stuff we can make at home, I.E Transistors, diodes and resistors.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/22844-matseng" title="Visit Profile">matseng</a><span>&bull;</span>
                
                a month ago<span>&bull;</span><a href="/project/6668#discussion-list" title="See Comments">9 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6668-aytabtu-discrete-computer">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6668/logs/sort/newest">Newest</option>
                    <option value="/project/6668/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6668/log/21252-a-4-to-16-decoder-board">A 4-to-16 decoder board</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21252#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21252"><p>I&apos;ve soldered up a 4-to-16 line decoder pcb.  Two of those are required for the program address (ROM) bus, and at least two more for the data address bus (RAM). <br><br>I will have up to sixteen ROM boards each holding sixteen (11-bit) words of memory.<br><br>In order to not require local decoding of the last four address bits (A0..A3) on every ROM board I have a board like this that takes four binary bits and outputs one of sixteen select signals that goes out to a bus that all ROM boards are connected to.  Then each ROM board will have a separate board-enable signal as well - or all boards would respond at the same time.<br><br>This decoder board is basically just five inverters (A0..A3 plus Enable) that is connected to sixteen 5-input NAND gates that are then followed by sixteen inverters that goes to the outputs of the board.<br><br>In total I ended up with 139 diodes, 50 resistors and 41 transistors if I&apos;ve counted correctly.<br><br>I think I&apos;ll have to draw some block diagrams to explain the workings of all my pcbs and how they will be interconnected....<br><br></p><p><img src="https://cdn.hackaday.io/images/9012031437477300525.jpg"></p><p><img src="https://cdn.hackaday.io/images/6411331437477412595.jpg"></p><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21463-cpu-emulator">CPU Emulator</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21463#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21463"><p>It only took me about four hours to whip up an emulator for the CPU using golang and a library called termbox to handle the output to the screen (it&apos;s a lightweight version of curses).  Since I&apos;m an old C programmer and this is only my second golang application it probably have a lot of ugly C-mannerisms in the code - but it works and can execute the code I fed to it.<br><br>I still need to implement some rather important functions like Load code from file and Edit data in the code- and data RAM spaces.<br><br>It could also be nice to have a simulated serial port/uart on a tcp socket that can be telnetted to.</p><p>And highlighting of fields that have changed during the last executed opcode as well - that would look very professional :-)</p><p>So a couple of hours more tonight to finish off the emulator....<br><br></p><p><img src="https://cdn.hackaday.io/images/5114901437734674980.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21727-feeling-the-pressure">Feeling the pressure</a></h2>
                            <small class="authorship">21 days ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21727#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21727"><p>This project is starting to get a serious amount of skulls and followers which on one hand is nice, but on the other hand is giving me pressure to actually move forward in a decent speed - no slacking off here :-)<br><br>Well, just as an update of what I&apos;m currently doing the last few days:<br><br>The emulator now loads code, sends logdata via udp and have a simulated UART on a tcp port.<br><br>I&apos;ve also started working on the ALU bitslice for that can handle all 16 operations my instruction set mandates.  I&apos;m doing that in both in the simple Falstad circuit simulator for the overall view of it with logical blocks, and also on transistor level in LTspice to check timings/performance.<br><br>Hopefully the ALU design will be done this week so I can solder up one of the eight slices plus the control logic for it on perfboard, run some basic tests and then send for a full set of slice pcbs from dangerous prototypes after the tests. <br><br> <br><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21847-alu-slice-design-done">ALU slice design done</a></h2>
                            <small class="authorship">20 days ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21847#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21847"><p>It took the better part of  day, but but finally I&apos;ve got a low transistor count version of a single bit ALU. <br><br> It does both arithmetic and logical operations and the result ends up on a single output pin.  <br><br>Usually most ALU designs have a rather big multiplexer at the output stage where one of the results of the desired operation is selected.  That would not be a big issue if using ICs, just a one additional chip would be required, but when building it from discrete NAND gates it&apos;s not that simple.<br><br>My ALU slice have the usual A, B and CarryIn inputs and a Result and CarryOut as outputs.  In addition to that there are seven control inputs that will be shared among all slices that will be used in the complete ALU.<br><br>One of the control inputs are required both in a normal and also in an inverted version. I could have put the inverter inside the slice and then I just had to distribute six control signals among the bus. But I choose to put the inverter on the control pcb instead - thus saving seven transistors in total.<br><br>Depending on the state of the control inputs the ALU slice does the following common functions (plus a number of strange things that I&apos;ll don&apos;t have use for).<br>  </p><table><tbody><tr><td>a AND b</td><td>a OR b </td><td>a XOR b</td><td></td></tr><tr><td>NOT a</td><td>a</td><td>all 1&apos;s</td><td>all 0&apos;s</td></tr><tr><td>INC a</td><td>DEC a</td><td>a ADD b</td><td>a SUB b</td></tr></tbody></table><p><br>The ADD and SUB both have variants with/without Carry.<br><br></p><p>So I ended up with 14 transistors,  38+(14*3) = 80 diodes per slice. Outside of the slice I&apos;ll have to add some logic for the shift and roll instructions as well. I think I&apos;ll implement them parallel to the A/B/Result pins since no arithmetic or logical instructions will take place at the same time so by bypassing the main ALU will reduce the propagation delay a lot.</p><p><img src="https://cdn.hackaday.io/images/5136221438254933285.png"></p><p> I&apos;ll breadboard this up and connect it to an Arduino to verify that all ALU ops are correct before I design a PCB for it.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/22036-one-alu-slice-tested-with-real-hardware">One ALU Slice tested with real hardware</a></h2>
                            <small class="authorship">17 days ago  &bull;
                                <a class="gray-link" href="/project/6668/log/22036#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22036"><p>I did some soldering today....  Three boards each with six 4-input NAND gates giving 18 NANDs in total which is more than enough to wire up one ALU Slice and verify that it actually works in real life and not just in Logisim.  The boards look a bit like the SIP (Single In Line Package) memory modules that was used for some years back in the 90&apos;s.</p><p><img src="https://cdn.hackaday.io/images/4700811438535786750.jpg"></p><p>I realized that for the shift/rol instructions I need to be able to disable the Result and CarryOut ports of the ALU slices so there&apos;s now one additional control input to the slices and one more diode each for the two output gates.<br></p><p><br>So a slice looks like this now:</p><p><img src="https://cdn.hackaday.io/images/8136921438535669516.png"></p><p><br>So I wired that up on a breadboard and hooked up an Arduino to automatically set the control signals and cycle through the combinations of A, B CarryIn and analyse the Result and CarryOut to see if the ALU behaves as expected.  As far as I can see it does, so I&apos;ll route pcbs for this and send them off for manufacturing.<br><br>The ALU control pcb and the Shift/Rol pcbs I&apos;ll probably just solder up on breadboards since they&apos;re on-offs.<br></p><p><img src="https://cdn.hackaday.io/images/175421438536119438.jpg"></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=1" class="grey-gold-button prev-button show">Previous</a>
                    
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '43PvODkU-jtKeIHgPsg_lVuDZTKJ5E_5Ju3A';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>