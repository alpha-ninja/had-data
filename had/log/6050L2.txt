<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Tote, affordable spider robot &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6050%2Flogs%3Fpage%3D2">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6050-tote-affordable-spider-robot">Tote, affordable spider robot</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Accelerating research and development of walking robots by making it simple and affordable.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/35249-radomir-dopieralski" title="Visit Profile">Radomir Dopieralski</a><span>&bull;</span>
                
                3 months ago<span>&bull;</span><a href="/project/6050#discussion-list" title="See Comments">14 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6050-tote-affordable-spider-robot">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6050/logs/sort/newest">Newest</option>
                    <option value="/project/6050/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6050/log/20586-logicoma-kun">Logicoma-kun</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6050/log/20586#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20586"><p>The continuous-rotation servos arrived, and I got to finish another of my experiments, <a href="https://hackaday.io/project/6321-katka-a-mammalian-robot/log/20293-spider-mode">which I mentioned previously</a> over at the <a data-mention-project-id="6321" href="/project/6321">#Katka, a mammalian robot</a> project. Since I'm re-using parts and experience between all those projects, it becomes harder to separate them. This one might even grow out into its own project, but for now I will publish it here, as it's basically Tote with a slightly different leg configuration and software.</p><p>Remember the cute tank-robots from Masamune Shirow's mangas? First Fuchikomas, then Tachikomas. Now, in the newest TV series, there is a new addition to the family called Logicoma. And it's much more, hmm, shall I say "realistically", designed than the others -- in fact, I thought that I might be able to build a model of it out of Tote.</p><p><img src="https://cdn.hackaday.io/images/3053521436274374167.jpg"></p><p style="margin-left: 20px;">Since with the Arduino Pro Mini I'm limited to 12 servos, I had to find a way to reduce the number of servos and still get proper walking. My experiments with <a data-mention-project-id="6321" href="/project/6321">#Katka, a mammalian robot</a> allowed me to do that, so I used the 4 free servo slots for 4 continuous-rotation servos placed at the ends of the legs. <a href="http://letsmakerobots.com/content/how-modify-micro-servo-continuous-rotation">I could actually have converted the SG90 servos instead</a>, but I didn't have the round servo horns for the wheels, so I decided to just order ready servos.</p><p style="margin-left: 20px;">For now, just for testing, I have two separate programs, one for just driving forward:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/WvPRhwA7Aa0" frameborder="0" allowfullscreen=""></iframe><p>And one for walking forward:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/2LjSKvdbtPk" frameborder="0" allowfullscreen=""></iframe><p>I'm sure I will be able to add a lot more, and also add all the props that will make it look like a real Logicoma, but that's it for a start.</p><p>I actually think that there is a lot of promise for this kind of hybrid robots that have both wheels for efficient and fast locomotion over flat terrain, and legs for getting through rough terrain, stairs, and maybe even climbing. If you look at the robots from this year's DARPA Robotics Challenge, many of them have additional wheels on them.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/20790-distance-sensor-second-try">Distance Sensor, Second Try</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6050/log/20790#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20790"><p>Seonsors are very important for robots, and a distance sensor is one of the most useful ones that you can install, as it gives the robot an approximation of vision. I tried to use an ultrasound distance sensor with Tote before, and failed miserably. This time I'm going to use an infra-red distance sensor.</p><p>The <a href="http://sharp-world.com/products/device/lineup/data/pdf/datasheet/gp2y0a21yk_e.pdf">Sharp 2Y0A21</a><a href="http://sharp-world.com/products/device/lineup/data/pdf/datasheet/gp2y0a21yk_e.pdf"></a> [pdf] sensor is probably one of the most popular hobby robot sensors out there, right after the ultrasonic one. But it takes 5V as the power supply. Will it work at our robot's 3.3V? Let's find out!</p><p><img src="https://cdn.hackaday.io/images/716781436553286513.jpg"></p><p>Connecting this sensor is easy. There are three cables: red for power, black for ground and yellow for the sensor output. The voltage on the output wire will vary depending on the distance being read by the sensor, so we have to connect it to an analog pin. The easiest way to use that sensor with Tote is to plug the wires into the I²C pin header, as both of the I²C pins of the Pro Mini are, by coincidence, also analog pins, and we have convenient 3.3V power and ground it there too. The photo above shows how to connect it.</p><p>Now, the first test. Does it even start when powered with 3.3V? There is an easy way to check any infra-red devices -- just look at them through a digital camera. The camera sensors are much more sensitive to infra-red light than our eyes, and will show you a shining LED. Test passed.</p><p>Next, let's try to get some readings and calibrate the sensor. I'm powering it with out-of-spec power, so anything written in the datasheet will most likely be completely wrong. We need to do our own calibration. We can do this with this extremely complex Arduino sketch:</p><p><span></span></p><pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>{
    Serial.begin(<span class="hljs-number">115200</span>);
    pinMode(A4, INPUT);
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>{
    Serial.println(analogRead(A4));
    delay(<span class="hljs-number">300</span>);
}</pre><p>It will basically repeatedly read the analog pin value and print it on the serial line. We can use the Arduino IDE's serial monitor to see those values. A quick test and yay, we are getting readings, and they are different depending on the distance. So far so good.</p><p><img src="https://cdn.hackaday.io/images/1619621436553858490.jpg"></p><p>The photo above shows my testing rig. A long ruler, the sensor taped to one end, and a reasonably reflective white object. Note, that the power line from the USB2TTL is disconnected and the Pro Mini is running on the battery power, so that it gets to regulate its own 3.3V for the sensor, and doesn't rely on the power from the computer. Here are the measurements I did, plotted on a chart:</p><p><img src="https://cdn.hackaday.io/images/6856891436554041118.png"></p>As you can see, the sensor has a much shorter useful range than the 80cm it gets on 5V. At about 35cm it starts to break already. But that's fine, 35cm is a lot for our robot. We also won't need exact measurements, so no need to convert those numbers to centimeters -- we will just read the chart for setting our limits.<p>Next, let's actually attach the sensor to our robot and make it do something. Of course, the simplest thing it can do is to stop before it hits an obstacle.</p><p><img src="https://cdn.hackaday.io/images/3268571436554231854.jpg"></p>I used adhesive tape to attach the sensor to the front of the robot. I might come up with a better way of doing it in the future, but this is good enough for now. Now let's add some code that does the stopping. We just add a <a href="https://bitbucket.org/thesheep/tote/src/52697d7f12c87825ac4579f371ccd22bdd2151bc/start/sharp.ino?at=sharp"><em>sharp.ino</em></a> file, with corresponding <em>sharp.h</em>, and call it all from <a href="https://bitbucket.org/thesheep/tote/src/9aa456eb0395f03c488d6ef61da6a31f7e39ff4d/start/start.ino?at=sharp"><em>start.ino</em></a>. And let's see the results:<iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/WR_0yxW_Ba0" frameborder="0" allowfullscreen=""></iframe><p>It works as expected, the robot consistently stops at about 15cm from the obstacle. That's it for today, in the future I will show how to code a simple obstacle-avoiding algorithm, and then how to make the robot follow you around.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/20824-custom-controller">Custom Controller</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6050/log/20824#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20824"><p>The newest Hackaday Prize Hot List is about human interfaces, so I decided to work on that a little over the weekend. I found an analog joystick module lying around, so I'm going to try and make a custom controller for Tote.</p><p><img src="https://cdn.hackaday.io/images/9284321436614588349.jpg"></p><p>First a quick test. The joystick has two pots for the position, and a button for pushing down the hat. That means we can have two modes, one for walking around, and one for changing the body posture. For a quick test, I connected it to a Pro Mini and tested with this simple Arduino sketch:</p><pre class="hljs cpp"><span class="hljs-reserved">void</span> setup() {
    Serial.begin(<span class="hljs-number">115200</span>);
    pinMode(A0, INPUT);
    pinMode(A2, INPUT);
    pinMode(<span class="hljs-number">12</span>, INPUT_PULLUP);
}

<span class="hljs-reserved">void</span> <span class="hljs-keyword">loop</span>() {
    Serial.<span class="hljs-built_in">print</span>(analogRead(A0));
    Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">", "</span>);
    Serial.<span class="hljs-built_in">print</span>(analogRead(A2));
    Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">", "</span>);
    Serial.println(digitalRead(<span class="hljs-number">12</span>));
    delay(<span class="hljs-number">300</span>);
}</pre>It seems to be working perfectly. Next, I need an IR diode, for sending the signal to Tote. Quick rummaging through my parts box, and I found one, and a 100Ω resistor for it (the LED calculator says it should be 90Ω, but I couldn't find any).<p><img src="https://cdn.hackaday.io/images/2052811436629226337.jpg"></p><p> I also took another Pro Mini with an IR receiver and sample code to read the IR signals, for debugging. Now, my initial idea was to send the joystick position encoded as two bytes in the command (button code), and the state of the button would change the "address" part of the signal. Turns out it's not that simple.</p><p>The two bytes in the command code are not just arbitrary bytes. One has to be negation of the other. So effectively I only have one byte that I can send. So I decided to send two separate commands, with different addresses, one for the x, and one for the y. The code for that is quite simple:</p><pre class="hljs cpp">    switch (IRaddress) {
        <span class="hljs-keyword">case</span> IR_ADDRESS:
            tv_remote(IR<span class="hljs-built_in">command</span>);
            last = IR<span class="hljs-built_in">command</span>;
            <span class="hljs-built_in">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>xFA10:
            creep_dx = -(<span class="hljs-number">0.0</span> +
                         (IR<span class="hljs-built_in">command</span> &amp; <span class="hljs-number">0</span>xFF) - <span class="hljs-number">128</span>) / <span class="hljs-number">42.5</span>;
            <span class="hljs-built_in">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>xFA00:
            creep_rotation = (<span class="hljs-number">0.0</span> +
                              (IR<span class="hljs-built_in">command</span> &amp; <span class="hljs-number">0</span>xFF) - <span class="hljs-number">128</span>) / <span class="hljs-number">3652.605943958998</span>;
            <span class="hljs-built_in">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>xFA11:
            creep_height = min(TIBIA * <span class="hljs-number">1.25</span>,
                max(TIBIA * <span class="hljs-number">0.25</span>,
                    creep_height + (<span class="hljs-number">0.0</span> + (IR<span class="hljs-built_in">command</span> &amp; <span class="hljs-number">0</span>xFF) - <span class="hljs-number">128</span>) / <span class="hljs-number">64</span>));
            <span class="hljs-built_in">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>xFA01:
            creep_dy = (<span class="hljs-number">0.0</span> + (IR<span class="hljs-built_in">command</span> &amp; <span class="hljs-number">0</span>xFF) - <span class="hljs-number">128</span>) / <span class="hljs-number">42.5</span>;
            <span class="hljs-built_in">break</span>;
    }
</pre><p>Additionally, if the button on the joystick is pressed, you get different functions -- walking sideways and changing the robot height. All this added to <a href="https://bitbucket.org/thesheep/tote/src/22662daa9d26d7cddd83226e1e6ace775f2ed8c1/start/ir.ino?at=irjoy">ir.ino</a>. All that was left was to put all the parts, together with a battery, in a box:</p><p><img src="https://cdn.hackaday.io/images/1091771436629637404.jpg"></p><p>Some stickers taken from LiPo cells complete the look. Here's the controller in action:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/uX7K6_ChTmM" frameborder="0" allowfullscreen=""></iframe></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/21027-cheap-chinese-stm32-boards">Cheap Chinese STM32 Boards</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6050/log/21027#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21027"><p>We already saw that Tote can work with a Pro Mini, Pro Micro or Teensy 3.1 as its brains. The Teensy is especially interesting, as it gives us a lot of pins for additional sensors and effectors. But it&apos;s quite expensive. Could we maybe use a cheaper ARM board instead?</p><p>Turns out we can. Digging through my parts box, I found a &quot;blue pill&quot; board that I ordered some time ago from China for $4. It&apos;s an STM32 Cortex-m3 microcontroller on a relatively small development board. A little bigger than Teensy, but still compatible with the 600mil DIM sockets, so the same as the Pro Minis and Teensy. Of course, the pinout is not compatible, so I would need to make a custom board, or do the same trick I did with Teensy -- use wires to connect to the right pins.</p><p><img src="https://cdn.hackaday.io/images/6606801437063124752.jpg"></p><p>But how do I program it? Do I need a JTAG programmer, a complex setup for cross-compiling to ARM and a complicated GDB configuration? Turns out that I don&apos;t, because there is the <a href="http://www.stm32duino.com/">stm32duino</a> project! And they even have a step-by-step YouTube video on how to program that board:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/Ze6q6NidS5w" frameborder="0" allowfullscreen=""></iframe><p>Turns out it&apos;s very simple and works like a charm. They also have the pinout of that board <a href="http://www.stm32duino.com/viewtopic.php?f=28&amp;t=117">on their forum</a>:</p><p><img src="https://cdn.hackaday.io/images/1925191437063394286.png"></p><p>That should make it all much easier. Unfortunately, that pinout doesn&apos;t say which pins support PWM and thus are suitable for use with the Servo library. I had to get them by trial and error, which is what I spent the bulk of my time on. But ultimately I came up with a working set of pins, which I put in the <a href="https://bitbucket.org/thesheep/tote/commits/162ec23c4fbeadc1ddd0feea622ca22ff2a53662">servo.ino</a> of the code that worked for Teensy 3.1. And it works. I will skip the video this time, because it looks exactly the same as the one with Teensy, so you can go and watch that one instead.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/21263-testing-the-new-printed-circuit-board">Testing The New Printed Circuit Board</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6050/log/21263#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21263"><p>The <a href="http://dirtypcbs.com/view.php?share=8923&amp;accesskey=8b094bbc0000d8c4912eef9a90965aac">new PCBs</a> just arrived from <a href="http://dirtypcbs.com">Dirtypcbs</a> and I started to test them. This is version three of the board, and <a href="https://hackaday.io/project/6050-tote-affordable-spider-robot/log/20019-pcb-redesign">most of the improvements are really just for convenience or aesthetics</a>.</p><p><img src="https://cdn.hackaday.io/images/8269681437488977992.jpg"></p><p>So, this time there seem to be no errors on the board (last time I got boards with solder mask applied to some of the SMD pads). The picture doesn&apos;t really look as good as I hoped, but that&apos;s fine. Time to assemble the electronics and see if the robot works:<br></p><p><img src="https://cdn.hackaday.io/images/5299701437489143374.jpg"></p>Along the way I also made a lot of photos, so I will probably be updating the assembly manual with them soon.<p>Once I started to add the servomechanisms, I noticed that the mounting holes on the board are spaced wrong for the servo horns that I have. Strange. I compared them with the previous boards, and the holes are spaced the same. So it&apos;s the horns. Turns out that those cheap servos come with wildly varying horns, depending on where you order them and what batch they are from. I had to modify mine a little:</p><p><img src="https://cdn.hackaday.io/images/8954961437489571733.jpg"></p>The next version of the PCB will definitely have to have the holes spaced a little bit farther apart, so as to be closer to the average for those horns. I think I will also make the holes a little bit larges, so that you don&apos;t have to use so much force when screwing in the screws. Lastly, while moving the battery connector was a good idea, the switch is still in an inconvenient place next to a leg. I wonder if I could place it better somehow.</div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/21465-follow-me">Follow Me!</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6050/log/21465#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21465"><p>Some time ago I got the <a href="https://hackaday.io/project/6050-tote-affordable-spider-robot/log/20790-distance-sensor-second-try">Sharp distance sensor to work with Tote</a> (somewhat), and I promised we will do something interesting with it. Obstacle avoidance is old, so let&apos;s try to make the robot follow us instead. The idea is actually very similar to obstacle avoidance, except that instead of avoiding obstacles, you go toward them.</p><p>So what&apos;s the plan? We want our robot to behave differently depending on what the distance sensor is telling it:</p><ul><li>If the obstacle is very close, go backwards;</li><li>if the obstacle is close, stay in place and do nothing;</li><li>if the obstacle is far, go forward;</li><li>finally, if there is no obstacle in sight, rotate in place to find it.</li></ul><p>This translates pretty easily into code:</p><pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sharp_loop</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">int</span> distance = analogRead(A4);
    <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">660</span>) {
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = -<span class="hljs-number">1</span>;
        creep_rotation = <span class="hljs-number">0</span>;
        beep(<span class="hljs-number">352</span>, <span class="hljs-number">100</span>);
    } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(distance &gt; 480)</span> </span>{
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = <span class="hljs-number">0</span>;
        creep_rotation = <span class="hljs-number">0</span>;
    } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(distance &gt; 420)</span> </span>{
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = <span class="hljs-number">1</span>;
        creep_rotation = <span class="hljs-number">0</span>;
        beep(<span class="hljs-number">704</span>, <span class="hljs-number">100</span>);
    } <span class="hljs-keyword">else</span> {
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = <span class="hljs-number">0</span>;
        creep_rotation = PI/<span class="hljs-number">45</span>;
        beep(<span class="hljs-number">1408</span>, <span class="hljs-number">100</span>);
    }
}</pre><p>I also added some beeps in there, that will tell us what the current state is. Since the new PCB has a place for a piezo buzzer on pin 13, I also added it to the previous robots:</p><p><img src="https://cdn.hackaday.io/images/9149541437741274409.jpg"></p><p>But how does our code work? Turns out, that it doesn&apos;t work very well. The problem comes from how our 5V sensor works when it&apos;s under-powered with 3.3V. Remember the plot of values from last time?</p><p><img src="https://cdn.hackaday.io/images/8548111437741395294.png"></p><p>It&apos;s U-shaped, and that means that we get the same reading both for 20cm and for 50cm and more. That means that we have practically no way to tell if something is 20cm away or 50cm away, and that means that we can&apos;t reliably get the &quot;no obstacle in sight&quot; condition.</p><p>Even if we shorten our distances to where the curve is relatively straight, we are still going to get weird readings when nothing is that close.</p><p>Oh well, the sensor was cheap so it was worth a try. I guess this is a lesson: don&apos;t try to use parts outside of their specified parameters. Now I ordered some distance sensors that work between 2.7 and 5.5V, so that should be better. I will try again when they arrive.</p><p>Finally, a video of Tote failing to follow my hand:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/u7CzJw-UeYg" frameborder="0" allowfullscreen=""></iframe></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/21869-follow-me-i-say">Follow Me, I Say!</a></h2>
                            <small class="authorship">20 days ago  &bull;
                                <a class="gray-link" href="/project/6050/log/21869#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21869"><p>I didn&apos;t have much time to work on Tote this week, but since the sensors arrived, I will at least finish the &quot;follow me&quot; log.</p><p>This time the sensors I got <a href="https://www.pololu.com/product/2474">GP2Y0A60SZLF Pololu modules</a>,  which are specified to work from 2.7V. Hacks like the previous two attempts will sometimes work, but as you can see, often not, and you shouldn&apos;t rely on them.</p><p>This sensor works beautifully though. Here&apos;s my testing rig:</p><p><img src="https://cdn.hackaday.io/images/7331021438284585367.jpg"></p><p>And here are the results:<br></p><table><tbody><tr><td>Distance</td><td>Reading</td></tr><tr><td>50</td><td>20</td></tr><tr><td>45</td><td>68</td></tr><tr><td>40</td><td>122</td></tr><tr><td>35</td><td>174</td></tr><tr><td>30</td><td>243</td></tr><tr><td>25</td><td>317</td></tr><tr><td>20</td><td>423</td></tr><tr><td>15</td><td>597</td></tr><tr><td>10</td><td>900</td></tr><tr><td>5</td><td>1020</td></tr></tbody></table><p>As you can see, they don&apos;t repeat and use pretty much all the scale from 0 to 1023. Perfect.</p><p>Now, let&apos;s just modify our program a little, using the new values for the readings:</p><pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sharp_loop</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">int</span> distance = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; ++i) {
        distance += analogRead(A4);
    }
    distance /= <span class="hljs-number">10</span>;
    <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">700</span>) {
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = -<span class="hljs-number">1</span>;
        creep_rotation = <span class="hljs-number">0</span>;
        beep(<span class="hljs-number">352</span>, <span class="hljs-number">100</span>);
    } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(distance &gt; 520)</span> </span>{
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = <span class="hljs-number">0</span>;
        creep_rotation = <span class="hljs-number">0</span>;
    } <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(distance &gt; 260)</span> </span>{
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = <span class="hljs-number">1</span>;
        creep_rotation = <span class="hljs-number">0</span>;
        beep(<span class="hljs-number">704</span>, <span class="hljs-number">100</span>);
    } <span class="hljs-keyword">else</span> {
        creep_dx = <span class="hljs-number">0</span>;
        creep_dy = <span class="hljs-number">0</span>;
        creep_rotation = PI/<span class="hljs-number">45</span>;
        beep(<span class="hljs-number">1408</span>, <span class="hljs-number">100</span>);
    }
}</pre>And here we go:<iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/1I-EeEPEjx8" frameborder="0" allowfullscreen=""></iframe><p>There still can be a lot of improvements. Instead of rotating in one direction, the robot could first just rotate its body left and right to see if the target is still there. I could use some timeouts between switching into the &quot;search&quot; mode, so that it doesn&apos;t switch back and forth constantly. The speed could be adjusted depending on the actual distance, etc. I will leave those as homework, though.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/21962-new-new-printed-circuit-board">New New Printed Circuit Board</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/6050/log/21962#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21962"><p>You know how it is. As soon as you get your hands on the new PCB and assemble another prototype to test it, you get a million ideas for improvements to it. That&apos;s what happened when I got the version 3 of the Tote&apos;s body, and it lead to a complete overhaul in version 4.</p><p><img src="https://cdn.hackaday.io/images/2318771438434731294.png"></p><p>The most obvious change is the size. So far all the Tote&apos;s PCB were 38&#xD7;38mm, simply because that size works well. But the servo horns stick out of the PCB quite far, so the robot is in fact bigger than that. Why not reclaim that space to have more room for all the components? Version 4 of the PCB is now 49&#xD7;49mm, taking advantage of the maximum size of the board I can order cheaply. The spacing of legs is exactly the same, and there are holes there for the servo horns. That not only makes the whole construction a little bit more rigid, but also lets me attach the servo horns in parallel, instead of diagonally, reclaiming some of the precious space on the board, and making possible a host of other small improvements.</p><p>All components are now on a single side of the board, and the only traces that are on the bottom layer are ground. That means, that the whole bottom layer of the board is practically one huge ground fill. The switch and the battery plug are now located in easily accessible places. All the free pins are broken out in one large matrix, which also has easy access to ground, battery power and stabilized power, so that you can connect any sensors in there easily. I dropped the dedicated spot for an IR sensor, you just connect it on pin 2 as you would with any other sensor. That means that you will need to cross the sensor&apos;s legs again, unfortunately, though.</p><p>There is also a number of holes in the board for making it easier to add another board or to mount the sensors.</p><p>I&apos;m still waiting for the board to arrive from the factory, I hope it will make it before the Hackaday Prize deadline. As soon as it arrives, I will make another prototype (I think I will have to disassemble one of the older ones for the servos).</p><p>By the way, don&apos;t be fooled by a relatively low version number of this board! Before I started numbering them, there were lots of prototypes. I made a photo of most of the old boards that at some point were used in this robot:</p><p><img src="https://cdn.hackaday.io/images/1457071438436095243.jpg"></p>That of course doesn&apos;t include the boards that are still sitting inside their robots.</div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/22595-new-new-board-in-the-wild">New New Board in the Wild</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/6050/log/22595#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22595"><p>So the version 4 printed circuit boards arrived a few days ago (no, that&apos;s not super-fast shipping from China, I just waited several weeks before even writing about them). I&apos;m almost perfectly happy with them, so far I only came up with two small things I want to change. Probably not enough to make another version.</p><p><img src="https://cdn.hackaday.io/images/5633101439376955396.jpg"></p><p></p><p>This time the board is bigger and the servo horns are not attached diagonally -- they fit within the board. The holes for the horns should be a little bit larger (depends on what servos you get, some of them fit perfectly) and not metalized, but that&apos;s something you can fix easily with a file. The board on the photo has all the parts soldered on one side of the board -- because I want to have the Pro Mini pluggable there. It&apos;s possible to also put the servo sockets and capacitor below, and have the top of the robot almost flat, then make use of all those mounting holes.</p><p><img src="https://cdn.hackaday.io/images/6946751439377231590.jpg"></p><p>The finished robot is quite nice, and it&apos;s sturdier than the previous versions. Also much easier to assemble. I still need to fine-tune the leg positions on this one, and add the IR sensor.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/22768-system-diagram">System Diagram</a></h2>
                            <small class="authorship">5 days ago  &bull;
                                <a class="gray-link" href="/project/6050/log/22768#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22768"><p>This is the diagram of my plan to improve the worldwide robot situation:</p><p><img src="https://cdn.hackaday.io/images/7679251439549321683.jpg"></p><p>I couldn&apos;t find a napkin, so instead I sketched it on a block of paper. Anyways, there are three &quot;input&quot; components. First are the detailed build instructions for the robot, that account for most of the hurdles and traps waiting for a beginner roboticist. I&apos;m working on them at <a href="http://tote.rtfd.org">http://tote.rtfd.org</a> and I keep improving them. Then there are the example experiments and hacks that I publish here at Hackaday.io, that are supposed to inspire and get people started. And finally we also need a source of affordable parts, that part is mostly covered by China, but on our side I need to test and document them too. The expected results are also three-fold. First, we will see an increase in people who want to work on robots professionally and make it their career choice. Second, if enough people are experimenting with this, there are bound to pop up some discoveries on how to build use those robots. Finally, part of the energy will come back and improve the project itself, making it even more effective at those goals.</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    <a href="?page=1" class="grey-gold-button prev-button ">Previous</a>
                    
                    
                    <a href="?page=3" class="grey-gold-button next-button ">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '5ze9dDWT-DCPgvFqKwgTqj6MRpj8CcH9fk10';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>