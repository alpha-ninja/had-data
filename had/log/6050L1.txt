<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Tote, affordable spider robot &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6050%2Flogs%3Fpage%3D1">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6050-tote-affordable-spider-robot">Tote, affordable spider robot</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Accelerating research and development of walking robots by making it simple and affordable.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/35249-radomir-dopieralski" title="Visit Profile">Radomir Dopieralski</a><span>&bull;</span>
                
                3 months ago<span>&bull;</span><a href="/project/6050#discussion-list" title="See Comments">14 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6050-tote-affordable-spider-robot">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6050/logs/sort/newest">Newest</option>
                    <option value="/project/6050/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6050/log/18736-hacking-on-tote">Hacking on Tote</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/18736#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18736"><p>Since Tote evolved from <a href="https://hackaday.io/project/3300-kubik-quadruped-robot">µKubik</a>, I put all updates about it there. But now that it is pretty much ready, I'm going to do some experimenting and extending and hacking on it, and I think it makes sense to have a separate project page for that, and leave the Python-powered µKubik alone.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/18738-different-power-sources">Different Power Sources</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/18738#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18738"><p>Power source is a hard problem for any walking or flying robots. Unlike the robots that roll on wheels (or tracks), walkers have to carry its own weight, and the battery can be easily the heaviest part of the robot. They also tend to draw quite a lot of current for their many actuators, so that further limits the choices.</p><p>For the base Tote, I went with a single-cell LiPo battery, mostly because they have the best weight-to-power ratio, and they are relatively easy to get, either from hobby model shops, from electronics shops, or from discarded cellphones, electric toothbrushes, etc. but there are other possibilities.</p><p><strong>Alkaline batteries</strong> are well known by the robot experts as absolutely the crappiest batteries you could use for your robot. Not only they are heavy, but also the current you can draw from them is almost nothing, and they will discharge pretty quickly, after which you can simply throw them away. So can Tote be powered with alkaline batteries? Let's find out!</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/SZiQHDCJas0" frameborder="0" allowfullscreen=""></iframe><p>As you can see, you can, but not for very long. But it's nice to see that Tote can actually lift them. That means that I could probably swap them for some <strong>NiMH</strong> or <strong>NiCd</strong> rechargeable batteries, and it would be all good. Let's see!</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/7EXs-lPbF28" frameborder="0" allowfullscreen=""></iframe><p>That actually went pretty well! Apart from some weight-shifting problems, I would probably need to find a better way of attaching them. Also, using AAA cells instead of AA would improve the weight, but unfortunately I don't have any AAA rechargeable batteries on me at the moment. Finally, a <strong>LiPo</strong> battery salvaged from a broken power bank, for comparison.</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/2oY1tgPdmVQ" frameborder="0" allowfullscreen=""></iframe><p>That huge battery should keep it going whole day.</p><p>Now, let's look at some more advanced hack. For an experiment with force-sensing servos, that I will describe separately at some point, I needed the voltage given to the servos to be constant, so that I would get consistent readings. The obvious solution is to add a switching voltage regulator (an <strong>UBEC</strong>), and I actually thought about that when designing Tote's printed circuit board, so there is a place for it:<br></p><p><img src="https://cdn.hackaday.io/images/7729521433080757411.jpg"></p><p>It's conveniently located just after the power switch and the voltage-monitoring circuit, so that those two will still work correctly. One problem that I had is that this regulator needs higher voltage to regulate it <em>down </em><span></span>to the voltage desired, so I needed to use a battery with higher voltage. So I used a 2S <strong>LiFePo4 </strong>battery here. What is that? They are all the rage these days among the power flashlight geeks. They are similar to LiPo batteries, except they are much stabler both chemically and electrically, giving pretty good 3.3V voltage and not exploding if you as much as look at them funny. Unfortunately, you need a special charger for them -- the LiPo charging modules are no good.</p><p>Of course, for experiments on your desktop, you can always just plug the robot into a bench power supply, and have it drag a cable behind. It's actually more convenient than having to recharge or swap batteries all the time. Unfortunately you can't simply power this robot from your computer's USB. It needs way more power than the 500mA the USB standard specifies.</p><p>That concludes my experiments with power sources. As you can see, you have a lot of choices.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/18992-proprioception-on-the-cheap">Proprioception on the Cheap</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/18992#discussion-list">
                                    7 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18992"><p>Remember that time when you sat on your leg for some time, and it got numb, and when you got up, it felt all wooden and walking was like walking on stilts? That's how most walking robots feel. What happened is your nerves got squished and blocked a little, and you lost your <a href="https://en.wikipedia.org/wiki/Proprioception">sense of proprioception</a> -- the position and forces of your limbs. Now you know why robots that don't have force and position sensors on them have such a hard time walking!</p><p>What if we could add this sense to our robot? It would still be blind and deaf, but at least it would have a sense of self. It could feel its way around, knowing if a leg is standing on the floor or floating in the air, knowing if there is something blocking its movement. If we got smart with programming, we could even make it "obedient" and go in the direction you push it, just like this robot:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/AMVO6rI5mL4" frameborder="0" allowfullscreen=""></iframe><p>OK, well, maybe not as well. After all, we have limited budget and time. Plus programming the algorithm that calculates the overall force from the feedback from all the joint could be a challenge...</p><p>But at the minimum we could make our robot stop when it arrives at the edge of the table and tries to put one of its legs in the abyss beyond it. Or when we pick it up.</p><p>So how do we do it? We could attach additional sensors to the legs -- encoders for the position and pressure sensors for touch and force. I checked the parts -- they are either expensive or problematic to mount on such a robot. But wait, doesn't the hobby servo already know its position? Why not use that?</p><p>The first approach was to use an additional wire added to the servo's potentiometer to read its position. I used this <a href="http://letsmakerobots.com/content/sensing-your-servos-position">excellent guide on modifying the servo</a>. It worked. Kinda. But not as well as I hoped. The problem is that to deduce what force is applied on the leg, I need to calculate the difference between the desired position of the servo and the actual position. This difference is going to be small, because the servo's electronics are working hard to correct it. Turns out that they are smaller than the noise, even if I add filtering capacitors and software filters. Oh well.</p><p>Then I realized that the servo's electronics is actually already calculating the force, for its own purposes. Can I somehow plug into that? What if instead of reading the pot's position, I would simply read the voltage that the servo is applying to its motor? Turns out that this works quite well, at least with the SG90 servos that I have. Here's an experiment that I performed to test a "compliant motion" servo:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/Ms8yTKYebaI" frameborder="0" allowfullscreen=""></iframe><p>I soldered an additional wire to the servo's motor, like this:<br></p><p><img src="https://cdn.hackaday.io/images/2507231433409447350.jpg"></p>I also had to make the hole in the cover a little bit larger, to fit the extra wire:<p><img src="https://cdn.hackaday.io/images/6186631433409502496.jpg"></p>Now, just connect the extra wire to one of the free analog pins on the Pro Mini:<p><img src="https://cdn.hackaday.io/images/407621433409552947.jpg"></p>As you can see, the robot also uses a voltage regulator that I described in <a href="https://hackaday.io/project/6050-tote-affordable-spider-robot/log/18738-different-power-sources">the previous log</a>. That's because I need the voltage readings from the motors to be consistent, and not depend on how much juice is left in the battery.<p>Now just a simple addition to the walking algorithm. Every time you put your leg down, wait for the servo to get there, and then read the force from it. If the force is too small, stop. I also made all the other legs move up slightly just before the reading, to shift the weight more to the leg that we are interested in. The result is not very pretty yet, but I'm sure I can tweak it to look better:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/Q08YaEeYNSg" frameborder="0" allowfullscreen=""></iframe><p>With some tricks, I might even be able to make it walk on uneven terrain without additional endstop switches at the ends of the legs.</p><h1>Update 2015-06-10:</h1><p>A friend of mine ran some of those servos through an oscilloscope, to see how the voltage on both of the motor wires looks like. Here's the servo going one way, stopping for a moment, and then going the other way:</p><p><img src="https://cdn.hackaday.io/images/6523361433962373953.png"></p><p>You can see that when stopped, the motor floats at about 2.3V, and goes up to 5.7V or almost to 0V when moving. You can also see that there is quite a lot of oscillating at the end, when it overshoots and corrects:</p><p><img src="https://cdn.hackaday.io/images/1875031433962508897.png"></p><p>An interesting thing happens when you reverse the direction without stopping:</p><p><img src="https://cdn.hackaday.io/images/6556091433962558341.png"></p><p>One of the motor leads gets high voltage long before the other gets low. Since what drives the motor is the difference, this gives the motor some time to stop and reverse, before applying the full force.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/19236-dirty-pcbs-are-dirty">Dirty PCBs are dirty</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/19236#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19236"><p>For everyone who have ordered the PCB for Tote from <a href="http://dirtypcbs.com/view.php?share=6918&amp;accesskey=97f6a684899c11fcc50da07808869f5d">Dirty PCBs</a> just a quick note. Remember, that it's the cut-throat cheap prototyping boards, and mistakes do happen. They are often simple to work around, but do test your boards for shorts before soldering anything or, especially, connecting a battery to the soldered board. I just had another batch arrive, and there is a small mistake on them:</p><p><img src="https://cdn.hackaday.io/images/9912351433841942696.jpg"></p><p>The pads for the optional SMD capacitor are covered in soldermask, so you have to scratch them out before soldering the capacitor, if you want to have battery voltage monitoring, that is.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/19284-using-arduino-pro-micro">Using Arduino Pro Micro</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/19284#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19284"><p>You can use Arduino Nano instead of the Pro Mini in Tote, if you prefer to have that USB socket available. Apart from the fact that the Nano has the USB2TTL build into it, there are no differences, so it should all work. However, I don't have a spare Nano around, so I haven't actually tested it. Caveats may appear.</p><p>Such caveats appeared when I decided to test it with a Pro Micro instead. Pro Micro is the miniaturized (both in size and price) version of Arduino Leonardo. It uses ATMega32u and has the USB support right on the chip, which makes it easy to program it as a keyboard or mouse. It also has a form factor similar to the Pro Mini, so let's see if we can use it.</p><p>First of all, <strong>never plug your Pro Micro to the USB while it's in the robot. </strong>The power lines are connected, and the servos draw so much current, that it will instantly fry the on-board regulator on the Pro Micro. That means, that you have to go with the socket version of the PCB, not solder the module directly. <strong>I am serious here, I fried one poor Pro Micro this way.</strong></p><p>Second, the pin numbers and interrupts are different. You will need to edit <em>servos.ino </em>and change the whole right side of the robot, from <em>"</em><em>12, 11, 10, </em><em>14, 15, 16" </em>to <em>"</em><em>14, 16, 10, </em><em>A0, A1, A2"</em> so that it corresponds with the pin numbers that are in those places. The LED pin, that used to be <em>13</em> on the Pro Mini is <em>14</em> on the Pro Micro, and shifted by one in its position -- we can't really do anything about it, the LED will shine all the time due to the servo PWM signal that it gets.<span></span></p><p>The pin interrupts are different too, so you will need to edit <em>ir.ino.</em> However, changing the interrupt number from 0 to 1 didn't seem to make the IR sensor work again, so there might be some more magic involved, or there is a bug in the IRLremote library that I'm using.</p><p><img src="https://cdn.hackaday.io/images/5507651433942197303.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/19645-remote-control-with-esp8266-and-micropython">Remote control with ESP8266 and Micropython</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/19645#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19645"><p>Since some time I was planning to write a log about how to extend Tote with additional boards. I was planning to show examples of connecting the Raspberry Pi, Teensy 3.1, ESP8266 and anything else I could find, all running different kinds of Python. That would also let me score more points in the "<a href="http://hackaday.com/2015/06/08/a-mountain-of-prizes-for-projects-using-these-parts/">mountain of prizes</a>" as those boards use chips from all kinds of manufacturers, and I could claim then that Tote "uses" them. But reality as always interferes.</p><p>Raspberry Pi now requires at least 3GB SD card for its system image, and turns out I don't have any that big around.</p><p>The Micropython port for Teensy 3.1 doesn't yet support UART (even though the module with all the functions is there, they just do nothing).</p><p>The Micropython port for ESP8266 doesn't have enough room for my Python code for controlling the robot.</p><p>So I had to settle down to just showing how to do remote control over something else than a TV remote. I'm still using the ESP8266 with Micropython on it, except instead of controlling the motions of the whole robot with it, as I planned, I'm just passing the keypresses from the computer, and the Arduino still takes care of moving the legs. Oh well. It still took me several hours of debugging to get working.</p><p>Let's start with a very simple thing -- controlling the robot over a serial cable, connected directly to an USB2TTL module stuck in your computer's USB port. You need three wires: GND, TX and RX. You connect them to the FTDI header on the Pro Mini, and to the USB2TTL in following way:</p><ul><li>GND ↔ GND</li><li>RX ↔ TX</li><li>TX ↔ RX</li></ul><p>By the way, this is also an excellent way of debugging the robot -- you can print stuff to the serial console and verify that the program does what you think it should. Anyways, you will need some extra code on your Pro Mini too. There are two ways to go about this.</p><p>You can just have a very simple <a href="https://bitbucket.org/thesheep/ukubik/src/tip/ukubik/">servo controller</a> on the Arduino side, and feed it servo positions every frame from the <a href="https://bitbucket.org/thesheep/ukubik/src/tip/creep.py">Python code for the gaits</a>. That's exactly what the <a data-mention-project-id="3300" href="/project/3300">#µKubik quadruped robot</a> does, except instead of a serial cable it uses serial over Bluetooth. But the code is the same. This gives you a lot of control on the Python side.</p><p>The other way is to leave all the <a href="https://bitbucket.org/thesheep/tote/src/tip/start/">Arduino code from original Tote</a>, but replace the TV remote part with <a href="https://bitbucket.org/thesheep/tote/src/460f15fa2da489125bb3ade9d76b81fb3b1b60ad/start/serial.ino?at=serial-control">code that simply reads the key presses from the serial</a>. That's the route we are going to take, and it looks like this:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/Da69xJNugLQ" frameborder="0" allowfullscreen=""></iframe><p>Now, let's replace that cable with something a little bit more modern. ESP8266 is all the rage these days, and there is a highly experimental port of Micropython for it, so why not? Those ESP-01 boards are not too useful anyways, because they have hardly any pins broken out, but they are enough for our purpose, as the RX and TX pins are there. I began by making a simple rig for programming them:</p><p><img src="https://cdn.hackaday.io/images/9500271434528311364.jpg"></p><p>Then I followed the excellent <a href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266">Adafruit tutorial on flashing Micropython to ESP8266</a> and got a working console. Yay! Now, diving into <a href="https://github.com/micropython/micropython/tree/master/docs/library">recently added documentation</a>, I figured out how to write a simple "repeater" server:</p><pre class="hljs python"><span class="hljs-keyword">import</span> esp
<span class="hljs-keyword">import</span> sys

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recv</span><span class="hljs-params">(socket, data)</span>:</span>
    sys.stdout.write(data)

socket = esp.socket()
socket.onconnect(<span class="hljs-keyword">lambda</span> s: s.onrecv(recv))
socket.bind((<span class="hljs-string">'0.0.0.0'</span>, <span class="hljs-number">2323</span>))
socket.listen(<span class="hljs-number">1</span>)</pre><p>It just prints on the console anything it gets on port 2323. I saved that as <em>esp8266/scripts/main</em>.<em>py</em> and recompiled -- the ESP9266 port of Micropython doesn't yet have filesystem support, so you have to add all files to the firmware itself. Then restart, get to the console with <em>USB2TTL</em>, and make it connect to the WiFi:</p><pre class="hljs python"><span class="hljs-keyword">import</span> network
network.connect(<span class="hljs-string">'your ssid'</span>, <span class="hljs-string">'your password'</span>)</pre>That gets remembered, so you don't have to do it every time. Quick test of the server using <em>netcat</em>:<pre class="hljs ruby"><span class="hljs-variable">$ </span>nc <span class="hljs-number">192.168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span> <span class="hljs-number">2323</span>
xxx
h
ddddd
x
</pre>And we are finished on this side. Or so I thought. But we will get to that.<p> Now, for the robot side, I flashed that "serial control" version of the Tote code to the Pro Mini, and made a simple connector for the ESP8266 using some female headers, two-sided tape and a bunch of wires:</p><p><img src="https://cdn.hackaday.io/images/6642121434528945481.jpg"></p><p>It fits nicely on the <em>FTDI</em> connector on top of the robot:</p><p><img src="https://cdn.hackaday.io/images/2532981434529049651.jpg"></p><p>Now let's test it. I made it so that after powering on, the robot does nothing and waits for "xx" on the serial -- that's because many boards will print random stuff to serial while booting, and you don't want that to be interpreted as commands. So I switch the robot on, send "xx" and... nothing. What?</p><p>Fast forward four hours. I'm up to my ears in debugging. Tried 3 different ESP8266 boards and 3 different Pro Minis, debugged it using <em>SoftwareSerial</em> and by connecting the RX pin to the ESP and the TX one to the <em>USB2TTL</em>, one exceptionally helpful fellow on the <em>#arduino</em> IRC channel even wrote a serial-forwarding code for me in low-level AVR C. The outcome? Both the Pro Mini and ESP8266 work perfectly fine when connected to the computer through <em>USB2TTL</em>. But as soon as you connect them to each other and try to transmit serial data at 115200 baud rate, half the data gets corrupted. That's over a 4mm long wire. Adding pullups, pulldowns, capacitors, etc. doesn't help. I sat over this until the small hours of the night, but didn't figure out a solution. I guess I will need to start saving for an osciloscpe.</p><p>After a night's sleep, I went back to that Micropython code, grepped for "115200", and changed it to "9600", recompiled, flashed, changed the speed on the Arduino side and what do you know, it works!</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/4HnUbrXEJcQ" frameborder="0" allowfullscreen=""></iframe><p>Next I will try to get that SD card for the RPI and show you the more low-level control. Who knows, maybe by this time the picam also arrives, and we can have some OpenCV fun.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/19897-failure-hc-sr04-distance-sensor">Failure: HC-SR04 Distance Sensor</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/19897#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19897"><p>What is a robot without sensors? Just a remote-controlled toy! It's time to add some external sensors to Tote.</p><p>If you looked at the <a href="http://tote.readthedocs.org/en/latest/_images/pcb2a.png">PCB</a>, you probably noticed the four pins broken out at the bottom. Yes, they match the pinout of a cheap HC-SR04 ultrasonic range finder. It should be a great way to add some obstacle avoidance or person following capabilities to Tote, just like its older brother µKubik has.</p><p><br></p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/qmuZv3mmvRI" frameborder="0" allowfullscreen=""></iframe><p>So let's do it. The trigger pin is connected to pin 3 on the Arduino, and the echo is on pin 13 -- yes, I ran out of pins and had to reuse the LED pin for this. As a side effect, the LED blinks every time we read the distance. A quick sketch to test the sensor:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> TRIG_PIN 3</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> ECHO_PIN 13</span>


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>{
  Serial.begin(<span class="hljs-number">115200</span>);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> duration, distance;

  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(<span class="hljs-number">2</span>);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(<span class="hljs-number">10</span>);
  digitalWrite(TRIG_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH);
  distance = duration / <span class="hljs-number">58.2</span>;
  Serial.print(distance);
  Serial.println(<span class="hljs-string">" cm"</span>);
  delay(<span class="hljs-number">500</span>);
}
</pre>And lo and behold, proper readings:<iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/_Bw_2RLY4qY" frameborder="0" allowfullscreen=""></iframe><p>Yay, so that's it, right? Now just add <a href="https://bitbucket.org/thesheep/tote/src/eda3cc49cbb6e0774d22d0e6b12d5ccc45cfd3c9/start/ping.ino?at=ping">some basic logic to the code</a> to make the robot stop when there is an obstacle in front, and we are ready to go, right? Wrong.</p><p>For some reason, the robot stop immediately after the first step. What's happening?</p><p>OK, let's connect the serial and see. The distance readings are all 0. Why? Disconnect the battery, connect the Pro Mini to the USB and look again. Readings are all connect. Disconnect the USB power and run it from battery -- 0 again. Argh.</p><p>Wait a minute. The Pro Mini actually has VCC at 5V while it's being powered from the USB cable, and 3.3V when it runs from the battery... What were the power requirements of that HC-SR04 sensor again? Where is the <a href="http://www.elecfreaks.com/store/download/HC-SR04.pdf">datasheet</a>...</p><p>Right, working voltage 5V. Sigh. Of curse I did check that before when I was designing the board, but back then I still wanted to use a 5V Pro Mini, and a voltage regulator. I later switched to 3.3V and completely forgot about the sensor. So what can be done?</p><p>Well, looking at what I have lying around I took a 5V Pro Mini, a 2S LiPo battery and a 5V voltage regulator, and quickly replaced Tote's guts. <strong>Warning</strong>: the 5V Pro Mini doesn't have the RAW pin separated from the VCC pin like the 3.3V version does, so don't connect it to the USB2TTL while it's in the robot -- the power draw will quickly fry the power regulator in Pro Mini. You have to remove it for programming.</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/QjZ5rQOpvEw" frameborder="0" allowfullscreen=""></iframe><p>You can see that now it kinda works, except for random times when the sensor returns completely weird values. Maybe the sensor is broken? Replacing the sensor didn't help much. Taking three readings in a quick succession and taking maximum of them didn't help either -- it seems, that the sensor just has some moments when the readings are consistently bad. I can't think of a solution.</p><p>While this is a failure, I thought that I will publish it anyways, as even the failures give us something to learn from -- often even more than the successes. And speaking of failures, remember how I promised to connect a Raspberry Pi to Tote? That's too cancelled for the moment -- my A+ RPI suddenly stopped working, the power LED won't shine, the activity LED shines weakly when powered from USB, and not at all when powered through the pins. I guess I have a streak of bad luck. Oh well.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/20019-pcb-redesign">PCB Redesign</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/20019#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20019"><p>After the recent failures and after using the Tote's PCB in a couple of different projects, I decided that some changes are needed to the design. Here is <a href="https://bitbucket.org/thesheep/tote/src/tip/fritzing/pcb3.fzz">the new PCB</a>:</p><p><img src="https://cdn.hackaday.io/images/6927631435323642206.png"></p><p>There are several changes compared to the previous one:</p><ul><li>a nice logo on the silkscreen,</li><li>the board is square again,</li><li>removed the additional holes,</li><li>the servo connectors are moved slightly, to make more room for screws,</li><li>battery connector moved to the front edge of the board,</li><li>removed the HC-SR04 sensor header, since it doesn't work reliably,</li><li>reordered the IR sensor pins to match the pinouts of my sensors,</li><li>added a header for connecting a piezo speaker, for making noises,</li><li>added pins for A6 and A7 gpios of the Pro Mini, for both 3.3V and 5V versions,</li><li>you no longer need to add a jumper, that place has a connection by default, and you can cut the trace if you want to connect a voltage regulator,</li><li>there is another trace you can cut to be able to disconnect power to the servos, but still have the Pro Mini and all the sensors powered.</li></ul><p>Don't worry, the old board will not stop working, and I will still support it. The changes are not that big anyways -- I made sure that I don't change any pin numbers or anything similar, which would make the software incompatible.</p><p>I haven't ordered the new boards yet, so there is no link for ordering them. I will wait a couple more days for ideas for more improvements, and then order them.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/20241-schematics">Schematics</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/20241#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20241"><p>I've been asked to provide schematics of the PCB. I must admit, that I neglected that part a little, mostly doing all modifications and connections directly in the PCB view, but now I cleaned up the schematic view a little better.</p><p>Here's the schematic for PCB2 (the ones I've been giving out and which you can order from dirtypcbs):</p><p><img src="https://cdn.hackaday.io/images/4884381435678665774.png"></p><p>And here is the reworked PCB3, which will be available soon (I need to order and test it first):</p><p><img src="https://cdn.hackaday.io/images/5357061435679907164.png"></p><p>As you can see, there isn't really much to it, it's mostly connections for all the servos and the small voltage divider for battery monitoring.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6050/log/20344-using-teensy-31">Using Teensy 3.1</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6050/log/20344#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20344"><p>One of the topics I intend to cover in those logs is how to extend Tote with various boards and modules. I've already had one log on how to use Pro Micro instead of Pro Mini, and one on adding an ESP8266 board with Micropython. Now it's time for the Teensy 3.1.</p><p>The Teensy 3.1 is an ARM board very similar in shape to the Pro Mini, but with much more computing power and lots of pins, both digital and analog. It's really a great choice if you have outgrown the Pro Mini. You can program it just like Arduino, using the Teensyduino IDE. So I figured my code should just work, right? Wrong.</p><p>It actually took me almost 2 weeks to get my code to work. Here's the story.</p><p>Connecting the Teensy 3.1 is a little bit tricky. Although the pin pitch is right, you can't just plug it into the Pro Mini socket on the Tote, because the GND pin has been moved to the other side of the board. Sigh. That's fine, though, you can just use short wires, or, if you have a socket, a set of extra-long pin headers and some Dupont cables:<br></p><p><img src="https://cdn.hackaday.io/images/5343941435843885374.jpg"></p><p>Then it simply plugs into the Tote socket. Looks a little bit weird, but should work just fine:</p><p><img src="https://cdn.hackaday.io/images/5006831435843968794.jpg"></p>Now just adjust the pin numbers in <a href="https://bitbucket.org/thesheep/tote/src/806a193584f9e4653414de2dd4f55ba884f0502d/start/servos.ino?at=teensy31#cl-9">servos.ino</a>, remove the IR code (it's based on AVR interrupts, so probably won't work on Teensy), and we are ready to go. Another super-easy conversion.<p>Except that it doesn't work. As soon as the robot is witched on, it gets an attack of epilepsy, twitching its legs randomly. Why? <strong>Why?</strong></p><p>Now, the "fun" part of the project started. I began with the absolute low-level, checking first if the Servo library example works. It worked correctly. Then I proceeded to debug the <em>servos.ino</em> code, making sure that each servo really moves to the angle it has been told to move to. Everything seems to be in order. Hmph.</p><p>That means that the error must be somewhere in the inverse kinematics code. I was afraid of that. But the code works perfectly fine on the Pro Mini and other AVR-based Arduinos. So what could be wrong?</p><p>Someone told me that the <em>abs() </em>funtion may be not defined for floating point numbers, so I replaced it with a call to <em>max(a, -a)</em><span class="redactor-invisible-space">. No joy. Someone else told me that the AVR doesn't really have "double" type, and that it is in fact just normal "float". So I tried changing all types to "float". Nope. Then changing all the trigonometric functions to their float versions. No. Verifying all loops for buffer overruns and adding sentinel conditions checking for correct ranges. Still nothing.</span></p><p><span class="redactor-invisible-space">Finally, the time has come to disconnect the Teensy 3.1 from Tote and do some serious debugging over the serial. After placing a lot of strategically planned print statements, a pattern started to emerge. It seemed that sometimes a value would suddenly be multiplied by 255. How come? Add more print statement to also display the constants and tables I used, and I found the problem.</span></p><p><span class="redactor-invisible-space">Turns out that the <a href="http://blog.cdleary.com/2012/11/arm-chars-are-unsigned-by-default/">char type is unsigned by default on ARM</a>. And I had some tables with just values like 1 and -1 for tuning various parameters. And of course all those -1s have become 255s, and the robot went crazy.</span></p><p><span class="redactor-invisible-space">After replacing the chars with ints, everything went more or less smoothly:</span></p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/7N34Yd2vMS0" frameborder="0" allowfullscreen=""></iframe><p>Remember kids, don't write "char" when you mean "int8"!</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'qf6wpIcS-A_paX6kMETRD4j4FI4iCSyJGJLs';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>