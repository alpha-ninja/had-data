<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; SPI and TTL Serial VGA Graphics Card - VGATonic &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6309%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic">SPI and TTL Serial VGA Graphics Card - VGATonic</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">640x480 Color VGA Video Card for Microcontrollers and Single Board Computers</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/18962-pk" title="Visit Profile">PK</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6309#discussion-list" title="See Comments">22 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6309-spi-and-ttl-serial-vga-graphics-card-vgatonic">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6309/logs/sort/newest">Newest</option>
                    <option value="/project/6309/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6309/log/19534-hello-again-world-lets-vga-everything">Hello Again, World.  Let&#39;s VGA Everything.</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/19534#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19534"><p>I'm back for round 2 after VGATonic version 1.0.</p><p>I finally got the motivation back to complete the framebuffer driver when I picked up a Raspberry Pi 2 B.  Here is <a href="https://hackaday.io/project/1943-vgatonic">last year's effort</a> (and, ahem, this month's accomplishment) running a game I think you may have seen before:</p><iframe src="https://www.youtube-nocookie.com/embed/qo9iJGTwuEo" allowfullscreen="allowfullscreen" frameborder="0" height="360" width="640"></iframe><p>There's lots of work still to go, and we're going to move in an interesting direction at first: getting it to run on 'slower' hardware.  Not every board can spit out reliable 62.5 MHz SPI, so it seems like aiming lower is better than higher, in this case!</p><p>Follow along and maybe we'll hook VGAtonic up to some <em>really </em>esoteric stuff by the end of Hackaday Prize 2015?<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/19535-building-something-that-matters-andor-selling-a-product">Building Something That Matters... and/or Selling a Product</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/19535#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19535"><p>Let's discuss this year's prompt: Building something that matters.  And, yes, the secondary prompt:<em> is this a useful product</em>?<br><strong></strong></p><p><strong>Is This Something That <em>Matters</em>?</strong><br></p><p>Does an open source <strong><em>graphics card</em></strong> matter?</p><p>Maybe, I'm not a judge - but I'll try to make the case with a quote - as Vince Vaughn's Character Trent famously described Jon Favreau's character Mike in <em>Swingers</em>, "This is the guy behind the guy behind the guy."</p><p>The card itself probably doesn't matter much on its own - but, hey, if it saves someone some time developing something bigger, or getting them started on a GPU project, or easily adding graphics to something larger... it matters.  Everything is documented - from the drivers on the platform, to the firmware on the CPLD and the Microcontroller, to the protocol itself - then even to the hardware level if you choose to build a board.  That's worth something, and if time is fungible, it's worth freeing up someone else from the hours I spent - just as I didn't have to reinvent VGA to get VGATonic working.</p><p>So if you see this post and need easy and cheap graphics with a cheap and easy connector and protocol ubiquitous on cheap hardware, <em>follow </em>and <a href="https://github.com/dqydj/VGAtonic">click through to the GitHub link</a> to see what we've got.  </p><p>And, yeah, it works fine today in this limited release... if you want to integrate something quickly:</p><p><img src="https://cdn.hackaday.io/images/8747411434347235040.jpg"></p>
<p><strong>And the Product Part?</strong></p><p>Well, that's the easy one.  Since this year's logs will likely concentrate more on firmware, software, and platform support (and perhaps new protocols?) than board revisions you'll see the most improvement in these arenas - the "<strong>productization areas</strong>".  Don't rule out hardware changes, though - we'll discuss that if/when it comes up.  </p><p>Sure, forcing a <em>processor </em>to do graphics may seem like a bit of a step backwards and a relic of the 80s, but there are places where it makes sense to plug something like VGATonic in... you know, on hardware that doesn't <em>need </em>to play 3D games.</p><p>But an &lt; $25 graphics card which can drive VGA (and maybe-even-NTSC) monitors?  That's a product right there.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/19781-why-target-lower-specs">Why Target Lower Specs?</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/19781#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19781"><p>There was a bit of interest in some of the project's goals for this year, but it really boiled down to this question:</p><p><strong><br></strong></p><p><strong>"If you're supporting 640x480x8bpp, why would you want to have anything <em>worse</em>?".</strong></p><p>The reason, as always, is <em>resource constraints</em>.</p><p>I was able to <a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/19534-hello-again-world-lets-vga-everything">demo a Raspberry Pi 2 playing Doom over SPI</a>, but that part has <em>excellent</em> SPI speeds - I can reliably blast 62.5 MHz down SPI with only rare hiccups.  This makes for good Doom-in-native-resolution demos, but isn't realistic for every platform.</p><p>Lots of platforms are more modestly spec'd: the Arduino Uno in your drawer probably can do 8 MHz SPI (and where are you going to store 307kB of VRam?  You'd have something hacked up like my <a target="_blank" href="http://dqydj.net/how-to-produce-640x480-vga-color-video-from-an-arduino/">640x480 Arduino demo</a> project.)  If you had to update the full screen every time (say, a flashing light) you'd get a slideshow at roughly 3.26 FPS.  Maybe that's enough for many purposes, but many (most?) of you would certainly be itching for more speed.  Similar math applies to other parts: take the speed of SPI in MHz and divide by 2.5 for the 'full frame update' FPS speed.</p><p>Okay, sure, you don't always update the full frame - that's why we'll (try to) add some basic hardware acceleration (the most rudimentary acceleration is already in the firmware - just stop writing the frame and you can reset to 0,0.  If you're only updating the top left pixel you can get 1,000,000 updates out of the Arduino!).</p><p><strong><em>Realistically</em></strong>, though, we should add more options.  320x240 requires 1/4 the writes - suddenly the Arduino is doing a respectable 13 FPS over SPI.  160x240 and 80x60 more still.</p><p>Bit depth works in a similar way.  While 8 bit color requires the whole SPI byte, B&amp;W, for example, can pack 8 pixels into the same byte!</p><p>I'll surely expand on this if I can actually fit this into <em>our own</em> resource constraint - my insistence on the 144 macrocell CPLD.  (I enjoy the challenge, haha).  But here's the math on one planned range:</p><ul><li>640x480x8bpp = 2,457,600 bits per full screen</li><li>--- all the way to our most modest setting ---</li><li>80x60x1bpp (B&amp;W) = 4800 bits per screen</li></ul><p>Now you see the real trick - the lower settings are acceptable even over the serial port.  Interesting, huh?</p><p><em>Also, for those interested in graphics, <a href="http://hackaday.com/2015/06/19/hackaday-prize-entry-homer-a-2d-gpu-for-microcontrollers/">follow and skull HOMER</a>, another graphics entry in this year's contest by <a href="https://hackaday.io/monnoliv">monnoliv</a>!  I'll be following along with the progress intently</em>, <em>and you should too.</em><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20001-hardware-accelerated-lower-resolutions-working">Hardware Accelerated Lower Resolutions: Working!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20001#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20001"><p>I've got some good after-midnight Pacific Time news for you: <em>hardware acceleration of lower resolutions is working</em>!!!  (Macrocell count: 137/144.  Pushing it...)</p><p>This is a great result for slower-speed parts, since you can still get a usable resolution out of any VGA monitor you've got without forcing a "slide show" through 640x480 resolution.</p><p>Here are the stats for 8 bit color; bpS is 'bits per Screen'</p><ul><li>640x480: 2,457,600 bpS</li><li>320x240: 614,400 bpS</li><li>160x120: 153,600 bpS</li><li>80x60: 38,400 bpS</li></ul><p>So, if you only had 2 MHz SPI on your part, you were staring at .8 frames per second... but if you drop down to the hardware accelerated 160x120 you can now support 13!</p><p>Here's a quick snap of a desktop at 80*60, for the laughs and the proof (bonus: can you identify the single board computer at this puny resolution?  I'll release a new Linux framebuffer driver drop after the VHDL is good!):</p><p><img src="https://cdn.hackaday.io/images/3700391435303993894.png"></p><p>Pretty funny, eh?  Well... I thought it was funny, anyway.  </p><p>(Side note: everything is working beutifully in Linux; I can do my resolutions changes with 'fbset -fb /dev/&lt;mine&gt; -xres xxx -yres yyy' just fine.  Props, too, for xserver dealing with 80x60...)<br></p><p>And the theory:</p><p>Rows are easy; for each drop in resolution, double the number of rows we 'loiter on'.</p><pre>480 Rows = 1 Clock
240 Rows = 2 Clock
120 Rows = 4 Clocks
60 Rows  = 8 Clocks</pre>Don't you love powers of two?<p>Columns are a little trickier - I had to find a way to skip ahead, but the 'loitering' part isn't that bad - for each drop in resolution, I shift the LSB.  I'll write out the bits so you can see the pattern:</p><pre>640 = 0000 0010 1000 0000
320 = 0000 0001 0100 0000
160 = 0000 0000 1010 0000
80  = 0000 0000 0101 0000</pre>That beautiful shift is what allows us to force VGATonic to sit on a pixel fo a few clocks before shifting.  I'll upload the VHDL soon, hopefully with color depth features added.<p>You know, if I can fit them into 7 macrocells.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20133-hardware-accelerated-lower-bit-depths-working">Hardware Accelerated Lower Bit Depths: Working!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20133#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20133"><p>At least I'm publishing this post at a reasonable hour - I'm happy to announce I've got lower bit depth colors working!</p><p><a href="https://github.com/dqydj/VGAtonic">If you just want to see the code, I posted it on Github.</a></p><p>Let's dive in for the rest of you; here's VGAtonic being meta and browsing on its own page in 640x480 at 1 bit color (translation: Black and White.  If you're just following us now, <a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/19534-hello-again-world-lets-vga-everything">we started with color</a> and we're <a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/19781-why-target-lower-specs">working backwards to support</a> slower parts):</p><p><img src="https://cdn.hackaday.io/images/7688841435517634187.png"></p><h2>Gross, Black and White?</h2><p><strong></strong>(For the record: This release also includes 4 bit color - 16 colors, and 2 bit - 4 'colors' consisting of black, white, and 2 grays)<br><strong></strong></p><p>Well, <em><strong>I'm</strong></em> excited about the Black and White anyway.</p><p>The point, with apologies to Dennis Rodman, is you can set up VGATonic "as bad as you want it to be".  </p><p><strong>If you've got fast SPI?</strong> Sure, 640x480x8bpp</p><p><strong>If you've got slow SPI, or you're bitbanging it? </strong>Well, as of the release today you can go as low as 80x60x1bpp.</p>Here are the stats; bpS is 'bits per Screen'<ul><li>640x480x8bpp: 2,457,600 bpS</li><li>640x480x4bpp: 1,228,800 bpS</li><li>640x480x2bpp: 614,400 bpS</li><li>640x480x1bpp: 307,200 bpS</li><li>...</li><li>80x60x1bpp: 4,800 bpS</li></ul><p>If you're willing to drop down to 80x60x1bpp, <em><strong>that's a 512x speedup</strong></em>.  You could bitbang at 100 kilohertz and <em>still</em> get around 21 frames per second for full screen refreshes.  The 56k modem you dialed into AOL with could do 11 and change frames per second.</p><h2>The Theory</h2><p>In the last article I talked about how we could do tricky things with our LSBs to move around the screen and sit on certain pixels, and when we wrote to VGAtonic we just skipped to those positions.</p><p>Colors, it turns out, are even easier - in a single SPI 8 bit 'transaction', you just pack more pixels in.  So, once VGAtonic 'knows' it is in a lower bit depth mode, it will start to shift pixels out of the single byte.</p><p>That means something like this:</p><pre>For Clock = "000" to "111" do this:

    Pixel &lt;- Data &gt;&gt; Clock</pre>And to unroll the loop, for B&amp;W:<pre class="hljs vbscript"><span class="hljs-keyword">If</span> Clock == <span class="hljs-number">0</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">7</span>
<span class="hljs-keyword">If</span> Clock == <span class="hljs-number">1</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">6</span>
<span class="hljs-keyword">If</span> Clock == <span class="hljs-number">2</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">5</span>
<span class="hljs-keyword">If</span> Clock == <span class="hljs-number">3</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">4</span>
<span class="hljs-keyword">If</span> Clock == <span class="hljs-number">4</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">3</span>
<span class="hljs-keyword">If</span> Clock == <span class="hljs-number">5</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">2</span>
<span class="hljs-keyword">If</span> Clock == <span class="hljs-number">6</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">1</span>
<span class="hljs-keyword">If</span> Clock == <span class="hljs-number">7</span>
  Pixel &lt;- Data (shift <span class="hljs-built_in">right</span>) <span class="hljs-number">0</span></pre><a href="https://github.com/dqydj/VGAtonic">Check it out on Github</a> to see what I did in VHDL.
<p>A Note on the Platform Change<br></p><p>I hinted at it in my last post on <a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/20001-hardware-accelerated-lower-resolutions-working">hardware assisted lower-resolutions</a>, but I switched platforms and I'm doing this current work with an Odroid C1 instead of the Raspberry Pi 2 B from the initial demo (the one I played Doom on).  The Pi has nuked 4 SD cards - so, yeah, I'll port all the new features when I'm happy with the progress, but the C1 has been reliable since I switched.</p><p>But, hey, I've now seen it working on an Intel Edison (I'll revisit it soon - I was having SPI issues), an Odroid C1, a Raspberry Pi 2 B, and various flavors of microcontrollers.  That's worth something!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20230-hardware-acceleration-working">&#34;Hardware Acceleration&#34;: Working</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20230#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20230"><p>I wanted to rush and get this checkbox checked tonight - I've got very basic 'Hardware Acceleration' working in VGATonic!</p><p>The quotes?  Just to protect me from your arguments on the definition of 'acceleration' - we literally picked fruit from the lowest possible branches on this one.  And, yes, it's a subtle feature anyway - I'll prove it not with a screenshot but with the code:</p><pre class="hljs perl">WRITE_ROW &lt;=    <span class="hljs-string">'0'</span> 				&amp; -- <span class="hljs-number">9</span>
  ( WRITE_DATA(<span class="hljs-number">7</span>) <span class="hljs-keyword">and</span> WRITE_DATA(<span class="hljs-number">6</span>) )  	 	&amp; -- <span class="hljs-number">8</span>
  ( WRITE_DATA(<span class="hljs-number">7</span>) <span class="hljs-keyword">and</span> (<span class="hljs-keyword">not</span> WRITE_DATA(<span class="hljs-number">6</span>))) 	&amp; -- <span class="hljs-number">7</span>
    <span class="hljs-string">'1'</span>                                	 	&amp; -- <span class="hljs-number">6</span><span class="hljs-string">
    '1'</span>					        &amp; -- <span class="hljs-number">5</span>
  ( WRITE_DATA(<span class="hljs-number">7</span>) <span class="hljs-keyword">xor</span> WRITE_DATA(<span class="hljs-number">6</span>) )      	&amp; -- <span class="hljs-number">4</span>
  ( WRITE_DATA(<span class="hljs-number">6</span>) )                        	&amp; -- <span class="hljs-number">3</span>
   <span class="hljs-string">"000"</span>;                                         -- <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span></pre><br><p>Catch that? (bonus if you catch the wrong math - will be fixed, but after midnight PST, haha!).</p><p>That's right - all we're doing is letting the control bit move where we are writing to the framebuffer.  With 2 bits, we can divide the screen into quarters (for tonight that was the goal: I only wanted 2 bits - if you move to 3 bits, 80x60 resolution won't divide evenly into 8s!).  This presents a very, again, subtle improvement in some cases - say, moving the mouse near the bottom of the screen.</p><p>Previously, you were blasting an entire framebuffer <strong>every screen write</strong>, even if the top of the screen was static (say... a menubar?).  That means the <em>old</em> math applied - if your bottom right pixel updated, you were doing 2.5 million transfers (for 640x480x8bpp).  At 32 MHz, say, on an Odroid C1... that's 13 frames a second.  Now you're doing 1/4 the transfers, which means y<strong>our throughput can be 52 frames per second for many refreshes</strong>.</p><p>Remember I joked about Doom <em>not</em> being a good idea at 25 frames per second?  It's a bit better at 100* - considering you're now outrunning the VGA refresh rate of 60 Hz on a Raspberry Pi refreshing 1/4 of a screen.</p><p>*(Of course, video games tend to redraw screens a bit more than your desktop or <a href="http://tvtropes.org/"></a><a href="http://tvtropes.org/">TV Tropes</a> binge).</p><p>Okay, I'll post my status report in a few minutes here.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20233-vgatonic-status-report">VGATonic Status Report</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20233#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20233"><p>I wanted to give you folks a progress report on how far I've come with the project, and what I've got planned for the next few drops.  I've made a ton of progress in the last 15 days - fueled by a ton of motivation and (<em>unhealthy</em> amounts of?) caffeine.</p><p>Here's a log of our progress.  For every instance, I've made an effort to comment on my efforts, both in entries and inside the code (I attempted to <em><strong>over</strong></em><strong></strong>comment, so please let me know if it helped.)</p><p>For many hardware decisions, I have detailed them in <a href="https://hackaday.io/project/1943-vgatonic">last year's logs</a>.  For the complete picture (video?), you may want to take a look.<br></p><p><strong>Starting Point:</strong></p><ul><li><strong></strong><a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/19534-hello-again-world-lets-vga-everything">640x480 VGA at 8 bit color</a></li><li>2.5V, 3.3V, 5V tolerant SPI</li><li>Drivers:<ul><li>Raspberry Pi 2 Model B (at 25 Frames Per Second), Linux</li><li>Arduino Uno (at 3.25 Frames Per Second), Bare Metal</li><li>Intel Edison in Arduino Mode (at 10 Frames Per Second), "Bare Metal"</li></ul></li></ul><p><strong>2015 Completed Goals:</strong></p><ul><li>Allow hardware assisted lower resolutions.  <a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/20001-hardware-accelerated-lower-resolutions-working">Complete!</a><ul><li>320x240</li><li>160x120</li><li>80x60  (Yes, XServer accepts it and launches!)</li></ul></li><li>Allow hardware assisted lower bit depths.  <a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/20133-hardware-accelerated-lower-bit-depths-working">Complete!</a><ul><li>4bpp (16 Colors VGA/CGA Standard)</li><li>2bpp (Black, Dark Grey, Light Grey, White)</li><li>1bpp (Black, White)</li></ul></li><li>Allow hardware 'acceleration' to minimize serial writes.  <a href="https://hackaday.io/project/6309-vgatonic-v2-serial-vga-graphics-card/log/20230-hardware-acceleration-working">Complete!</a></li></ul><p><strong>Hardware Support (in order completed) (<a href="https://github.com/dqydj/VGAtonic">see Github</a>):</strong></p><ul><li>Arduino Uno (and a Nano!)</li><li>Intel Edison in Arduino Mode</li><li>Raspberry Pi 2 Model B at 62.5 MHz SPI</li><li>Intel Edison at 100 kHz bitbang SPI (will revisit)</li><li>Odroid C1 at 32 MHz SPI</li></ul><p>I will post a roadmap in a few minutes.<br></p><p><strong></strong><br><strong></strong></p><p><strong></strong><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20234-vgatonic-road-map">VGATonic Road Map</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20234#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20234"><p>Most everything I've got planned involves the Atmel silicon onboard, the <a href="http://www.atmel.com/devices/attiny2313a.aspx">ATTiny 2313a</a>.</p><p>The ATTiny is the (128 Byte) brains of this setup - it has a Universal Serial Interface which I am using as SPI.  For the early demo, the first thing the board does is program the LTC6903 to get 2x VGA frequency (target: 25.175x2 MHz).  </p><p>Most of the next work will involve the ATTiny.  Here's the fun I've got planned.</p><p><strong>Tuning</strong></p><ul><li><strong></strong>LTC6903 Frequency changing/tuning.  (Hardcoded currently)<strong></strong></li></ul><p><strong>"Stretch" Goal</strong></p><ul><li><strong></strong>Asynchronous Serial/UART control(!).<ul><li>SPI is great, but asyncronous serial is universal!  If I say <a href="https://en.wikipedia.org/wiki/8-N-1">8-N-1</a>, you know exactly what I mean, right?</li></ul></li></ul><p><strong>"Super Stretch" Goal</strong></p><ul><li>World's smallest terminal emulator*! (I have 128 Bytes of RAM, plus the above needs to fit...)</li></ul><p><strong>Notes:</strong></p><ul><li>I called asynchronous serial a stretch goal when I started, but it's a real goal now.  
Consider this my promise to you.  Serial is a language that almost 
everything electronic speaks - plus it'll be worth it for the "actually,
 we've got that.." aspects of driving VGA over a serial port.  And the 
laughs.<ul><li>(But, seriously, we have a black and white 80x60 mode - 
that only needs 4800 bits for a whole update.  We can drive that with no
 problems, in theory...and it'll make a great demo that VGATonic is 
hitting its goals!)</li></ul></li><li>Maybe the smallest emulator, but since <a href="https://en.wikipedia.org/wiki/Teletype_Model_33">early teletype machines</a> just printed out characters they could do it with barely any memory.  Still - 128 Bytes.</li></ul></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20564-hardware-firmware-done">Hardware Firmware: Done</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20564#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20564"><p>I've leveled up my "rewrite this VHDL to optimize for pterms/macrocells/function block input" skills, and I think I've got the hardware working perfectly as of tonight.  I had to remove some 'nice to have' stuff - double buffering my clock domain crossing for writes and resets being the biggest - but the version I've got up on Github as of a few minutes ago is about my maximal effort: <a href="https://github.com/dqydj/VGAtonic/tree/master/First_Draft/CPLD%20Firmware">https://github.com/dqydj/VGAtonic/tree/master/First_Draft/CPLD Firmware</a></p><p>I'm a software guy at heart... bring on the Microcontroller!  Let's add UART input, shall we?</p><p>(Exactly how we're going to arbitrate that I'll write up a new post in a few minutes).<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6309/log/20565-planning-for-asynchronous-serial-graphics-mode">Planning for Asynchronous Serial Graphics Mode!</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6309/log/20565#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20565"><p> As of tonight, VGATonic has all of the initial promised specs working:</p><ul><li>Hardware supported: 640x480, 320x240, 160x120, 80x60</li><li>Hardware supported: 8 bit depth, 4 bit depth (CGA/VGA original standard), 2 bit depth, 1 bit depth</li><li>Hardware 'Acceleration' by Skipping Rows</li><li>(Old Stuff):<ul><li>Linux drivers, Arduino Drivers, Firmware published, etc.</li></ul></li></ul><p>When I first laid VGATonic out, I put a microcontroller onboard with a number of pins connected to the CPLD... I was, of course, planning for feature creep.</p><p>The ATTiny 2313a is an interesting little microcontroller - it only has 128 <em><strong>Bytes</strong></em> of RAM, but it has a hardware UART, and a hardware 'USI', or Universal Serial Interface.  The USI we will use as 'SPI Out' to the CPLD (driving VGATonic just like the rest of our demos), and the UART we'll use to communicate with <em>every piece of hardware for the last 50 years</em> (hyperbole - but you know what I mean, right?).</p><p>Here's the relevant section of the schematic:</p><p><img src="https://cdn.hackaday.io/images/5315131436247232748.png"></p><p>Since SPI is working perfectly on the CPLD, I wont be getting in the way.  Instead, I'll use one of the AVR_CPLD_EXT pins to send a signal to the CPLD that the AVR wants to be the master, and avoid the entire mess by just shifting where MOSI/SCLK/CS come from.  It's a clever trick (or at least I think so).  Here's the relevant VHDL:</p><pre class="hljs nginx">	<span class="hljs-title">if</span> (SEL_SPI = <span class="hljs-string">'1'</span>) then
		SEL &lt;= AVR_SEL;
		<span class="hljs-title">SCK</span> &lt;= AVR_SCK;
		<span class="hljs-title">MOSI</span> &lt;= AVR_MOSI;
	<span class="hljs-title">else</span>
		SEL &lt;= EXT_SEL;
		<span class="hljs-title">SCK</span> &lt;= EXT_SCK;
		<span class="hljs-title">MOSI</span> &lt;= EXT_MOSI;
	<span class="hljs-title">end</span> if;</pre> So with this change, we're backwards compatible with everything I've already got working on VGATonic, and now the AVR can grab control of the screen and do... well, whatever we can fit in 128 Bytes!<p>Again, very excited to be switching from VHDL to C here... let's see what we can make the Microcontroller do!<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'a6ZpYTMd-TXiuik_c1Fk0XyR4z1BOsBkz2FM';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>