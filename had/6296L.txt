<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Sea Temperature Sensor using GSM &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6296%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6296-sea-temperature-sensor-using-gsm">Sea Temperature Sensor using GSM</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A template for battery powered sensors using GSM</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/74570-mike-cochrane" title="Visit Profile">Mike Cochrane</a><span>&bull;</span>
                
                2 months ago<span>&bull;</span><a href="/project/6296#discussion-list" title="See Comments">2 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6296-sea-temperature-sensor-using-gsm">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6296/logs/sort/newest">Newest</option>
                    <option value="/project/6296/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6296/log/19477-version-one-bench-trial">Version One: Bench Trial</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6296/log/19477#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19477"><p>Before installing the first prototype in the sea I wanted to run it for a while to see what the battery life might be and ensure the code doesn't mysteriously die after a period of time.</p><h2>Circuit</h2><p>A teensy 3.0 connected to the cheapest Sim800L breakout I could find. This breakout has the Tx/Rx, Power and Reset pins broken out. A simple resistor voltage divider on the Rx input of the Sim800L takes care of level shifting the Teensy's 3.3v to the needed 2.8v IO.</p><h2>Software</h2><p>The way the breakout for the Sim800L is wired, the module turns on as soon as it gets power. The plan was to tell the module to power off when not being used then use the Reset pin to bring it back to life. I wrote some quick code, wired up the Reset pin to a digital IO pin on the Teensy and I could turn it off, then reset it to bring it back to life so moved on to the rest of the code thinking this was sorted - more on this later.</p><p>Next was making an HTTP request, there's plenty of code examples for making a TCP connection and sending HTTP requests with the Simcom GSM modules. Then I checked the datasheet and found it had HTTP request support build in (why doesn't everyone just use this?). So making an HTTP GET request is pretty trivial, I hacked that up and had it sending me temperatures ever minute shutting down the module in between, it worked okay (code was a mess but worked - optimised for implementation speed?).</p><p>Next was to leave it going longer with 10 minute updates. So I changed the delay at the end of the loop and tried it out, first a delay() that long was coming up short, 9 x 60 second delays worked so that's what I used. The first data came through, the Sim800L turned off. All looked good. Then the Sim800l turned back on! I checked the serial debugging, I didn't turn it on! Turns out the way the breakout board is wired it always turns back on about 30 seconds after being powered down. In my earlier tests I was resetting it before it had time to auto start so I didn't find this. Nothing I can do about this on this breakout, so I've got to live with it.</p><p>New plan, put it in flight mode when I don't need it - the lowest power mode in the datasheet that I could use - then put it back in normal mode when I need to send data. So that's what I did:</p><p><img src="https://cdn.hackaday.io/images/8386451434281020148.jpg"></p><h2>Test results</h2><p>Everything worked fine! I set it at ~5 min updates and gave it a single half used battery and left it running for a couple of days outside in the rain and wind.</p><p>Extrapolating the battery voltage drop to two fully charged batteries and ~10min updates suggested 10 days battery life was possible. That was good enough for now, time for sea trials!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6296/log/19479-version-one-sea-trail">Version One: Sea Trail</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6296/log/19479#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19479"><p><strong>Time to stick it out in the water!</strong></p><h2>Software</h2><p>The code is unchanged from the bench test except for adding an extra 5 minutes to the delay to get ~10 minute updates instead of the 5 minute updates on the bench test.</p><h2>Hardware</h2><p>The hardware is also basically unchanged from the bench test. It now has two batteries, fresh off the charger, wired in parallel. They are held in a <a href="http://www.thingiverse.com/thing:456900">3D printed battery holder</a>.</p><p><img src="https://cdn.hackaday.io/images/4054211434283505235.jpg"></p><h2>Mounting it in the sea</h2><p>On Saturday 30th of May 2015 I threw the sensor and some cord in my swim bag and did a normal couple of kilometer training swim with friends. Afterwards Rosie and I swam back out to one of the "5 knot" marker buoys 200 meters offshore and "mounted" it. </p><p><img src="https://cdn.hackaday.io/images/833261434283744789.jpg"></p><p>Okay, so "mounted" is a bit generous. It's tied one with some cord, and has some labels scribbled on it so it doesn't look too much like a remote trigger for a bomb.</p><h2>Test Results</h2><p><strong>It ran smoothly for a bit over 12 days! </strong></p><p>Only a couple of data points were missing (likely GSM connectivity issues). The datasheet said the Sim800L would operate down to 3.4v and that was spot on. It sent three readings at 3.402v, then went quite for a while then one final reading at 3.391v. </p><p>A couple of days later a pre work swim allowed me to retrieve it. When inspected then enclosure was not 100% dry, there was some moisture present. I'm not sure if this was condensation from when it was closed up, or if it got in while installed. The gasket wasn't totally clean so it's possible that's how some water got in.</p><p>Let's call that a success and time for version two!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6296/log/19541-version-two-stop-eating-batteries">Version Two: Stop eating batteries!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6296/log/19541#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19541"><p>After a successful first deployment it's time to work on the battery life. </p><p>I already had some ideas for how to reduce the power usage, so time to start working on them:</p><ul><li>Turn the Sim800l off and keep it off</li><li>Hibernate the Teeny 3.0 instead of just delay()</li><li>Reduce the time each send cycle takes</li><li>Kill the blinky LED</li></ul><h2></h2><h2>New Sim800l breakout board</h2><p>The previous breakout board I was using was the only one I could get easily in New Zealand. It broke out pover, ground, Tx, Rx, and Reset. Turns out the Power Key pin is tied to ground forcing the module to stay power on.</p><p>After much searching I found an equally simple break out board from <a href="http://www.aliexpress.com/store/product/Free-shipping-SIM800L-GPRS-Module-with-PCB-Antenna-Automatic-Micro-SIM-Card-SIM800L-breakout-board/605000_32246510568.html">AND Technology on AliExpress</a> that gives me the Power Key (PWRKEY) instead of Reset. I ordered three and handed over the extra cash to get the DHL'd (8 days) instead of snail mailed (probably a month). </p><p><img src="https://cdn.hackaday.io/images/3494271434359282964.jpg"></p><p>A welcome surprise I got email diagrams and documentation for the break out board in perfect english. It contained one critical piece of information about the PWRKEY pin "Shorted with GND via R104 by default". So I knew I had to remove R104 so I could use the PWRKEY, guess which is the only resistor not labeled on the diagram:</p><h2><img src="https://cdn.hackaday.io/images/8842601434359737890.jpg">So it's the unlabled one top left, by the 2.8v test point. So that got wiped off with the soldering iron and a 100R resistor from that to a I/O pin on the Teensy.<pre class="hljs cpp">// Pull PWRKEY low
pinMode(2, OUTPUT);
digitalWrite(2, LOW);

// For at least one second
delay(1100);

// Then let it go high again
pinMode(2, INPUT);
</pre>Hibernate the Teensy</h2><p>The Freescale MK20DX128VLH5<span class="redactor-invisible-space"> on the Teensy 3.0 has some awesome low power / hibernate modes available. Thankfully [duff2013] is more patient than I and has created an awesome <a href="https://github.com/duff2013/Snooze">Snooze library</a> for the Teensy.</span></p><p><span class="redactor-invisible-space">I added a watch crystal to the Teensy so I could use the RTC, not for the clock but for waking from hibernate.</span></p><p><span class="redactor-invisible-space">So</span></p><p><span class="redactor-invisible-space"></span></p><pre>for (int i = 0; i &lt;= 9; i++) {
    delay(60000);
}</pre>Changed to the way more accurate and low power<p><span class="redactor-invisible-space"></span></p><pre class="hljs cpp"><span class="hljs-comment">// Update Every 15 mins</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> UpdateTime 15</span>

<span class="hljs-comment">// Sleep</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;Snooze.h&gt;</span>
SnoozeBlock config;

<span class="hljs-comment">// Timing</span>
elapsedMillis sinceWake;

<span class="redactor-invisible-space">...
</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>{
    ...
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>{
<span class="hljs-comment">    // Reset ms since wake up timer</span>
    sinceWake = <span class="hljs-number">0</span>;

    ... <span class="hljs-keyword">do</span> the useful stuff ...
    	
    <span class="hljs-comment">// Sleep until next reading</span>
    <span class="hljs-keyword">uint8_t</span> sleepTime = <span class="hljs-number">60</span> - sinceWake/<span class="hljs-number">1000</span>; <span class="hljs-comment">// number of seconds</span>
    config.setAlarm(<span class="hljs-number">0</span>, UpdateTime - <span class="hljs-number">1</span>, sleepTime); <span class="hljs-comment">// how long to sleep for</span>
    Snooze.deepSleep(config); <span class="hljs-comment">// go to sleep</span>
}</pre><p><span class="redactor-invisible-space">This now gave me very reliable 900 seconds between receiving readings, ever if the sim800l was a bit inconsistent with its response time.</span></p><p><span class="redactor-invisible-space"><br></span></p><h2>Reduce the time things take</h2><p>A lot of the code for the first version was about getting it working, so instead of waiting for an expected result from the Sim800L there was just a "wait 4 seconds". So time to get some real code in here:</p><pre class="hljs cpp"><span class="hljs-comment">/**
 * Wait for a define length of time for a 
 * particular response from the Sim800l
 */</span>
elapsedMillis waitTime;
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">waitFor</span><span class="hljs-params">(String searchString, <span class="hljs-keyword">int</span> waitTimeMS)</span> </span>{
    waitTime = <span class="hljs-number">0</span>;
    String foundText;
    <span class="hljs-keyword">while</span> (waitTime &lt; waitTimeMS) {
        <span class="hljs-keyword">if</span> (!HWSERIAL.available()) {
            <span class="hljs-comment">// Nothing in the buffer, wait a bit</span>
            delay(<span class="hljs-number">5</span>);
            <span class="hljs-keyword">continue</span>;
        }
        
        <span class="hljs-comment">// Get the next character in the buffer</span>
        incomingByte = HWSERIAL.read();
        <span class="hljs-keyword">if</span> (incomingByte == <span class="hljs-number">0</span>) {
            <span class="hljs-comment">// Ignore NULL character</span>
            <span class="hljs-keyword">continue</span>;
        }
        foundText += incomingByte;
        
        <span class="hljs-keyword">if</span> (foundText.lastIndexOf(searchString) != -<span class="hljs-number">1</span>) {
            <span class="hljs-comment">// Found the search string</span>
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }
    }
    
    <span class="hljs-comment">// Timed out before finding it</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
}

<span class="hljs-comment">/**
 * Wait for "OK" from the Sim800l
 */</span>
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">waitForOK</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> waitFor(<span class="hljs-string">"\nOK\r\n"</span>, <span class="hljs-number">4000</span>);
}</pre>Now instead of delay(4000), I've got waitForOK(). Turns out some of the responses were coming back in 23ms where I was waiting 4000!<p>With smart waits in place from Sim800l is now turned on for a little over 30 seconds where it was previously on for nearly 90 seconds. This saves a lot of power (the Sim800l can peak at 2A power usage).</p><h2>Kill the Blinky LED</h2><p>All the breakout boards have status LEDs on them, they flash at different rates depending on the status of the module. Really handy during testing, not so handy for conserving battery. So the three component top right of the board had to go too. I'm not sure how much this saves, but it seemed worth it.</p><p>That's it for power saving changes in this version. Full code is in the <a href="https://github.com/mikenz/Teensy-SIM800L-Temp-Sensor/blob/master/Teensy_Temp_GSM.ino">GitHub repo</a>.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6296/log/19771-version-two-proper-mounting-straps">Version Two: Proper mounting straps</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/6296/log/19771#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19771"><p>Version one was tied to a "5 knot" marker buoy with some string:<br><img src="https://cdn.hackaday.io/images/833261434283744789.jpg"></p><p>This was effective, but not ideal. There's no way to remove the sensor without undoing everything. It's hard to tie knots when you're bobbing around in a wetsuit in the water. And it just doesn't look good.</p><p>So time to find something better!</p><p><br></p><h2>How big does it need to be?<br></h2><p>I've never swum out with the ruler to measure how big the marker is, but i figure they must be a "standard" size, right? So much Googling later, yeah there's not really a standard size for these in NZ. But they they look almost exactly like the "<a href="http://plasticproducts.co.nz/marker-buoy-400/">Marker Buoy 400</a>" from an NZ company. They website has a handy drawing:<br><img src="http://plasticproducts.co.nz/wp-content/uploads/2011/07/Marker-Buoy-400-Drawing-e1333401727472.jpg"><span class="redactor-invisible-space">I "verified" a couple of measurements by using hand spans while out swimming one day and it all matched up. The below the waterline section is different but that doesn't affect me.<br></span></p><h2>What to make it out of?</h2><p><span class="redactor-invisible-space">I need it to be kinda stealth (still haven't work out if I'm allowed to attach to the marker buoys) so needs to be yellow. I tried to buy some yellow webbing from my normal sources, 100m rolls was the shortest I could order as it's not a standard color. I don't need 100m :-(</span></p><p><span class="redactor-invisible-space">I was also going to need a buckle of some sort, what has 25mm webbing and a solid buckle? Kayak tie downs, and they even come in yellow! Someone had bought some <a href="http://www.alibaba.com/product-detail/Multi-purpose-Tie-down-Strap_1850866015.html">Multi-purpose Tie down Straps</a><span class="redactor-invisible-space"><a href="http://www.alibaba.com/product-detail/Multi-purpose-Tie-down-Strap_1850866015.html"></a> into NZ so I bought four for less then I could have paid for the webbing alone. I also got some polyester thread for my sewing machine so it didn't rot like cotton might.</span></span></p><h2>Putting it all together</h2><p>Maintaining the same basic idea as the tied version. A loop at the top, a loop around the middle with the buckle in it, and a vertical length between them. Then some loops and velcro to hold the enclosure firmly but also be removable. 30mins later it was all together and ready to take out and try.</p><p><img src="https://cdn.hackaday.io/images/5068271434798274680.jpg">The top fitted great</p><p><img src="https://cdn.hackaday.io/images/9197561434798297359.jpg"><span class="redactor-invisible-space">The bottom was a bit high, next version the vertical piece will be longer so the lower loop doesn't cover the words on the buoy. Oh and I printed and laminated some labels and threaded them on the lower loop. The black velcro secures the enclosure very firmly.<br></span></p><p><span class="redactor-invisible-space">Sea trial two began Sunday 14th June with two units installed, each on different beaches. Both are sending data to <a href="http://oceanswims.nz/watertemp">http://oceanswims.nz/watertemp</a><span class="redactor-invisible-space"> </span></span></p><p><span></span><br></p><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6296/log/20638-sea-trial-two-update">Sea Trial Two update</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6296/log/20638#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20638"><p>"Sea Trial" two has been going on since Sunday 14th of June. I installed two units, one on a buoy at <a href="https://www.google.co.nz/maps/place/36%C2%B050'50.0%22S+174%C2%B051'16.8%22E/@-36.847235,174.854676,245m/data=!3m2!1e3!4b1!4m2!3m1!1s0x0:0x0" target="_blank">St Heliers Beach</a> and one at neighbouring <a href="https://www.google.co.nz/maps/place/36%C2%B050'50.7%22S+174%C2%B050'40.0%22E/@-36.847423,174.844458,490m/data=!3m2!1e3!4b1!4m2!3m1!1s0x0:0x0" target="_blank">Kohimarama Beach</a>. The two units are slightly different, one has the same external antenna used in the first trial, the second has an internal antenna. The intention of this difference was to confirm if the signal strength was going to be sufficient without having to put another hole through the waterproof case.</p><p>See the results: </p><p></p><h2></h2><h2>The battery life issue is solved! </h2><p><a href="https://hackaday.io/project/6296-sea-temperature-sensor-using-gsm/log/19541-version-two-stop-eating-batteries">The changes</a> between version one and two to extend the battery life have been more successful than I expected. Trial one lasted 12 days (sending 6 updates an hour) before the battery voltage dropped below 3.4v and it stopped transmitting data. Trial two both units have been running for 23.5 days (sending 4 updates an hour) and the battery levels are at 65% and 56%! So it looks like I'm going to get nearly <strong>four times the battery life</strong> this round!<br></p><p>Here's a graph of the battery voltage vs the number of readings the unit has sent back:</p><p><img src="https://cdn.hackaday.io/images/7182071436347683034.JPG"></p>I'm guessing the difference in voltage between the two units is to do with the life history of the batteries. They were all out of my parts drawers and have had different uses and abuses in the past.<h2>Waterproofness</h2><p>When I retrieved the unit after the <a href="https://hackaday.io/project/6296-sea-temperature-sensor-using-gsm/log/19479-version-one-sea-trail">first sea trial</a> it wasn't 100% dry when I opened it. I wasn't sure if this was because it was damp when sealed or if water got in while deployed.</p><p>Yesterday as I was out swimming I checked on the unit installed at Kohimarama beach. It has was appears to be 2ml of <strong>water inside the enclosure</strong>.  I've left the unit out, the way it's setup there's a margin inside the bottom of the enclosure without any electronics so the water is not directly impacting anything yet.</p><h2>What's next?</h2><p>I'm going to leave both units out until the batteries go flat or the water ingress gets too extreme. In the mean time Version 3 is underway, so far the only change is to add a light intensity sensor and start logging this too. When I close it up I'll add some O-ring grease (same as I use on my camera housings) and see if this helps the seal.</p><p>Got any ideas on other sensors to add? I2C or SPI.</p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'NPbdzGor-d69PQB8FwGD7pvUOIQm9_91HP2A';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>