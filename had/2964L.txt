<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; HydroPWNics &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F2964%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/2964-hydropwnics">HydroPWNics</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">An open source hydroponic garden control, monitoring, and grow system with cloud database integration</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/2632-adam-vadala-roth" title="Visit Profile">Adam Vadala-Roth</a><span>&bull;</span>
                
                a year ago<span>&bull;</span><a href="/project/2964#discussion-list" title="See Comments">16 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/2964-hydropwnics">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/2964/logs/sort/newest">Newest</option>
                    <option value="/project/2964/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/2964/log/16984-sensor-packagemodule">Sensor Package/Module</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/16984#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16984"><p>This week I have been working on some smaller subsystems that will be integrated into OSHybridFarm. In particular I have been working on the plant sensor package/module PCB. The module consists of a FreeScale MKL05Z16VFK4, 3V3 DCDC regulator, I2C interface, power connector, and 9 sensor connectors. The module is to function as an intelligent ADC/data acquisition node, the goal of such is to sample the analog signals closer to the source to avoid data loss/noise, to avoid running analog sensor signals long distances, and to save inputs on the DyIO modules in the control box. The choice of I2C for serial coms is so that multiple modules can be connected on the same bus and addressed individually, this will also keep wiring in the control box neat by cutting down wires. Another feature that sort of happened by accident was that the pins on the MKL05 for the I2C are also the UART pins, so if the pullups on the I2C pins were not populated on the PCB the module can use UART with a firmware update. So far the Schematic design has been finished, next comes the board stay tuned.</p><p>Detail Module Specs:</p><p>- FreeScale MKL05Z16VFK4 ARM Cortex M0+</p><p>- Ti TPS62162 3V3 1A DCDC Switching Regulator</p><p>- 12VDC Power Input (Molex 0705530003)</p><p>- I2C Interface (Molex 0705530003)</p><p>- 9 powered (3V3) analog sensor inputs (Molex 0705530002)</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17012-sensor-module-revision-one">Sensor Module Revision One</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17012#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17012"><p>Posting back twice in the same day ha!!!! Laughing aside I finished the Sensor Module from earlier, the source files can be found here along with a PDF of the schematic:</p><p> <a href="https://github.com/adamjvr/HydroPWNicsHardware" target="_blank">https://github.com/adamjvr/HydroPWNicsHardware</a><a href="https://github.com/adamjvr/OSHybridFarm/tree/master/Hardware/Electronics/SensorNode" target="_blank"></a></p><p>Overall the design didn't take that long, I have working circuits for both the DCDC and FreeScale so all I had to do was copy the schematic and the board took not much longer. In order to keep the costs down I made the PCB as small as possible and kept it to 2 layers. Soon I will order the board from OSHPark and write the firmware using the Motate hardware abstraction system found here: <a href="https://github.com/giseburt/Motate" target="_blank">https://github.com/giseburt/Motate</a> Motate is essentially a embedded hardware abtraction library written in C++ sort of like Arduino but with a focus on performance instead, I've played with it before and the FreeScale chip I used is supported by it.</p><p><br>Picture of the Board</p><p><img src="https://cdn.hackaday.io/images/8422101430103543719.png"></p><br>3D Render of the Board <p><img src="https://cdn.hackaday.io/images/1553571430103556442.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17054-updates-and-the-addition-of-water-quality-monitoring">Updates and The Addition of Water Quality Monitoring</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17054#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17054"><p>Hey folks, not sure how many people are looking at this page as of yet but for those who do I feel I should explain what's going on with the project a bit more. So as you all may know this project is pretty big, initially it was going to be a software project relegating all hardware interfacing to the DyIO module but I'm hardware engineer and just couldn't resist making more PCBs. That really explains why my logs thus far have been randomly the PCB stuffs and not anything else, I'm just working on what I'm most interested in at the moment and the rest will come after. Now to clear things up, in this post I'm going to give a more detailed breakdown of both the hardware and the software, (the project is still young and developing so a lot of this is subject to change bear with me).</p><p>The initial idea was a simple hydroponic garden with internet connectivity, controlled water pump cycles, and controlled lights. Originally it was going to be a DyIO module and a couple relays in a PVC wiring box with plug outlet on the side for the lights and the water pump with an old laptop running the java app. Initially just a simple java software project with minimal hardware, but I have since decided to make it a more comprehensive system with full autonomous. The new system builds on the original concept of the described PVC wiring but adds serial ports on the side to interface with external hardware. Enter the Senor modules, one for analog sensors, digital sensors, and the new addition water quality sensing. The analog and digital sensor modules handle very simple sensors, e.g ones that can be read by an ADC or I2C (digital sensor board is I2C/1W), they will be performing most of the monitoring of the plants. Water quality sensing will be its own module because it requires lots of custom circuitry and will not follow the general purpose design of the other modules. Initially water quality sensing will be very basic, I'm going to start with pH reading of the nutrient solution as well as temp. The plan eventually will be to monitor all the characteristics of the water, dissolved oxygen and electrical conductivity. I should note that water quality monitoring will be specifiy to the hydroponic part of the hybrid farm, but the other sensor modules will be used on both parts. That's the initial plan for the hardware, it's going to be a lot of PCBs (hopefully not too many revisions per module) but it will simplify the wiring of the control box and keep the java application very simple and light. </p><p>For software to control the system described above, the main application will consist of a Java web app interfacing with the control box via the USB on the DyIO. The DyIO is basically the central hub/master controller talking to all the boards and modules via serial, this keeps the Java app clean and simple putting almost all the control and sensing tasks into the microcontrollers on the modules.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17137-sensor-modules-galore">Sensor Modules Galore!!!!!!!!!!</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17137#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17137"><p>Today is sort of a big update. After many hours of working and researching I have finished the prototype designs for both the analog and digital sensor modules. Originally I was going to have one sensor module that did both analog and digital with the idea being I would fabricate a lot of these and just keep adding as many as I needed. I decided to go the more modular route and have a digital sensing board and an analog one. The main new addition this post is the digital sensor board as the analog one was only revised. The digital board is essentially an I2C multiplexing node designed to interface with 4 I2C sensors, provide them with power, and poll/aggregate the data for transmission to the DyIO via UART. The idea is to use a pair of these modules per grow unit and use I2C humidity and temperature sensors. Working on the digital sensing board brought in many new features that are now on both the analog and digital sensor modules and will be standard with all future modules. The features introduced were a standard form factor with mounting holes (M3), separate power connector for 12VDC (Molex clip), Galvanic isolation of the UART signals on the MKL05 ARM CM0+, and a separate connector for UART serial (Molex clip). Without further do the digital sensor module :</p><p>Digital Sensor Module Rev 1</p><p><img src="https://cdn.hackaday.io/images/6326581430374185798.png"></p><p>Digital Sensor Module Rev 1 3D Render</p><p><img src="https://cdn.hackaday.io/images/4654641430374225284.png"></p><p>Digital Sensor Module Specs:</p><p>- MKL05Z16VFK4 ARM Cortex M0+ 48MHZ MCU</p><p>- 4 I2C Sensor Inputs with 3V3 DC Power</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>- ARM Cortex M JTAG Debug Connector</p><p>- 8 GPIO pins, power, ground Expansion connector (SPI signals included, some ADC too)</p><p>- Galvanic isolation</p><p>- M3 mounting holes</p><p>Updated Analog Sensor Module featuring same new standard features as the digital module:</p><p><img src="https://cdn.hackaday.io/images/8818541430374281077.png"></p><p>Specs:</p><p>- MKL05Z16VFK4 ARM Cortex M0+ 48MHZ MCU (QFN 24 Pin)</p><p>- 9 Analog Sensor Inputs with 3V3 DC Power</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>- ARM Cortex M JTAG Debug Connector</p><p>- Galvanic isolation</p><p>- M3 mounting holes</p><p>3D Render of new Analog Sensor Module</p><p><img src="https://cdn.hackaday.io/images/1235351430374306413.png"></p><p>With these two modules designed I'm ready to start fabricating prototypes, I will probably get them done via OSHPark so I have a few of each to play with. Stay tuned for more updates, the next big board will be the UART multiplexer power dispatch module! Source and schematics (PDF) found at the following Github Repository:</p><p><a href="https://github.com/adamjvr/HydroPWNicsHardware" target="_blank">https://github.com/adamjvr/HydroPWNicsHardware</a><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17443-module-hub-and-new-modules">Module Hub and New Modules</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17443#discussion-list">
                                    1 comment
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17443"><p>Over the weekend I worked out the hardware details for interfacing and networking the sensor modules with the DyIO. I developed a new board, it's called the module hub because it is just that a hub for modules. It has 4 ports for connecting up to 4 sensor modules, a FreeScale ARM CM0+ MKV10Z16VFM7 75MHZ MCU, analog multiplexer for UART, two expansion IO ports, a full handshake UART serial port, and power port. At first the the design of this hub was to be a simple 74 logic based board that would allow the DyIO to multiplex its UART port's signals to interface the four modules, this idea was abandoned in favor of an implementation that can interface with the DyIO via its serial port. Interfacing with the serial port on the DyIO required a full UART peripheral also another UART would be needed for interfacing with the modules, this is the reasoning behind using the MKV10Z16VFM7 MCU for the hub. The MKV10Z16VFM7 was chosen for its cost, rich and diverse array peripherals, and its 75MHZ clock. The way this board works is the MKV10Z16VFM7 communicates with the DyIO on one UART port and on the other UART port interfaces with the sensor modules using an analog multiplexer/demultiplexer IC . Another benefit to implementing the interface this way is that it may not require any modification to the DyIO firmware, everything should be able to be handled via the firmware on the modules and the Java API. The hub's will be mounted in custom cases (3D printed) and bolted to the sides of each of the grow units. The hub cases will be slotted such that the modules can slide in. The idea behind the system is that each unit is customizable based on the kinds of sensors needed for the given plants in the grow unit. The next step will be interfacing multiple modules to a single DyIO. Without further do pictures of the Module Hub Board:</p><p><strong>Module Hub Revision 1</strong></p><p><img src="https://cdn.hackaday.io/images/361791430882262054.png"></p><p><strong>3D Render</strong></p><p><img src="https://cdn.hackaday.io/images/2307461430882490435.png"></p><p><strong>Schematic</strong></p><p><img src="https://cdn.hackaday.io/images/9109881430882865934.png"></p><p><strong>New Modules</strong></p><p>As for new modules there are a few, water pump control, light control, and water quality. The water pump module will be simple, containing the MKL05 ARM CM0+ MCU, a PWM output for SS relay, sensor inputs for water level sensors, and inputs for flow sensor. The goal of the water module is for closed loop control of the water level in the hydro units. The light control module will simply turn lights on and off perhaps a light sensor to detect if the lights do go on. Water quality module is going to simplify quite a few things. IN a previous project log I bragged about wanting to implement full open source water quality monitoring but that's a project in its self. To make things easier I will be using the Atlas Scientific kit, probes and circuitry, the module will mount the PCBs, BNC connectors, and aggregate the data of the sensor boards. Water quality monitoring is the most expensive part of the electronics so I'm now 100% if I want to implement it from the get go, it will be the last thing to add.</p><p>Lastly there are two additional modules that I didn't mention before, it's because they are not of the variety that connect to the module hub. These modules are the nutrient distribution module and the air valve control module. These modules are going to be designed standalone and embedded into the devices they intend to control, they will have the same software interfacing as all the other modules and be controlled via the same API but from a hardware standpoint they are fully standalone. </p><p> Anyways stay tuned fro new modules and updates!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17557-blue-bean-prize">Blue Bean Prize</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17557#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17557"><p>The latest update to the HydroPWNics project is that, it won a LightBlue Bean from the weekly giveaway! I'd like to say thanks to Hacakaday for the awesome prize, it feels wonderful to have had my project get noticed and be awarded! When it arrives I will do another log post unboxing it and giving my overall impression of it. How I will used the Blue Bean in the HydroPWNics project has yet to be determined, I'm thinking it will serve well as a handy wireless development tool during the development of the project and then maybe as a remote control, if RPi support is added to the Blue Bean. Anyways thanks again hackaday, I'll use it well!!</p><p>Article:</p><p><a href="http://hackaday.com/2015/05/07/were-giving-out-125-teensy-lc-boards-this-week/" target="_blank">http://hackaday.com/2015/05/07/were-giving-out-125-teensy-lc-boards-this-week/</a><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17691-update-the-addition-of-wifi-and-more">Update: The addition of WiFi and More</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17691#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17691"><p>Lets see where do I start. So today there is a pretty big update to the three piece of hardware that I have been working/talking about related to HydroPWNics. The first big update was to the Module Hub, I reworked it to support only 3 modules BUT now it sports a ESP8266 ESP-12E WiFi module and a smaller size (cheaper PCB yay). IN addition to the smaller size and WiFi, the board has my resized M3 screw holes and 1/4 radius rounded corners.  The MKV10 ARM will talk to the ESP-12E module over SPI, streaming the latest readings off the modules to the cloud.  Also one lat thing that was added were neat Hackaday Prize logos :) . The New Module Hub:</p><p><img src="https://cdn.hackaday.io/images/2800631431303987928.png"></p><p>3D Rendering of WiFi Enable Module Hub:</p><p><img src="https://cdn.hackaday.io/images/754971431304040511.png"></p><p>Module Hub WiFi Spec:</p><p>- MKV10Z16VFM7 - 32 Pin QFN 5X5</p><p>- 3 Module Ports with 12VDC Power</p><p>- ESP8266 ESP-12E WiFi Module</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>- On Board DCDC 5VDC regulator for 1A 5V DC power (level shifter/expansion)</p><p>- ARM Cortex M JTAG Debug Connector</p><p>- 74HC4052 Analog Multiplexer Demultiplexer for UART module Interfacing</p><p>- 4 M3 Screw Mounting holes</p><p>Next on we have the updated sensor modules. Not much has changed with the sensor modules since I posted their revised versions a few days ago. The major change to both modules is the addition of 1/4 inch radius rounded corners (to make all the boards "match") and the subsequent remodeling of the topology to  fit everything on the modified shape.  Additionally open hardware and hackaday prize logos were added to the modules. With out further due the new modules: <br></p><p>New Digital Sensor Module</p><p><img src="https://cdn.hackaday.io/images/5929141431304280435.png"></p><p>New Digital Sensor Module 3D render:</p><p><img src="https://cdn.hackaday.io/images/5290661431314399634.png"></p><p> Specs</p><p>- MKL05Z16VFK4 ARM Cortex M0+ 48MHZ MCU</p><p>- 4 I2C Sensor Inputs with 3V3 DC Power</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>- ARM Cortex M JTAG Debug Connector</p><p>- 8 GPIO pins, power, ground Expansion connector (SPI signals included, some ADC too)</p><p>- Galvanic isolation</p><p>- M3 mounting holes</p><p>New Analog Sensor Module:<br></p><p><img src="https://cdn.hackaday.io/images/9366491431314433915.png"></p><p>New Analog Sensor Module 3D Rendering:</p><p><img src="https://cdn.hackaday.io/images/2547401431314462719.png"></p><p>Specs:</p><p>- MKL05Z16VFK4 ARM Cortex M0+ 48MHZ MCU</p><p>- 9 Analog Sensor Inputs with 3V3 DC Power</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>- ARM Cortex M JTAG Debug Connector</p><p>- Galvanic isolation</p><p>- M3 mounting holes</p><p>So far the hardware of the project has been moving very quickly, the next step will be making comprehensive BOMs for each of the boards then off to the fab, thinking OSHPark but might try something new. When the current set of modules are ready for fab I will be moving on to the closed loop control board since it will be used in quite a few places on the project. Stay tuned for more hardware and updates!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17732-pcb-fabrication-estimates">PCB Fabrication Estimates</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17732#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17732"><p>Late last night (and early this morning ;) ) I decided that I wanted to do more and I did some estimates on PCB costs. First I generated fabrication output files for my board, I created gerber files and NC drill files, and second used OSHPark to get cost estimates. While creating the fabrication files I noticed that I forgot to tent my vias, remember if you are doing a SMD board and you have components close remember to tent vias with solder mask to prevent solder bridged shorts.  I haven't yet decided which board house I'm going to use yet, but I'm leaning towards OSHPark. Normally OSHPark is my go to for all prototypes but I have a huge backlog of 2 layer PCB projects and I'm contemplating getting them all done on the same panel, probably from 4PCB or another volume boardhouse.</p><p> Anyways I will start things off with the sensor modules. If you noticed earlier both of the modules are the same size so they have roughly the same cost. From OSHPark both the digital and analog sensor modules will cost $16.60 for 3 boards. This is not bad at all and I'm sort of pleased that I made it under 20 bucks. It is my hope that the boards components will also be a similar cost but we will have to see BOM is next. And now for pictures:</p><p>Analog Sensor Module OSHPark Rendering Top</p><p><img src="https://cdn.hackaday.io/images/7066511431401629792.png"></p><p>And Bottom</p><p><img src="https://cdn.hackaday.io/images/6356621431401804557.png"></p><p>Digital Sensor Module Rendering Top</p><p><img src="https://cdn.hackaday.io/images/267881431401874377.png"></p><p>And Bottom</p><p><img src="https://cdn.hackaday.io/images/3879601431401902572.png"></p><p>Lastly the module hub. The module hub is  bit bigger and therefore a bit more pricey than the sensor modules. The higher cost of the module hub is ok, there will only one hub per plant grow unit (each unit has 4-6 plants). Now the original hub I designed was cheaper but it wasn't wireless, that version was going to require an additional piece of hardware to communicate with all of the hubs. Instead of designing another piece of hardware that would have acted as a pass through and wifi module I decided to compromise and make the hub wireless but only support 3 modules. At first I wanted to just add wifi but that ended being a bit too expensive so I decided to shrink it down and give up a module. Anyways the module hub came to approximately $25.90 for 3 boards, which is not too bad, I'm hoping to hit a total cost of under 50 dollars for an assembled hub. </p><p>OSHPark Render of the Module Hub Top</p><p><img src="https://cdn.hackaday.io/images/5335721431402378008.png"></p><p>Module Hub OSHPark render Bottom</p><p><img src="https://cdn.hackaday.io/images/2284481431402406462.png"></p><p>So thats that for PCB estimates, there will be another post when I decide which house to use. Stay tuned for updates realting to the BOM and much much more!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17848-lightblue-bean-impressions">LightBlue Bean Impressions</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17848#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17848"><p>So on Monday my LightBlue Bean prize came in (thanks again Hackaday!!!!!). When I got it I took some unboxing photos for you all, so check em out:</p><img src="https://cdn.hackaday.io/images/5969371431538936065.JPG" style="width: 584px; height: 438px;"><p style="margin-left: 140px;">Open Box</p><p><img src="https://cdn.hackaday.io/images/5545961431538975230.JPG" style="width: 595px; height: 446.008130081301px;">Out of Box</p><p><img src="https://cdn.hackaday.io/images/9445891431539015440.JPG" style="width: 587px; height: 440.25px;"></p><p>Out of Box Bottom</p><p><img src="https://cdn.hackaday.io/images/6375081431539604165.JPG" style="width: 576px; height: 432.215246636771px;"></p><p>Windows 8.1 App</p><p><img src="https://cdn.hackaday.io/images/4536581431539654414.JPG" style="width: 572px; height: 429px;"></p><p>So overall the Bean is a pretty neat piece of hardware ans I must say fairly well laid out (tiny PCBs can be tough). The compactness is very impressive but I have to say the low power and battery life take the cake as far as cool factor. If your applications are developed such that you sleep peripherals and turn off things you don't need, you can get up to a year of batter life with the Bean, that's pretty impressive out of the box. Also can purchase the BLE module separately from Punchtrhough as well as a comprehensive dev board. The ability to use their awesome low power module is a nice plus especially because its FCC certified. I think my focus next time I play with the Bean will be exploring the BLE module more, I'd like to use it on some of my own designs.</p><p>The software for the Bean is interesting to setup. When I got the bean I setup my laptop with all the appropriate software, one thing Windows users should know is that WIndows support is still relatively new.  Since my mac died in December I've been rocking Windows and Linux PCs in its place, it seems the Bean is best supported on OSX and iOS, if you are on a Mac you might have a better time than I am. Anyways in order to use the Bean with windows you need their Windows 8 app (Windows App Store), the Arduino IDE, and their patch to allow the IDE to compile code for their board. The App is handy (especially for me with a transformable tablet laptop Thinkpad Yoga S1 in case anyone's wondering) it allows you to test out functions, read the sensors, and blink and LED all from pressing buttons on the app. I should also note that pairing the device is pretty easy, just open the Settings app on Windows 8 and pair it in the add devices menu. The only issue I ran into was the app was failing when attempting load a compile project to the Bean, and I cannot figure out why as of yet. If anyone else is using the Bean with Windows 8 I would love to know how to get it to program (hopefully its something I'm overlooking), so feel free to comment!  Another thing I should note is that it seems that there isn't much support for Linux that I know (official support) which is bothersome as Linux is my OS of choice for embedded software development, hopefully Linux will get native support in the meantime, users can solder pins on and hook up ISP programmers (might go this route on windows too), I might do this myself just to keep all my dev environments in the same place.</p><p>As for using the Bean in HydroPWNics I didn't have very many ideas at first since I had planed on using the ESP8266 ESP-12E module, but then I had an idea. My idea is to make a standalone weather station for deploying HydroPWNics systems outdoors. The idea came to me upon seeing rechargeable solar powered garden lights. My first thought was "that is a dedicated low power solar power/storage center and a waterproof enclosure". These lights are cheap (between 5-20 bucks each) and would make for a great starting point. The reason why I'd want to do this with the Bean is that it is low energy and I can place it almost anywhere and have it provide data to the garden. The ability to place it almost anywhere will allow me to place it in a location where it can get accurate sensor readings, instead of forcing it to be close to the garden. The Bean also has a temperature sensor, and if I create some sort of moving mounting system I could use the accelerometer to monitor wind! At the moment the wireless weather station isn't the highest priority but later down the road I will explore it more fully. Thanks again for reading and thanks to Hackaday for the awesome Prize. Stay Tuned!!!!!!!!!!!!!!!!!!!!!!!!!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2964/log/17851-supplies-sensors-and-fence-posts-wait-what">Supplies, Sensors, and Fence Posts (Wait What?)</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/2964/log/17851#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17851"><p>Over the the past weekend a few sensors and things came in the mail. Yesterday I went to the hardware store to pickup a few items for these parts. What came in over the weekend were, water level sensors, and flow rate sensors. The water level sensors are very simple (and cheap ;) ) they have floats on them and when those floats are moved by the water level they trigger a switch. Th idea will be to mount the level sensors in each grow unit, I will be using them to stop the pump on its initial startup, this will prevent overflowing while the pumps control cycle begins.  The flow rate sensors are of the hall effect variety and feature 1/2 inch threaded fittings on each side. In order to get these sensors interfacing with the water pump, I needed some female thread to bard adapters, so that I can connect the senor inline with the water pump tubing. I should note that I purchased two of these sensors, so I can monitor the flow rate going in and the flow rate going out of the drain valve.  The idea is that these sensors will be monitored by the pump control module, implementing closed loop control (PID) of the water pumping cycles. The goal is to keep the water circulating while keeping the water levels constant.</p><p>Water level sensor, the larger cylinder towards the bottom is the float that moves along the shaft triggering the switch.</p><p><img src="https://cdn.hackaday.io/images/9672381431543097351.JPG"></p><p>Hall effect flow rate sensor, for monitoring flow in and flow out rates</p><p><img src="https://cdn.hackaday.io/images/1267041431543191772.JPG"></p><p>Input flow sensor hooked up to ebb/flow input valve with the fittings discusses above</p><p><img src="https://cdn.hackaday.io/images/9225161431543257672.JPG"></p><p>While at the hardware store (Lowes in case anyone is wondering) I discovered that the vinyl gutter that I wanted to use for my hydroponic grow units were too short and would not be deep enough for the basket pots I have on hand. I looked around the store to find PVC pipe bigger than the gutters I wanted to use but to no avail, the biggest PVC pipe they had was 4inch diameter and was for sewage. My initial backup plan if the gutters were too small was going to be 6inch PVC pip with endcaps, holes for the plants, and holes on the bottom for valves and sensors. In the back of my mind I was considering a third option that I've seen all over the web: Enter PVC Fencepost. Lowes may not have had my PVC pipe but they had 10 foot 5X5 inch square PVC fence post with endcaps!!! I originally wanted to avoid this as a material choice because it was more expensive than gutters, but to my surprise not too bad, the single post cost me 25 bucks and I will be making two units from it. I might make two more now that I know I can get this fencepost for a decent price in my home town.  In the end this material switch was a good thing, its going to be a lot easier to drill holes for the pots since the surface is flat, I won't have to cover the top since is all enclosed around, and it the square profile allows for more root room. Next off I need to decide how to cut and drill out the post, so stay tuned, I should be doing more building than circuit design in the coming weeks!!!!</p><p>5X5 PVC fence post for making the two hydroponic grow units:</p><p><img src="https://cdn.hackaday.io/images/8159831431542976554.JPG"></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'F1QYSVzn-zwJNLsZy7aIeQrHsQ8-OLxgEfC4';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>