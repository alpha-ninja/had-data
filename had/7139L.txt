<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Firefly — A Low-Cost Flying Robot to Save Lives &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F7139%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/7139-firefly-a-low-cost-flying-robot-to-save-lives">Firefly — A Low-Cost Flying Robot to Save Lives</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Firefly is a low-cost, modular flying robot for first responders that uses intelligent, nature-inspired algorithms to navigate autonomously.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/56509-mihir-garimella" title="Visit Profile">Mihir Garimella</a><span>&bull;</span>
                
                9 days ago<span>&bull;</span><a href="/project/7139#discussion-list" title="See Comments">2 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/7139-firefly-a-low-cost-flying-robot-to-save-lives">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/7139/logs/sort/newest">Newest</option>
                    <option value="/project/7139/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/7139/log/23303-escaping-from-moving-threats">Escaping from moving threats</a></h2>
                            <small class="authorship">18 hours ago  &bull;
                                <a class="gray-link" href="/project/7139/log/23303#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23303"><p>(This is the first of a series of logs that I&apos;ll be posting over the next few days giving a brief overview of the work I&apos;ve done on Firefly to date, and what I&apos;m hoping to get done over the next few months.)</p><p>One of the components of Firefly&apos;s base algorithmic layer deals with escaping from moving threats in complex, dangerous environments by mimicking how fruit flies avoid swatters&#x2014;so, for example, if one of these robots is carrying out a search and rescue mission after an earthquake and the ceiling collapses or an object falls, this algorithm helps the robot recognize it and move away in time. This is where the story of Firefly begins, so, in this log, I&apos;ll talk about my inspiration for the project, and describe the process of designing and implementing hardware and software for escaping from moving threats.</p><p><strong>Inspiration</strong><br></p><p>Firefly started out as a high school science fair project. In the summer before ninth grade, my family returned from a vacation to find our house filled with fruit flies, because we had forgotten to throw out some bananas on the kitchen counter before we left. I spent the next month constantly trying to swat them and getting increasingly frustrated when they kept escaping, but I also couldn&apos;t help but wonder about what must be going on &quot;under the hood&quot;&#x2014;what these flies must be doing to escape so quickly and effectively.</p><p>It turns out that the key to the fruit fly&apos;s escape is that they&apos;re able to accomplish a lot with very little: they use very simple simple sensing (their eyes, in particular, have the resolution of a 26 by 26 pixel camera), but, because they have such little sensory information to begin with, they&apos;re able to process all of that information very quickly to detect motion. The result of this is that fruit flies are able to see ten times faster than we can, even with brains a millionth as complex as ours, and this is what enables them to respond to moving threats so quickly.</p><p>Around the same time, drones were in the news a lot. It quickly became clear that although they had tremendous potential to help after emergencies or natural disasters, they simply weren&apos;t robust or capable enough. One specific problem was that these robots weren&apos;t able to react to quickly-moving threats in their environments. Existing algorithms for avoiding collisions don&apos;t work here because they&apos;re so computationally-intensive and rely on complex sensors, so I made the connection to fruit flies: I wanted to see whether we could apply the same simplicity that makes the fruit fly so effective at escaping to make flying robots better at reacting to their environments in real time.</p><p><strong>Building a sensor module to detect approaching threats</strong><br></p><p>I had planned to use a small camera, combined with some simple computer vision algorithms, to detect threats. However, I found that even the lowest-resolution cameras available today create too much data to process in real time, especially on the 72 MHz ARM Cortex processor on the <a href="https://www.bitcraze.io/crazyflie/">Crazyflie</a>, the quadrotor on which I wanted to implement my work. I came up with a few alternatives and I eventually settled on these <a href="https://www.pololu.com/product/136">infrared distance sensors</a>. (Sharp has since released <a href="https://www.pololu.com/product/2476">a newer version</a> that&apos;s twice as fast and has twice the range, so that&apos;s what I&apos;m planning to use for my latest prototype.) The beauty of this approach is that each of these sensors produces a single number, compared to laser scanners or depth cameras, which produce tons of detailed data that&#x2019;s nearly impossible to process and react to quickly.<span class="redactor-invisible-space"></span></p><p>Initially, I wanted to use four of these sensors to precisely sense the direction from which a threat is approaching. I also wanted to use a separate microcontroller and battery to avoid directly modifying the Crazyflie&apos;s electronics. I built a balsa wood frame for the sensors, attached a <a href="https://www.tiny-circuits.com/products/tiny-duino.html">Tinyduino</a>, and added a small battery, and... my robot wouldn&apos;t take off, because it didn&apos;t have enough payload capacity to carry all of this added weight. I performed lift measurements and soon found that I could use a maximum of two sensors, and that I had to interface them directly with the Crazyflie.</p><p><img src="https://cdn.hackaday.io/images/388641439728187499.png"></p>I wasn&apos;t sure how little power I could get away with supplying these sensors, so I mapped the analog output of the distance sensors to vertical distance across three different input voltages. Here&apos;s what I found:<p><img src="https://cdn.hackaday.io/images/3008321439730474683.png"></p><p>Using 3.3v would have been optimal for power, because the least current would be drawn from the quadrotor&apos;s battery, while using 3.7v (i.e., the unregulated output of the quadrotor&apos;s battery, which actually varies from 4.2v to 3v throughout the discharge cycle) would have been idea for weight, because I wouldn&apos;t need a voltage regulator at all. However, supplying the sensor at either of these voltages significantly reduced range, so I decided to add a 5v regulator to power the sensors. Here&apos;s the completed sensor module:</p><p><img src="https://cdn.hackaday.io/images/1456001439809765463.png"></p><p><strong>Creating algorithms to mimic the fruit fly&apos;s escape</strong><span class="redactor-invisible-space"><br></span></p><p><span class="redactor-invisible-space">Next, I had to create algorithms that used the distances returned by these sensors to respond to threats. On a high level, this is done in three steps: identification, prediction, and escape.</span></p><ol><li><strong>Identification</strong><strong>.</strong><span class="redactor-invisible-space"> When the distance at either sensor drops below the maximum sensor range, assume that there&apos;s a threat, and start monitoring the output of these sensors more closely.</span><ol><li>This is the easiest step, but it&apos;s necessary because we need to know when a threat&apos;s approach starts.</li></ol></li><li><span class="redactor-invisible-space"><strong>Prediction.</strong><span class="redactor-invisible-space"> Incorporating new measurements at 25 Hz, recursively model the threat&apos;s trajectory<span class="redactor-invisible-space"> with a second-order polynomial. Use this polynomial to make predictions about when the threat will reach each sensor, and use these predictions to decide when&#x2014;and in what direction&#x2014;to escape.</span></span></span><ol><li>This is the hard step, which is why I initially skipped it. However, I found that, without this step, escape was unreliable, because the quadrotor wasted time and battery power responding to objects overhead that eventually moved away.</li><li>I tested many different algorithms for this using offline data, including using the output of a Kalman filter&apos;s prediction step. However, I found that polynomial fitting was the most effective but also the least computationally-intensive.</li><li>One implementation note: I used the <a href="http://www.azdhs.gov/lab/documents/license/resources/calibration-training/12-quadratic-least-squares-regression-calib.pdf">sum-based equations</a> for polynomial fitting, meaning that all we&apos;re really doing here is adding and multiplying numbers.</li></ol></li><li><strong>Escape.</strong> Escape using a segmented escape algorithm based on fruit fly behaviors:</li></ol><p><img src="https://cdn.hackaday.io/images/1324561439811435216.jpg"></p><strong>Putting it all together</strong><p><span class="redactor-invisible-space"><span class="redactor-invisible-space">Because the Crazyflie wasn&apos;t very well-documented at the time of this work, I spent a while trying to reverse-engineer it and figure out how I could integrate my sensor module and escape algorithms. <a href="https://cfusting.wordpress.com/2013/07/28/quadcopters-and-spatially-centric-data/">This blog post</a> about interfacing the Crazyflie with an ultrasonic sensor was especially helpful, and, after a few weeks reading this post, looking at the Crazyflie&apos;s source code, and examining schematics, I decided to connect my sensors to pins 5 and 7 (analog inputs) on the Crazyflie&apos;s expansion header. I added about 500 lines of C code to the <em>commander</em><span class="redactor-invisible-space"><span class="redactor-invisible-space"> task in the Crazyflie&apos;s firmware.</span></span></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><strong>Testing</strong><span class="redactor-invisible-space"><span class="redactor-invisible-space"></span></span></span></span></p><p>Finally, to test my robot, I used a sheet of plywood to simulate an approaching threat, and I was really excited when my robot escaped with a success rate of 100% across twenty experiments. Here&apos;s a slow-motion (0.25x) video of one of them:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/4czmVESu0ec" frameborder="0" allowfullscreen=""></iframe><p>Also, here are some graphs showing sensor readings, control inputs, and control outputs for one experiment:</p><p><img src="https://cdn.hackaday.io/images/7353271439812222974.png"></p>Finally, I wanted to see how my robot&apos;s escape compared to the fruit fly&apos;s, so I extracted frames from a video of an escape attempt and performed a still image comparison to a fruit fly&apos;s escape:<p><img src="https://cdn.hackaday.io/images/2281681439812297430.jpg"></p>All of these results looked great, and I was really excited that my robot&apos;s escape was successful. I&apos;m planning to incorporate the sensor module and escape algorithms described above in my latest prototype of Firefly.</div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7139/log/23510-avoiding-collisions">Avoiding collisions</a></h2>
                            <small class="authorship">10 hours ago  &bull;
                                <a class="gray-link" href="/project/7139/log/23510#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23510"><p>The second component of Firefly&apos;s base algorithmic layer<span class="redactor-invisible-space"> deals with the problem of </span>avoiding collisions with obstacles. Most existing algorithms for mapping and obstacle avoidance use complex, sophisticated sensors, like depth cameras or laser scanners. The problem with these sensors is that they&apos;re large, heavy, expensive, and draw a lot of power. Mapping with a single camera (or <em>monocular mapping</em>) is a good alternative, but it&apos;s a much harder problem because you&apos;re trying to use fundamentally two-dimensional information to understand a three-dimensional environment. While a few algorithms exist for this task, they&apos;re either limited to simple, structured environments, or are computationally-intensive and difficult to run in real time. Because of these limitations, I had to develop my own for Firefly.</p><p><strong>Approach</strong><br></p><p>Here&apos;s a graphic illustrating how my monocular mapping algorithm works:</p><p><img src="https://cdn.hackaday.io/images/4454431439813680457.png">This algorithm proved to be able to avoid obstacles of different sizes, shapes, colors, and textures<span class="redactor-invisible-space">&#x2014;more on this in a future log! Until then, if you really want to see it in action, my TEDxTeen talk (linked in the sidebar) has a video showing some of my results.</span></p><p><span class="redactor-invisible-space"></span></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7139/log/23514-autonomously-locating-targets">Autonomously locating targets</a></h2>
                            <small class="authorship">10 hours ago  &bull;
                                <a class="gray-link" href="/project/7139/log/23514#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23514"><p>The third component of Firefly&apos;s algorithmic layer<span class="redactor-invisible-space"> deals with the problem of autonomously locating a target&#x2014;like a trapped victim after a disaster or the source of a fire in a burning building&#x2014;by combining multiple different sensory inputs. The problem with existing approaches is that they largely focus on taking measurements in several, precise locations, using these measurements to compute the location of the target.</span></p><p><strong>Approach 1: Reinforcement Learning</strong><br></p><p>Initially, this seemed like a classic reinforcement learning problem, because it&apos;s easy to formulate the problem in terms of states (sensor readings), actions (robot behaviors), and rewards (when you get closer to the target). I implemented this on my first prototype of Firefly&#x2014;here are my notes:</p><p><img src="https://cdn.hackaday.io/images/8383501439731043804.png"></p><p>While this approach sounded good in theory, there were a few problems that made it infeasible. First, it required extensive training for each use case. It also didn&apos;t generalize well; I found that it worked only in the specific cases for which it was trained. Additionally, it wasn&apos;t robust to noisy sensor readings, which was especially problematic because I was using very cheap sensors that produced a useful output but also had significant noise. Because of this, I quickly decided to move on to a simpler, behavior-based approach, described below.</p><p><strong>Approach 2: Following Multiple Gradients</strong></p><p>This approach worked much more reliably, both in simulation (see below) and in some real-world experiments. Here&apos;s a graphic I made giving an overview of this approach:</p><p><img src="https://cdn.hackaday.io/images/4895171439730721421.png"></p><p><strong>Evaluation</strong><br></p><p>I created a simulation to see how this algorithm would perform in a variety of environments. In the simulation, the robot starts out with a random position and orientation inside a square arena (with a certain side length) or circular arena (with a certain diameter) and moves
0.1 meters per loop iteration. The arena contains four identical obstacles with random orientations; the robot has to avoid these obstacles and the arena walls. Concentration and temperature
are modeled with a two-dimensional Gaussian distribution centered in the arena; the distribution
for concentration fills the arena, while the distribution for temperature is limited to a small area
around the target.</p><p>You can see the results of a few simulation runs above (they&apos;re the diagrams at the bottom of the image). I also used the simulation to quantify the effectiveness of this algorithm, and I was very happy with the results&#x2014;the simulation indicated that the algorithm is effective (~98% success rate given the ten-minute flight time of a typical quadrotor), efficient, and scales well to large environments. Here are some specifics on what I found:<img src="https://cdn.hackaday.io/images/9755461439840301723.png"><span class="redactor-invisible-space">I also conducted some real-world testing with a group of local firefighters&#x2014;I&apos;ll talk more about that in a future log. Until then, if you want to see the algorithm in action, my TEDxTeen talk (linked in the sidebar) includes a video of one of these experiments<span class="redactor-invisible-space">.</span></span></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7139/log/23631-building-a-robot-for-real-world-testing">Building a robot for real-world testing</a></h2>
                            <small class="authorship">8 hours ago  &bull;
                                <a class="gray-link" href="/project/7139/log/23631#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23631"><p>After designing the <a href="https://hackaday.io/project/7139-firefly-a-low-cost-flying-robot-to-save-lives/log/23510-avoiding-collisions">mapping</a> and <a href="https://hackaday.io/project/7139-firefly-a-low-cost-flying-robot-to-save-lives/log/23514-autonomously-locating-targets">navigation</a> algorithms for Firefly, I wanted to create a flying robot so that I could test my work in real-world environments. At this point, I wasn&apos;t ready to build a flying robot from scratch, so I added sensing and processing hardware to a Parrot AR.Drone. There were a few important considerations when designing this hardware that I&apos;m going to cover in this log.<span></span></p><p><strong>Selecting a single-board computer</strong><strong></strong></p><p><span class="redactor-invisible-space">My notes are below. Ultimately, I chose the ODROID-C1 because it was relatively fast but also inexpensive and energy-efficient. (The notes refer to <a href="http://www.uncannyvision.com/">UncannyCV</a>, a computer vision library optimized for ARMv7-A processors.)</span></p><p><img src="https://cdn.hackaday.io/images/6356911439847250210.JPG"></p><p><strong>Designing a sensor module</strong><br></p><p>I also needed to design a sensor module that could work with my navigation algorithm to locate fires. My notes are below:</p><p><img src="https://cdn.hackaday.io/images/836791439847406741.JPG"></p><p><img src="https://cdn.hackaday.io/images/1976031439847431489.JPG"></p><p>Also, here&apos;s a final schematic of my sensor module:</p><p><img src="https://cdn.hackaday.io/images/6451891439847579768.png"></p><p><strong>Selecting a specific gas sensor for fire detection</strong><br></p><p>Here are my notes on this:</p><p><img src="https://cdn.hackaday.io/images/1451091439847648049.JPG"></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'e068ydCc-2tQV7BerGaG7Rt42MZl3FoxNjfQ';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>