<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Portable environmental monitor &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4977%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4977-portable-environmental-monitor">Portable environmental monitor</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A handheld, battery powered, sensor array unit for environmental monitoring focused mostly on air quality using a global infrastructure.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/13270-radumotisan" title="Visit Profile">radu.motisan</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4977#discussion-list" title="See Comments">17 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4977-portable-environmental-monitor">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4977/logs/sort/newest">Newest</option>
                    <option value="/project/4977/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4977/log/15732-early-design-choosing-the-sensors">Early design: choosing the sensors</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4977/log/15732#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15732"><p>Some feedback would be extremely useful at this phase. I will need to choose the best alpha radiation detector, both sensitive, shock resistant and low sized (have contacted radiation detector manufacturers already, hoping for an early reply).</p><p>Also the dust sensor is a bit problematic, since most of the off-the-shelf components are relatively big while using simple photoelectric principles. I can go for something custom, but preferably a readily available, calibrated component should be identified. </p><p>Finally the air tube depicted in the sketches should allow the temperature sensor to measure the outside temperature, while the porous filter should concentrate radon in close proximity for the alpha detector to do its measurements.</p><p>Suggestions are welcome!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/17577-sensors-quest-continues">Sensors quest continues</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4977/log/17577#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17577"><p>I was hoping to have better luck by now with the sensors. I have sorted out the radiation sensors and I'm happy with the alpha and beta radiation solutions, but I am still trying to find a reasonable way for detecting various gases. Dust sensors are also quite big for the enclosure I am planning for these devices:</p><p><img src="https://cdn.hackaday.io/images/163941431112116141.jpg"></p><p>For gases, I have two options: affordable, low size semiconductor sensors or costly NDIR sensors. The semiconductor sensors use a lot of power on the filament and have a long pre-heating time. Considering this is a battery powered application, and that we might need to be able to turn some of the sensors on and off depending on the measurements we are interested in, using semiconductor sensors might be challenging.</p><p>The NDIR sensors are costly, in the range of hundreds of euros / dollars for a single sensor, and would usually target a single gas only. Their size is not small either. Due to these serious limitations, I won't be able to use NDIR sensors.</p><p>Still looking for alternatives.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/20479-the-radiation-sensor">The Radiation Sensor</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4977/log/20479#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20479"><p>One problematic issue was sourcing the proper detector, one that was both sensitive and small to fit the tiny space available in the already feature-crowded new uRADMonitor variant. After a slow process and intense communication with radiation detector manufacturers, we finally found a good candidate, putting price and performance in a reasonable balance: <a href="http://www.pocketmagic.net/tube-lnd-712-end-window-alpha-beta-gamma-detector/" target="_blank">LND Inc and their excellent LND712 end window Mica Geiger tube</a>.</p><p><a href="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_LND712_test_500V.jpg"><img src="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_LND712_test_500V-600x401.jpg" alt="uradmonitor_LND712_test_500V"></a><br>To give it a quick test, the tube was hooked to one of the model A boards, and the voltage configured in software from 380V (which is used the SBM-20 and SI-29BG tubes) to 500V! Yes, the model A hardware supports that just fine with no other changes than a single constant changed in code, thanks to the excellent high voltage inverter circuit:<br><a href="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_inverter_target_voltage.jpg"><img src="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_inverter_target_voltage-600x101.jpg" alt="uradmonitor_inverter_target_voltage"></a><br><a href="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_voltage.jpg"><img src="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_voltage-600x300.jpg" alt="uradmonitor_lnd712_voltage"></a><br>The result was as expected, and can be seen in the second image. The voltage on tube measurement is presented, part of the internal inverter feedback mechanism, responsible for having a regulated output matching the target voltage, in this case exactly 500V.<br><a href="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_geiger_4.jpg"><img src="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_geiger_4-600x401.jpg" alt="uradmonitor_lnd712_geiger_4"></a><br>Compared to the SBM-20, the LND712 shows the same sensitivity at a smaller size.<br><a href="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_cpm.jpg"><img src="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_cpm-600x300.jpg" alt="uradmonitor_lnd712_cpm"></a><br>But the Alpha and beta radiation sensitivity is the plus we’re after , and we get that just fine thanks to the mica end window.<br><a href="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_geiger_2.jpg"><img src="http://www.uradmonitor.com/wordpress/wp-content/uploads/2015/07/uradmonitor_lnd712_geiger_2-600x401.jpg" alt="uradmonitor_lnd712_geiger_2"></a><br>The BOM production cost, however, will inevitably increase, as a single LND712 gets close to $70, the tube only and this is just a little fraction of all the components that need to go in the new model D environmental dosimeter.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/20968-atmega128-voodoo">atmega128 voodoo</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4977/log/20968#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20968"><p><a href="http://www.pocketmagic.net/wp-content/uploads/2015/02/atmega128_voodoo_2.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/02/atmega128_voodoo_2.jpg" alt="atmega128_voodoo_2"></a></p><h2>&quot;Any improbable event which would create maximum confusion if it did occur, will occur.&quot;<br></h2><p>While working on my <a href="https://hackaday.io/project/4977-portable-environmental-monitor" target="_blank">Hackaday 2015 Prize project</a>, the two development boards I was using, both based on atmega128 started to behave erratically. The issue made me blame parts of code related to the esp8266 or the ILI9341 modules, and I wasted a lot of time. Finally I stripped the code down to a blinking LED, just to see that the <a href="http://www.pocketmagic.net/atmega128-voodoo/">original Voodoo issue is back</a>. No 5V programmer would make it go away this time.<br>This almost made me <a href="http://www.pocketmagic.net/introduction-to-stm32-microcontrollers/" target="_blank">switch to STM32F4 microcontrollers as an alternative</a>, but the time was too short for that, as the volume of code needed to be ported was too high. So back to AVRs, I purchased a few alternatives like the mega64, various programmers (initially I used usbAsp with avrdude under MacOS) hoping to find a working solution. Which I did not. This didn&apos;t stop me from rechecking everything over and over again. Between several inconsistent software runs, I noticed a code verification error, &quot;first mistmatch at byte 0x0100&quot; and &quot;verification error; content mismatch&quot;:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/02/avrdude_first_mistmatch_at_byte_0x0100.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/02/avrdude_first_mistmatch_at_byte_0x0100.jpg" alt="avrdude_first_mistmatch_at_byte_0x0100"></a><br>Tracking the issue I ended up on the avrdude website and their bug tracking system, <a href="http://savannah.nongnu.org/bugs/?41561" target="_blank">where bug #41561 presented just that</a>, but for the atmega64. Apparently a change in avrdude 5.11 introduced memory tagging, as explained by <a href="http://savannah.nongnu.org/bugs/?41561#comment11" target="_blank">Joerg Wunsch</a> :</p><blockquote>Before, all memories had been treated as a large block of bytes (N = size of that memory area on the chose device), regardless of whether their contents actually came from an input file. Now, only those regions are touched that have corresponding bytes in the input file. (For paged memory areas, the term &quot;region&quot; here refers to the situation where at least one byte within a memory page has been mentioned in the input file.) <br>I traced the ISP traffic with a logic analyzer, and decoded the data stream back into ISP commands. See the attachment for the full trace. The bug is that the &quot;write memory page&quot; command is issued twice: 
<blockquote>Time 393.416 ms: MOSI Load program memory page, address 0x007f, low byte, value 0x6d<br>Time 393.910 ms: MOSI Load program memory page, address 0x007f, high byte, value 0x6d<br>Time 394.370 ms: MOSI Write program memory page, address 0x007f<br>Time 394.804 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 395.218 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 395.688 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 396.131 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 396.538 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 397.013 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 397.427 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 397.903 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 398.368 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 398.805 ms: MOSI Read program memory, address 0x007f, high byte, value 0x6d<br>Time 399.222 ms: MOSI Write program memory page, address 0x007f<br>Time 399.686 ms: MOSI Read program memory, address 0x007f, high byte, value 0x6d<br>Time 401.510 ms: MOSI Load program memory page, address 0x0080, low byte, value 0x6f<br>Time 402.139 ms: MOSI Load program memory page, address 0x0080, high byte, value 0x72<br></blockquote>After filling the page buffer, the page is being programmed at time 394.370 ms. Then, USBasp polls the page for a response != 0xff, which indicates the end of the write operation (time 398.805 ms). However, just after this, it issues another &quot;write page&quot; command at 399.222 ms, but then proceeds to fill the page buffer again for the next page.<br>Apparently, the old devices (ATmega64/128) respond to the second page write immediately with a poll value of &quot;OK&quot; (i.e., they return the correct value), yet they are still busy programming afterwards. In contrast, the newer devices (like ATmega1281) correctly respond again with 0xff for the second page write operation: 
<blockquote>Time 391.417 ms: MOSI Load program memory page, address 0x007f, low byte, value 0x6d<br>Time 391.910 ms: MOSI Load program memory page, address 0x007f, high byte, value 0x6d<br>Time 392.371 ms: MOSI Write program memory page, address 0x007f<br>Time 392.806 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 393.218 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 393.689 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 394.130 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 394.539 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 395.014 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 395.428 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 395.903 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 396.369 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 396.806 ms: MOSI Read program memory, address 0x007f, high byte, value 0x6d<br>Time 397.222 ms: MOSI Write program memory page, address 0x007f<br>Time 397.687 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 398.130 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 398.539 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 399.013 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 399.431 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 399.903 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 400.368 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 400.805 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 401.218 ms: MOSI Read program memory, address 0x007f, high byte, value 0xff<br>Time 401.688 ms: MOSI Read program memory, address 0x007f, high byte, value 0x6d<br>Time 403.640 ms: MOSI Load program memory page, address 0x0080, low byte, value 0x6f<br>Time 404.155 ms: MOSI Load program memory page, address 0x0080, high byte, value 0x72<br></blockquote>which explains why they can be programmed fine. But obviously, the second page write operation is completely unnecessary.<br>The difference ... is that AVRDUDE now works on a per-page basis throughout all programmers, rather than on the entire device memory. If I remove the USBASP_BLOCKFLAG_LAST (line 1330, function usbasp_spi_paged_write()), it seems to work as intended<br></blockquote><p>And indeed it works! Personally I opted for using a version prior to 5.11 (<a href="https://www.obdev.at/products/crosspack/download.html" target="_blank">CrossPack-AVR-20100115.dmg</a>), as that was readily available for MacOS, but as soon as I finish my work for the HackADay Prize 2015, I&apos;ll have the time to properly compile the latest code that fixes the issue.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/21394-the-lcd-the-touchscreen-and-the-software">The LCD, the touchscreen and the software</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4977/log/21394#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21394"><p>The project uses the ILI9341 16bit display and a touchscreen for input. All buttons will be virtual except the power on/off. While working on the ILI9341 LCD library I also coded a simple Paint application to test everything working together:</p><p><iframe width="800" height="450" src="https://www.youtube.com/embed/K2QzK1dJ7Oo" frameborder="0" allowfullscreen="" style="border-width: 0px; font-family: Lato, sans-serif; line-height: 24px; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; max-width: 100%; color: rgb(102, 102, 102);"></iframe>The library code is released as open source, details on <a href="http://www.pocketmagic.net/ili9341-touchscreen-lcd-library/">http://www.pocketmagic.net/ili9341-touchscreen-lcd-library/</a><span class="redactor-invisible-space"></span><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/21754-the-wlan">The WLAN</a></h2>
                            <small class="authorship">20 days ago  &bull;
                                <a class="gray-link" href="/project/4977/log/21754#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21754"><p>Designing the wifi interface using the ESP8266 was not easy as I ran into several problems costing me precious time. I got a few esp8266 modules back in 2014, shortly after they&apos;ve been <a href="http://hackaday.com/2014/08/26/new-chip-alert-the-esp8266-wifi-module-its-5/" target="_blank">announced on HackaDay</a>. I didn&apos;t have much time for them, being caught with other projects, up until recently when the <a href="https://hackaday.io/project/4977-portable-environmental-monitor" target="_blank">portable environmental monitor project</a> needed a versatile wireless communication mechanism, low powered and if possible at a decent price. The esp8266 seemed the best candidate, but like with everything in life where nothing comes free, getting it going was not that simple. Here&apos;s an article with things that helped me do some ESP8266 Troubleshooting.</p><p><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/wireless_adapters_comparison.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/wireless_adapters_comparison.jpg" alt="wireless_adapters_comparison"></a><br>The pictures shows:<br>1.<a href="http://www.pocketmagic.net/using-fs1000axy-fst-rf-radio-module-with-avrs/" target="_blank">FS1000A / XY-FST Radio module</a><br>2.NRF24L01 transceivers<br>3.HLK-RM04 UART Wifi module and test base board<br>4.<a href="http://www.realtek.com/products/productsView.aspx?Langid=1&amp;PFid=48&amp;Level=5&amp;Conn=4&amp;ProdID=228" target="_blank">Realtek RTL8188 Wifi modules</a><br>5.Various ESP8266 modules 5.SMA cables and antennas<br>I had to opt-out the low level radio modules, the FS1000A and the NRF24L01 because I needed to follow a standard that would make connecting my devices easier. By using any Wifi 802.11X compatible module, the <a href="https://hackaday.io/project/4977-portable-environmental-monitor" target="_blank">portable environmental monitor</a> can be connected to any home internet access point, <a href="http://www.pocketmagic.net/global-radiation-monitoring-network/#130730" target="_blank">without additional hardware</a>. Being left with 3 choices, I went for the ESP8266 because its low cost and popularity. Both the ESP8266 and the HLK-RM04 are full stack wifi modules, but the latter is larger and my PCB space was limited. The <a href="http://www.realtek.com/products/productsView.aspx?Langid=1&amp;PFid=48&amp;Level=5&amp;Conn=4&amp;ProdID=228" target="_blank">RTL8188 only contains the MAC and the PHY</a>, so this complicates the software; it also uses an USB interface, incompatible with my current microcontroller choice, the atmega128.</p>Using the ESP8266<p>There are <a href="http://l0l.org.uk/2014/12/esp8266-modules-hardware-guide-gotta-catch-em-all/" target="_blank">several types of ESP8266 modules</a>. Those in my toolbox included the ESP-01, ESP-02, ESP-04, ESP-05 and ESP-07. For my project I needed an all-SMD module with exposed antenna pin instead of the small IPEX connector, so I can use my own SMA antenna connector. The ESP-04 fits all these requirements, still for a first test I went with the ESP-01 due to its breadboard friendly pins. My plan was simple, hook it to the 3.3V powered atmega128 board UART pins and write some simple serial communication code (send AT\r\n etc).<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/atmega128_ili9341_esp8266.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/atmega128_ili9341_esp8266.jpg" alt="atmega128_ili9341_esp8266"></a></p>ESP8266 Troubleshooting<p>The esp8266 ESP-01 I had was configured for 115200bps. The ESP-04 and the ESP-05 were both set to 9600bps. These baudrates can vary depending on the firmware, but 9600 and 115200 are the two common values.<br>At first I had little luck getting the atmega128 to communicate with the Wifi module, due to some errors in my code. It is just a simple UART communication, nothing fancy, but the 115200 value overflown the integer limit of my baudrate variable. This got me hooking the ESP8266 module directly to my computer via a FT232 USB to UART module, modified for 3.3V. The FT232 must make common ground with the ESP8266. Under MacOS I used both the screen terminal command and <a href="http://freeware.the-meiers.org/" target="_blank">the CoolTerm app</a> to communicate with the modules.</p>
<iframe width="800" height="450" src="https://www.youtube.com/embed/jRXqN9pyqXA" frameborder="0" allowfullscreen="" style="border-width: 0px; font-family: inherit; font-variant: inherit; line-height: inherit; font-style: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; max-width: 100%;"></iframe><br>The UART0 was connected to the ESP8266 and communication displayed on the ILI9341. UART1 was connected to the computer, via a FT232 module to sniff the traffic.<br>Things that didn&apos;t work at first:<br>- integer baudrate variable was too small for the 115200 value, resulting in wrong baudrate setting, and weird output characters<br>- sent AT commands if not terminated in \r\n just returned an echo instead of doing their job.<br>- for all modules other than the ESP-01, the GPIO15 must be grounded, or strange characters will appear<br>- the CH_PD must be pulled high (connected to Vcc)Custom test board<p>To make testing easier I also built a nice USB to Wifi module, to push my soldering skills to the limit but also see how well I can design a working board with the FT232RL, the ESP-04 and a SMA antenna connector.<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/usb2wifi_ft232rl_esp8266.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/usb2wifi_ft232rl_esp8266.jpg" alt="usb2wifi_ft232rl_esp8266"></a><br>It came out nice, and proved to be very useful for testing <a href="http://uzebox.org/wiki/index.php?title=ESP8266_AT_Commands" target="_blank">the ESP8266 AT commands</a> before designing a parser to run on a microcontroller.<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/esp8266_board_sch.png"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/esp8266_board_sch-300x206.png" alt="esp8266_board_sch"></a> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/esp8266_board_brd.png"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/esp8266_board_brd-300x172.png" alt="esp8266_board_brd"></a> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/ft232rl_eps8266_converter.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/ft232rl_eps8266_converter-300x137.jpg" alt="ft232rl_eps8266_converter"></a></p><p>Eagle design files are available here: <a href="http://www.pocketmagic.net/esp8266-troubleshooting/">http://www.pocketmagic.net/esp8266-troubleshooting/</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/21910-the-dust-sensor">The dust sensor</a></h2>
                            <small class="authorship">18 days ago  &bull;
                                <a class="gray-link" href="/project/4977/log/21910#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21910"><p>If the space on the already crowded PCB allows it, the uRADMonitor-D will incorporate a dust sensor as well. I did my homework and the GP2Y10 sensors are ready to be used.</p><p>Featuring an infrared LED and, a receiving phototransistor and two lenses, this device can detect dust in air using the reflected infrared light, including very fine smoke particles. The output data patten can also be implied in smart algorithms to distinguish various types of particles. In this article I&apos;m going to show how to connect the Sharp GP2Y1010AU0F to an AVR Microcontroller (Atmega128), how to read the output and how to convert the readings to meaningful values expressed in mg/m&#xB3;. All this while using only 3.3V as input voltage.<br> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_2.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_2-300x172.jpg" alt="GP2Y1010AU0F_2"></a> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_3.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_3-300x172.jpg" alt="GP2Y1010AU0F_3"></a></p>Connecting the sensor<p>The connector has 6 pins, and a matching cable is included with the sensor. The colors are standard on all of the sensors I&apos;ve seen (white, blue, green, yellow, black, red):<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_1.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_1.jpg" alt="GP2Y1010AU0F_1"></a><br>The <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/gp2y1010au_e.pdf">datasheet</a> presents the following diagram for connecting the sensor, where PIN1 is the white wire in our case:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_diagram_2.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_diagram_2-300x138.jpg" alt="GP2Y1010AU0F_diagram_2"></a> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_diagram_1.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_diagram_1-300x113.jpg" alt="GP2Y1010AU0F_diagram_1"></a><br>The 6 pins exposed by GP2Y1010AU0F, must be connected as follows:<br>White pin 1 (V-LED) =&gt; connected through a 150ohm resistor to the Vcc (3.3V)<br>Blue pin 2 (LED-GND) =&gt; GND<br>Green pin 3 (LED) =&gt; atmega128 I/O port<br>Yellow pin 4 (S-GND) =&gt; GND<br>Black pin 5 (Vo) =&gt; atmega128 ADC port<br>Red pin 6 (Vcc) =&gt; Vcc (3.3V)<br>The datasheet indicates using a 150Ohm resistor between pin 1 (white, V-LED) and Vcc (3.3V), and a 220uF capacitor . These are optional, since the device will work fine and with the same output when PIN 1 is connected directly to VCC (without resistor), and the capacitor is omitted. However the datasheet also indicates that:</p><blockquote>In circuit designing, make allowance for the degradation of the light emitting diode output that results from long continuous operation. (50% degradation/5 years)<br></blockquote><p>So it might be a good idea to use the PIN 1 V-LED resistor just to make sure the LED enjoys a longer life. For my 3.3V test circuit I&apos;ve used an 100Ohm resistor and a 22uF capacitor. The circuit becomes:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_circuit.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/GP2Y1010AU0F_circuit.jpg" alt="GP2Y1010AU0F_circuit"></a><br>As said if your supply is well filtered, you can leave the capacitor aside.</p>Reading the output<p>This is an analogue sensor. The principle of operation is to switch the IR led on, wait a little time then read the output via the ADC port and turn the IR led off. Dust in air would shine under the focused IR light and the phototransistor would read the light output, returning a proportional voltage.<br>To turn the IR led on, the Green pin 3 (LED) must be pulled to GND. To turn it off, it must be pulled high (Vcc). So on our microcontroller, we need to define the controlling pin as a logical output (I selected PORTA&apos;s PA5 on the atmega128), with an initial state of 1, so the led if off by default. Then when we want to read the dust level, we simply pull it down.</p><pre><ol><li></li><li>DigitalPin dust(&amp;PORTA, PA5, DigitalPin::OUTPUT, true); // PA5 is high by default</li><li>...</li><li>int main(void) {</li><li>	aux_ADCInit(); // enable ADC so we can read the sensor&apos;s output</li><li>	dust = 0; // led on</li><li>	_delay_us(50);</li><li>	uint16_t adcValue = aux_ADCRead(PF0); // ADC conversion</li><li>	dust = 1; //led off</li><li>}</li><li></li></ol></pre><p>The ADC is configured for 10bit resolution and the ref is set to AVCC connected to VCC&apos;s 3.3V. The adcValue goes from 0 (when the voltage on PF0 is 0) to 1023 (when the voltage on PF0 is 3.3V). Inserting a stick in the sensor&apos;s hole is equivalent to the maximum dust reading (sensor totally blocked by dust) and returns a value of 772 (max being 1023).</p>Converting the values<p>Using the ADC output, we can compute the voltage on the PF0 pin (black pin 5 on the sensor). </p><pre><ol><li>adcVoltage =  adcValue * (3.3 / 1024);</li></ol></pre><p>For our maximum dust level of 772, the voltage would be 2.48V . This is the maximum voltage output (with small variations depending on calibration of each particular sensor) of the GP2Y1010AU0F sensor when used in a 3.3V circuit. To interpret the readings, we head back to the <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/gp2y1010au_e.pdf">datasheet</a> that shows how to interpret the data:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/sharp_1_GP2Y1010AU0F.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/sharp_1_GP2Y1010AU0F.jpg" alt="sharp_1_GP2Y1010AU0F"></a><br>This is good to give an idea, but we have two problems:<br>- we have voltage and we want to know the dust concentration (the chart shows the inverse function)<br>- our voltage interval is 0 to 3.3V, not 0 to 5V like in the datasheet.</p><p>First, fixing the voltage output. <a href="http://arduinodev.woofex.net/2012/12/01/standalone-sharp-dust-sensor/" target="_blank">Some sources</a> went on uber-complicated aproaches, including dc converters and level shifters. The solution is much simpler, as ADC is a very proportional mechanism. All we need to do is to scale the output according to a 5V maximum:</p><pre><ol><li>adcVoltage =  adcValue * (5.0 / 1024);</li></ol></pre><p>There, we now have 5V scaled output values , and our maximum value (with stick inserted) goes up to .. 3.76Volts, well consistent with the datasheet maximum (also note that 3.76 x 3.3 / 5.0 = 2.48, the ratio 3.3/5.0 being our scaling factor ). Having the voltage values scaled conveniently, all that&apos;s left is interpreting them.<br>The datasheet function in Fig.3, shows an almost linear function in the interval [0, 0.5] . Our goal is to compute the inverse of this function, but the part from [0.5,] where the function goes quasi-horizontal is not surjective, so it cannot be inversed. But if we define the function on the [0, 0.5] only, an inverse is possible, and it looks like this:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/sharp_2_GP2Y1010AU0F.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/sharp_2_GP2Y1010AU0F.jpg" alt="sharp_2_GP2Y1010AU0F"></a><br>We can accept, with minor errors, a linear approximation of this function, following the blue line in the following image:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/sharp_3_GP2Y1010AU0F.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/sharp_3_GP2Y1010AU0F.jpg" alt="sharp_3_GP2Y1010AU0F"></a><br>As the blue line shows a linear function, we can determine it by knowing only two points. Let&apos;s name this function &quot;Fl&quot;, and it&apos;s form is Fl(x) = a*x + b.<br>We need to find two points (x1, Fl(x1)) and (x2, Fl(x2)) . Given the cartesian coordinates, it&apos;s easy to approximate the following values: x1 = 0 where Fl(x1) = -0.1 and x2 = 3.5 where Fl(x2) = 0.5 , both placed in convenient locations.<br>Using these two, we can compute factor a, or the slope of this function, as: a = (Fl(x2) - Fl(x1)) / (x2 - x1) or a = 0.5 - (-0.1) / 0.35 - 0 = 6 / 35 = 0.1714<br>Knowing a, we replace it in the function&apos;s formula and using one of the two known points we can determine b:<br>Fl(x2) = a*x2 + b or 0.5 = 6/35 * 3.5 + b quickly resulting that b is -0.1<br><strong>Our Fl function becomes Fl(x) = 6*x/35 - 0.1 (approximated to Fl(x) = 0.17*x -0.1), the input x is in volts and the output is the dust density in mg/m&#xB3;. As dust concentration cannot be negative, we will disclose all invalid voltage values. The limit is defined by 6*x/35 - 0.1 = 0 , where x becomes 0.583 volts.<br></strong><br>The conversion code is:</p><pre><ol><li></li><li>DigitalPin dust(&amp;PORTA, PA5, DigitalPin::OUTPUT, true); // PA5 is high by default</li><li>...</li><li>int main(void) {</li><li>	aux_ADCInit(); // enable ADC so we can read the sensor&apos;s output</li><li>	dust = 0; // led on</li><li>	_delay_us(50);</li><li>	uint16_t adcValue = aux_ADCRead(PF0); // ADC conversion</li><li>	dust = 1; //led off</li><li>	adcVoltage =  adcValue * (5.0 / 1024);</li><li>	if (adcVoltage &lt; 0.583)	</li><li> 		dustConcentration = 0;</li><li> 	else</li><li> 		dustConcentration = 6 * adcVoltage / 35 - 0.1;</li><li> }</li><li></li></ol></pre><p>Article posted on my blog, under<a href="http://www.pocketmagic.net/sharp-gp2y10-dust-sensor/">http://www.pocketmagic.net/sharp-gp2y10-dust-sensor/</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/21933-mics-vz-89t-a-low-power-air-quality-sensor">MiCS-VZ-89T a low power air quality sensor</a></h2>
                            <small class="authorship">17 days ago  &bull;
                                <a class="gray-link" href="/project/4977/log/21933#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21933"><p>Putting everything together also requires checking everything separately first. So I did with the MiCS-VZ-89T sensor, and here is the story, also presented on my blog: <a href="http://www.pocketmagic.net/mics-vz-89-air-quality-sensor/">MiCS-VZ-89 Air Quality Sensor</a></p><p>A low power sensor that can measure at the same time both carbon dioxide (CO2) and Volatile Organic Compounds (tVOC) is probably too good to be true. Yet the MiCS-VZ-89 does this, among some other appealing features like 3.3V supply (in the T variant), I2C communication, calibration-free high sensitivity and a small size factor. Its price is also a plus.<br>I got the chance to give it a closer look while designing the <a href="https://hackaday.io/project/4977-portable-environmental-monitor" target="_blank">Portable Environmental Monitor project</a> for this year&apos;s Hackaday Prize .<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t.jpg" alt="mics_vz_89t"></a><br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t_pinout.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t_pinout.jpg" alt="mics_vz_89t_pinout"></a><br>My circuit&apos;s I2C line was already serving a BMP180 temperature and barometric pressure sensor, but the MiCS_VZ_89T got along just fine. Using the datasheet, I was able to find the I2C Address (set to 0x70), its commands and parameters. The precious air quality data is returned as a 6 bytes array:</p><blockquote>3.2. 0b00001001: Get VZ89 status:<br>This command is used to read the VZ89 status coded with 6 bytes:<br>D1 (8bits) represent the CO2-equivalent signal value [13..242].<br>D2 (8bits) represent the VOC-short signal value [13..242].<br>D3 (8bits) represent the VOC-long signal value [13..242].<br>D4 (8bits) represent the 1st byte of raw sensor resistor value (LSB).<br>D5 (8bits) represent the 2nd byte of raw sensor resistor value.<br>D6 (8bits) represent the 3rd byte of raw sensor resistor value (MSB).<br></blockquote><p>Full details in this datasheet: <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/MICS-VZ-89-I2C-specs-rev-A.pdf">MICS-VZ-89-I2C-specs-rev-A</a> .<br>The code implementation is as follows:</p><pre><ol><li></li><li>#define VZ89_ADDR (0x70&lt;&lt;1) //0x70 default I2C address</li><li></li><li></li><li> //registers</li><li> #define VZ89_CMD_SETPPMCO2 	0x8	// This command is used to send a ppmCO2 value from an analyser to the VZ89 in order to recalibrate its outputs.</li><li> #define VZ89_CMD_GETSTATUS	0x9	// This command is used to read the VZ89 status coded with 6 bytes:</li><li> ..</li><li> // i2c read</li><li> void VZ89::readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {</li><li> 	uint8_t i =0;</li><li> 	i2c_start_wait(VZ89_ADDR | I2C_WRITE);</li><li> 	i2c_write(reg);</li><li> 	i2c_rep_start(VZ89_ADDR | I2C_READ);</li><li> 	for(i=0; i&lt;bytes; i++) {</li><li> 		if(i==bytes-1)</li><li> 			buff[i] = i2c_readNak();</li><li> 		else</li><li> 			buff[i] = i2c_readAck();</li><li> 	}</li><li> 	i2c_stop();</li><li> }</li><li></li><li> void VZ89::readRaw(uint8_t rawData[6]) {</li><li> 	static uint8_t buff[6];</li><li> 	memset(buff, 0, sizeof(buff));</li><li></li><li> 	//read raw temperature</li><li> 	readmem(VZ89_CMD_GETSTATUS, rawData, 6);</li><li> }</li><li></li></ol></pre><p>Where read raw returns the 6 bytes carrying what we need. A quick test gave me the three bytes starting at 13 right away, and spraying a little butane from a lighter showed the numbers change.<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t_firstrun.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t_firstrun.jpg" alt="mics_vz_89t_firstrun"></a><br>All good. Except I didn&apos;t have a way to interpret them into actual gas concentrations. I contacted the manufacturer, and they replied (in less than 24hours), indicating where I can find the information. The interpretation of the I2C data can be seen here: <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/Preliminary-Datasheet-MiCS-VZ-86-and-VZ-89-rev-6.pdf">Preliminary Datasheet MiCS-VZ-86 and VZ-89 rev 6</a> (page 3).<br>The instructions were translated into code as follows:</p><pre><ol><li></li><li>void VZ89::readRaw(uint8_t rawData[6]) {</li><li>	static uint8_t buff[6];</li><li>	memset(buff, 0, sizeof(buff));</li><li></li><li>	//read raw temperature</li><li>	readmem(VZ89_CMD_GETSTATUS, rawData, 6);</li><li>}</li><li></li><li><em>/*</em></li><li><em>During &#x201C;Functional Test Mode&#x201D; only &#x201C;Raw sensor&#x201D; and &#x201C;VOC_short&#x201D; data are available. &#x201C;VOC_short&#x201D; is</em></li><li><em>an image of sensor reactivity and can then be used for functional test.</em></li><li><em>Out of this initial period, the device will have the I2C data CO2 equivalent [ppm] and tVOC equivalent</em></li><li><em>referred to the isobutylene sensitivity unit [ppb].</em></li><li></li><li><em>D1:Data_byte_1: CO2_equ: [13&#x2026;242] -&gt; CO2_equ [ppm] = (D1 -13) * (1600/229) + 400</em></li><li><em>D2: Data_byte_2: VOC_short [13&#x2026;242]</em></li><li><em>D3: Data_byte_3: tVOC: [13&#x2026;242] -&gt; tVOC [ppb] = (D3 -13) * (1000/229)</em></li><li><em>D4: Data_byte_4: Raw sensor first byte (LSB)</em></li><li><em>D5: Data_byte_5: Raw sensor second byte</em></li><li><em>D6: Data_byte_6: Raw sensor third byte (MSB) -&gt; Resistor value [W] = 10*(D4 + (256*D5) + (65536*D6))</em></li><li></li><li><em>return CO2 equivalent [ppm] and tVOC equivalent referred to the isobutylene sensitivity unit [ppb].</em></li><li><em> *</em></li><li><em> */</em></li><li>bool VZ89::read(float *co2, uint8_t *reactivity, float *tvoc) {</li><li>	uint8_t data[6];</li><li>	readRaw(data);</li><li>	if (data[0] &lt; 13 || data[1] &lt; 13 || data[2] &lt; 13) return false;</li><li> 	// convert data to meaningful values</li><li> 	*co2 = (data[0] - 13) * (1600.0 / 229) + 400; // ppm: 400 .. 2000</li><li> 	*reactivity = data[1];</li><li> 	*tvoc = (data[2] - 13) * (1000.0/229); // ppb: 0 .. 1000</li><li></li><li> 	//uint32_t resistor = 10 * (data[3] +256 * data[4] + 65536 * data[5]);</li><li> 	return true;</li><li> }</li><li></li></ol></pre><p>And the result produced the CO2 concentration as ppm, respectively the tVOC as ppb:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t_results.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t_results.jpg" alt="mics_vz_89t_results"></a></p>Get the code<p>Mics-vz-89t code is released as open source. Get it <a href="http://www.pocketmagic.net/wp-content/uploads/2015/07/mics_vz_89t.zip">here</a> or on <a href="https://github.com/radhoo/mics_vz_89t" target="_blank">Github</a>.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/22149-the-pcb-is-ready">The PCB is ready</a></h2>
                            <small class="authorship">13 days ago  &bull;
                                <a class="gray-link" href="/project/4977/log/22149#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22149"><p>Just a very quick update due to the very late hour (clock shows 4:42am). The PCB design is finally ready, after weeks of testing each sensor individually, and writing tens of classes and thousands of lines of code. The PCB now puts all that effort together.</p><p><img src="https://cdn.hackaday.io/images/5034721438738937309.png"></p><p>Before going to sleep  I&apos;ll make sure the Gerber files get to a factory in China, to manufacture a few boards and have them shipped back to Romania on Friday the latest, so I have time over the weekend to solder them.</p><p>Tight timeframe for the #BestProduct deadline!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4977/log/22184-the-resistive-touchscreen">The resistive touchscreen</a></h2>
                            <small class="authorship">12 days ago  &bull;
                                <a class="gray-link" href="/project/4977/log/22184#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22184"><p>July was a tough month, and August is no different. Due to some components arriving late, I&apos;ve only been able to start my work on <a href="https://hackaday.io/project/4977-portable-environmental-monitor" target="_blank">the Hackaday.io project</a> with considerable delay. So I had to catch up with everything and squeeze the entire development work for this complex project in a month&apos;s timeframe.</p><p>But the plan was solid and seemed doable ... unless Murphy&apos;s laws of chaos wouldn&apos;t start to kick in, adding more trouble to the already busy schedule.<br>First, it was the <a href="http://www.pocketmagic.net/atmega128-voodoo/" target="_blank">atmega128 voodoo</a> issue I wrote about a while ago. For a few days I&apos;ve been unable to use my two atmega128 development boards and all development efforts stalled, in a parallel useless new quest for understanding why a basic led toggle code would behave erratically. Apparently <a href="http://www.pocketmagic.net/atmega128-voodoo/#update" target="_blank">the problem was related to avrdude</a>, and at least this brought a logical clear explanation to what was going on. But this got me <a href="http://www.pocketmagic.net/introduction-to-stm32-microcontrollers/" target="_blank">into ARM STM32 microcontrollers</a> as well, so at least I learned a few new things.<br>Then one <a href="http://www.pocketmagic.net/mics-vz-89-air-quality-sensor/" target="_blank">of the three Mics-vz-89</a> decided to stop working and take the entire I2C bus down, so nothing worked until I removed the faulty sensor. I later learned about this issue from SGX support, but it was another day lost with apparently another voodoo-like issue. The replacement is still in transit, hopefully I&apos;ll get it soon.<br>The story goes on. I had <a href="http://www.pocketmagic.net/ili9341-touchscreen-lcd-library/" target="_blank">some issues with the ILI9341 displays</a>, which resulted in a few getting damaged. I was left with a single one, and no quick way to order two more - which I needed for the 3 prototypes for the #bestproduct competition. Luckily a previous order arrived in time, with 4 brand new ILI9341 LCDs. But no touchscreens. I had two scavenged from the broken modules, but the touch controller was destroyed (xpt2046). So no way to get three working displays with touchscreens.</p>The solution to all<p>For a few minutes I was clueless. I even considered changing the way my project worked, using some bluetooth modules to display data on a smartphone. Obviously that was a bad idea. My toolbox had a different LCD waiting for some good use. It had a touchscreen, that was a little different because of some buttons printed at the bottom. But the size, connector and apparently type matched. But no XPT2046 driver. Well... who needs that anyway? The XPT2046 serial communication would have used 5 precious pins, while I can access the resistive touchscreen directly via ADC, and use only 4 pins! It&apos;s obviously an excellent solution. From the 4 pins, namely the X+, Y-, X-, Y+, only 2 need to be ADC. For the algorithm I&apos;ve used, those are X- and Y+. The other two can be connected to any GPIO.</p>Some technical details<p>Resistive touchscreens rely on two electrically separated layers to compute coordinates. When we touch the screen, the two layers get into contact at the specific location we touch. As the layers are built like resistors, the point of connection results in particular resistance values that can be determined across the terminals. The resistance values are linear across the X and Y directions. Meaning that the resistance we read can be linearly associated to coordinates on screen, either on the X axis or on the Y, finally allowing us to compute the point where the screen was touched.<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_diagram.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_diagram-300x240.jpg" alt="resistive_touchscreen_diagram"></a> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_circuit.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_circuit-300x183.jpg" alt="resistive_touchscreen_circuit"></a> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/08/touchscreen.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/08/touchscreen-300x250.jpg" alt="touchscreen"></a><br>(image source <a href="http://machinedesign.com/technologies/sensor-sense-resistive-touchscreens" target="_blank">here</a>)<br>Since the touchscreen is mounted on top of the display, it is usually good practice to calibrate it&apos;s output to match the resolution of the LCD. As an example, my ILI9341 are used in portrait mode and have a resolution of 240x320 pixels. Therefore I made my touchscreen code to return coordinates to match this surface.</p>The code and the algorythm<p>For the <a href="https://hackaday.io/project/4977-portable-environmental-monitor" target="_blank">Hackaday.io project</a>, I had to write a lot of code to handle the hardware layers and make the application development easier. Take for instance the ADC class or the general purpose DigitalPin handling all GPIO. The touchscreen code becomes nice and clear:</p><pre><ol><li></li><li><em>/*</em></li><li><em>	 * TouchScreen constructor</em></li><li><em>	 * init the GPIO pins and set the orientation (default portrait)</em></li><li><em>	 * XN and YP are ADC pins, YP and YN are general IO</em></li><li><em>	 */</em></li><li>	TouchScreen(ADC10b *adc, DigitalPin *xp, DigitalPin *yn, DigitalPin *xn, DigitalPin *yp, Orientation orientation = PORTRAIT, uint16_t r = 0);</li><li>...</li><li>uint16_t TouchScreen::readRawX(void) {</li><li>	xn_adc-&gt;config(DigitalPin::INPUT);</li><li>	*xn_adc = 0;</li><li></li><li>	xp_io-&gt;config(DigitalPin::INPUT);</li><li>	*xp_io = 0;</li><li></li><li>	yn_io-&gt;config(DigitalPin::OUTPUT);</li><li>	*yn_io = 0;</li><li></li><li>	yp_adc-&gt;config(DigitalPin::OUTPUT);</li><li>	*yp_adc = 1;</li><li></li><li>	return 1024 - m_adc-&gt;read(xn_adc-&gt;getPin()) - 1;</li><li>}</li><li></li><li></li><li>uint16_t TouchScreen::readRawY(void) {</li><li>	yn_io-&gt;config(DigitalPin::INPUT);</li><li>	*yn_io = 0;</li><li></li><li>	yp_adc-&gt;config(DigitalPin::INPUT);</li><li>	*yp_adc = 0;</li><li></li><li>	xn_adc-&gt;config(DigitalPin::OUTPUT);</li><li>	*xn_adc = 0;</li><li></li><li>	xp_io-&gt;config(DigitalPin::OUTPUT);</li><li>	*xp_io = 1;</li><li></li><li>	return 1024 - m_adc-&gt;read(yp_adc-&gt;getPin()) - 1;</li><li>}</li><li></li><li>uint16_t TouchScreen::readRawPressure(void) {</li><li>	// Set X+ to ground</li><li>	xp_io-&gt;config(DigitalPin::OUTPUT);</li><li>	*xp_io = 0;</li><li></li><li>	// Set Y- to VCC</li><li>	yn_io-&gt;config(DigitalPin::OUTPUT);</li><li>	*yn_io = 1;</li><li></li><li>	// Hi-Z X- and Y+</li><li>	xn_adc-&gt;config(DigitalPin::INPUT);</li><li>	*xn_adc = 0;</li><li></li><li>	yp_adc-&gt;config(DigitalPin::INPUT);</li><li>	*yp_adc = 0;</li><li></li><li>	int z1 = m_adc-&gt;read(xn_adc-&gt;getPin());</li><li>	int z2 = m_adc-&gt;read(yp_adc-&gt;getPin());</li><li></li><li>	return 1024 - (z2-z1) -1;</li><li>}</li><li></li></ol></pre><p>And to scale the values to the LCD resolution , I went for the following:</p><pre><ol><li></li><li>bool TouchScreen::read(uint16_t *x, uint16_t *y, uint16_t *pressure) {</li><li>	uint32_t calX1 = 0, calY1 = 15, calX2 = 890, calY2 = 845;</li><li></li><li>	uint16_t rawp = readRawPressure();</li><li></li><li>	if (rawp == 0) return false;</li><li>	// two consequent reads to double check coords and reduce errors</li><li>	uint16_t rawx = readRawX();</li><li>	if (readRawX() != rawx) return false;</li><li></li><li>	uint16_t rawy = readRawY();</li><li>	if (readRawY() != rawy) return false;</li><li></li><li>	if (rawx &lt; calX1 || rawx &gt; calX2 || rawy &lt; calY1 || rawy &gt; calY2)</li><li>			return false;</li><li></li><li>	rawx = (rawx - calX1) * TOUCH_WIDTH / (calX2 - calX1);</li><li>	rawy = (rawy - calY1) * TOUCH_HEIGHT / (calY2 - calY1);</li><li></li><li>	if (m_orientation == PORTRAIT) {</li><li>		*x = rawy;</li><li>		*y = TOUCH_WIDTH - rawx;</li><li>	} else {</li><li>		*x = rawx;</li><li>		*y = rawy;</li><li>	}</li><li></li><li>	*pressure = rawp;</li><li></li><li>	return true;</li><li>}</li><li></li></ol></pre><p>The cal** values must be determined for each touchscreen in part, as there&apos;s an offset resulting from the way the touchscreen is mounted on top of the LCD, making the clicks a bit off from the LCD content. Also you&apos;ll see that I read both x and y coordinates twice. The idea is to consider a coordinate as valid, only if two subsequent read operations result in the same numbers. This helps remove unwanted noise. As a comparison, here are two pics, in the first I took the (x,y) values as they were returned and drew them on the screen, while in the second picture I added this clever mechanism:<br><a href="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_library_errors.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_library_errors-300x200.jpg" alt="resistive_touchscreen_library_errors"></a> <a href="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_library_validated.jpg"><img src="http://www.pocketmagic.net/wp-content/uploads/2015/08/resistive_touchscreen_library_validated-300x200.jpg" alt="resistive_touchscreen_library_validated"></a><br>Now the buttons can be clicked accurately! Download the full code on my blog at: <a href="http://www.pocketmagic.net/resistive-touchscreen/">http://www.pocketmagic.net/resistive-touchscreen/</a></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'IdAPqjPR-2MJcuevo7oSeTYospPx0BpmIimA';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>