<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; OSCAR: Omni Service Cooperative Assistant Robot &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F7284%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/7284-oscar-omni-service-cooperative-assistant-robot">OSCAR: Omni Service Cooperative Assistant Robot</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary"> A project aimed at developing a humanoid ballbot platform.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/12744-poh-hou-shun" title="Visit Profile">Poh Hou Shun</a><span>&bull;</span>
                
                a day ago<span>&bull;</span><a href="/project/7284#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/7284-oscar-omni-service-cooperative-assistant-robot">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/7284/logs/sort/newest">Newest</option>
                    <option value="/project/7284/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/7284/log/23347-ball-balancing-test-base-concept">Ball Balancing Test Base Concept</a></h2>
                            <small class="authorship">15 hours ago  &bull;
                                <a class="gray-link" href="/project/7284/log/23347#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23347"><p>As we have no experience at all at building a balancing robot of any kind, it is prudent that we build a test base for this purpose. The design we have can be found here:</p><p> The structure will will consist of 8mm thick laser cut acrylic. Laser cutting is the fastest and most economical prototyping means available to us. The holomonic wheels engages the bowling ball at an angle of 45 degrees, midway between the pole and equator of the ball.</p><p><img src="https://cdn.hackaday.io/images/3815021439827595310.JPG">Plates which are about 260mm in diameter are being held together by 10mm diameter spacers made of acrylic rods. Driver and balancing electronics will be mounted on the plate just on top of the stepper motors to minimize cable length. The battery which constitutes a bulk of the weight will be mounted high up for stability (akin to the configuration of an inverted pendulum). We will be using inexpensive Pd acid battery in the beginning which will probably be switched to LiPo in the future.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7284/log/23364-ball-balancing-test-base-fabrication-and-assembly">Ball Balancing Test Base Fabrication and Assembly</a></h2>
                            <small class="authorship">13 hours ago  &bull;
                                <a class="gray-link" href="/project/7284/log/23364#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23364"><p>The designs for the balancing test base were done in Solidworks and exported to .dxf files. These were then brought out for laser cutting.  Instead of acrylic, plexiglas (also a type of acrylic) was used. We found that plexiglas is more flexible and stands up the rigor of drilling without cracking.<img src="https://cdn.hackaday.io/images/9605641439830105904.jpg"></p><p>With all the pieces back from the laser cutter, we begin the ardous task of drilling all the holes for securing the mount for the stepper motor. Holes of 3.5mm diameter were drilled and tapped for M4 screws. </p><p><img src="https://cdn.hackaday.io/images/4808531439831648077.jpg"></p><p><img src="https://cdn.hackaday.io/images/2180421439831669972.jpg"></p><p><img src="https://cdn.hackaday.io/images/7153991439831693341.jpg"></p><p>The spacers were cut to the appropriate length using a lathe. The central hole in the wheel hub for the holomonic wheels where also enlarged to 1/4&quot; to accommodate the stepper motor shaft. The wheels were then installed onto the motor shaft.<br></p><p><img src="https://cdn.hackaday.io/images/9350341439831559826.jpg"></p><p><img src="https://cdn.hackaday.io/images/9625761439831579694.jpg"></p><p>Finally all the parts were assembled.</p><p><img src="https://cdn.hackaday.io/images/1390011439831748640.jpg"></p><p><img src="https://cdn.hackaday.io/images/5753081439831836437.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7284/log/23417-stepper-controller-electonics">Stepper Controller Electonics</a></h2>
                            <small class="authorship">12 hours ago  &bull;
                                <a class="gray-link" href="/project/7284/log/23417#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23417"><p>The controlling the stepper, we used the quadstepper board from Sparksfun. Heatsinks were placed on the controller chip to prevent overheating.</p><p><img src="https://cdn.hackaday.io/images/4066591439833033403.jpg"></p><p>This is controlled solely by an Arduino Mega which generate the stepping pulses. An Arduino Mega was chosen because it has enough hardware timer for generating the stepping pulses. Another Arduino Uno serve to decode the PWM signal from an RC receiver. The decode signals are then sent to the Arduino Mega via I2C, so that the stepper motors can be remotely controller. An interface board is fabricated to tie all the components together. After alot of botching, the circuit finally works.</p><p><img src="https://cdn.hackaday.io/images/3685081439833258956.jpg"></p><p><img src="https://cdn.hackaday.io/images/9555761439833326011.jpg"></p><p><img src="https://cdn.hackaday.io/images/3731441439833362388.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7284/log/23429-firmware-for-the-stepper-controller">Firmware for the Stepper Controller</a></h2>
                            <small class="authorship">12 hours ago  &bull;
                                <a class="gray-link" href="/project/7284/log/23429#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23429"><p><span class="hljs-comment">We now begin coding the firmware for the stepper controller. Our conceptual leap was to realize that the code for driving the three stepper motors is the same as that driving a three holomonic robotic base. Basically the intended motion is resolved into three direction 120 degrees apart. The resolved motion is then translated into the motion of the three stepper motors. There are codes for handling mixing of linear and rotational motion. 
<span class="redactor-invisible-space">
<span class="redactor-invisible-space">
Lastly, there are some codes for implementing the balancing and head-locking, but these are commented out for initial tests.</span></span></span></p><p><span class="hljs-comment"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><br></span></span></span></p><p><span class="hljs-comment"><span class="redactor-invisible-space"><span class="redactor-invisible-space"></span></span></span></p><pre class="hljs cpp"><span class="hljs-comment">//***************************************************************************************************************</span>
<span class="hljs-comment">/*

 Ballbot Firmware V1
 
 Copyright (c) 2014 Space Trek Systems.
 http://www.spacetreksystems.com/
 
 */</span>

<span class="hljs-comment">//***************************************************************************************************************</span>

<span class="hljs-comment">// header files</span>

<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &quot;EasyTransferI2C.h&quot;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;PID_v1.h&gt;</span>
<span class="hljs-comment">//#include &lt;TimerOne.h&gt;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;TimerThree.h&gt;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;TimerFour.h&gt;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;TimerFive.h&gt;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;Wire.h&gt;</span>

<span class="hljs-comment">//***************************************************************************************************************</span>
<span class="hljs-comment">//communication with reciever module</span>
<span class="hljs-comment">//create object</span>
EasyTransferI2C ET; 

<span class="hljs-keyword">struct</span> RECEIVE_DATA_STRUCTURE{
  <span class="hljs-comment">//put your variable definitions here for the data you want to send</span>
  <span class="hljs-comment">//THIS MUST BE EXACTLY THE SAME ON THE OTHER ARDUINO</span>
  <span class="hljs-keyword">double</span> Xspeedtrans;
  <span class="hljs-keyword">double</span> Yspeedtrans;
  <span class="hljs-keyword">double</span> Rotationtrans;
};

<span class="hljs-comment">//give a name to the group of data</span>
RECEIVE_DATA_STRUCTURE senddata;

<span class="hljs-comment">//define slave i2c address</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> I2C_SLAVE_ADDRESS 9</span>

<span class="hljs-comment">//***************************************************************************************************************</span>

<span class="hljs-comment">//imu definition</span>

<span class="hljs-comment">/*

 MinIMU-9-Arduino-AHRS
 Pololu MinIMU-9 + Arduino AHRS (Attitude and Heading Reference System)
 
 Copyright (c) 2011 Pololu Corporation.
 http://www.pololu.com/
 
 MinIMU-9-Arduino-AHRS is based on sf9domahrs by Doug Weibel and Jose Julio:
 http://code.google.com/p/sf9domahrs/
 
 sf9domahrs is based on ArduIMU v1.5 by Jordi Munoz and William Premerlani, Jose
 Julio and Doug Weibel:
 http://code.google.com/p/ardu-imu/
 
 MinIMU-9-Arduino-AHRS is free software: you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published by the
 Free Software Foundation, either version 3 of the License, or (at your option)
 any later version.
 
 MinIMU-9-Arduino-AHRS is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
 more details.
 
 You should have received a copy of the GNU Lesser General Public License along
 with MinIMU-9-Arduino-AHRS. If not, see .
 
 */</span>

<span class="hljs-comment">// Uncomment the below line to use this axis definition: </span>
<span class="hljs-comment">// X axis pointing forward</span>
<span class="hljs-comment">// Y axis pointing to the right </span>
<span class="hljs-comment">// and Z axis pointing down.</span>
<span class="hljs-comment">// Positive pitch : nose up</span>
<span class="hljs-comment">// Positive roll : right wing down</span>
<span class="hljs-comment">// Positive yaw : clockwise</span>
<span class="hljs-keyword">int</span> SENSOR_SIGN[<span class="hljs-number">9</span>] = {
  <span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>}; <span class="hljs-comment">//Correct directions x,y,z - gyro, accelerometer, magnetometer</span>
<span class="hljs-comment">// Uncomment the below line to use this axis definition: </span>
<span class="hljs-comment">// X axis pointing forward</span>
<span class="hljs-comment">// Y axis pointing to the left </span>
<span class="hljs-comment">// and Z axis pointing up.</span>
<span class="hljs-comment">// Positive pitch : nose down</span>
<span class="hljs-comment">// Positive roll : right wing down</span>
<span class="hljs-comment">// Positive yaw : counterclockwise</span>
<span class="hljs-comment">//int SENSOR_SIGN[9] = {1,-1,-1,-1,1,1,1,-1,-1}; //Correct directions x,y,z - gyro, accelerometer, magnetometer</span>

<span class="hljs-comment">// tested with Arduino Uno with ATmega328 and Arduino Duemilanove with ATMega168</span>

<span class="hljs-comment">// LSM303 accelerometer: 8 g sensitivity</span>
<span class="hljs-comment">// 3.9 mg/digit; 1 g = 256</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GRAVITY 256  <span class="hljs-comment">//this equivalent to 1G in the raw data coming from the accelerometer </span></span>
 
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> ToRad(x) ((x)*0.01745329252)  <span class="hljs-comment">// *pi/180</span></span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> ToDeg(x) ((x)*57.2957795131)  <span class="hljs-comment">// *180/pi</span></span>
 
 <span class="hljs-comment">// L3G4200D gyro: 2000 dps full scale</span>
 <span class="hljs-comment">// 70 mdps/digit; 1 dps = 0.07</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Gyro_Gain_X 0.007 <span class="hljs-comment">//X axis Gyro gain</span></span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Gyro_Gain_Y 0.007 <span class="hljs-comment">//Y axis Gyro gain</span></span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Gyro_Gain_Z 0.007 <span class="hljs-comment">//Z axis Gyro gain</span></span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Gyro_Scaled_X(x) ((x)*ToRad(Gyro_Gain_X)) <span class="hljs-comment">//Return the scaled ADC raw data of the gyro in radians for second</span></span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Gyro_Scaled_Y(x) ((x)*ToRad(Gyro_Gain_Y)) <span class="hljs-comment">//Return the scaled ADC raw data of the gyro in radians for second</span></span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Gyro_Scaled_Z(x) ((x)*ToRad(Gyro_Gain_Z)) <span class="hljs-comment">//Return the scaled ADC raw data of the gyro in radians for second</span></span>
 
 <span class="hljs-comment">// LSM303 magnetometer calibration constants; use the Calibrate example from</span>
 <span class="hljs-comment">// the Pololu LSM303 library to find the right values for your board</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> M_X_MIN -421</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> M_Y_MIN -639</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> M_Z_MIN -238</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> M_X_MAX 424</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> M_Y_MAX 295</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> M_Z_MAX 472</span>
 
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Kp_ROLLPITCH 0.02</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Ki_ROLLPITCH 0.00002</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Kp_YAW 1.2</span>
 <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> Ki_YAW 0.00002</span>
 
<span class="hljs-comment">/*For debugging purposes*/</span>
<span class="hljs-comment">//OUTPUTMODE=1 will print the corrected data, </span>
<span class="hljs-comment">//OUTPUTMODE=0 will print uncorrected data of the gyros (with drift)</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> OUTPUTMODE 1</span>

<span class="hljs-comment">//#define PRINT_DCM 0     //Will print the whole direction cosine matrix</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> PRINT_ANALOGS 0 <span class="hljs-comment">//Will print the analog raw data</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> PRINT_EULER 1   <span class="hljs-comment">//Will print the Euler angles Roll, Pitch and Yaw</span></span>

<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> STATUS_LED 13 </span>

<span class="hljs-keyword">float</span> G_Dt = <span class="hljs-number">0.02</span>;    <span class="hljs-comment">// Integration time (DCM algorithm)  We will run the integration loop at 50Hz if possible</span>

<span class="hljs-keyword">long</span> timer = <span class="hljs-number">0</span>;   <span class="hljs-comment">//general purpuse timer</span>
<span class="hljs-keyword">long</span> timer_old;
<span class="hljs-keyword">long</span> timer24 = <span class="hljs-number">0</span>; <span class="hljs-comment">//Second timer used to print values </span>
<span class="hljs-keyword">int</span> AN[<span class="hljs-number">6</span>]; <span class="hljs-comment">//array that stores the gyro and accelerometer data</span>
<span class="hljs-keyword">int</span> AN_OFFSET[<span class="hljs-number">6</span>]={
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>}; <span class="hljs-comment">//Array that stores the Offset of the sensors</span>

<span class="hljs-keyword">int</span> gyro_x;
<span class="hljs-keyword">int</span> gyro_y;
<span class="hljs-keyword">int</span> gyro_z;
<span class="hljs-keyword">int</span> accel_x;
<span class="hljs-keyword">int</span> accel_y;
<span class="hljs-keyword">int</span> accel_z;
<span class="hljs-keyword">int</span> magnetom_x;
<span class="hljs-keyword">int</span> magnetom_y;
<span class="hljs-keyword">int</span> magnetom_z;
<span class="hljs-keyword">float</span> c_magnetom_x;
<span class="hljs-keyword">float</span> c_magnetom_y;
<span class="hljs-keyword">float</span> c_magnetom_z;
<span class="hljs-keyword">float</span> MAG_Heading;

<span class="hljs-keyword">float</span> Accel_Vector[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>}; <span class="hljs-comment">//Store the acceleration in a vector</span>
<span class="hljs-keyword">float</span> Gyro_Vector[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};<span class="hljs-comment">//Store the gyros turn rate in a vector</span>
<span class="hljs-keyword">float</span> Omega_Vector[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>}; <span class="hljs-comment">//Corrected Gyro_Vector data</span>
<span class="hljs-keyword">float</span> Omega_P[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};<span class="hljs-comment">//Omega Proportional correction</span>
<span class="hljs-keyword">float</span> Omega_I[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};<span class="hljs-comment">//Omega Integrator</span>
<span class="hljs-keyword">float</span> Omega[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};

<span class="hljs-comment">// Euler angles</span>
<span class="hljs-keyword">float</span> roll;
<span class="hljs-keyword">float</span> pitch;
<span class="hljs-keyword">float</span> yaw;

<span class="hljs-keyword">float</span> errorRollPitch[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>}; 
<span class="hljs-keyword">float</span> errorYaw[<span class="hljs-number">3</span>]= {
  <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};

<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> counter=<span class="hljs-number">0</span>;
byte gyro_sat=<span class="hljs-number">0</span>;

<span class="hljs-keyword">float</span> DCM_Matrix[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>]= {
  {
    <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>                                                  }
  ,{
    <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>                                                  }
  ,{
    <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>                                                  }
}; 
<span class="hljs-keyword">float</span> Update_Matrix[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>]={
  {
    <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>                                                }
  ,{
    <span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>                                                }
  ,{
    <span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>                                                }
}; <span class="hljs-comment">//Gyros here</span>


<span class="hljs-keyword">float</span> Temporary_Matrix[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>]={
  {
    <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>                                                  }
  ,{
    <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>                                                  }
  ,{
    <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>                                                  }
};

<span class="hljs-comment">//***************************************************************************************************************</span>
<span class="hljs-comment">// PID loop</span>

<span class="hljs-keyword">double</span> Xspeed, Yspeed, Rotation;
<span class="hljs-comment">//double pitchSet, rollSet, yawSet;</span>
<span class="hljs-comment">//double pitchAngle, rollAngle, yawAngle;</span>

<span class="hljs-comment">//initialise PID loops</span>
<span class="hljs-comment">//PID pitchPID(&amp;pitchAngle, &amp;Xspeed, &amp;pitchSet, 700, 0, 0, DIRECT);</span>
<span class="hljs-comment">//PID rollPID(&amp;rollAngle, &amp;Yspeed, &amp;rollSet, 700, 0, 0, DIRECT);</span>
<span class="hljs-comment">//PID yawPID(&amp;yawAngle, &amp;Rotation, &amp;yawSet, 100, 0, 0, DIRECT); </span>

<span class="hljs-comment">//***************************************************************************************************************</span>
<span class="hljs-comment">//stepper driver</span>

<span class="hljs-comment">//defining </span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> STEP = <span class="hljs-number">0.0982</span>;<span class="hljs-comment">//100*pi/200/16 (mm, for wheel)</span>
<span class="hljs-comment">//const double STEP = 0.00014394;//(100*pi/2*108.55*pi)/200/16 (mm, for ball roller)</span>

<span class="hljs-comment">//defining pins assignment (control pins for quadstepper)</span>
<span class="hljs-comment">//channel mapping 1-&gt;X, 2-&gt;Y, and 3-&gt;Z</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> XPUL = <span class="hljs-number">11</span>, XDIR = <span class="hljs-number">36</span>, XENABLE = A1;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> YPUL = <span class="hljs-number">5</span>,  YDIR = <span class="hljs-number">9</span>,  YENABLE = <span class="hljs-number">10</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ZPUL = <span class="hljs-number">6</span>,  ZDIR = <span class="hljs-number">23</span>, ZENABLE= <span class="hljs-number">22</span>;

<span class="hljs-comment">//defining pins assignment (mircrostep selection for quadstepper)</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> XMS1 = A8, XMS2 = A9, XMS3 = A10;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> YMS1 = <span class="hljs-number">8</span>,  YMS2 = <span class="hljs-number">7</span>,  YMS3 = <span class="hljs-number">4</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ZMS1 = <span class="hljs-number">24</span>, ZMS2 = <span class="hljs-number">25</span>, ZMS3 = <span class="hljs-number">26</span>;

<span class="hljs-comment">//static double mag, angle, rotation;</span>
<span class="hljs-comment">//static double angle_ref = 0;</span>

<span class="hljs-comment">//const double RADIUS = 83.154;</span>
<span class="hljs-comment">//const double DEG2RAD = 1000/57296;</span>

<span class="hljs-keyword">double</span> xspeed, yspeed, zspeed;
<span class="hljs-keyword">long</span> x_t, y_t, z_t;
<span class="hljs-keyword">long</span> prev_time = micros();

<span class="hljs-comment">//const int NUMBER_OF_FIELDS = 3; // how many comma separated fields we expect</span>
<span class="hljs-comment">//int fieldIndex = 0;            // the current field being received</span>
<span class="hljs-comment">//double values[NUMBER_OF_FIELDS];   // array holding values for all the fields</span>
<span class="hljs-comment">//boolean negative = false;</span>

<span class="hljs-comment">//***************************************************************************************************************</span>

<span class="hljs-comment">//reciever input</span>
<span class="hljs-comment">//const int XRECPIN = 27, YRECPIN = 28, YAWRECPIN = 29;</span>
<span class="hljs-comment">//const double MAXSPEED = 200, MINSPEED = -200; //(mms^-1)</span>
<span class="hljs-comment">//const double MAXROTSPEED = 200, MINROTSPEED = -200; //(degs^-1)</span>
<span class="hljs-comment">//const long DEADZONEUPPERLIMIT = 1520, DEADZONELOWERLIMIT = 1480; </span>
<span class="hljs-comment">//const long TIMEOUT = 2500;</span>
<span class="hljs-comment">//const int MAXVALUE = 2000, MINVALUE = 1000;</span>

<span class="hljs-comment">//***************************************************************************************************************</span>

<span class="hljs-comment">// initialisation subroutines</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_stepper</span><span class="hljs-params">()</span>
</span>{

  pinMode(XPUL,OUTPUT);
  pinMode(XDIR,OUTPUT);
  pinMode(XENABLE, OUTPUT);
  pinMode(XMS1, OUTPUT);
  pinMode(XMS2, OUTPUT);
  pinMode(XMS3, OUTPUT);

  pinMode(YPUL,OUTPUT);
  pinMode(YDIR,OUTPUT);
  pinMode(YENABLE, OUTPUT);
  pinMode(YMS1, OUTPUT);
  pinMode(YMS2, OUTPUT);
  pinMode(YMS3, OUTPUT);

  pinMode(ZPUL,OUTPUT);
  pinMode(ZDIR,OUTPUT);
  pinMode(ZENABLE, OUTPUT);
  pinMode(ZMS1, OUTPUT);
  pinMode(ZMS2, OUTPUT);
  pinMode(ZMS3, OUTPUT);

  digitalWrite(XMS1, HIGH);
  digitalWrite(XMS2, HIGH);
  digitalWrite(XMS3, HIGH);

  digitalWrite(YMS1, HIGH);
  digitalWrite(YMS2, HIGH);
  digitalWrite(YMS3, HIGH);

  digitalWrite(ZMS1, HIGH);
  digitalWrite(ZMS2, HIGH);
  digitalWrite(ZMS3, HIGH);

  digitalWrite(XENABLE, LOW);
  digitalWrite(YENABLE, LOW);
  digitalWrite(ZENABLE, LOW);

  <span class="hljs-comment">//Timer1.initialize(1000000);</span>
  Timer3.initialize(<span class="hljs-number">1000000</span>);
  Timer4.initialize(<span class="hljs-number">1000000</span>);
  Timer5.initialize(<span class="hljs-number">1000000</span>);
}

<span class="hljs-comment">/*
void init_imu()
 {
 pinMode (STATUS_LED, OUTPUT);  // Status LED
 
 I2C_Init();
 
 digitalWrite(STATUS_LED,LOW);
 delay(1500);
 
 Accel_Init();
 Compass_Init();
 Gyro_Init();
 
 delay(20);
 
 for(int i = 0; i &lt; 32; i++)    // We take some readings...
 {
 Read_Gyro();
 Read_Accel();
 for(int y=0; y&lt;6; y++)   // Cumulate values
 AN_OFFSET[y] += AN[y];
 delay(20);
 }
 
 for(int y = 0; y &lt; 6; y++)
 AN_OFFSET[y] = AN_OFFSET[y]/32;
 
 AN_OFFSET[5]-=GRAVITY*SENSOR_SIGN[5];
 
 //Serial.println(&quot;Offset:&quot;);
 for(int y = 0; y &lt; 6; y++)
 Serial.println(AN_OFFSET[y]);
 
 delay(2000);
 digitalWrite(STATUS_LED,HIGH);
 
 timer=millis();
 delay(20);
 counter=0;
 
 }
 
 void init_pid()
 {
 //intialising PID set values
 pitchSet = 0;
 rollSet = 0;
 yawSet = 0;
 
 Xspeed = 0;
 Yspeed = 0;
 Rotation = 0;
 
 //turn the PID on
 pitchPID.SetMode(AUTOMATIC);
 rollPID.SetMode(AUTOMATIC);
 yawPID.SetMode(MANUAL);
 
 pitchPID.SetOutputLimits(-100, 100);
 rollPID.SetOutputLimits(-100, 100);
 yawPID.SetOutputLimits(-180, 180);
 
 pitchPID.SetSampleTime(200);
 rollPID.SetSampleTime(200);
 yawPID.SetSampleTime(200);
 
 }
 
 void init_control()
 {
 pinMode(XRECPIN, INPUT);
 pinMode(YRECPIN, INPUT);
 pinMode(YAWRECPIN, INPUT);
 }*/</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_control</span><span class="hljs-params">()</span>
</span>{
  Wire.begin(I2C_SLAVE_ADDRESS);
  <span class="hljs-comment">//start the library, pass in the data details and the name of the serial port. Can be Serial, Serial1, Serial2, etc. </span>
  ET.begin(details(senddata), &amp;Wire);
  <span class="hljs-comment">//define handler function on receiving data</span>
  Wire.onReceive(receive);
}

<span class="hljs-comment">//***************************************************************************************************************</span>
<span class="hljs-comment">// actuation subroutines</span>
<span class="hljs-comment">/*
void imu_act()
 {
 if((millis() - timer)&gt;=20)  // Main loop runs at 50Hz
 {
 Serial.println(&quot;imu act&quot;);
 counter++;
 timer_old = timer;
 timer = millis();
 if (timer &gt; timer_old)
 G_Dt = (timer-timer_old)/1000.0;    // Real time of loop run. We use this on the DCM algorithm (gyro integration time)
 else
 G_Dt = 0;
 
 
 // *** DCM algorithm
 // Data adquisition
 Read_Gyro();   // This read gyro data
 Read_Accel();     // Read I2C accelerometer
 
 if (counter &gt; 5)  // Read compass data at 10Hz... (5 loop runs)
 {
 counter=0;
 Read_Compass();    // Read I2C magnetometer
 Compass_Heading(); // Calculate magnetic heading  
 }
 
 // Calculations...
 Matrix_update(); 
 Normalize();
 Drift_correction();
 Euler_angles();
 //printdata();
 }
 }
 
 void pid_act()
 {
 
 Serial.println(&quot;pid act&quot;);
 pitchAngle = double(pitch);
 rollAngle = double(roll);
 yawAngle = double(yaw);
 
 pitchPID.Compute();
 rollPID.Compute();
 yawPID.Compute();
 }
 */</span>

<span class="hljs-comment">/*void control()
 {
 
 unsigned long xrecpindur = pulseIn(XRECPIN, HIGH);
 //unsigned long yrecpindur = pulseIn(YRECPIN, HIGH);
 //unsigned long yawrecpindur = pulseIn(YAWRECPIN, HIGH);
 
 unsigned long yrecpindur = 1500;
 unsigned long yawrecpindur = 1500;
 
 if(xrecpindur != 0)
 {
 if(xrecpindur &lt; DEADZONELOWERLIMIT || xrecpindur &gt; DEADZONEUPPERLIMIT)
 { 
 Xspeed = map(xrecpindur, MINVALUE, MAXVALUE, MINSPEED, MAXSPEED);
 }
 else
 {
 Xspeed = 0;
 }
 }
 
 if(yrecpindur != 0)
 {
 if(yrecpindur &lt; DEADZONELOWERLIMIT || yrecpindur &gt; DEADZONEUPPERLIMIT)
 { 
 Yspeed = map(yrecpindur, MINVALUE, MAXVALUE, MINSPEED, MAXSPEED);
 }
 else
 {
 Yspeed = 0;
 }
 }
 
 if(yawrecpindur != 0)
 {
 if(yawrecpindur &lt; DEADZONELOWERLIMIT || yawrecpindur &gt; DEADZONEUPPERLIMIT)
 { 
 Rotation = map(yawrecpindur, MINVALUE, MAXVALUE, MINROTSPEED, MAXROTSPEED);
 }
 else
 {
 Rotation = 0;
 }
 }
 
 }*/</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">control</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-keyword">if</span>(ET.receiveData())
  {
    <span class="hljs-comment">//this is how you access the variables. [name of the group].[variable name]</span>
    Xspeed = senddata.Xspeedtrans;
    Yspeed = senddata.Yspeedtrans;
    Rotation = senddata.Rotationtrans;
  }
  
}


<span class="hljs-comment">//***************************************************************************************************************</span>
<span class="hljs-comment">// stepper driver subroutines</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stepper_act</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-comment">//Serial.println(&quot;stepper act&quot;);</span>
  speed(Xspeed, Yspeed, Rotation);

  <span class="hljs-keyword">if</span>(xspeed != <span class="hljs-number">0</span>)
    x_t = <span class="hljs-keyword">int</span>(STEP/<span class="hljs-built_in">abs</span>(xspeed)*<span class="hljs-number">1000000</span>); <span class="hljs-comment">//time (us) for 1 step at xspeed</span>

  <span class="hljs-keyword">if</span>(yspeed != <span class="hljs-number">0</span>)
    y_t = <span class="hljs-keyword">int</span>(STEP/<span class="hljs-built_in">abs</span>(yspeed)*<span class="hljs-number">1000000</span>); <span class="hljs-comment">//time (us) for 1 step at yspeed</span>

  <span class="hljs-keyword">if</span>(zspeed != <span class="hljs-number">0</span>)
    z_t = <span class="hljs-keyword">int</span>(STEP/<span class="hljs-built_in">abs</span>(zspeed)*<span class="hljs-number">1000000</span>); <span class="hljs-comment">//time (us) for 1 step at zspeed</span>

  <span class="hljs-keyword">if</span>(xspeed &gt; <span class="hljs-number">0</span>)
    digitalWrite(XDIR, HIGH);
  <span class="hljs-function"><span class="hljs-keyword">else</span>
    <span class="hljs-title">digitalWrite</span><span class="hljs-params">(XDIR, LOW)</span></span>;

  <span class="hljs-keyword">if</span>(yspeed &gt; <span class="hljs-number">0</span>)
    digitalWrite(YDIR, HIGH);
  <span class="hljs-function"><span class="hljs-keyword">else</span>
    <span class="hljs-title">digitalWrite</span><span class="hljs-params">(YDIR, LOW)</span></span>;

  <span class="hljs-keyword">if</span>(zspeed &gt;<span class="hljs-number">0</span>)
    digitalWrite(ZDIR, HIGH);
  <span class="hljs-function"><span class="hljs-keyword">else</span>
    <span class="hljs-title">digitalWrite</span><span class="hljs-params">(ZDIR, LOW)</span></span>;

  xMove(xspeed);
  yMove(yspeed);
  zMove(zspeed);

}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speed</span><span class="hljs-params">(<span class="hljs-keyword">double</span> XSpeed, <span class="hljs-keyword">double</span> YSpeed, <span class="hljs-keyword">double</span> Rotation)</span>
</span>{
  <span class="hljs-keyword">long</span> time_step = micros() - prev_time;
  prev_time = micros();

  xspeed = XSpeed + <span class="hljs-number">83.154</span>*ToRad(Rotation);
  yspeed = YSpeed*<span class="hljs-number">0.866</span> - XSpeed*<span class="hljs-number">0.5</span> + <span class="hljs-number">83.154</span>*ToRad(Rotation);
  zspeed = -YSpeed*<span class="hljs-number">0.866</span> - XSpeed*<span class="hljs-number">0.5</span> + <span class="hljs-number">83.154</span>*ToRad(Rotation);
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">xMove</span><span class="hljs-params">(<span class="hljs-keyword">double</span> xs)</span>
</span>{
  <span class="hljs-keyword">if</span>(xs != <span class="hljs-number">0</span>)
  { 
    Timer5.setPeriod(x_t/<span class="hljs-number">2</span>);
    Timer5.attachInterrupt(xPulse);
  } 
  <span class="hljs-keyword">else</span>
  {
    Timer5.detachInterrupt();
  }
}


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">yMove</span><span class="hljs-params">(<span class="hljs-keyword">double</span> ys)</span>
</span>{
  <span class="hljs-keyword">if</span>(ys != <span class="hljs-number">0</span>)
  { 
    Timer3.setPeriod(y_t/<span class="hljs-number">2</span>);
    Timer3.attachInterrupt(yPulse);
  } 
  <span class="hljs-keyword">else</span>
  {
    Timer3.detachInterrupt();
  }
}


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zMove</span><span class="hljs-params">(<span class="hljs-keyword">double</span> zs)</span>
</span>{
  <span class="hljs-keyword">if</span>(zs != <span class="hljs-number">0</span>)
  { 
    Timer4.setPeriod(z_t/<span class="hljs-number">2</span>);
    Timer4.attachInterrupt(zPulse);
  } 
  <span class="hljs-keyword">else</span>
  {
    Timer4.detachInterrupt();
  }
}


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">xPulse</span><span class="hljs-params">()</span>
</span>{
  digitalWrite(XPUL, digitalRead(XPUL) ^ <span class="hljs-number">1</span>);
}


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">yPulse</span><span class="hljs-params">()</span>
</span>{
  digitalWrite(YPUL, digitalRead(YPUL) ^ <span class="hljs-number">1</span>);
}


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zPulse</span><span class="hljs-params">()</span>
</span>{
  digitalWrite(ZPUL, digitalRead(ZPUL) ^ <span class="hljs-number">1</span>);
}

<span class="hljs-comment">//***************************************************************************************************************</span>

<span class="hljs-comment">//setup</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span>
</span>{   
  Serial.begin(<span class="hljs-number">115200</span>);
  <span class="hljs-comment">//Serial1.begin(115200);</span>

  Serial.println(<span class="hljs-string">&quot;ballbot firmware v1&quot;</span>);

  init_control();
  Serial.println(<span class="hljs-string">&quot;control initialized.&quot;</span>);

  <span class="hljs-comment">//init_imu();</span>
  <span class="hljs-comment">//Serial.println(&quot;imu initialized.&quot;);</span>

  <span class="hljs-comment">//init_pid();</span>
  <span class="hljs-comment">//Serial.println(&quot;pid loops initialized.&quot;);</span>

  init_stepper();
  Serial.println(<span class="hljs-string">&quot;stepper driver initialized&quot;</span>);

}


<span class="hljs-comment">//main Loop</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> 
</span>{

  control();
  <span class="hljs-comment">//imu_act();</span>
  <span class="hljs-comment">//pid_act();</span>
  stepper_act();

  <span class="hljs-comment">/*Serial.print(pitch);
   Serial.print(&quot;,&quot;);
   Serial.print(roll);
   Serial.print(&quot;,&quot;);
   Serial.print(yaw);
   Serial.print(&quot;,&quot;);*/</span>

  Serial.print(Xspeed);
  Serial.print(<span class="hljs-string">&quot;,&quot;</span>);
  Serial.print(Yspeed);
  Serial.print(<span class="hljs-string">&quot;,&quot;</span>);
  Serial.print(Rotation);
  Serial.print(<span class="hljs-string">&quot;,&quot;</span>);
  Serial.print(xspeed);
  Serial.print(<span class="hljs-string">&quot;,&quot;</span>);
  Serial.print(yspeed);
  Serial.print(<span class="hljs-string">&quot;,&quot;</span>);
  Serial.print(zspeed);
  Serial.println(<span class="hljs-string">&quot;;&quot;</span>);


}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numBytes)</span> </span>{}

<span class="hljs-comment">//***************************************************************************************************************</span>



 </pre><br></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'fdsfkY4f-_0t8b_Fwv8PxdKxgrHUqyynW9KI';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>