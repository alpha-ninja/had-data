<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; HydroPWNics &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F15141">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/2964">HydroPWNics</a>
                    </p>
                    <p class="description-summary">An open source hydroponic garden control, monitoring, and grow system with cloud database integration</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/2632-adam-vadala-roth" title="Visit Profile">
                                Adam Vadala-Roth
                            </a>
                            <span>&bull;</span>
                            5 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <h2>Abstract</h2><p>HydroPWNics  is an open source intelligent, connected, and autonomous hydroponic and dirt based garden control system. The goal is to design and develop an open source garden control system to facilitate sustainable independent farming. Existing systems for this purpose are mostly proprietary and expensive, HydroPWNics aims to be a fully open source and cost effective solution for everyone!</p><p><img src="https://cdn.hackaday.io/images/4753161439760607633.JPG" width="638" height="479" style="width: 638px; height: 479px;"></p><h2>Overview</h2><p>More specifically HydroPWNics is the system of hardware and software designed to control and monitor hydroponic gardens. The goal of such a system is to create a precisely controlled automated hydroponic garden. The benefit of such a garden would be autonomous food production, self-sustainability, and conserve water as a resource. The system consists of custom electronics and software integrated with and builtd on top of the already existing Neuron Robotics development kit. Hardware consists of the Neuron Robotics DyIO module, the HydroPWNics modules, and a Beaglebone Black. The DyIO is used in the AC power control box subsystem. The HydroPWNics modules are used for wireless plant and environmental sensing, and the Beaglebone Black runs the Java application directing all the hardware. The software consists of a Java application running on the Beaglebone for controlling the garden and a webui/website for viewing plant data and controlling the garden remotely. The Java application is written in the Neuron Robotics SDK and the HydroPWNics API, this application is what controls the garden, directing the hardware modules (DyIO, HydroPWNics modules) and sending plant data to the cloud (<a href="http://www.vivaplanet.io/">http://www.vivaplanet.io/</a>).</p><h2>Problem</h2><p>HydroPWNics was started with the idea of creating an autonomous hydroponic garden. The purpose of such a garden would be for the autonomous and ultra-efficient production of healthy food produce. Modern human beings have busy schedules, may lack the expertise for agriculture, or be in a location that makes it difficult. HydroPWNics aims to be a complete open source autonomous hydroponics garden using the nutrient film technique method to save water. Developing nations could possibly make use of such a system to maximize food production and save huge on fresh water, a scare resource in some nations. Thought not initially, HydroPWNics will evolve into a solar powered system, further extending its efficiency and making it more energy friendly. By virtue of being open source HydroPWNics and every subsystem it incorporates is available to anyone everywhere. Additionally the basic components of the system are designed from parts easily source-able at hardware stores aside from the electronics. </p><h2>Detailed Breakdown of The Whole System</h2><h2>Electronics:</h2><p><strong>Custom HydroPWNics Hardware</strong> (Hardware designed and developed for the project)</p><p>The HydroPWNics Hardware is of a modular design consisting of a Module Hub as a master controller and Modules for function and sensing. The Module Hub interfaces with up to three modules, each module connect to a port on the module hub and communicates with it over UART. The Module Hub also contains an ESP8266 WiFi SoC for communication with cloud and Beaglebone Black. Currently the Modules consist of two models, the Analog Sensor Module and the Digitial Sensor Module. The Analog Sensor Module allows for interfacing with up to 9 analog sensors. The Digital Sensor Module can interface with up to 4 I2C based sensors. With this modular system additional modules can be created for additional functions and easily be swapped into a slot on the Module Hub. For now the focus will be on sensing for plants and environmental monitoring, but in the future modules for automating the other aspects of the garden will be created. The Goals is to have the whole system running off HydroPWNics hardware modules and the Beaglebone Black in the end.</p><p><strong>Sensor Modules</strong></p><p>Two Sensor modules two cover nearly all bases of plant sensing and monitoring. The analog module is designed to interface with 9 analog  sensors via ADC on the ARM MCU. The digital sensor module is designed to interface with 4 I2C sensors, specifically combination temp/humidity sensors and other sensors that talk over I2C. Each module communicates with the module hub via a galvanically isolated UART serial port. In the future there might be different variants of the digital board, I&apos;m thinking either a SPI or 1 Wire version, both or a mixed one, necessity will dictate which one gets made.<a href="https://github.com/adamjvr/HydroPWNicsHardware" target="_blank"></a></p><p><strong>Analog Sensor Module:</strong></p><p>Specs:</p><p>- MKL05Z16VFK4 ARM Cortex M0+ 48MHZ MCU</p><p>- 9 Analog Sensor Inputs with 3V3 DC Power</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>-  ARM Cortex M JTAG Debug Connector </p><p>- Galvanic isolation</p><p>- M3 mounting holes</p><p><img src="https://cdn.hackaday.io/images/4402281439673791167.png"></p><p>Hardware source for Analog Sensor Module: <a href="https://github.com/HydroPWNics/AnalogSensorModule-Hardware">https://github.com/HydroPWNics/AnalogSensorModule-Hardware</a></p><p><strong>Digital Sensor Module:</strong></p><p>- MKL05Z16VFK4 ARM Cortex M0+ 48MHZ MCU</p><p>- 4 I2C Sensor Inputs with 3V3 DC Power</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>- ARM Cortex M JTAG Debug Connector </p><p>- 8 GPIO pins, power, ground Expansion connector (SPI signals included, some ADC too)</p><p>- Galvanic isolation</p><p>- M3 mounting holes</p><p><img src="https://cdn.hackaday.io/images/9173561439676492557.png"></p><p>Hardware Source for Digital Sensor Module: <a href="https://github.com/HydroPWNics/DigitalSensorModule-Hardware">https://github.com/HydroPWNics/DigitalSensorModule-Hardware</a></p><p><strong>HydroPWNics Module Hub</strong><br>The module hub is designed to interface with the sensor modules as well as any other module fitting the same formfactor. The hub can interface with 3 modules at once. Onboard the hub is another FreeScale ARM Cortex M0+ this time an MKV10 boasting a 75MHZ clockspeed and two UART peripherals. This chip was used because it has a high clock and two UARTs, one UART is used with an analog multiplexer to talk to the modules the other is used to for a Bowler serial port, allowing coms with other bowler devices at 5V. In additoin to interfacing with all the sensor modules, the hub also features three epxnasion headers, onboard power for modules, and an ESP-12E ESP8266 WiFi module.  The module hub will act as the hardware interface between all sensing modules and the software situated in the firmware of the modules/hub and the Java API. Module Hub hardware source: <a href="https://github.com/HydroPWNics/ModuleHub-Hardware">https://github.com/HydroPWNics/ModuleHub-Hardware</a><a href="https://github.com/adamjvr/HydroPWNicsHardware" target="_blank"></a></p><p><strong>Module Hub</strong> </p><p>Module Hub Spec:</p><p>- MKV10Z16VFM7 - 32 Pin QFN 5X5</p><p>- 3 Module Ports with 12VDC Power</p><p>- ESP8266 ESP-12E WiFi Module</p><p>- On Board DCDC 3V3 regulator for 1A 3V3 DC Power</p><p>- On Board DCDC 5VDC regulator for 1A 5V DC power (level shifter/expansion)</p><p>- ARM Cortex M JTAG Debug Connector </p><p>- 74HC4052 Analog Multiplexer Demultiplexer for UART module Interfacing</p><p>- 3 M3 Screw Mounting holesModule Hub:</p><p><img src="https://cdn.hackaday.io/images/2102311439696042044.png"><strong><br></strong></p><p>Module Hub with modules hooked in place.</p><p><img src="https://cdn.hackaday.io/images/3992471439789898453.png"></p><p><strong><br></strong></p><p><strong>DyIO Module</strong></p><p>The DyIO shorthand for Dynamic Input Output, is an open source electronics/software/control/robotics platform based around the DyIO controller module and an advanced software API that runs on the PC in Java with other languages on the way. You can learn more about it on the Hackaday Projects page for it here: <a href="https://hackaday.io/project/3185-dyio-dynamic-input-output-controller" target="_blank">https://hackaday.io/project/3185-dyio-dynamic-input-output-controller</a> The DyIO module will be used primarily for driving high current AC solid state relays controlling all AC current devices within the system. </p><p><img src="https://cdn.hackaday.io/images/1483971439700606386.png"></p><h2>Electrical Subsystems</h2><p><strong>Control Box</strong></p><p>The control box contains a Beaglebone Black, USB wifi adapter, USB hub, and powersupply. The Beaglebone Black runs the control software for the system, a java program written in the Neuron Robotics SDK. The USB hub is for connecting the wifi adapter and multiple external USB devices, such as DyIO modules and FTDI serial converters. The power supply will be an of the shelf 12V switching PSU, typically found on ebay and alibabba, and some pololu DCDC converter boards for lower voltages, the power supply is designed to power the BBB and USB hub, eventually this system will be designed to run off a solar power battery system.</p><p>Specs:</p><p>- Beaglebone Black Rev C</p><p>- Two Pololu 5A 3v3/5v DCDC Converters</p><p>- 12V PSU</p><p>- 5A USB Hub</p><p><img src="https://cdn.hackaday.io/images/5290711439623682341.png"></p><p><strong><br></strong></p><p><strong>AC Power, Pump, and Water Control Box</strong></p><p>The purpose of the AC Power box is to control AC power electronics within the system currently this includes the water pump and the grow lights. This box/subsystem is simple in its design, it consists of  a DyIO module, solidstate relays,  current sensors, and various connectors. </p><p>Specs:</p><p>- DyIO Module for control</p><p>- Solid state relay for each AC socket</p><p>- Current sensing on each AC socket</p><p>- Two water flow rate sensor inputs via 5 Pin Aviation Connectors</p><p>- Two water level sensor inputs via 4 Pin Aviation Connectors</p><p>- External USB port w/ optional cap.</p><p>- AC power input connector with fuse/switch</p><p>- AC Power daisy chain connector</p><p><img src="https://cdn.hackaday.io/images/1228641439624531958.png"></p><p><strong><br></strong></p><p><strong>Custom LED Grow Light</strong></p><p>HydroPWNics will be using custom made LED grow lights. LEDs are low power and energy efficient and run of DC voltage making conversion to solar power later easier. The lights are a simple design made of birch plywood, the LED strip is mounted inside and the PSU will be bolted on the end.  The lights consist of two kinds of strip, a red, red, blue, LED grow strip and a mixed LED purple LED strip. The lights mostly consists of the red, red, blue variety, with only a few being of the mixed purple variety. </p><p>Specs</p><p>- DCDC 12V 30A LED Strip PSU (common PSU folks use)</p><p>- 5050 Red/Red/Blue LED Grow Strip 16FT (2x)</p><p>- 5050 Purple Mixed LED Strip 16FT</p><p>- Plywood frame</p><p><img src="https://cdn.hackaday.io/images/9889071439704539989.png"></p><p><strong>Overview of Hardware Systems </strong><br></p><p>Now that all the subsystems have been described in detail a breakdown of how they all interact with in the system is in order. Follow along with the diagram below for a stronger understanding of what&apos;s to follow. The diagram is based around the control box so I&apos;ll start there. The control box interfaces with the DyIOs and serial converters via USB ports on the USB hub, the Module hubs interface with the control box over WiFi. The WiFi<span class="redactor-invisible-space"> networking is provided by a dedicated WiFi router running off the main house network via ethernet. Once all the hardware modules are built and running the system should be relatively easy to setup the goal is to really make it as simple as the diagram. </span></p><p><img src="https://cdn.hackaday.io/images/2504471439700546705.png"></p><h2>NFT Hydroponic Garden Grow System</h2><p>As part of the HydroPWNics project a simple cost effective NFT hydroponic grow unit was designed and developed as a means to test the HydroPWNics garden control system.</p><p>Learn how you can build your own Here:</p><p><a href="https://hackaday.io/project/7116-low-cost-nft-hydroponic-garden-under-200">https://hackaday.io/project/7116-low-cost-nft-hydroponic-garden-under-200</a></p><p>Specs:</p><p>- 4 Rows made from 5X5&quot; vinyl fence post</p><p>- 4 Plants per row in 3&quot; netted pots, total of 16 plants in the unit.</p><p>- Water level of each row adjustable with valve</p><p>- 16 Gallon reservoir</p><p>- 158GPH Submersible Pump</p><p>- Cheap wooden frame</p><p>- Water aeration in reservoir</p><p>- Support up to 16 plants with capacity for large root systems</p><p>How it Works:</p><p><img src="https://cdn.hackaday.io/images/5519091439790465054.png"></p><p>Work In Progress:</p><p><img src="https://cdn.hackaday.io/images/8522971439318431873.JPG"></p><h2>Complete Integration:</h2><img src="https://cdn.hackaday.io/images/6766171439761835505.png"><h2>Software Systems<br></h2><p><strong>Embedded Software</strong></p><p>The embedded software pertains to the software running on the ARM Cortex M0+ MCUs on board the Modules and Module Hub. The software running on both the Modules and Module hub will be a custom port of the Neuron Robotics C-Bowler server (<a href="http://neuronrobotics.com/Bowler-Protocol/Overview/">http://neuronrobotics.com/Bowler-Protocol/Overview/</a><span class="redactor-invisible-space">). This firmware will enable all the micro controller functions to be controlled via high level api (Java in this case) powered by the Bowler Communication system. This software setup was chosen because its an already working established system that is fairly easy to port over to any micro controller. The modules will not be directed the same way the hub will be by the java api, they will instead take simple commands from the module hub itself. Each module will identify itself to the hub as to what it is and what commands it can take, this is intended to keep things simple and abstract away complexity. The development plan for the emebbded software is to build working libraries for all functions of the two FreeScale CM0+s MCUs, and the ESP. The next step is to begin porting the C-Bowler server using the previous libraries. Next follows the never ending pursuit of developing the firmware and continually improving it! For development I will be using a student J-link and the FreeScale Freedom Board for the MKL05. Dev environment is probably going to be gcc on linux cli.</span></p><p><span class="redactor-invisible-space">Sensor/Function Module Software:</span></p><p><img src="https://cdn.hackaday.io/images/4297961439760193441.png" width="194" height="446" style="width: 194px; height: 446px;"></p><p><span class="redactor-invisible-space">Module Hub Software:</span></p><p><span class="redactor-invisible-space"><br></span></p><p><img src="https://cdn.hackaday.io/images/7821851439760271919.png" width="508" height="663" style="width: 508px; height: 663px;"></p><p><span class="redactor-invisible-space"><br></span></p><p><strong>High level Software</strong><br></p><p>The high level software pertains to the software application running on the Beaglebone black. The firmware described above running on the hardware only functions as a driver for the functions of the boards to be controlled from the high level program, the high level program is where all the application code will be written. In this case the application will be written in Java. The application software will communicate with the Module Hubs, polling them for data on the system and the plants, then packaging it to be pushed to the cloud. In addition to data collection and monitoring the application will be controlling ever aspect of the garden. The development of the high level software begins with an API written on top of the Neuron Robotics SDK, I call this HydroPWNIcs API. This API is meant for controlling the HydroPWNics hardware with the rest of the SDK. A big part of the API will be java objects representing the each hardware module.  The application software will also send and receive JSON packet commands to and from a web page designed to be a secure Web UI to control HydroPWNics remotely. The HydroPWNics project is also collaborating with the Vivaplanet.io project, vivaplanet.io is a database system for plants, HydroPWNics will be using it as the database for the cloud aspects of the project. The Java application on the Beaglebone Black will also publish the plant data to Vivaplanet.io, eventually Module Hubs will be able to push data directly to VivaPlanet as well.This section will become more detailed as it approaches :) </p><p><img src="https://cdn.hackaday.io/images/3037491439760304644.png" width="556" height="554" style="width: 556px; height: 554px;"></p><p><strong>Web Software</strong><br></p><p>The web software component of the project is the web page to which all the data will be published in the form of graphs and spreadsheets. The website will be written in HTML5 and Javascript, I will most likely grab some premade template and add javascript for securely connecting to the garden over the web. The website&apos;s primary function will be for remote viewing of garden status and remote monitoring data stats. If there is enough time the website will also feature a login page to reveal a dashboard to control/configure the garden over the web.  The basic design of the website will be a simple HTML5/JS website from a template, a page for each kind of graph, graphs implemented using JSFreeChart and smoothiecharts, and the control dashboard being implemented in JS. The website will send/receive JSON packets to and from the  garden for status updates and remote control/config functionality. As for the data in the charts, the web page will connect to Vivaplanet.io&#x2019;s database using the user&#x2019;s Vivaplanet.io login information and load the data from vivaplanet.io&#x2019;s database into the charts.</p><h2>Nutrients, Plants, Ecology, etc <br></h2><p>For the hydroponics component of the project I am using General Hydroponics grow nutrients. They seem to be a popular brand among hydro enthusiasts. I ran a small shallow culture last summer with these nutrients and I was impressed at how fast the plants grew, I&apos;m hoping to get the same experience but better now that I am building a proper unit. These nutrients come in very high concentrations so the 3 bottle set will last you quite a while.</p><p>General Hydroponics Nutrient Kit:</p><p><img src="https://cdn.hackaday.io/images/2413711430951914327.JPG"></p><p>Included the kit are three different bottles of nutrient solution. The three kinds are FloraGro 2-1-6, FloraMicro 5-0-1, and FloraBloom 0-5-4. FloraGro is for structural and foliar growth, the numbers 2-1-6 refer to the composition of the solution in percents, 2 percent total nitrogen, 1 percent phosphate, 6 percent soluable potash. FloraGro can be used on its own or combined with either of the other two (or both) for nutrient solutions tailored to a specific style of plant. Typically when I do cuttings (cloning) or start seeds I use a solution made of just water and FloraGro 2-1-6, for example. (Learn more about the FloraGro here: <a href="http://generalhydroponics.com/site/gh/docs/prod_labels/floragro.pdf" target="_blank">http://generalhydroponics.com/site/gh/docs/prod_labels/floragro.pdf</a>  )  FloraMicro is for providing plants with nitrogen, potassium, and calcium, its usually combined with FloraGro and given to plants well past seedling phase. The 5-0-1 refers the composition of 5 percent total nitrogen, the 0 refers to micro nutrients (see bottle label <a href="http://generalhydroponics.com/site/gh/docs/prod_labels/floramicro.pdf" target="_blank">http://generalhydroponics.com/site/gh/docs/prod_labels/floramicro.pdf</a>) , and 1 percent total soluable potash.  FloraBloom is for the later stages of the plants life, it provides the necessary nutrients for reproductive growth e.g flowering, fruits, and seed production. FloraBloom is added after the plants have advanced vegetative growth to begin the fruit developing process (Yay food!!!) . The 0-5-4 pertain to the composition of 5 percent available phosphate, 4 percent soluable potash, 1.5 percent magnesium, and 1 percent sulfur. (Learn more about the FLoraBloom <a href="http://generalhydroponics.com/site/gh/docs/prod_labels/florabloom.pdf" target="_blank">http://generalhydroponics.com/site/gh/docs/prod_labels/florabloom.pdf</a> ) In my experiment last year I mixed the solution for my plants based on the ratios recommended on the bottles of the nutrients, I will continue with that strategy to start but I would like to experiment with different combintations. Also long after the GH kit is used up (or sooner) I plan to evaluate Fox Farm branded nutrients as well as adding homemade compost based nutrient solution.</p><p>Special Thanks to General Hydroponics for having such informative labels for thier products, a lot of the information was derived from their labels and I feel like I should credit them here, all information on the nutrients was pulled from their PDF labels:</p><p><a href="http://generalhydroponics.com/site/gh/docs/prod_labels/floragro.pdf" target="_blank">http://generalhydroponics.com/site/gh/docs/prod_labels/floragro.pdf</a><br></p><p><a href="http://generalhydroponics.com/site/gh/docs/prod_labels/floramicro.pdf" target="_blank">http://generalhydroponics.com/site/gh/docs/prod_labels/floramicro.pdf</a><br></p><p><a href="http://generalhydroponics.com/site/gh/docs/prod_labels/florabloom.pdf" target="_blank">http://generalhydroponics.com/site/gh/docs/prod_labels/florabloom.pdf</a><br></p><p>General Hydroponics Site:</p><p><a href="http://generalhydroponics.com/site/index.php" target="_blank">http://generalhydroponics.com/site/index.php</a></p><p><strong>Plants and Creating Plants</strong></p><p>An important part of every garden no matter what kind are the plants that grow in the garden. There are a few ways to create plants for a hydroponic garden. You can start from seeds with special grow solution (time consuming), you can even order plants ready to go online, you can take cuttings of plants and clone/root them, and you can just take plants out of the ground clean off the roots and convert them over. I did a combination of pulling up plants and cuttings. To start the cuttings and convert the rooted plants over I got a small water culture rig.  The setup is simple, just a pot with a water agitation pump and a simple foam core cutout to hold the pots. To keep the plants in the pots and have something for them to root into I used rockwool cubes. For plants I got a bunch of strawberries in a raised box in my backyard I just pulled the offshoot plants out of the dirty and rinsed them before stuffing them into rockwool cubes. I had some basil cuttings rooting on a window sill with just plain water in a glass I just took the rooted plants and put them in rockwool cubes and added them to the rig. The other plants are tomatoes and jalapeno peppers which are just cuttings stuck into rockwool, I&apos;m hoping to root these. </p><p>In order to get these plants to root and have a lot o root growth I mixed up a solution for the water culture rig specifically for root grown and root boosting. Hopefully in a week or two these plants will be ready to load into the NFT Rig and be upgraded to bigger netted pots with terracotta stone growth media.</p><p><img src="https://cdn.hackaday.io/images/932731439318560406.JPG"><br></p><p><span></span></p>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'dXtv4A2x-AblzofVr-z77ulxZ5_OwRgco890';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>