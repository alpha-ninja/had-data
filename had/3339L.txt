<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Neurons, neurons, neurons... &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F3339%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/3339-neurons-neurons-neurons">Neurons, neurons, neurons...</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Hardware neuron simulation and learning system</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/7100-zakqwy" title="Visit Profile">zakqwy</a><span>&bull;</span>
                
                9 months ago<span>&bull;</span><a href="/project/3339#discussion-list" title="See Comments">16 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/3339-neurons-neurons-neurons">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/3339/logs/sort/newest">Newest</option>
                    <option value="/project/3339/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/3339/log/10997-neuron-development-v01-the-sketchup-plugin">Neuron Development: v0.1, the Sketchup plugin</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/10997#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-10997"><p><em><strong></strong>Note from Zach: Andrew wrote this up in early April of 2014. I've pasted it here without modification.<strong></strong></em></p><p>Zach asked me to write a little about the prehistory of the Neuron project, so here goes.</p><p>This Neuron project goes back a few years, to architecture grad school and a brief obsession with the idea of computer-generated architecture. I wrote programs that generated forms based on random walks, fractal games, and genetic iterators, but what I really wanted was to be able to mimic the accidents and discovery of design by writing a program that would iterate process rather than <em>form</em>: instead of always generating form using fractals or through the application of a pattern, I wanted to codify the decision to even use a tool in the first place, or to change the order of operations performed. I could write code that would do something myself and change it myself, but I wanted code that would rewrite itself.</p><p>I began casting around for a way to generate randomized algorithms that always worked. The solution as I conceived of it was to simplify everything to binary--to think of functions as nodes and to normalize their inputs and outputs to either 1 or 0, then generate a random directed graph from a bunch of function nodes, creating random loops and sequences of functions.</p><p>I'm not sure what led me to start thinking of the nodes as neurons--maybe I saw something like Randall Beer's periplaneta computatrix and recognized its applicability; I also had a friend who was getting a degree in physiology and I probably had a few conversations about biopsychology.</p><p><img src="https://cdn.hackaday.io/images/2639031415651227900.png"></p><p>Whatever the motivation, I wrote a program in Ruby using the SketchUp API that would generate a random cloud of 'neurons.' I didn't want the code to execute all at once, and I wanted it to step slowly enough that I could watch it, so I wrote an environment that would keep track of each 'neuron,' its upstream and downstream connections, and the messages it was sending. I then had the environment generate a model of the neurons in the SketchUp environment so that I could see the connections, and I had it color the neurons according to their potential. By allowing the environment to progress one step, every neuron's input was summed, checked against its internal threshold, and if the potential (sum of inputs) was greater than the threshold, a message was sent to all neurons downstream.</p><p><img src="https://cdn.hackaday.io/images/8816111415651278515.JPG"></p><p>Some of the neurons were designated 'actor neurons,' and when activated would move the insertion point or drop geometry into the 3D SketchUp environment. Some neurons were designated 'input neurons,' and would receive messages from the environment.</p><p><img src="https://cdn.hackaday.io/images/831191415651325562.jpg"></p><p><img src="https://cdn.hackaday.io/images/3962251415651349217.jpg"></p><p>Results were positive--the process certainly generated things, and each generation of randomized algorithm certainly had its own personality.</p><p><img src="https://cdn.hackaday.io/images/9067441415651387804.png"></p><p>The neurons and the networks they created started to be more interesting to me than what they actually produced. I read more about neurons, trying to understand what made them work in our own brains and the brains of animals, and how the model might better mimic organic neurons.</p><p>I learned about excitatory and inhibitory inputs, long term potentiation, Rosenblatt's <em>Perceptron</em>, and started to refine the model to be more generalized.</p><p><img src="https://cdn.hackaday.io/images/2698141415651426798.JPG"></p><p>Early in 2014 I decided I wanted to make physical versions of the software neurons. I knew absolutely nothing about electronics. Zach and I got to talking at a gathering and Zach saw potential in the idea, and proposed we work together.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11059-neurons-in-five-ish-minutes">Neurons in five (ish) minutes</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11059#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11059"><p>This video covers my basic understanding of some highly complex topics, and forms the rough background for what we're trying to simulate. </p><iframe allowfullscreen src="//www.youtube.com/embed/cXKlhdLGdmc" frameborder="0" height="315" width="560"></iframe><br><p>Comments welcome. More to come!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11091-neuron-development-v02-pro-minis-neopixels">Neuron Development: v0.2, Pro Minis + Neopixels</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11091#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11091"><p><em>Note from Zach: I wrote this about 7 months ago. Still catching up on background documentation, so I've pasted the post as-is. A bit wordy, I'm afraid... read on if you're bored.</em></p><p>I've been meaning to write this article for some time to document a few generations of Neuron prototypes. For starters, <a href="http://hackaday.io/project/3339/log/10997-neuron-development-v01-the-sketchup-plugin">I'll humbly defer to Andrew to cover the original model</a>; while it didn't have an official version number, you can think of it as v0.1. This first proof of concept was a software simulation, a Ruby script that lived in Sketchup and allowed one to seemingly imbue a wireframe model with life. We'll call that Part One of Neuron Development.</p><p>I started working on the project after v0.1 was created and improved a few times: tweaking threshold and falloff coefficients, adding a simple GUI, that sort of thing. We quickly decided that the next version would be completely different, present in the physical world with all of its benefits and constraints. Our experience with the Sketchup plugin helped us understand the need for large numbers of devices; while four Neurons could build a basic self-sustaining loop, eight Neurons made the loop more visible. Sixteen Neurons could be linked into two loops of different sizes; impulses would travel quickly around a small loop, dumping new signals into the larger loop until it was finally saturated with noise. Thirty-two Neurons could build an interconnected web whose function was impossible to predict. Larger numbers allowed one to actually visualize "waves" of data sweeping across vastly complicated networks. We found that some complex models produced rapidly building oscillations, while others couldn't keep a signal moving for more than a few seconds.</p><p>At that moment, we realized that we needed to scale up production rapidly: not just for cost reduction and packaging improvement, but to demonstrate the truly fascinating potential of the system. Financial optimization was still important, though. Without even considering production scale-up, just building enough prototypes could be cost prohibitive. With that in mind, we decided to intentionally build several generations of devices, hoping to 'iron out' some initial issues while minimizing iterations and design time in the interest of personal engagement.</p><h2>v0.2: the first physical Neuron prototype</h2><p>Our main concern with v0.2 was building enough devices to sustain a loop. Without getting into too much detail--that's for another post that dives into potential levels and such--it's important to know that Neurons can only send signals so fast before recovering for a set period of time. The relationship between the recovery time and the signal propagation rate through a network tells you how many Neurons you need to build a loop that never ends: that is, a pulse that starts moving will continue exciting downstream Neurons and moving around the loop, even upon returning to the originator of the first signal. However, optimizing just for those two values will create a scenario so granular it is difficult to discern signal direction; two Neurons, even sending signals unidirectionally via different physical channels, would appear to alternate. Because of this, and to improve the general look of the system, we decided to construct five devices.</p><p>The original Sketchup program used colors to indicate internal potential levels of Neurons: green for ground state, turning red as potential increases, then flashing to blue during the recovery period when the internal level is negative. Using these colors produces an interface simple enough to be interpreted en masse: glancing at a network would tell you activity level and make it easy to identify unintentional loops and epileptic conditions. I'd previously worked with RGB pixels of various sorts; once you had the libraries working right, it was pretty easy to modulate colors and intensities to represent complex conditions. I picked up a handful of Adafruit's breadboard-ready Neopixels; I figured they'd have good libraries that would make them easy to integrate, and they were pretty much plug-and-play. For controllers, we got a set of Sparkfun's Arduino Pro Mini 5vdc boards: pretty much the cheapest official Arduino board we could find, and we figured we could repurpose them for other projects at a later point. These aren't natively USB-capable, so we picked up an FDTI cable too for burning new programs.</p><p>We knew this first version would be confined to a breadboard; we could have soldered short jumpers directly to the Pro Mini boards and skipped header altogether, but we didn't want to waste a bunch of Arduinos on a potentially failed design. Once the parts arrived, we soldered on header and crammed five of the assemblies into my 2-row breadboard. Not much room for anything, but fortunately the discrete components supporting the LEDs and microprocessors are limited: a few pull-down resistors for the inputs and a large electrolytic capacitor on the power rail is about it. I also like to put a PCB-mount switch on my breadboard with a little power LED, so I can quickly shut down circuits when I put something in backwards. In the video below, one switch excites the Neuron directly to its right, while the other switch excites all five. They're also connected to each other in a counter-clockwise loop:<em><iframe allowfullscreen src="//www.youtube.com/embed/RH0pM536Uak" frameborder="0" height="315" width="560"></iframe></em></p><p>I'm not going to go in depth on firmware here: partially because I'm more of a hardware guy, and partially because the code I originally worked out for those Neurons never quite worked right. Andrew put together a version of the program that performed much more reliably, but we ran in to a few problems along the way:</p><ul><li>Bouncy switches. That is to say, buttons that "ring" a bit after they're pressed. Most pushbuttons--espeically the cheap PCB-mounted ones I picked up at the local surplus shop--don't make contact cleanly when they're pressed, instead oscillating rapidly between open and closed over the course of a few milliseconds. Rather than adding a debounce routine into our code, we solved this problem using a simple RC circuit to smooth out the 'low' pulses.</li><li>Variable size. We'd power on a few Neurons and run a test or two, then roughly a minute into the run they'd do weird things. Change color, stop responding, or (more frequently) just turn off. We were using unsigned 8-bit integers to measure milliseconds, and once we got to exactly 65.536s (i.e. 2E8 ms), those variables would overflow and weird things would happen to the loops and routines that depended on them. Bumped up to doubles, which are 16-bit integers capable of counting for quite a few more milliseconds.</li><li>Timing. This would prove to be the ultimate downfall of v0.2: the LEDs, while beautiful and easy to use, were extremely processor intensive. Neopixels are WS2812 LED chips mounted on various types of boards, and the WS2812 is a unique beast: it's actually a tiny white circuit board potted in an epoxy lens, containing an RGB LED chip and a dedicated (tiny) microprocessor. In order to render various colors, you just send that microprocessor 8-bit serial data: it uses an internal PWM module to vary the brightness of the three LED elements as needed based on the data it receives. Trouble is, they're really optimized for larger displays of 20, 50, or even more devices. Since they all run on the same serial bus, and they're intended for use at 30Hz update rates for displays, that serial protocol is <em>fast</em>. As in, 800 kHz timebase fast! That may not seem like much, but the Arduino's ATmega chip runs at 20 MHz... and we were running enough code beyond the NeoPixel firmware that we couldn't get a reliable data connection going to the LED. I think it's a problem that we ultimately could have solved given enough work (probably through better use of interrupts and generally more efficient code), but we decided to move on.</li></ul><p>Now that I've made it this far, I think I'll split off the next generation into a separate post. v0.3 goes after the problems listed above, and discovers some new ones along the way.<br><em></em></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11298-neuron-development-v03-many-small-improvements">Neuron Development: v0.3, many small improvements</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11298#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11298"><p><em>More background from this past Spring.</em></p><p>The next phase of Neuron development was a bit faster. In terms of hardware, it was more of a 'tock' compared to the 'tick' of <a href="https://hackaday.io/project/3339/log/11091-neuron-development-v02-pro-minis-neopixels">Neuron v0.2</a>. Having said that, we still made a few physical changes to our setup, in ascending order of importance:</p> <ul><li>We purchased and assembled 5 additional Arduino Pro Mini 5vdc modules from Sparkfun. While we did consider moving to a different platform, the Arduino gave us tons of power and flexibility (compared to our ultimate plan of a relatively bare-bones processor); also, we already had 5, so it was a cheap way to get 10 Neurons. That means, at the very least, an interesting single loop.</li><li>Andrew got his hands on a monster breadboard; I think it's got 4 rows with a separate power bus. More than enough room to fit ten Neurons with a few support components.</li><li>We ditched the NeoPixels. Personally, I was pretty set on the 'pretty blinkenlights' effect; however, Andrew brought up the excellent point that we needed to get something that worked reliably, and RGB fading LEDs might have to wait for now. Reaching back towards the color scheme of Neuron v0.1, we ended up using a pair of diffused T 1 3/4 LEDs, one red (for trigger indication) and one green (for internal potential level).</li></ul><p>Andrew took the lead on the firmware for this generation and we ended up with a much more stable design; without the timing and overflow issues, we were free to build networks and run tests on various neural configurations. Once the basic functionality was validated, we began to experiment with the coefficients developed in v0.1. I learned that the v0.2 program had another issue: the decay time was far too long, at least for building a small self-sustaining loop.</p><iframe allowfullscreen src="//www.youtube.com/embed/0upVj7Wr8NU" frameborder="0" height="315" width="560"></iframe><p>I pulled that video link out of an email Andrew sent my way on Feb 23, 2014. My exact response was:</p><p><em>"Oh man, that is insanely awesome. Man. Man that is exciting. Wow.</em></p><p><em>We need to make a whole crap ton of these things."</em></p><p>Neuron v0.3 didn't stick around for long; the Pro Minis got re-purposed into various other projects, including a reflow oven controller, a MIDI interface, <a href="https://hackaday.io/project/996-gimbalbot">GimbalBot's</a> test rig, and a few other random projects. But the proof of concept worked well enough; we could definitely see the potential for awesomeness with v0.3.</p><p>Time to scale up production.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11324-neuron-development-v04-part-1-goals">Neuron Development: v0.4 part 1: Goals</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11324#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11324"><p>High-level planning for v0.4. I'll dive in to the BOM in detail in a later post.<br></p><iframe allowfullscreen src="//www.youtube.com/embed/ScrxGgH0bio" frameborder="0" height="315" width="560"></iframe></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11337-neuron-development-v04-part-2-bom">Neuron Development: v0.4 part 2: BOM</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11337#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11337"><p>In the <a href="http://hackaday.io/project/3339/log/11324-neuron-development-v04-part-1-goals">previous post</a>, I discussed the main constraint of this project--the BOM cost should stay below $5 in reasonable quantity. Between the microcontroller, LED, connectors, and board, that means every cent matters. Before digging into the [quite simple] schematic, I figure a quick overview of the v0.4 bill of materials would be helpful.</p><p><strong>Microcontroller</strong></p><p><img src="https://cdn.hackaday.io/images/3619381416963858588.JPG"></p><p>As mentioned in the video, we're using the <a href="http://www.atmel.com/images/doc8183.pdf">ATTiny44A</a>. Digi-Key has 'em at $0.855 each and the chip seems to have everything I need:</p><ul><li>4K program memory</li><li>0-20 MHz clock speed (faster than I remembered!)</li><li>12 I/O lines</li><li>Two timers</li></ul><p>Actually, this was something of a crapshoot--I knew how many I/O lines I needed, but I pretty much ball-parked program memory. 4k seemed.. uh.. reasonable.<br></p><p><strong>Programmer</strong><img src="https://learn.adafruit.com/system/guides/images/000/000/254/medium800/531946274_dcd8763cda_o.jpg?1396719621">Easy decision--<a href="https://learn.adafruit.com/usbtinyisp/overview">Adafruit's USBtinyISP</a> kit. It's cheap, and [Ladyada] has a <a href="http://www.ladyada.net/learn/avr/setup-unix.html">great guide</a> that covers using this system in Linux with the free AVR GCC toolchain. This project added 'toolchain' to my vocabulary, so running through her instructions was an excellent learning experience. Technically not part of the BOM, but I needed it for the project.</p><p><strong>Connectors</strong></p><p>I was shocked by how much board-level connectors cost; I found some awesome Molex <a href="http://www.molex.com/molex/products/family?key=picoezmate&amp;channel=products&amp;chanName=family&amp;pageTitle">surface mount units</a> that seemed perfect, but they were upwards of $0.50 each! I ended using the <a href="http://www.te.com/catalog/minf/en/609">TE Connectivity HPI</a> platform with 2mm pin spacing:<br></p><p><img src="https://cdn.hackaday.io/images/8820761416965013494.JPG"></p><p>2mm pin spacing is a bit funky (2.54mm corresponds to 0.1"), but it keeps the connectors somewhat compact. Remember, I'm trying to cram 7 connectors on each Neuron--6 dendrites and one axon. In any case, the price made the decision easy: $0.02998/connector, $0.0562/header, and $0.01079/crimp terminal. </p><p><strong>Crimp tool</strong></p><p>Another tool. The ADS for the crimp connectors recommended a $2000+ press for making connections; the kindly customer service folks at Digi-Key recommended an <a href="http://www.engineer.jp/en/products/pa09e.html">Engineer PA-09</a> for $89.95:<br></p><p><img src="https://cdn.hackaday.io/images/7252821416965393220.JPG"></p><p>My cousin [Curtis Layton] gave 'em a great review so this was an easy decision to make. If you do the same, I recommend <a href="http://www.amazon.com/Engineer-PA-09-Micro-Connector-Crimpers/dp/B002AVVO7K/ref=sr_1_1?s=hi&amp;ie=UTF8&amp;qid=1416970403&amp;sr=1-1&amp;keywords=engineer+pa-09">purchasing them on Amazon</a> for half the price :-/</p><p><strong>RGB LED</strong><strong></strong></p><p>RGB. Small. Cheap. Bright. I didn't give this much thought and ended up with a <a href="http://optoelectronics.liteon.com/upload/download/DS22-2001-076/S_110_LTST-C19FD1WT.pdf">Lite-On model</a> for $0.279 each:</p><p><img src="https://cdn.hackaday.io/images/4510141416965811340.JPG"></p><p><strong></strong>What could go wrong? I'll tell you--leadless packages are a PITA to rework without a hot air setup, and 605 nm is NOT red--something I should have remembered from my days puttering about with HeNe lasers.<strong></strong></p><p><strong>Other stuff</strong></p><p>Very little beyond the board, which I'll cover separately along with the schematic. All inputs are pulled low using 10k external resistors (6 total), and the ATTiny44A has a 0.1 uF filtering cap. The LED has a few dropping resistors since I'm using 5VDC power. Not counting the board itself or any non-board-mounted connectors (or stuff like solder and my time), I'm at roughly $1.50 each if I make a hundred or so. So far so good.</p><p>More to come!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11386-neuron-development-v04-part-3-schematic-and-board">Neuron Development: v0.4 part 3: Schematic and Board</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11386#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11386"><p>TL;DR: Kicad kicks ass.</p><p>I've spent most of my life staring at schematics in one form or another, but everything I've built to this point used some kind of point-to-point breadboard technique. Many years ago I discovered the <a href="http://www.radioshack.com/dual-general-purpose-ic-pc-board/2760159.html#start=1">RadioShack 276-159</a>; it can handle a smallish DIP IC and a few peripherals and is readily available up the street. Great for LM3909s, 555s, 741s, and all manner of random interface boards and LED blinkers.</p><p>No good for SMD work, however. For the Neuron, I wanted to go full custom to minimize size and maximize awesomeness. Taking [Chris Gammell's] advice, I took my first plunge into circuit design using Kicad. </p><p><strong>Circuit Design</strong></p><p>I wanted Neurons to be incredibly simple. As such, they communicate by sending 5VDC pulses to each other--that's it. The interconnections between Neurons--I call them Axons in an attempt to be somewhat biologically accurate--require three conductors, VCC, Gnd, and signal. Taking a cue from servos, I put the VCC conductor in the middle so miswiring would most likely just ground out an input or output rather than short out a whole string of Neurons. As I mentioned in the last post covering the BOM, the only components beyond the seven board-level connectors, microcontroller, and LED are passives needed for signal filtering and current limiting.</p><p><img src="https://cdn.hackaday.io/images/1915571417112474708.png"></p><p>A few notes:</p><ul><li>K1-K7 are 2mm spacing TE Connectivity 3-conductor headers</li><li>C1 and C2 are the two filtering caps recommended in the ATTiny44A datasheet</li><li>R1-R6 are pulldown resistors for the dendrites (inputs)</li><li>R7-R9 are current limiting resistors for the RGB (OGB?) LED</li><li>K8--ah, K8. You'll notice that I didn't include a JTAG header for programming--fortunately, all of the JTAG pins on the ATTiny are shared with various inputs and outputs, so I can program the boards using an adapter harness. All except the Reset pin, so I added a jumper. Simple enough.</li></ul><p><strong>Board Design</strong></p><p>I wanted to minimize area--not just to save cost, but to make each Neuron as compact as possible. Auto routing is for suckers, so this is what I ended up with:</p><p><img src="https://cdn.hackaday.io/images/9185011417112895422.png"></p><p>Again, notes:</p><ul><li>VCC and Gnd traces are 30 mil--pretty much the largest I could do. Neurons feed power to each other and I wanted to maximize the number per power input; based on some very fast web research, I think that should be good for 1A or more. </li><li>I wish the Axon connector was centered. Oh well. At the least the LED is centered in one dimension.</li><li>Tiny! Well, pretty tiny. I was shooting for &lt;1" on each side but that wasn't in the cards.</li><li>No vias. Vias are for suckers. Or something. That was fairly arbitrary, actually.</li><li>K8, the Reset connector, is just a loop of wire.</li><li>Red is Component Side. Green is Solder Side.</li><li>Cyan is silkscreen on the component side. This was back when I planned for 3 Inhibitory inputs--not the case presently, but more on that later.</li><li>Magenta is silkscreen on the solder side. Neuron v0.4, Salfred Labs.</li></ul><p><strong>Salfred Labs</strong></p><p><strong></strong>That brings up a great point. What is Salfred Labs, and why is it silkscreened on the Neuron board?</p><p>Andrew <strong>Sal</strong>veson + Zach <strong>Fr</strong><strong>ed</strong>in = Salfred Labs! It's what we thought about calling our company, if we'd made a company. Probably won't happen now, but the legacy lives on in Neuron v0.4. </p><p>More to come! Happy turkey day!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11448-neuron-development-v04-part-4-skip-the-prototypes">Neuron Development: v0.4 part 4: Skip the Prototypes!</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11448#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11448"><p>When you haven't designed a board before and are planning a decent-sized production run, it's probably a good idea to use a service like <a href="https://oshpark.com/">OSH Park</a> to test your design prior to scaling up. Silly mistakes are almost inevitable, and squeezing an iteration between Kicad and scale-up is good practice. </p><p>Unless you're really impatient, like me.</p><p>I ended up working with the kind folks at <a href="http://www.goldphoenixpcb.com/">Gold Phoenix PCB</a> for the Neuron v0.4 boards. A few specifics on the order:</p><ul><li>Everything Neuron is <a href="http://en.wikipedia.org/wiki/Restriction_of_Hazardous_Substances_Directive">RoHS compliant</a>, since there's a good chance kids will be fiddling around with the bare boards. That means lead-free solder, which means higher temperatures for reflow. As such, I used high-temperature 0.062" FR4 rated for reflow temperatures.</li><li>I included E-testing, fancy light-blue solder mask, white silkscreen, and RoHS-compliant tinning as optional adders. </li><li>I uploaded a single board Gerber and used Gold Phoenix's online tool to panelize and V-score the boards--32 per panel at ~1.2"x1.2" each.</li></ul><p><img alt="Neuron v0-4_board1.jpg" src="http://salfred.com/sites/default/files/pictures/Neuron%20v0-4_board1.jpg"></p><p>I ordered 128 pieces; one board came back with a red dot (failed E-test) so Gold Phoenix threw in another sheet--netted me 31 free Neurons, thanks guys! Without expediting, these showed up on my front porch 8 days after uploading the Gerber files. Needless to say, I'm quite happy with how this turned out. $1.9146/piece, and that's before figuring in the free sheet!</p><p>After the boards arrived, I frantically hand-soldered one together, crimped up an ISP programming harness, and uploaded a simple program to light the green LED:<br></p><p><img alt="Neuron v0-4_board2.jpg" src="http://salfred.com/sites/default/files/pictures/Neuron%20v0-4_board2.jpg"></p><p>While this didn't tell me everything, at least I can talk to the chip and the LED seems to work. Hand soldering the LED was a PITA, so the next units will be reflowed. </p><p>More to come!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11549-toaster-oven-reflow-tangent">Toaster oven reflow tangent</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11549#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11549"><p>My mom got my wife and I a toaster some time ago; it hasn't seen much use over the last few years, mostly because we don't have the counter space to keep it set up.  It's a decent unit--nothing too fancy, no convection system, but it does use quartz elements which heat up quickly. Works well beyond being fairy dirty from use, and it comes with a sweet sliding glass front:</p><p><img src="https://cdn.hackaday.io/images/7189861417568049338.jpg"></p><p>General plan for the retrofit:</p><ul><li>Ditch the timer and broil/oven controls (that selects between the top and both heating elements)</li><li>Add a large solid state relay, so I can switch the two 600W elements using a microprocessor I/O line</li><li>Design some kind of <a href="http://en.wikipedia.org/wiki/Human_machine_interface">HMI</a> for starting and stopping the oven, as well as seeing current temperature and program status</li><li>Write a bit of code to follow a predefined temperature 'recipe'</li><li>Figure out how to make the entire assembly robust enough to survive the oven's thermal cycling</li></ul><p>This has been done before. Many times. In fact, Rocketscream makes a great <a href="http://www.rocketscream.com/shop/reflow-oven-controller-shield-arduino-compatible">reflow oven shield</a>. For folks considering this type of project in the future, an off-the-shelf option like this is terrific. I ended up with something a bit more cobbled together.</p><p>I popped the side panel off to reveal some pretty basic guts:</p><p><img src="https://cdn.hackaday.io/images/2949701417568167886.jpg"></p><p>Main thing to notice here: everything is designed to survive high temperatures. All of the crimped connectors are insulated using slip-on fiber covers; not seen here are the ceramic supports that insulated the metal screw retainers (one is above the 'On/Off switch and timer' sign) for securing the cover. Additionally, the case itself produced a fine powder when drilled, similar to a phenolic resin; again, likely designed for high temperature exposure. This concerned me a great deal; if the electronics controlling the reflow oven aren't protected from the heat, what stops them from getting reflowed themselves? Even if that doesn't happen, most semiconductors don't like to operate above 180 F or so. Not good.</p><p>This seems like a good time to give some general advice on toaster oven retrofit projects: Don't get too fancy. Build a separate box with all of the control circuits and the relay, and have it switch a [carefully labeled] outlet. Then just set the toaster to a high temperature setting, plug it in to your handy box, and you can leave it completely stock beyond the thermocouple installation. As you'll see, I didn't do that.</p><p>A quick glance through the wiring suggests that the heating elements are both 120VAC, so I cut out the timer assembly and broil switch and wired the quartz tubes in parallel using new crimp rings and scraps of existing fiber insulated wire. I kept the thermostat wired in series with the elements (knob and linkage removed), leaving it set for the highest temperature setting; with luck, if everything goes wrong that will still act as a last-ditch thermal safety switch. Yes, I understand the irony of using the word <em>safe</em> anywhere near this project, but it felt good. On that front, I also installed a 15A/250VAC fuse on the incoming hot AC line, mounted to the plastic enclosure in a handy inline case. Everything else, beyond the thermocouple, ended up mounted in a plastic project box that I bolted to the front of the oven:</p><p><img src="https://cdn.hackaday.io/images/6764441417568248633.jpg"></p><p>Yup, I already started salvaging Pro Minis from Neurons v0.2 and v0.3. Here it is all buttoned up, with a somewhat profane startup screen:</p><p><img src="https://cdn.hackaday.io/images/2744311417568320173.JPG"></p><p>A few notes on the design:</p> <ul><li>Ended up using a different thermocouple; the stainless steel sheathed unit here doesn't respond quickly enough to air temperature changes (it's really designed for liquid applications). I ended up swapping it for a bare bulb device that came with an old DMM, similar to<a href="http://www.alliedelec.com/images/products/Small/70145662.jpg"> this.</a></li><li>The interface is fairly simple; the display shows current temperature, set point, and cycle time. Left button starts, right button stops, and the LED shows when the relay is activating the heating elements.</li><li>The program runs on an extra Arduino Pro Mini we had left over from the Neuron v0.2/v0.3 prototypes; the 16x2 LCD is an inverted version of one of <a href="http://www.adafruit.com/products/181">Adafruit's handy boards.</a></li><li>The box is big enough to hold everything, but just barely; between the protoboard (I didn't make a custom board for this), the HUGE solid state relay, the thermocouple board, the 5vdc power supply for the logic circuits (ripped apart an old cell phone wall wart), and a good bit of display wiring, it's fairly packed.</li><li>I've run it up to &gt;500 F a few times prior to uploading a simple run program. Other than a bit of smoke, everything worked as expected; I suspect that's just excess food, as a subsequent tear-down thankfully didn't reveal any burnt components.</li></ul><p>I should have put this disclaimer at the beginning, but if you hadn't figured this out: projects like this are <strong>dangerous</strong>. I'm confident in my ability to handle line voltage and design this system safely, but I'll still never leave the room with it plugged in (let alone running). Furthermore, I always leave the unit closed and far away from anything flammable while it's cooling down. Also, even though we're using lead-free solder, I'll <strong>never </strong>use this toaster for food again. If you decide to destroy a handy kitchen appliance, I suggest the same protocols. <strong>Don't try this at home!</strong></p><p>After uploading a rough version of the <a href="http://www.chipquik.com/datasheets/SMD291SNL10.pdf">lead-free solder paste reflow curve</a>, I tried reflowing a few 0603 resisters on a spare RadioShack prototyping board:</p><p><img src="https://cdn.hackaday.io/images/7406181417568592754.jpg"></p><p>The board clearly isn't made of material designed for reflow temperatures; it started to discolor partway into the process, emitted a horrible smell, and generally stopped looking like a working circuit board. However, the paste reflowed nicely leaving minimal residue, and the resistors all checked out after the operation. </p><p>Time to start cranking out Neurons!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/3339/log/11577-neuron-development-v04-part-5-neuron-accessories">Neuron Development: v0.4 part 5: Neuron Accessories</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/3339/log/11577#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11577"><p>Before I cover early <a href="http://hackaday.io/project/3339/log/11549-toaster-oven-reflow-tangent">reflow oven</a> results, I want to outline a few of the accessories I've fabricated that will help assemble individual Neurons into functional networks. Pretty basic stuff; lots of mindless mass production here. I'm getting better with the <a href="http://www.engineer.jp/en/products/pa09e.html">Engineer PA-09</a>, especially given that the ribbon cable I'm using is a bit oversized for the connectors (the terminals require a bit of encouragement to snap together).</p><p><strong></strong><strong>Excite</strong><strong>rs</strong></p><p><img src="https://cdn.hackaday.io/images/1496121417661997341.JPG"></p><p><strong></strong>Okay, I couldn't think of a better term for these. Membrane potential modifiers? These are the simplest accessory--just a connector with a loop of wire shorting VCC to Signal. Provided a Neuron is powered through one of the other six ports, these are used to increase (excitatory) or decrease (inhibitory) the resting membrane potential of the device. You'll note I snipped the locking tab off the connectors--I do this with all of plugs to make 'em easier to quickly disconnect. Friction seems to hold them together securely enough for my purposes.</p><p><strong>Switches</strong></p><p><img src="https://cdn.hackaday.io/images/5763761417662138955.JPG"></p><p>Identical to Exciters, but they use a momentary switch to short VCC to Signal. Allows one to locally modify Neuron potential on the fly--ideal for injecting signals and starting cycles. I had a few kinds of switches lying around so I made two types; the snap action version has a ~3" lead, while the tiny pushbutton units are just a bit bigger than Exciters and fit nicely on a crowded Neuron.</p><p><strong>A</strong><strong>xons</strong></p><p><img src="https://cdn.hackaday.io/images/23571417662352297.JPG"></p>These are designed to chain Neurons together, carrying both signals and power; as such, they use all three connections (VCC, Signal, Gnd). Various lengths allow for some network flexibility. Fun fact--we made a bunch of these with half of the connectors on backwards, just like a crossover Ethernet cable. That made for some cursing and a few rework sessions. Fortunately, getting Gnd and Signal reversed just makes stuff not work--no magic smoke.<p><strong>Axon Terminals</strong><br></p><p><img src="https://cdn.hackaday.io/images/1741811417662660540.JPG"></p><p>Neurons often link to multiple downstream devices. In an effort to save board real estate, we only equipped each one with a single output connector; these adapters allow one to use Axons to connect to three downstream Neurons. We couldn't do this on the Dendrite (input) side since we wanted to be able to use Exciters; also, I was afraid our software debounce routine would cause us to miss fast sequences of signals. Hence, six inputs.</p><p><strong>Power Supply</strong><br></p><p><img src="https://cdn.hackaday.io/images/7435061417662858831.JPG"></p><p>I made a few versions, some of which hook in to my bench supply. This one is USB powered (I've got a big hub on my bench, along with a bunch of wall warts), made out of an old ribbon cable, and features a current measurement tap. Highly useful.</p><p><strong>ISP Adapter<br></strong></p><p><img src="https://cdn.hackaday.io/images/3621071417663609832.JPG"></p><p>Covered earlier but deserves another mention here. This is the most important accessory--without it I can't burn Neuron firmware. Built from a few bits of wire, three plugs, a clippy-do (for the Reset loop), and an <a href="http://www.adafruit.com/products/1465">Adafruit ISP breakout board</a> I had lying around. Generally spends most of its life attached to my <a href="http://www.adafruit.com/product/46">USBtinyISP</a>.</p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '3EgG8mhb-aQUE5KqmT512_NBcGuPuZmbtQ2A';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>