<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; SmartEE the Smart Plug &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6799%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6799-smartee-the-smart-plug">SmartEE the Smart Plug</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">An Opensource Smart Plug</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/16307-john" title="Visit Profile">John</a><span>&bull;</span>
                
                a month ago<span>&bull;</span><a href="/project/6799#discussion-list" title="See Comments">2 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6799-smartee-the-smart-plug">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6799/logs/sort/newest">Newest</option>
                    <option value="/project/6799/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6799/log/21078-background">Background</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6799/log/21078#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21078"><p>The WeMo (R) Insight is a &quot;smart plug&quot; that allows you to monitor a particular appliance and switch it on and off over WiFi. Check out <a href="http://www.belkin.com/us/p/P-F7C029/">Belkin&apos;s Description</a> for more details. Out of the box you can only talk to it with the provided app or a few third party tools like <a href="https://ifttt.com/products">IFTT</a>. Some people have tried software hacks to control this device, one of the best is <a href="https://pypi.python.org/pypi/ouimeaux">Ouimeaux</a>. After looking into these tools for a while I decided they were still too limiting. Additionally I had serious problems getting the devices on my wireless network and keeping them connected. A hardware fix was needed!</p><p>At first I was hoping a simple antenna replacement would solve the WiFi issues. Following the guide <a href="http://www.instructables.com/id/WIFI-Antenna-Hack!/">here</a>, I switched out the stock PCB antenna with a custom &quot;high gain&quot; one. I never quantified the RF quality of either antenna but in a few tests the WeMo reported better reception. In general though, the wireless problems were still present. Most likely the antenna was not the problem... </p><p>Time to crack the case open! After a few failed attempts and too much dremeling, I found the secret 3 triangular screws under the back sticker that keep the case together (see project instructions for photos). It turns out the device is composed of two separate PCB&apos;s. The high voltage components and solid state meter are on a &quot;host board&quot; and all of the smarts on a &quot;control board&quot;. It was easy enough to attach some probes to the connector cable and figure out how the two communicated. ***DON&apos;T TRY THIS WITHOUT THE RIGHT SAFETY EQUIPMENT*** So you don&apos;t have to mess with mains voltage, here&apos;s the connector pinout:</p><ol><pre class="hljs diff"><span class="hljs-attribute">1</span>: <span class="hljs-string">3.3V Pull Up</span>
<span class="hljs-attribute">2</span>: <span class="hljs-string">UART TX (from solid state meter)</span>
<span class="hljs-attribute">3</span>: <span class="hljs-string">NC</span>
<span class="hljs-attribute">4</span>: <span class="hljs-string">GND</span>
<span class="hljs-attribute">5</span>: <span class="hljs-string">+5V</span>
<span class="hljs-attribute">6</span>: <span class="hljs-string">+5V</span>
<span class="hljs-attribute">7</span>: <span class="hljs-string">GND</span>
<span class="hljs-attribute">8</span>: <span class="hljs-string">Relay</span></pre></ol><img src="https://cdn.hackaday.io/images/7990231437142090808.JPG"><p>This is a great setup- the control board has an isolated +5V supply, a standard 9600 Baud UART connection to the solid state meter, and a logic level drive for the relay. What more could you ask for? The one trick is the 3.3V pull up on pin 1. The meter runs on its own isolated supply and an optical isolator connects it to the control board. In order for this to work the control board needs to supply a pull up to its side of the isolator, hence the LDO on the &quot;sniffer board&quot;.</p><p>Stay tuned for more details!!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/21224-some-detective-work">Some Detective Work</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6799/log/21224#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21224"><p>The WeMo (R) plug provides two basic capabilities: switching a load on/off, and monitoring the load&apos;s energy usage. The load switching is pretty straightforward, a standard 15 amp relay on the mains current path is connected to a GPIO line on the control board. Since the relay is, by design, isolated the control board can safely switch the load without using mains voltage.</p><p>Monitoring the load&apos;s energy usage is a more complicated affair. For this task, the WeMo(R) uses a dedicated daughter board with a solid state meter chip. Putting this on a separate board is probably motivated by space constraints and UL rules about trace width/separation for high current, high voltage lines. Removing the meter board shows a silkscreen which helpfully labels TX and RX pins (although RX is sadly not connected)</p><p><img src="https://cdn.hackaday.io/images/5167631437405302010.png"></p><p>Packaging the WeMo(R) back together and attaching it to a scope shows that one of the wires on the control board harness is in fact carrying some data. The actual connection between the control board and the meter is a tricky affair. An optical isolator separates the two so the casual user would not notice the connection with a simple multimeter tone out.</p><p><img src="https://cdn.hackaday.io/images/2344541437405678384.png"></p><p>Of course the scope can only get us half way there. Switching over to a logic analyzer (I use a <a href="https://www.saleae.com/">Saleae Logic</a>) we can try decoding the signal. There are a few standard communication protocols: UART, SPI, I2C. The silk screen suggests UART since both SPI and I2C require a clock which is noticeably absent. UART&apos;s can have a variety of settings for baud rate, bits per frame and parity but fortunately the data pops right out using a standard 9600 8N1 decoding. Unfortunately the only consistent pattern seems to be the two bytes at the beginning of each packet [0xAE 0x1E] and the packet length of 30 bytes. The rest of the fields seem consistent over time which indicates they are probably measurements, but their values are hard to decipher.</p><p>After lots of tinkering with loads of varying power levels and even directly tweaking the AIP and AVP lines I still could not make sense out the data fields. Given that there was so much data (30 bytes) this must be quite a nice chip and probably doing much more than the stock WeMo(R) app was letting on. If only the WeMo(R) came with a datasheet....</p><p>Time for some detective work. The meter chip has 16 pins and some inscrutable markings - no manufacturer logo or other easy giveaway. Searching for 16 pin power meter chips on Digikey gives<a href="http://www.digikey.com/product-search/en?pv16=8181&amp;pv16=13035&amp;FV=fff40027%2Cfff8032c&amp;mnonly=0&amp;newproducts=0&amp;ColumnSort=0&amp;page=1&amp;stock=1&amp;quantity=0&amp;ptm=0&amp;fid=0&amp;pageSize=25"> plenty of results</a>. Looking through these data sheets for UART connections and the magic number 0xAE gives a clear winner- the  <a href="http://datasheets.maximintegrated.com/en/ds/78M6610+PSU.pdf">78M6610+PSU</a>.  This chip has an auto reporting mode that periodically sends UART data with a header byte of 0xAE. The data format of the auto report, detailed on page 25, specifies that the second byte is the packet length. Ah ha! 0x1E is hex for 30. Excellent. </p><p><img src="https://cdn.hackaday.io/images/448211437407781885.png"></p><br><p>The 78M6610 is no slouch, according to the datasheet: </p><p>&quot;An embedded 24-bit energy measurement processor (EMP) and firmware performs all the necessary computation, compensation, and data formatting for accurate, real-time reporting to the host. With integrated flash memory, the 78M6610+PSU is a completely autonomous solution capable of storing nonvolatile data such as calibration coefficients and input configuration settings.&quot;</p><p>This is quite exciting- WeMo(R) really went all out with this guy. Unfortunately their app exposes only a small fraction of this chip&apos;s real power. All the more reason to make an open source controller! I googled around to see who else might be using this chip and imagine my surprise when I came across this <a href="http://www.maximintegrated.com/en/app-notes/index.mvp/id/5829">press release</a>. Of course I had no luck finding this document before I did my Digikey hunt, but using the keywords 78M6610 and Belkin it pops right up. Confusingly though,  it claims the WeMo(R) uses the <a href="http://datasheets.maximintegrated.com/en/ds/78M6610%2BLMU.pdf">78M6610+LMU</a> which doesn&apos;t seem to have an auto-reporting mode and only comes in a QFN-24 package. </p><p>Both chips use the same processing core and overall are quite similar. A very large set of registers collects data that can be queried directly or a selected subset can be sent automatically. After playing with some loads and using the datasheet as a guide, I managed to figure out 5 of the 7 data fields:</p><pre>Auto Report Data Fields:
=====================
0: ???
1: ???
2: Vrms         X 1000
3: Irms         / 7.77e-6
4: Watts        X 200
5: Pavg         X 200
6: Power factor X 1000
7: Frequency    X 1000
8: kWh          X 1000</pre><p>To automate the process, I wrote a simple script to that parses the packet. Data fields are 3 bytes each and the packet is signed by a simple checksum. Checkout the <a href="https://github.com/jdrunner/smartee">SmarttEE git repository</a> for the code. </p>The data appears to be signed integers translatable to normal units by a scaling factor (Irms is a bit odd though...). Here&apos;s were it gets really weird though- the 78M6610+LMU is the only chip with the kWh register. So maybe Belkin has a special deal with Maxim? Maybe I missed something? If you have any ideas please let me know!<p>Stay tuned for more details.... (and more stuff in the git repo!)</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/21291-hardware-design">Hardware Design</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6799/log/21291#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21291"><p><img src="https://cdn.hackaday.io/images/2042911437516610377.png"></p><p>Now that we know the communication protocol between the WeMo(R) base board and the control PCB its time to design the custom controller. Of course the replacement has to maintain the same physical dimensions as the original and the I/O components need to be in the same places as well. Some Digikey searching yielded a compatible <a href="http://www.digikey.com/product-detail/en/B8B-ZR-SM4-TF(LF)(SN)/455-1687-2-ND/926594">header connection</a>, <a href="http://www.digikey.com/product-detail/en/614105150621/732-5959-2-ND/5047748">vertical USB port</a>, and <a href="http://www.digikey.com/product-search/en?vendor=0&amp;keywords=679-2416-1-nd">button</a>. I opted for an RGB LED instead of the two discrete LED&apos;s that are on the stock board and I omitted the capacitive touch hardware mostly due to space constraints. </p><p>In addition to the stock functionality I&apos;ve added some new features that make the plug much more useful in environments without good WiFi coverage: </p><ul><li>Long term storage so the plug can log data without a network connection</li><li>Battery backed real time clock (RTC) so data samples are consistently timestamped </li><li>USB interface for configuration (the original has a USB port but does nothing with it )</li></ul><p>For storage you can&apos;t beat SD cards for size and cost so I threw in one of my favorite <a href="http://www.digikey.com/product-detail/en/DM3CS-SF/HR1972TR-ND/2602739">uSD connectors</a>. Since there&apos;s going to be a fair bit of processing going on I opted for an ARM micro. Atmel&apos;s <a href="http://www.atmel.com/products/microcontrollers/arm/sam4s.aspx">SAM4S</a> is a really nice chip with plenty of peripherals including an HSMCI interface for the SD card. Its also (recently) compatible with the sweet <a href="http://1bitsquared.com/collections/frontpage/products/black-magic-probe">black magic probe</a> which makes development much nicer in a Linux environment -- although I&apos;ve had good experience with Atmel&apos;s IDE as well.</p><p><img src="https://cdn.hackaday.io/images/5320881437516653150.png"></p><p>The <a href="http://www.digikey.com/product-detail/en/ISL12057IRUZ-T/ISL12057IRUZ-TCT-ND/4569971">RTC</a> is nothing special- just your vanilla I2C device with a coin cell for backup. Cost and space constraints make nicer models like the <a href="http://www.maximintegrated.com/en/products/digital/real-time-clocks/DS3231.html">DS3231</a> impractical, but it doesn&apos;t need to be extremely precise so this should be sufficient. </p><p>For the wireless network connection I&apos;m using everybody&apos;s favorite <a href="http://www.seeedstudio.com/depot/WiFi-Serial-Transceiver-Module-w-ESP8266-p-1994.html">ESP8266 module</a> from SeeedStudio. Its cheap but the AT commands make things a bit difficult. I&apos;ve also had some stability issues with the stock firmware. After upgrading them to the latest image I could find, they seem to work better. The upgrade process itself is rather confusing, but for less than $7 I can&apos;t complain!</p><p><img src="https://cdn.hackaday.io/images/7381631437516671351.png"></p><p>From the pictures you can see a few errors I made on the first run, but a new rev is in the mail so hopefully no wire-wrap connections next time!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/21403-the-hardware-is-yours">The Hardware is Yours!</a></h2>
                            <small class="authorship">25 days ago  &bull;
                                <a class="gray-link" href="/project/6799/log/21403#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21403"><p>The github repository now has a [hardware] folder with all the schematic files and the PCB layout. The project is in Altium but don&apos;t fear- all of the outputs including assembly drawings, BOM, schematic PDF, and gerbers are in a dropbox folder linked with this project. All of the source is licensed under GPLv2 so enjoy! If you see any errors please let me know :)</p><img src="https://cdn.hackaday.io/images/2028291437680956327.png"></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/21483-designing-the-firmware">Designing the Firmware</a></h2>
                            <small class="authorship">24 days ago  &bull;
                                <a class="gray-link" href="/project/6799/log/21483#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21483"><p>Designing stable firmware for embedded devices is always more complicated than it first appears. The goal with this project is simple - read the solid state meter and toggle the relay ON and OFF over WiFi. Should be easy right? Well.... </p><p><img src="https://cdn.hackaday.io/images/4713131438135204109.png"></p><p>There are three main modules: <strong>WEMO interrupt</strong>, <strong>Server Process</strong>, and <strong>Monitor Loop</strong> </p><ol><li>The <strong>WEMO interrupt</strong> module records values from the solid state meter. The most recent samples are kept in  a buffer and then stored to the SD Card. </li><li>The <strong>server module</strong> listens for TCP traffic on port 1337 (woot!). Incoming traffic is parsed and if a valid command is received the module executes the request (eg. turn ON relay).</li><li>The <strong>monitor loop</strong> provides a common systick for the other modules, coordinates their execution and handles USB TTY commands when the board is connected to a PC. </li></ol><p><strong>WEMO Interrupts</strong></p><p>The solid state meter auto reports data quite fast - several packets per second. This is too much to transmit so only one packet every other second is actually recorded. Sampling at 0.5Hz seems to be a good tradeoff between resolution and WiFi bandwidth. Each time the monitor loop runs it checks if a valid meter packet has been read, if a new packet is ready it is stored in the server buffer and also recorded to the SD card. The monitor then sets up the UART for a new meter reading. Since the meter chip sends data asynchronously to the monitor, the UART might receive a garbled packet depending on  when it starts to listen. Fortunately garbled packets can be detected by their corrupt checksums and discarded.</p><p><strong>Server Process</strong><br></p><p>The ESP8266 uses AT modem commands which, while simple, are surprisingly tricky to handle in C. Manipulating strings and handling the asynchronous arrival of data requires some careful coding. Oh memory leaks.... The ESP8266 commands are all in [wifi.c] safely abstracting to gory details of AT commands from the rest of the code. Hopefully this will also make it easer to replace/upgrade the wifi portion of this build in the future. </p><p><strong>Monitor Loop</strong><br></p><p><span class="redactor-invisible-space">The monitor loop is the main [while(true)] loop that coordinates the execution of the other processes. Additionally it handles USB TTY commands which are used to configure the plug and retrieve data. The figure shows some of the supported commands. </span></p><p><span class="redactor-invisible-space">Of course you can only really get a feel for the code by looking at the code! I&apos;ll be posting the full firmware to the github repository soon!</span></p><p>If you have any questions please let me know!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/21782-the-firmware-is-yours">The Firmware is Yours</a></h2>
                            <small class="authorship">20 days ago  &bull;
                                <a class="gray-link" href="/project/6799/log/21782#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21782"><p><img src="https://cdn.hackaday.io/images/285161438192362668.png"></p><p>The <a href="https://github.com/jdrunner/smartee">github repository</a> now has all of the SAM4S source code under the firmware directory. Here&apos;s how to build it:</p><ol><li>Install the arm gcc toolchain (arm-none-eabi). This can be done easily with your distro&apos;s package manager</li><li>Download the ASF library into a folder named [asf] inside the repository (on the same level as [inc] and [src]). You can download it <a href="http://www.atmel.com/tools/avrsoftwareframework.aspx?tab=overview">here</a> (free account required), and documentation can be found <a href="http://asf.atmel.com/docs/latest/">here</a>.</li><li>To compile the code simply run make. This should create a [bin] directory with the binary to flash to the SAM4S. </li><li>For convenience the additional target [make gdb] can be used if you are using the <a href="http://www.blacksphere.co.nz/main/blackmagic">Black Magic debugger</a>. This automatically downloads the code to the chip and starts a GDB session. Before you run this make sure you authorize the .gdbinit file in the repository (if you don&apos;t GDB will complain and give you instructions on how to do this). </li><li>By default the SAM4S boots the SAMBA bootloader code. To switch the chip to boot into flash (ie. run your code) set  GPNVM bit 1. This can be done easily with the Black Magic probe in GDB:<pre>Loading section .text, size 0xd564 lma 0x400000
Loading section .ARM.exidx, size 0x8 lma 0x40d564
Loading section .relocate, size 0xa7c lma 0x40d56c
Start address 0x407970, load size 57320
Transfer rate: 39 KB/sec, 939 bytes/write.
(gdb) mon gpnvm_set 1 1
GPNVM: 0x00000002
(gdb)<br></pre></li><p>Please let me know if you have any questions! Happy smart plugging!</p></ol></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/22618-using-smartee">Using SmartEE</a></h2>
                            <small class="authorship">5 days ago  &bull;
                                <a class="gray-link" href="/project/6799/log/22618#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22618"><p>SmartEE uses a simple text based protocol on port 1336. You can access it directly over telnet but the easiest way to integrate it into your project is to use the python module [plug.py]. This module encapsulates a plug object and provides direct methods to read data, erase the SD card, set the RGB LED, and of course turn on and off the relay. It can be directly incorporated into any Python project with minimal dependencies. You need [sockets] for TCP/IP communication, and [serial] for USB communication. There is currently a dependency on [numpy] for the data processing but this isn&apos;t strictly necessary. However, most projects manipulating power data will probably want numpy anyway.</p><p>[demo.py] facilitates shell scripting applications and to demonstrates the usage of [plug.py]. Running [demo.py] with the help flag shows the documentation and example commands:</p><pre>usage: demo.py [-h] [--relay {on,off}] 
               [--read] [--usb] [--erase]
               [--file FILE] device

demo.py
    John Donnal 2015
    GPL v2 (see LICENSE)

    This demonstrates some of the capabilities of the SmartEE plug control board

    Usage:

    1.) Control plug relay:
        python demo.py --relay on  192.168.1.4
        python demo.py --relay off 192.168.1.4
    2.) Read meter over WiFi, appending to a 
        data file
          python demo.py --read 192.168.1.4
    3.) Download data over USB, appending 
        to a data file
          python demo.py --read --usb /dev/ttyACM0

    Data files created by this script are 
    CSV formatted with the following columns
 ts | vrms | irms | watts | pavg | pf | freq | kwh

    ts   | timestamp (UNIX milliseconds)
    vrms | RMS Voltage
    irms | RMS Current
    watts| Watts
    pavg | 30 second average of watts
    pf   | Power Factor
    freq | Line Frequency (Hz)
    kwh  | Energy used since plugged in (kWh)

-----------------------------------------------------

positional arguments:
  device            Device: either a /dev/NODE 
                            or an IPv4 address

optional arguments:
  -h, --help        show this help message and exit
  --relay {on,off}  Set relay state
  --read            request meter data
  --usb             plug connected by USB, 
                    specify device node, 
                    *not* IPv4 address
  --erase           erase data after reading 
  --file FILE       destination file for meter data</pre><br><p>These files are in the [software] directory of the git repository. Check it out! - and of course if you have any questions please let me know! </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/22620-smartee-in-action">SmartEE in Action</a></h2>
                            <small class="authorship">5 days ago  &bull;
                                <a class="gray-link" href="/project/6799/log/22620#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22620"><p>Here&apos;s a short demo video of SmartEE in action. </p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/TRfBiLa3cQc" frameborder="0" allowfullscreen=""></iframe><p>Here the plug is connected to standard incandescent lightbulbs on a dimmer. The software interface is [wattsworth] (a larger power monitoring project that should be released later this year). Using the python libraries with SmartEE makes it easy to add smart plugs to any project. </p><p>The github repository has 3 folders- covering each section of the project<br></p><ul><li>Hardware: Schematics, PCB layout, gerbers, and BOM</li><li>Firmware: Code for the SAM4S. Check out the compilation instructions in the project log.</li><li>Software: Python modules for incorporating SmartEE plugs into your own projects. </li></ul><p>As always, please let me know if you have any questions! </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6799/log/22828-system-block-diagram">System Block Diagram</a></h2>
                            <small class="authorship">3 days ago  &bull;
                                <a class="gray-link" href="/project/6799/log/22828#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22828"><p><img src="https://cdn.hackaday.io/images/8913721439600502014.png"></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '3pc5jy25-sJD_bk37eoEtA-urUmwTNk8T3cA';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>