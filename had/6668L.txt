<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; AYTABTU - Discrete Computer &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6668%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6668-aytabtu-discrete-computer">AYTABTU - Discrete Computer</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">After the apocalypse we have to build computers from stuff we can make at home, I.E Transistors, diodes and resistors.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/22844-matseng" title="Visit Profile">matseng</a><span>&bull;</span>
                
                a month ago<span>&bull;</span><a href="/project/6668#discussion-list" title="See Comments">9 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6668-aytabtu-discrete-computer">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6668/logs/sort/newest">Newest</option>
                    <option value="/project/6668/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6668/log/20561-uart-rx">UART-RX</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/20561#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20561"><p>Well, every journey has to have a beginning so I started of with a relatively simple part of the entire system - the UART.<br></p><p>Currently I have the receiver part of the UART working in theory - it's behaves correctly and can decode an incoming character when run in LTspice.</p><p>Next steps would be to prototype some parts of it at solderless breadboards followed by making some PCBs for it.</p><p>It will be a lot of transistors when the system is done, the total for the UART receiver is as follows (decoupling caps are excluded from the count)</p><ul><li>1 capacitor</li><li>144 resistors</li><li>137 diodes</li><li>530 npn and 26 pnp transistors</li></ul><p>The LSspice files for the UART is available at :<br><a href="https://github.com/SmallRoomLabs/aytabtu/tree/master/Spice/UART">https://github.com/SmallRoomLabs/aytabtu/tree/master/Spice/UART</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/20590-ordering-nand-pcbs">Ordering NAND pcbs</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/20590#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20590"><p>Instead of trying to wire up dozens upon dozens of NAND gates (which will be by far the most common logic gate in the full design) I routed a small PCB that fits 8 copies of 3-input NAND gates connected to a 4 pin pinheader each.   On the PCB there are also common power in &amp; power out connectors .<br><br>The PCB is only 20x160 mm (about 3/4 x 6 inch) so they're rather cheap to have made so I ordered 100 pcs of them from <a href="http://dirtypcbs.com/">Dirtypcbs</a>.<br><br>I also ordered a few thousands of transistors and diodes from a local company - I'm sure the parts will arrive long before the PCBs, so I have to start with using my old breadboards :-)<br><br></p><p><img src="https://cdn.hackaday.io/images/8354731436278412947.png"></p><br><br><br><br><br><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/20864-received-some-parts">Received some parts</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/20864#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20864"><p>This is how a bag of 1000 pcs 2N3904 transistors looks like.  It's quite a handful :-)<br><br>Now time to start soldering up 32 NAND gates on a PCB and connect them up to become eight transparent D-latches.<br><br></p><p><img src="https://cdn.hackaday.io/images/1171921436754004540.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/20865-soldering-of-the-octal-d-latch">Soldering of the Octal D-Latch</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/20865#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20865"><p>This is the result of 2.5 hours of bending, cutting and soldering.  Not too shabby I must say...<br><br>Since I'm not sure of what voltage I'll run this on I used 1K as collector resistors and 10K as pullups.  When the entire board is powered up and outputting low on all NAND gates I measured 420mA power consumption at  12V.  That's enough to get the board slightly lukewarm.   On 12 volts maybe 3K3 would be a better choice, but currently I really don't care about power consumption<br></p><hr><h2>The parts that went onto the board </h2><p>96 pcs of 1N4148 diodes, 32 pcs each of 1K and 10K resistors and 32 pcs of 2N3909 NPN transistors.<br></p><p><br><img src="https://cdn.hackaday.io/images/9226401436755054242.jpg"></p><hr><h2><br>Top and bottom side of PCB</h2><p>This is the PCB when wired up as 32 individual 2-input NAND gates.  Each "column" in the board will have its inputs and outputs interconnected to make them into D-latches, so there will be some flywires.<br></p><p><br>I also need to hook up the common D- (data) line as well as the 8 clocks and the 8 outputs to pin header connectors.</p><p><img src="https://cdn.hackaday.io/images/601661436755443168.jpg"></p><p><img src="https://cdn.hackaday.io/images/8836541436755467364.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/20870-added-glitch-detector-for-rx">Added Glitch Detector for RX</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/20870#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20870"><p>Most "real" UARTS have a glitch detector that detects false startbits.  I added a simple glitch detector that verifies that the startbit is still active in the middle of the startbit time slot.  If the line has returned to idle again then the receiving  sequence is aborted.<br><br>For this I had to increase the 3-input NAND in the start/stop logic to a 4-input NAND.  That was not too much of a hassle, just added one diode :-)<br><br>I also added two more TX-fakers to simulate one additional character arriving on the line to see if the design handles more than one character (it does), and also simulate a glitch to test the glitch detector.<br><br><br><br></p><p><img src="https://cdn.hackaday.io/images/9885861436780049914.png"></p><p><img src="https://cdn.hackaday.io/images/1171571436780072326.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21004-testing-of-comparator-chain">Testing of comparator-chain</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21004#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21004"><p>Just a quick update of progress:<br><br>I&apos;ve soldered up the ramp generator and the 9 comparators on the UART-Rx pcb. <br><br>Testing that it works as it should was really easy using the excellent <a href="http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,842,1018&amp;Prod=ANALOG-DISCOVERY" target="_blank">Analog Discovery from Digilent</a>.  Being able to watch the ramp voltage on the oscilloscope and at the same same using one digital output to re-retrigger the ramp at regular intervals and also monitor all the outputs from the comparators with the logic analyzer part of the unit was a marvelous experience.<br><br>I&apos;m really happy that I won it in the <a href="http://dangerousprototypes.com/2012/11/06/7400-competition-entry-constant-load-with-nixie-readouts/" target="_blank">7400-logic contest at Dangerous Prototypes</a> some years back. ^_^</p><p><img src="https://cdn.hackaday.io/images/7881331437026092082.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21006-bus-viewer-with-leds">Bus viewer with LEDs</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21006#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21006"><p>Ah yes.... I also did a small board with eight buffered LEDs .  The inputs are connected via a 680K resistor (to load the DUT as little as possible) and and diode to level-shift the active level up a bit.<br><br>The gain of the 2n3904&apos;s is enough to drive LEDs decently bright with the minuscule current that passes thru the 680K resistor at 5 volts (minus the diode and transistor junction drops).<br><br></p><p><img src="https://cdn.hackaday.io/images/6461251437032731856.jpg"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21018-uart-rx-timing-board-done">UART RX Timing board done</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21018#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21018">The UART Receiver timing board is now completed, but I haven&apos;t tested/debugged the logic part in real life yet. It works just fine in LTspice, and the individual modules tested ok, so unless there&apos;s any soldering errors I expect it to work.<br><br>The board holds nine comparators, one ramp generator, one glitch detector and six NAND gates used connected as flip-flops to control the logic and sequencing.<br><br><p>The connector at left of the PCB</p><ul><li><span></span>RX-data (in)</li><li><span></span>Master reset (in)</li><li>Data Ready (out)</li><li>Acknowledge/Data read (in)<br></li><li>GND &amp; V+</li></ul><p>At the right site there&apos;s the connector to the D-latch board</p><ul><li>RX-data (out)</li><li>8 pcs of Latch clocks</li><li>GND &amp; V+</li></ul><p><strong>This is a modular view of the receiver (the LATCH-part is on a separate board)<br></strong></p><p><img src="https://cdn.hackaday.io/images/1658351437059195103.png"></p><p><strong>Before the logic wiring - beautiful (or at least ok)<br></strong></p><p><img src="https://cdn.hackaday.io/images/7706071437058962623.jpg"></p><p><strong>After the logic wiring -  messy indeed</strong></p><p><img src="https://cdn.hackaday.io/images/4826681437059098892.jpg"></p><br><br><br><br><br><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21059-instruction-set">Instruction set</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21059#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21059"><p>I&apos;ve been thinking a bit of how the overall architecture and the instruction set should look like.<br><br>As it looks now I lean towards a Harvard architecture (separate data &amp; program memories) and also separate I/O instructions.<br><br>I also want to do a single cycle CPU so each instruction needs to carry its full info/data in a single &quot;instruction byte&quot;. This in contrast with for instance a 6502 processor where there are both 1, 2 and 3 byte instructions. For instance DEX=0xCA,  LDA=0xA9 0x00, JMP=0x4C 0x00 0x00<br><br>To be able to do this reasonably effective on a 8-bit databus I need an instruction width of 11 bits.<br><br>I also plan to have 8 registers.<br></p><table><tbody><tr><td>A</td><td>Main working register/accumulator</td></tr><tr><td>B</td><td>General register</td></tr><tr><td>C</td><td>General register</td></tr><tr><td>D</td><td>General register</td></tr><tr><td>X</td><td>General register/High memory pointer</td></tr><tr><td>Y</td><td>General register/Low memory pointer</td></tr><tr><td>JH</td><td>High memory pointer for jumps/calls</td></tr><tr><td>JL</td><td>Low memory pointer for jumps/calls</td></tr></tbody></table><p> In addition to these there will be a 16 bit Program Counter, and a 16 bit Holding register for the Program Counter.<br><br>I just realized that I&apos;m missing the SetCarry and ClearCarry instructions in the list below, I&apos;ll add them later - too lazy to make another screenshot and upload it again now :-)<br><br></p><p><img src="https://cdn.hackaday.io/images/1483261437118807354.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6668/log/21214-assembler-for-this-cpu">Assembler for this cpu</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/6668/log/21214#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21214"><p>This weekend I didn&apos;t have time to hack at the hardware, but  I started writing an assembler for the cpu.  <br><br>Being a old C programmer I decided to try my hand on a another language to challenge my hacker spirit.  I&apos;ve wanted to use golang for something for a while now, so I spent a few hours picking up the basics of the language and then another few hours to implement the basics of a two-pass assembler that can process the instruction set of my cpu and some necessary directives like .def and .org.<br><br>I must admit that it was a piece of cake - much easier than I anticipated.   The functionality of the assembler is not 100% yet, but gimme another hour or so and it will be done. :-)<br><br><img src="https://cdn.hackaday.io/images/8386571437390799005.png"></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'OsUyuxiI-i82dtpsCkh_xWhcYZt0xqXZOB40';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>