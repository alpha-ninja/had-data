<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; A Versatile Labtool &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F20142">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/6490">A Versatile Labtool</a>
                    </p>
                    <p class="description-summary">A cost effective data acquisition tool with reasonable accuracy. Equipped with a Python Library and several Apps.</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/35701-jithin" title="Visit Profile">
                                Jithin
                            </a>
                            <span>&bull;</span>
                            2 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p><strong><strong></strong></strong></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/4mQ9oon4PJU" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><hr><p><strong></strong></p><p><strong>What&apos;s this all about... And what is the problem you&apos;re trying to solve?<strong></strong><br></strong></p><p><strong>____Shortage of funds restrict teaching labs, and stifle creativity.</strong></p><p style="margin-left: 20px;"><strong></strong><strong>A </strong>)  Learning through experimentation offers a much clearer view of phenomena than merely trusting theory.<br></p><p style="margin-left: 20px;">But, Setting up a well equipped teaching lab for science and electronics can turn out to be a very expensive affair.  </p><p style="margin-left: 20px;">Each
 student will require a minimum set of instruments comprising of 
multimeters, scopes, various sensors, and so on, in addition to the 
experiment specific hardware.</p><p><strong>____Accuracy. </strong></p><p style="margin-left: 20px;"><strong>B</strong> ) These instruments must also be reasonably accurate for the results to tally with theoretical predictions such as the time constant of an oscillator, or the value of acceleration due to gravity.<br></p><p><strong>____</strong><strong>Usability</strong><br></p><p style="margin-left: 20px;"><strong>C</strong>)  A common, program based interface to access all the instruments associated with a particular experiment allows much greater flexibility and control.  A primary requirement for this is that the instruments must all use well documented control inputs interface-able with a computer.   Unfortunately, documented control interfaces are rare in the low-end market.<br></p><hr><p><strong><strong></strong>What is the solution being attempted ( Or, What are your goals for this project )?</strong></p><p><strong>____Solve all the above, and balance cost with performance!</strong></p><p style="margin-left: 20px;">This project can be called a base board with an essential set of 
carefully calibrated instruments with design focused on being able to support a variety of limited audience, niche instruments ( Think high 
resolution ADCs, DACs, Signal modulators , and 
wireless modules ) <strong></strong>. Significant room for improvement has been left in the form of an expansion slot.<a target="_blank" href="https://hackaday.io/project/6490-a-versatile-labtool/log/22089-calibrating-the-uc-adc-for-maximum-accuracy"> Here&apos;s an example add-on board for a 24-bit ADC used for calibration</a>.</p><p style="margin-left: 20px;"><br><strong></strong></p><p><strong>___How?</strong><br></p><p style="margin-left: 20px;">A processor with a fairly powerful set of peripherals is complemented with a variety of analog and digital tools. The setup connects to a computer via USB, and acts as a slave device that measures or controls as per instructions sent by the user via Python programs or graphical apps.</p><p><img style="width: 490px; height: 369px;" src="https://cdn.hackaday.io/images/9797311439453498466.png" height="369" width="490"></p><strong>____Maintaining accuracy</strong><p style="margin-left: 20px;">An accurate, temperature compensated clock source is chosen as the reference for the digital instruments, and a low-drift voltage reference is chosen for maintaining the  predictability of analog instruments. These two together ensure that readings stay consistent over a reasonable temperature range .<br><strong>The device is then calibrated against professional instruments that rectify non-linear behaviour as well as offsets and slopes in order to squeeze out maximum performance.</strong></p><p><strong>___Choosing an interface</strong></p><p style="margin-left: 20px;"><strong>Python</strong> was chosen as the main interface language owing to the vast 
computational and visualization resources it has. These are essential 
for analysing acquired data and extracting physical parameters.  It&apos;s 
also quite easy to learn, and since quite a few schools already teach 
it, we are but one step away from bridging the gap between software 
based learning, and experiment oriented methods.</p><strong></strong><p style="margin-left: 20px;">*Additional interfaces:  Standalone modes based on a plug-and-play display, as well as WiFi are part of the plan.<br></p><p><strong>____What if you just can&apos;t write code,</strong>  but are quite adept at designing experiments.</p><p>Several graphical interfaces with control and display widgets have already been designed. Check out the videos at the bottom of the page.</p><p><img style="width: 700px; height: 752px;" src="https://cdn.hackaday.io/images/7697991439452160311.png" height="752" width="700"></p><p>If you&apos;re open to trying a few simple lines of code, the console app features an embedded iPython console that autocompletes as well as displays documentation. It also has a ready to use graph that&apos;s accessible with a single function call.<br></p><p><img style="width: 554px; height: 435px;" src="https://cdn.hackaday.io/images/6074781439451015032.png" height="435" width="554"></p><p>As far as developing experiment specific apps is concerned, <a target="_blank" href="https://hackaday.io/project/6490/log/22532-a-few-basic-electronics-experiments-with-guis">a few</a> are ready, and a common framework has been developed in order to facilitate contributions by reducing code sizes<strong></strong>.<br><strong></strong></p><p><strong><br></strong></p><p><strong>____Is it damage proof?</strong></p><p style="margin-left: 20px;"><strong></strong>Users will often make wrong connections, and the design must withstand reasonable assaults.</p><p style="margin-left: 20px;">A few measures have been taken in this regard.</p><p style="margin-left: 20px;">- A 500mA poly-fuse is part of the main USB input. This fuse auto-repairs when the offending load is removed.</p><p style="margin-left: 20px;">- The DAC channels are specified as short-circuit proof, and the outputs will simply load the bipolar power supplies, causing their voltages to drop .</p><p style="margin-left: 20px;">- Analog inputs are all high impedance, but exceeding voltage limits in either direction on multiplexed channels(CH1,CH3-7,I2V ) will distort the rest of the multiplexed channels. This will not damage the unit within generous limits.</p><p><br><strong></strong></p><p><strong>So what can you kill</strong> ?</p><p style="margin-left: 20px;">If you&apos;re not excessively harsh, only the outputs broken out into the expansion slot are sensitive. Most of these come directly from the main processor, and you should be as careful with these as you are with your Arduino&apos;s outputs. </p><p style="margin-left: 20px;">The CAP input is directly connected to the Charge Time Measurement Unit of the processor, so please discharge any high voltages that may be present on capacitors before plugging them in.<br><strong></strong></p><p style="margin-left: 20px;"><br><strong></strong></p><p><strong>____The software., Associated licenses.</strong></p><p style="margin-left: 20px;">All client  software is Python based, and no proprietary modules have been used.  These include Python,Scipy,Numpy, Python-Qt4 , and PyQtGraph . All these work on multiple platforms, and are chosen to facilitate ports in the near future.<br></p><p style="margin-left: 20px;"><strong>Licenses</strong><br>- Python - GNU GPL compatible</p><p style="margin-left: 20px;">- Python-qt4 - GPL. Also requires that apps using PyQt4 be similarly open-sourced.</p><p style="margin-left: 20px;">- PyQtGraph - MIT licence</p><p style="margin-left: 20px;">- iPython - BSD License</p><p style="margin-left: 20px;"> - All Python Modules and Apps developed specifically for the vLabtool are hosted on <a target="_blank" href="https://github.com/jithinbp/vLabtool">github</a>, and licensed with GPL-V3</p><p style="margin-left: 20px;">- The package is also hosted on PyPI, and is registered as <a target="_blank" href="https://pypi.python.org/pypi/vLabtool/0.0.1">vLabtool</a>.</p><p style="margin-left: 20px;">- The Programmer&apos;s manual is auto-generated with Sphinx, and is <a target="_blank" href="http://pythonhosted.org/vLabtool/interface.html">live here</a><br> </p><p style="margin-left: 20px;">- The firmware is not being released for now. This also includes the wireless nodes since adding support for sensors is done on the Python side of things.<strong></strong></p><p><br><strong></strong></p><p><strong>What Platforms are recommended?</strong></p><p style="margin-left: 40px;">The toolchain has been developed and tested on Ubuntu versions&gt;=12.04 . It has also been tested on Raspbian Wheezy.</p><p><strong>Installing the toolchain  ( Please Check the Build instructions section )</strong></p><p style="margin-left: 20px;"><strong>_dependencies (Might be incomplete. Full testing pending): </strong></p><p style="margin-left: 40px;">sudo <strong></strong>apt-get install python-qt4 python-opengl python-qt4-gl python-scipy python-numpy ipython-qtconsole</p><p style="margin-left: 20px;"><strong>A) From PyPI</strong><br><strong></strong></p><p style="margin-left: 40px;">sudo apt-get install python-setuptools<strong></strong></p><p style="margin-left: 40px;">sudo easy_install vLabtool<strong></strong></p><p style="margin-left: 20px;"><strong>    B) From Github</strong></p><p style="margin-left: 40px;">git clone <a href="https://github.com/jithinbp/vLabtool">https://github.com/jithinbp/vLabtool</a>.git</p><p style="margin-left: 40px;">cd vLabtool</p><p style="margin-left: 40px;">sudo python setup.py install</p><p style="margin-left: 20px;"><strong>--------  The above steps install the Python module as well as several Apps that can be accessed directly from a shell.</strong></p><p style="margin-left: 20px;">Current list:  vLabtool-scope, vLabtool-stream, and several others, all prepended with &apos;vLabtool&apos; .<br><strong></strong></p><hr><p><strong><br></strong><br><strong></strong></p><p><strong>Quick demo video of the oscilloscope and <a href="https://hackaday.io/project/6490/log/21961-building-blocks-28-bit-sinetriangle-wave-generator">waveform generator</a> functionality of the vLabtool being compared with professional equipment</strong></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/M40dCvR1v7Y" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p><strong>Demo Video of the phase correlated PWM generators and Logic Analyzer. </strong><br>Square waves generated at SQR1-4 are monitored using ID1-4 . The shape of the waveforms are first shown in the analog section.</p><p>The Logic Analyzer functionality is primarily aimed at science experiments where fast events may need to be recorded. Such as the speed of a projectile fired through a light barrier, or a ball bouncing on a contact switch pad.<br><strong></strong></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/vzjDV18AmOo" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p><strong>Accuracy comparison of the frequency counter with inputs up to 10MHz.</strong></p><p><strong></strong>Highlights: Using the Fox924b TCXO as the digital reference<strong></strong> for the vLabtool really paid off. The maximum error is 2.5ppm as opposed to the 30ppm crystal that was previously being used.</p><p>The GUI shown in the video is vLabtool-stream, and can be run from a terminal. It accepts any input function defined in the python module of the vLabtool as long as the return value is a number<br></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/9RLBPgxYGvM" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p><strong>Voltmeter accuracy test video</strong></p><p>Various voltages were generated using the PVS outputs, and monitored with professional equipment as well as the various analog inputs of the vLabtool.  Detailed project logs <strong><a target="_blank" href="https://hackaday.io/project/6490/log/22089-calibrating-the-uc-adc-for-maximum-accuracy">HERE</a></strong> and  <a target="_blank" href="https://hackaday.io/project/6490/log/22442-monitoring-low-amplitude-outputs-via-ch3">here</a><br></p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/oPVh_IaMU_g" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p><strong>Wireless Nodes demo video.   </strong>This device has an NRF24L01+ radio on board, and wireless modules have been prepared for data acquisition from multiple points for which wires may not work. For example, the motion of  mechanical setups such as torsion pendulums can be monitored with a compass module(HMC5883L) plugged into a wireless node placed on it.</p><p>The output of a magnetometer and an accelerometer is shown in the video.<br>You might want to slow down the video, or try to keep up.  I messed up the settings of RecordMyDesktop.</p><iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/7VAGckFzVlc" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p><br><strong></strong></p><p><br><strong></strong></p><p><strong>Project Logs</strong></p><ul><li><a target="_blank" href="https://hackaday.io/project/6490-a-versatile-labtool/log/20189-nrf24l01-based-wireless-nodes%C3%A2%C2%80%C2%8B">NRF24L01+,PIC16F1618 based wireless nodes for multi-point acquisition and control</a></li><li><a target="_blank" href="https://hackaday.io/project/6490-a-versatile-labtool/log/20143-add-on-board-24-bit-adc-18-bit-dac">Add-on board: 24-bit ADC, 18-bit DAC</a></li><li><a target="_blank" href="https://hackaday.io/project/6490-a-versatile-labtool/log/21563-standalone-mode-using-a-128x64-oled">Standalone Mode using a 128x64 OLED</a></li><li><a target="_blank" href="https://hackaday.io/project/6490-a-versatile-labtool/log/21564-controlling-daisy-chained-addressable-leds">Controlling Daisy Chained Addressable LEDs [WS2812B]</a></li><li><a href="https://hackaday.io/project/6490-a-versatile-labtool/log/21958-designing-an-enclosure-with-solidworks-and-kicad">Designing an enclosure with SolidWorks and KiCAD for 3D printing, and Laser Cutting</a></li><li>Building Blocks: Project logs dealing with the design of each tool present on the base board<ul><li><a target="_blank" href="https://hackaday.io/project/6490-a-versatile-labtool/log/21961-building-blocks-28-bit-sinetriangle-wave-generator">28-Bit SINE/TRIANGLE Waveform Generator</a></li><li><a href="https://hackaday.io/project/6490-a-versatile-labtool/log/21996-building-blocks-15khz-standalone-sine-wave-generator">15KHz standalone sine wave generator</a></li></ul></li><li><a href="https://hackaday.io/project/6490-a-versatile-labtool/log/22089-calibrating-the-uc-adc-for-maximum-accuracy">Calibrating the ADC for maximum accuracy from all analog inputs.</a></li><li><a href="https://hackaday.io/project/6490/log/22532-a-few-basic-electronics-experiments-with-guis">GUIs for experiments. Embedded Videos</a></li><li><a target="_blank" href="https://hackaday.io/project/6490-a-versatile-labtool/log/22651-calibrating-the-dacs-programmable-voltage-sources">Calibrating DACs</a> </li></ul><p><br><strong></strong></p><p><strong>Detailed Summary- A low cost swiss army knife of measurement and control instruments for learning through experiments</strong></p><ul><li>12-bit Analog inputs with programmable gains, independent 12-bit offset control, and maximum ranges varying from +/-16V<strong></strong> to +/-100mV. Several unipolar, high impedance channels and power supply monitoring channels are also available.</li><li>Frequency counter tested up to 32 MHz. MCU supports up to 64MHz, but needs verification.</li><li>4-channel
 Logic analyzer with 15nS resolution, and DMA based approach that does 
not block user access to other functions while it acquires data.  
Independent function calls available to measure time differences between
 specified level changes on different digital inputs. </li><li>2-channel
 oscilloscope capable of monitoring all the above mentioned analog 
inputs at 1MSPS. Interrupt driven implementation frees up CPU to run 
other commands received during acquisition.</li><li>28-bit , 0 - 2MHz 
Sine, triangular waveform DDS [AD9833] . Maximum amplitude +/-4V , 
attenuable to a few ten millivolts via manual control knob present on 
the hardware.</li><li>12-bit Constant Current source. Maximum current 3.3mA [subject to load resistance].  voltage monitoring must be carried out externally to check for saturation.</li><li>up to four phase correlated PWM outputs with maximum frequency 32MHz,  15nano second duty cycle, and phase difference control.</li><li>Current to voltage convertor(+/-3.3mA) with up to 32x gain, and independent offset control.</li><li>SPI,I2C,UART outputs that can be configured and <strong>controlled entirely through Python functions</strong>.</li><li>Onboard NRF24L01+ transceiver for wireless data acquisition.</li><li>5V,3.3V,+/-8V power supply outputs.</li><li><strong>Graphical Interfaces for Oscilloscope, Logic Analyzer, streaming data, wireless acquisition,</strong>
 and  several experiments developed that use a common framework which 
drastically reduces code required to incorporate control and plotting 
widgets.</li><li>Standalone Mode that uses a 128x64 OLED to display a few basic measurements.</li></ul><br><strong></strong><p>Notes:</p><p>An ESP-12 wifi module can also be used in place of a USB connection, but a separate 5V power supply will be required. This will either simply provide a TCP socket, or host standalone web pages with control widgets (Work in progress ).</p><p>Space for a CH240G USB-Ser has been left as an option in place of the more expensive MCP2200, but has not been tested so far.<br></p>A 5ppm stability voltage reference has been used to ensure analog readings do not stray due to temperature variations. <p>Prototypes are being calibrated against a 6 1/2 digit DMM from Keithley instruments. A separate 24-bit ADC board with its own stable reference has been developed and calibrated for future use.</p><p>A +/-2.5 ppm temperature compensated crystal oscillator from Fox is used to maintain the accuracy of digital instruments ( frequency counter, waveform generators, logic analyzer,etc )</p>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'P2e3ybHw-TZIjYhm_aY2Nyirh6PAdLV5KJ9w';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>