<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; RPN Scientific Calculator &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F20047">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/6468">RPN Scientific Calculator</a>
                    </p>
                    <p class="description-summary">An RPN based scientific calculator with four line display based on the MSP430 microcontroller.</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/77327-joey-shepard" title="Visit Profile">
                                Joey Shepard
                            </a>
                            <span>&bull;</span>
                            2 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p><strong></strong><strong>Overview</strong></p><p>This is a scientific calculator I built that uses RPN notation. Features:</p><ul><li>BCD number format with 1-255 places</li><li>Internal accuracy configurable from 6 to 32 decimal places</li><li>Two separate 200 level stacks</li><li>Optional scientific notation</li><li>Functions: (a)sin, (a)cos, (a)tan, y^x, x root y, e^x, ln, 10^x, log, mod</li><li>20x4 character LCD</li><li>42 buttons</li></ul><p>The source code is available at <a href="https://github.com/druzyek/RPN_Calculator">https://github.com/druzyek/RPN_Calculator</a></p><p><strong>Software</strong></p><p>The interface shows 4 levels of the stack, similar to some HP calculators. While I was writing the code for BCD calculations, I used a console program to test the routines. You can download it from GitHub if you want to test out the functionality: <a href="https://github.com/druzyek/RPN_Calculator/blob/master/PC/rpnmain_pc.c" class="bbc_url" title="External link" rel="nofollow external">rpnmain_pc.c</a> It will compile for Windows if #WINDOWS is defined or for Linux with the ncurses library if #LINUX is defined.</p><pre>On Windows:
gcc -o rpncalc.exe rpnmain_pc.c

On Linux:
gcc -lncurses -o rpncalc rpnmain_pc.c</pre>Numbers are stored in unpacked BCD format on an external SRAM chip. I wanted to access this memory using variables but there is no convenient way to do this since every variable requires a function to access it. A simple equation like:<pre class="hljs cpp"><span class="hljs-constant">X</span>+=Y*Z-Q;</pre>would become something like this (assuming we are passing pointers):<pre class="hljs cpp">RAM_Write(X,RAM_Read(X)+(RAM_Read(Y)*RAM_Read(Z)-RAM_Read(Q));</pre>To simplify things, I wrote a preprocessor program that looks for any variables that need to be stored in external RAM and converts access to them to function calls. External variables are all stored as pointers, so the PC version will work exactly the same with or without the preprocessor. To mark variables as external, #pragma directives are used. These are usually ignored by the compiler if they are not recognized, so they are a convenient way to communicate with the preprocessor. Here is an example:<p><span class="redactor-invisible-space"></span></p><pre class="hljs cpp"><span class="hljs-comment">//Before processing</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">puts</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *msg)</span>
</span>{
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_VAR msg</span>
     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;msg[i];i++) <span class="hljs-built_in">putchar</span>(msg[i]);
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{     
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_OFFSET 200</span>
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_DECLARE</span>
     <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> text1[<span class="hljs-number">30</span>];
     <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> text2[<span class="hljs-number">30</span>];
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_END</span>

     text1[<span class="hljs-number">0</span>]=<span class="hljs-string">'A'</span>;
     text1[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;
     <span class="hljs-built_in">puts</span>(text1);
}</pre><pre class="hljs cpp"><span class="hljs-comment">//After processing</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">puts</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *msg)</span>
</span>{
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_VAR msg</span>
     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;RAM_Read(msg+i);i++) <span class="hljs-built_in">putchar</span>(RAM_Read(msg+i));
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{     
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_OFFSET 200</span>
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_DECLARE</span>
     <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *text1=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)<span class="hljs-number">200</span>;
     <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *text2=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)<span class="hljs-number">230</span>;
     <span class="hljs-preprocessor">#<span class="hljs-keyword">pragma</span> MM_END</span>

     RAM_Write(text1+<span class="hljs-number">0</span>,<span class="hljs-string">'A'</span>);
     RAM_Write(text1+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);
     <span class="hljs-built_in">puts</span>(text1);
}</pre>The trig and log functions are computed using CORDIC routines. This is a very efficient way to compute these functions for processors that cannot multiply or divide quickly. Instead, a lookup table is used with adds and shifts, which are much faster. I was able to speed the shifting up even more by using another lookup table that let me right shift 4 digits at a time. One way to measure the accuracy of calculations is with the calculator forensic found here: <a href="http://www.rskey.org/~mwsebastian/miscprj/forensics.htm" class="bbc_url" title="External link" rel="nofollow external">http://www.rskey.org...j/forensics.htm</a>. After setting accuracy to 24 places arcsin(arccos(arctan(tan(cos(sin(9)))))) evaluates to this:<p><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/4818491435371178521.jpg" width="473" height="195" style="width: 473px; height: 195px;"></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space">The settings page allows the accuracy to be set from 6 to 32 decimal places. With the default of 12, trig functions calculate in about a second. With 32 decimal places calculations take 3-4 seconds. After setting the accuracy, the program finds the largest element in the CORDIC table that is still significant, so that no time is wasted on elements that have no effect on the answer. The settings page also shows the current battery charge.<span class="redactor-invisible-space"></span><br></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/4907381435371131231.jpg" width="475" height="191" style="width: 475px; height: 191px;"><span class="redactor-invisible-space">When I began this project I wasn't sure how much I could fit into 16kB of firmware space. In the end it grew bigger than this and I had to use two MSP430s to hold everything. Part of this is due to all of the functions used to access external memory. The interface code also added a lot more to the size than I expected but I was able to add checks for most of the functions and add some meaningful error messages.<span class="redactor-invisible-space"></span></span></span></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/7584781435371285034.jpg" width="478" height="192" style="width: 478px; height: 192px;"><span class="redactor-invisible-space"><strong></strong></span><strong></strong><strong>Hardware</strong><br></span></span></span></span></span></span></p><p>My design uses two MSP430G2553s connected to each other over UART. One of them (the master) reads the keyboard matrix, updates the LCD, and manages the interface. The other is connected to the data lines of 128k of parallel SRAM and does all of the calculating. The address lines of the SRAM are driven by two 74HC595 shift registers controlled by the second MSP430. The 17th address pin is controlled by the first MSP430 and allows the program to switch between two separate stacks. Here is the schematic: </p><p><img src="https://cdn.hackaday.io/images/5928271435371425131.png"></p><p>The keypad is formed from 42 tactile buttons arranged in a 6x7 matrix and read with a 74HC165 shift register by the master MSP430. The LCD and keyboard share the same pins since they are never used at the same time. Here is the layout of the keys.<br></p><p><img src="https://cdn.hackaday.io/images/2009891435371491515.jpg"><span class="redactor-invisible-space">The LCD is an HD44780 compatible 20x4 character LCD. It is rated for 5v but the logic works fine at 3.6v. The contrast needs to be close to 5v for anything to show up on the screen, so I used a 555 timer and some diodes to supply around -1.2v to the contrast pin. The result is very solid and clear.<br></span></p><p>The calculator runs on four AA batteries regulated by an LM1117 configured to supply around 3.5 volts. To run at 16MHz the MSP430s need at least 3.3 volts. The wiggle room between the two voltages will let me see when the batteries are starting to wear down. By the time the voltage gets down to 3.3v, the batteries will be down to 1.15v or so, which can be considered dead.</p><p>The PCB is made from perfboard. The top of the board contains female headers so that the keyboard and LCD can be unplugged. Part of the board had to be cut away so that it will fit in the case with the batteries. Although it is quite small, I ended up using over three meters of wire.</p><p><img src="https://cdn.hackaday.io/images/6832861435371541632.jpg"></p><p>The case is soldered out of ordinary copper clad. I used a lot of solder on all of the joints and it is pretty solid. The keypad was cut out of stamp rubber on a laser cutter and lies on top of the keyboard. I painted the indentations cut into each key with acrylic paint.</p><p><img src="https://cdn.hackaday.io/images/5611061435408618334.JPG"></p><p><img src="https://cdn.hackaday.io/images/3347511435408533863.jpg"></p><p><img src="https://cdn.hackaday.io/images/4933611435408674500.JPG"></p>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '8mcj8jj7-_bmjp2AxpK7UuH6cbu4xrpHC8Wc';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>