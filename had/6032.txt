<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Hummingbird &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

    


        <meta name="description" content="This is an internet of things device which will give predictive information about the environment.">
        <link rel="canonical" href="http://hackaday.io/project/6032-hummingbird" />



    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>

    <!-- Twitter Card data -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@hackadayio">
    <meta name="twitter:title" content="Hummingbird">
    
        <meta name="twitter:description" content="This project uses a zigbee mesh and GPRS SIM900 card to communicate to a server. The server conducts an analysis on the data and provides the user with real time information as well as forecasting.">
    
    
        <meta name="twitter:image" content="https://cdn.hackaday.io/images/resize/600x600/7517901432925059673.JPG">
    

    <!-- Open Graph data -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Hummingbird">
    <meta property="og:url" content="http://hackaday.io/project/6032-hummingbird">
    
        <meta property="og:description" content="This project uses a zigbee mesh and GPRS SIM900 card to communicate to a server. The server conducts an analysis on the data and provides the user with real time information as well as forecasting.">
    
    
        <meta property="og:image" content="https://cdn.hackaday.io/images/resize/600x600/7517901432925059673.JPG">
    

    <script>
        var HIO = {};
    </script>

</head>
<body class="project-detail ">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6032-hummingbird">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

    
        <div class="page-basic-info-static guest-message-signup">
            
                <h2>Does this project spark your interest?</h2>
                <p class="page-basic-info-text">Become a member to follow this project and don't miss any updates</p>

            

            <div class="signup-holder">
                <form method="POST" action="/signup">
                    <input type="hidden" name="_csrf" value="JYxihdnV-EwafA1xLIG46L582I36mhoR9s0k" />
                    <input type="text" class="input-field input-email" placeholder="Your email address"  name="email"  /><input type="password" class="input-field input-password" placeholder="Password"  name="password" /><button class="black-gold-button signup" type="submit">Become a member</button>
                    <input class="input-field" placeholder="Invitation Code" required name="invitation_code" value="5Ad0ix2-b96J" type="hidden" />
                </form>
            </div>

        </div>
    


    

    <div class="header-photo" >
        <div class="overlay"></div>
    </div>

    <div class="headline">
        <div class="container">
            

            <h2><a href="/project/6032-hummingbird">Hummingbird</a></h2>
            <p class="description">This is an internet of things device which will give predictive information about the environment.</p>

            

            
                <div class="author">
                    <a href="/hacker/60614">
                        <img src="https://cdn.hackaday.io/images/resize/100x100/4715431436453296669.JPG" />
                        
                            <div class="author-details">
                                <div class="author-name">shane kirkbride</div>
                            </div>
                        
                    </a>
                </div>
            
        </div>
    </div>

    <div class="container">
        <div class="content-left">

            
                <ul class="submissions-icons">
                    
                        
                            <li>
                                <a href="/submissions/prize2015/list" class="submission-icon submission-icon-5">
                                    The 2015 Hackaday Prize
                                </a>
                            </li>
                        
                        
                            <script>
                                HIO.forPrize = true;
                            </script>
                        
                    
                </ul>
            

            
                <a href="/project/6032/gallery#5315caa9e034f0a4a5bef8122fd10393" id="project-image" class="image-holder" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/7517901432925059673.JPG)" data-image="https://cdn.hackaday.io/images/resize/600x600/7517901432925059673.JPG">
                </a>
            

            <div class="thumbs-holder">
                
                        <a href="/project/6032/gallery#5315caa9e034f0a4a5bef8122fd10393" class="image-holder thumb" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/7517901432925059673.JPG)" data-image="https://cdn.hackaday.io/images/resize/600x600/7517901432925059673.JPG">
                    </a>
                
                        <a href="/project/6032/gallery#c0cf181275cd55b1de4436a4736aa9c1" class="image-holder thumb" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/8067591432925135996.png)" data-image="https://cdn.hackaday.io/images/resize/600x600/8067591432925135996.png">
                    </a>
                
                        <a href="/project/6032/gallery#aaeaca27fd8cc0b5bdda64385d268be0" class="image-holder thumb thumb-last" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/427511433026500270.JPG)" data-image="https://cdn.hackaday.io/images/resize/600x600/427511433026500270.JPG">
                    </a>
                
                        <a href="/project/6032/gallery#65d5ad5104814ed9fcd98b8a2438ab99" class="image-holder thumb" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/6949801433027051547.JPG)" data-image="https://cdn.hackaday.io/images/resize/600x600/6949801433027051547.JPG">
                    </a>
                
            </div>

            
                <div class="view-gallery-holder">
                    <a href="/project/6032/gallery">
                        <div class="view-gallery grey-gold-button very-small-button">View Gallery</div>
                    </a>
                </div>
            

            

            

            

            

                <div class="project-following-container ">
                    <a href="javascript:void(0)" data-href="/project/6032/event/unfollow" class="gold-gold-button unfollow text-changing-button" data-before="<span class='icon-checkmark-gray'>Following</span>" data-after="Unfollow?"><span class="icon-checkmark-gray">Following</span></a>
                    <a href="javascript:void(0)" data-href="/project/6032/event/follow" class="gold-gold-button follow">Follow project</a>
                </div>
                
                

                <div id="similars">
                    <div class="similars-header">
                        Similar projects worth following
                        <a href="javascript:void(0)" class="submissions-close"></a>
                    </div>
                </div>

                
                    <div class="project-skulling-container ">
                        <a href="javascript:void(0)" data-href="/project/6032/event/unskull" class="gold-gold-button unskulled text-changing-button" data-before="<span class='icon-skull'>You</span>" data-after="Unskull?"><span class="icon-skull">You</span></a>
                        <a href="javascript:void(0)" data-href="/project/6032/event/skull" class="gold-gold-button skulled"><span class="icon-skull">Give a</span></a>
                    </div>
                

            

            
            

            <div class="section section-project-stats">
                
                    <span class="icon-view-count" title="View Count">259</span>
                
                <a>
                    <span class="icon-comment-with-hover oi-font-color-grey" title="Comments" id="comment_count">0</span>
                </a>
                
                    <a href="/hackers/all/project/6032/following">
                
                    <span class="icon-view oi-font-color-grey" title="Followers" id="follower_count">16</span>
                
                    </a>
                

                
                    
                        <a href="/hackers/all/project/6032/likers">
                    
                            <span class="icon-skull oi-font-color-grey" title="Skulls" id="like_count">2</span>
                    
                        </a>
                    
                
            </div>

            
                <div class="section section-team">
                    <h5>
                        
                            Team
                        
                    </h5>

                    <ul>
                        
                            
                                <li>
                                    <img src="https://cdn.hackaday.io/images/resize/100x100/4715431436453296669.JPG" class="team-photo"/>
                                    <a class="team-link" href="/hacker/60614-shane-kirkbride">shane kirkbride</a>

                                    

                                    
                                </li>
                            
                        
                    </ul>

                    <div class="error-message hide" id="team-error"><p></p></div>

                    
                    <input type="hidden" name="HADPrizeSubmission" value="true"/>
                        
                            <a href="javascript:void(0)"
                               
                                    class="login-button"
                               
                            >Request to join this project</a>
                        
                    

                </div>
            

            

            
                <div class="section section-links">
                    <ul class="links-list">
                        
                            <li class="links-item">
                                <a href="http://www.vivaplanet.io" target="_blank" class="icon-other">VivaPlanet</a>
                            </li>
                        
                    </ul>
                </div>
            


            
                
                    <div class="section section-tags">
                        
                            <div class="special-tags">
                                <a href="/projects/tag/hardware" class="tag tag-hardware">hardware</a>
                            </div>
                        
                            <div class="special-tags">
                                <a href="/projects/tag/ongoing%20project" class="tag tag-ongoing">ongoing project</a>
                            </div>
                        
                        
                            <a href="/projects/tag/netmf" class="tag">netmf</a>
                        
                            <a href="/projects/tag/Sensors" class="tag">Sensors</a>
                        
                            <a href="/projects/tag/wireless" class="tag">wireless</a>
                        
                            <a href="/projects/tag/xbee" class="tag">xbee</a>
                        
                            <a href="/projects/tag/INTERNET%20OF%20THINGS" class="tag">INTERNET OF THINGS</a>
                        
                            <a href="/projects/tag/wifi" class="tag">wifi</a>
                        
                            <a href="/projects/tag/embedded%20systems" class="tag">embedded systems</a>
                        
                            <a href="/projects/tag/GPRS" class="tag">GPRS</a>
                        
                            <a href="/projects/tag/Awesomeness" class="tag">Awesomeness</a>
                        
                            <a href="/projects/tag/2015HackadayPrize" class="tag">2015HackadayPrize</a>
                        
                            <a href="/projects/tag/GHI" class="tag">GHI</a>
                        
                    </div>
                
            

            <div class="section section-share">
                <h5>
                    
                        Enjoy this project?
                    
                </h5>
                
                <a href="https://twitter.com/intent/tweet?url=http://hackaday.io/project/6032-hummingbird&text=Hummingbird by shane-kirkbride&related=hackadayio&via=hackadayio" target="_blank" class="icon-twitter icon-twitter-notext gray-link">Share on twitter</a> &nbsp; <a href="https://www.facebook.com/sharer/sharer.php?u=http://hackaday.io/project/6032-hummingbird" target="_blank" class="icon-facebook icon-facebook-notext gray-link">Share on Facebook</a> &nbsp; <a href="https://plus.google.com/share?url=http://hackaday.io/project/6032-hummingbird&h1=en-US" target="_blank" class="icon-google icon-google-notext gray-link">Share on Google+</a>
            </div>

            
            

            
                <div class="section section-submissions-lists">
                    <h5>This project is submitted for</h5>
                    <ul>
                        
                            <li><a href="/submissions/prize2015/list">The 2015 Hackaday Prize</a></li>
                        
                    </ul>
                </div>
            

            <div class="section section-project-time">
                <p class="project-time">
                    This project was
                        
                            created on 05/29/2015
                            
                                 and last updated 3 months ago.
                            
                        
                </p>
            </div>

            

        </div>

        <div class="content-right">

            
                <div class="section section-description">
                    <h5>Description</h5>
                    <div class="description">This project uses a zigbee mesh and GPRS SIM900 card to communicate to a server. The server conducts an analysis on the data and provides the user with real time information as well as forecasting.</div>
                </div>
            

            
                <div class="section section-details">
                    <h5>
                        
                            Details
                        
                    </h5>
                    

                    
                        <div class="post-content details-content">
                            <p><p><b>Overview</b></p><p>Hummingbird is a hardware scheme designed to interface with a free VivaPlanet (<a href="http://www.vivaplanet.io/">http://www.vivaplanet.io/</a>) data-analysis engine. Hummingbird will send information about the health of it's environment to the VivaPlanet data-analysis engine to allow the user to predict and better understand the health of the environment of Hummingbird. Anyone can use an ethernet, GPRS or WiFi enabled Internet of Things or wearable device to interface with the VivaPlanet data analysis engine. These are the instructions on how to build a simple serial interface to this engine.</p><p>There are three major parts to this project. There is the free VivaPlanet data-analysis engine, the coordinator node and the sensor node. The senor node(s) send information to the coordinator node. The coordinator node manages inputs from various sensor nodes and sends this data periodically to VivaPlanet. The user can then go look at the big data analytics on their free VivaPlanet website.</p><p>We chose GHI (<a href="https://www.ghielectronics.com/">https://www.ghielectronics.com/</a>) and Seeed (<a href="https://www.ghielectronics.com/">https://www.</a><a href="http://seeedstudio.com/" target="_blank">http://seeedstudio.com</a>) to purchase a lot of the hardware. GHI uses .NETMF capable hardware which is great. I'm using .NetMF 4.2 for this project.This means I can write embedded code in C# and have it compile and run on the GHI hardware. This is really great because I get all of the power and flexibility of C# when coding. There is some overhead in this on the hardware side but for a light weight application like this it is a really great way to quickly prototype.</p><p><img src="https://cdn.hackaday.io/images/6019491433363285559.png"></p>
                                
                            </p>
                        </div>
                    
                    <div class="detail-btns">
                    
                            
                    
                    </div>
                </div>

            

            
                
            

            

            
                
                    <div class="section section-instructions">
                        <h5>Build instructions</h5>
                        
                        
                            <ul class="post-content section-instructions-list">
                                
                                    <li>
                                        <span class="instruction-number">1</span>
                                        <div class="instruction-list-item"><p><b>Step 1: Building the sensor node</b></p><p>A functional test can be easily constructed with 2 XBees and a BJT Oscillator (more details on how to do this are here: <a href="http://meca-labs.blogspot.com/2014/05/fun-with-xbees-and-jitter-2-of-4.html">http://meca-labs.blogspot.com/2014/05/fun-with-xbe...</a>) The sensor node is the easiest node to assemble it is shown in Figure 2 below. We hacked into a solar powered light and added a moisture sensor to the bottom. Then we ran a wire up to the top and stored the XBee (series 2) and power system. The XBee has 4 ADC converters and we used one of these to poll the moisture sensor and send the information to the coordinator node. We just used XTCU to program the sensor node.</p><p><img src="https://cdn.hackaday.io/images/9762921433362886063.png"></p><p>Figure 2: Functional example of 2 XBees sending ADC data from a BJT Oscillator to a coordinator node.</p><p><img src="https://cdn.hackaday.io/images/1048671433362917744.jpg"></p><p>Figure 3: Sensor node deconstructed</p><p><img src="https://cdn.hackaday.io/images/3801821433362943246.JPG"></p><p>Figure 4: Sensor node in action</p></div>
                                    </li>
                                
                                    <li>
                                        <span class="instruction-number">2</span>
                                        <div class="instruction-list-item"><p><b>Step 2: The coordinator node</b></p><p>The coordinator node is also the same solar power set but it consists of a GHI CerbuinoBee an XBee (series 2) and some sort of way to connect to the internet. We've demonstrated this project with a GHI GPRS module, shown in figure 5, and a USB-Serial Module. Using the Serial interface in C# is really simple and that's what we'll focus on here. Getting the GPRS working is tricky and is another project in itself.</p><p><img src="https://cdn.hackaday.io/images/1563201433362989453.JPG"></p><p>Figure 5: Coordinator node with a SIM900 GPRS Module.</p></div>
                                    </li>
                                
                                    <li>
                                        <span class="instruction-number">3</span>
                                        <div class="instruction-list-item"><p><b>Step 3: Connect to VivaPlanet</b></p><p>This next step is a bit more complex and requires some C# and visual studio with the Gagetter software from GHI Installed. This will take some time...persist it will be worth it in the end...There are a lot of great tutorials out there on how to get this installed on your machine so I won't go into that here. I spent some time getting all the right references so I've taken a screen shot of all the references I'm using in this script.</p><p><img src="https://cdn.hackaday.io/images/6906001433363073260.png"></p><p>Figure 6: References to be used in Visual Studio</p><p>Here is the full script. There is a lot going on here but for the most part it is obvious. I'm taking a XBee packet and writing it's ADC values to a file. Then I'm reading this packet from the file to the serial output. I'm doing this every 5 seconds. There are several of debug points in this script and I've left them in. You can literally use this code and get some real time data analytics from your sensor system. You can even send pictures. But this is more complex and may be in a different project all together.</p><pre class="hljs cs"><span class="hljs-keyword">using</span> System;

<span class="hljs-keyword">using</span> System.Collections;

<span class="hljs-keyword">using</span> System.Threading;

<span class="hljs-keyword">using</span> System.Text;

<span class="hljs-keyword">using</span> System.Security.Cryptography ;

<span class="hljs-keyword">using</span> <a href="http://System.IO" target="_blank">http://System.IO</a>; <span class="hljs-comment">//for series 2</span>

<span class="hljs-keyword">using</span> <a href="http://System.IO.Ports" target="_blank">http://System.IO.Ports</a>;

<span class="hljs-keyword">using</span> Toolbox.NETMF;

<span class="hljs-keyword">using</span> Microsoft.SPOT;

<span class="hljs-keyword">using</span> Microsoft.SPOT.Hardware;

<span class="hljs-keyword">using</span> Microsoft.SPOT.Presentation;

<span class="hljs-keyword">using</span> Microsoft.SPOT.Presentation.Controls;

<span class="hljs-keyword">using</span> Microsoft.SPOT.Presentation.Media;

<span class="hljs-keyword">using</span> Microsoft.SPOT.Presentation.Shapes;

<span class="hljs-keyword">using</span> Microsoft.SPOT.Touch;

<span class="hljs-keyword">using</span> GHIElectronics.Gadgeteer;

<span class="hljs-keyword">using</span> Gadgeteer.Networking;

<span class="hljs-keyword">using</span> GT = Gadgeteer;

<span class="hljs-keyword">using</span> GTM = Gadgeteer.Modules;

<span class="hljs-keyword">using</span> Gadgeteer.Modules.OpenSource;

<span class="hljs-keyword">using</span> Gadgeteer.Modules.GHIElectronics;

<span class="hljs-comment">//using Gadgeteer.Modules.DLSys;</span>

<span class="hljs-comment">//using Gadgeteer.Modules.Mekalogic;</span>

<span class="hljs-keyword">using</span> GHI.OSHW.Hardware;

<span class="hljs-keyword">using</span> NETMF.OpenSource.XBee.Api;

<span class="hljs-keyword">using</span> NETMF.OpenSource.XBee.Api.Common;

<span class="hljs-keyword">using</span> NETMF.OpenSource.XBee.Api.Zigbee;

<span class="hljs-keyword">using</span> NETMF.OpenSource.XBee.Util;

<span class="hljs-keyword">using</span> <a href="http://Microsoft.SPOT.IO" target="_blank">http://Microsoft.SPOT.IO</a>;

<span class="hljs-comment">//This program will write data to the SD Card for the webClient to access</span>

<span class="hljs-keyword">namespace</span> <span class="hljs-title">VivaPlanetEmbedded</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IOSampleDecodedEventArgs</span> : <span class="hljs-title">EventArgs</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> DecodedPacket { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IOSampleDecodedEventArgs</span><span class="hljs-params">(<span class="hljs-keyword">string</span> myString)</span>

</span>{

<span class="hljs-keyword">this</span>.DecodedPacket = myString;

}

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IoSampleListener</span> : <span class="hljs-title">IPacketListener</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> Finished { <span class="hljs-keyword">get</span> { <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; } }

<span class="hljs-keyword">public</span> XBeeResponse[] Packets;

UsbSerial usbSerial = <span class="hljs-keyword">new</span> UsbSerial(<span class="hljs-number">1</span>);

<span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> flash = <span class="hljs-keyword">true</span>;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> EventHandler IOSampleDecoded;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReportPacket</span><span class="hljs-params">(<span class="hljs-keyword">string</span> packet)</span>

</span>{

EventHandler handler = IOSampleDecoded;

<span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span>)

{

handler(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">new</span> IOSampleDecodedEventArgs(packet));

}

}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ProcessPacket</span><span class="hljs-params">(XBeeResponse packet)</span>

</span>{

<span class="hljs-keyword">if</span> (packet <span class="hljs-keyword">is</span> IoSampleResponse)

{

IoSampleResponse myPackets = ProcessIoSample(packet <span class="hljs-keyword">as</span> IoSampleResponse);

}

}

<span class="hljs-function"><span class="hljs-keyword">public</span> IoSampleResponse <span class="hljs-title">ProcessIoSample</span><span class="hljs-params">(IoSampleResponse packet)</span>

</span>{

DateTime time = <span class="hljs-keyword">new</span> DateTime(<span class="hljs-number">2007</span>, <span class="hljs-number">06</span>, <span class="hljs-number">21</span>, <span class="hljs-number">00</span>, <span class="hljs-number">00</span>, <span class="hljs-number">00</span>);

Utility.SetLocalTime(time);

<span class="hljs-keyword">try</span>

{

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ii = <span class="hljs-number">0</span>; ii &lt; <span class="hljs-number">5</span>; ii++)

{ <span class="hljs-comment">//working this logic here because this is the closest point to the raw data. Ideally this would be fastest?</span>

<span class="hljs-comment">//String format: Address HasData DataId SensorType Time Value</span>

<span class="hljs-keyword">string</span> s = <span class="hljs-string">"^"</span> + packet.SourceAddress.Address.ToString() + <span class="hljs-string">"^"</span> + <span class="hljs-string">"true"</span> + <span class="hljs-string">"^"</span> + <span class="hljs-string">"0"</span> + <span class="hljs-string">"^"</span> + ii.ToString() + <span class="hljs-string">"^"</span> + time.TimeOfDay.ToString() + <span class="hljs-string">"^"</span> + packet.Analog[ii].ToString() + <span class="hljs-string">"\r\n"</span>;

ReportPacket(s);

}

}

<span class="hljs-keyword">catch</span> (Exception e) <span class="hljs-comment">//Catch any exceptions</span>

{

Debug.Print(e.ToString()); <span class="hljs-comment">//print the error to the debug ouput</span>

}

<span class="hljs-keyword">return</span> packet;

}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DebugPrint</span><span class="hljs-params">(<span class="hljs-keyword">string</span> str)</span>

</span>{

flash = !flash;

Debug.Print(str + <span class="hljs-string">" \r\n"</span>);

<span class="hljs-keyword">try</span>

{

usbSerial.SerialLine.Write(str + <span class="hljs-string">" \r\n"</span>);

}

<span class="hljs-keyword">catch</span> (Exception e)

{

Debug.Print(<span class="hljs-string">"USB Not enabled"</span> + <span class="hljs-string">" \r\n"</span>);

Debug.Print(e.ToString() + <span class="hljs-string">" \r\n"</span>);

}

}

<span class="hljs-keyword">public</span> XBeeResponse[] GetPackets(<span class="hljs-keyword">int</span> timeout)

{

<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();

}

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> DeviceSerialNumer = <span class="hljs-string">"17564321"</span>;

<span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> _root; <span class="hljs-comment">//volume</span>

<span class="hljs-keyword">bool</span> flash = <span class="hljs-keyword">true</span>;

<span class="hljs-keyword">bool</span> newPackets = <span class="hljs-keyword">false</span>;

<span class="hljs-comment">//set up the Xbee</span>

<span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> serialPortName = <span class="hljs-string">"COM1"</span>;

<span class="hljs-keyword">const</span> Cpu.Pin resetPin = GHI.Hardware.FEZCerb.Pin.PB0;

<span class="hljs-keyword">const</span> Cpu.Pin sleepPin = GHI.Hardware.FEZCerb.Pin.PC13;

XBee xBee = <span class="hljs-keyword">new</span> XBee(serialPortName, resetPin, sleepPin) { DebugPrintEnabled = <span class="hljs-keyword">true</span> };

<span class="hljs-comment">// This method is run when the mainboard is powered up or reset.</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ProgramStarted</span><span class="hljs-params">()</span>

</span>{

Debug.Print(<span class="hljs-string">"Viva Planet!"</span>);

<span class="hljs-keyword">try</span> <span class="hljs-comment">//both usbSerial.Configure and usbSerial.Open()have different exceptions but it is rare that they will triggered in this specific code</span>

{

<span class="hljs-comment">//mount the SD card</span>

GHI.OSHW.Hardware.StorageDev.MountSD();

<span class="hljs-comment">//configure the usbSerial port</span>

usbSerial.Configure(<span class="hljs-number">9600</span>, GT.Interfaces.Serial.SerialParity.None, GT.Interfaces.Serial.SerialStopBits.One, <span class="hljs-number">8</span>);

<span class="hljs-comment">//if the port is not open then open it</span>

<span class="hljs-keyword">if</span> (!usbSerial.SerialLine.IsOpen)

{

usbSerial.SerialLine.Open();

DebugPrint(<span class="hljs-string">"opened the serial port"</span>);

}

<span class="hljs-keyword">if</span> (VolumeInfo.GetVolumes()[<span class="hljs-number">0</span>].IsFormatted)<span class="hljs-comment">//check to make sure the SD card is formatted</span>

{

_root = VolumeInfo.GetVolumes()[<span class="hljs-number">0</span>].RootDirectory;

DebugPrint(<span class="hljs-string">"SD Card is formatted: "</span> + _root);

}

<span class="hljs-keyword">else</span>

{

DebugPrint(<span class="hljs-string">"SD Card is not formatted"</span>); <span class="hljs-comment">//print the error to the debug ouput</span>

}

}

<span class="hljs-keyword">catch</span> (Exception e) <span class="hljs-comment">//Catch any exceptions</span>

{

DebugPrint(e.ToString()); <span class="hljs-comment">//print the error to the debug ouput</span>

}

<span class="hljs-comment">//Gets the command data from the intertubes. This is interrupt driven.</span>

usbSerial.SerialLine.DataReceived += <span class="hljs-keyword">new</span> GT.Interfaces.Serial.DataReceivedEventHandler(SerialLine_DataReceived);

<span class="hljs-comment">//Implement the interface member</span>

IoSampleListener sample = <span class="hljs-keyword">new</span> IoSampleListener();<span class="hljs-comment">//created 1x only</span>

sample.IOSampleDecoded += sample_IOSampleDecoded;<span class="hljs-comment">//every time the event is raised (report packet)</span>

<span class="hljs-comment">//add the listener</span>

xBee.Api.AddPacketListener(sample);

<span class="hljs-comment">// initialize the loop timer and send a file to the server</span>

GT.Timer timer = <span class="hljs-keyword">new</span> GT.Timer(<span class="hljs-number">5000</span>);

<span class="hljs-comment">//set the interrupt</span>

timer.Tick += <span class="hljs-keyword">new</span> GT.Timer.TickEventHandler(timer_Tick);

timer.Start();

}

<span class="hljs-comment">//this method is an event handler that decodes the packet within this class</span>

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sample_IOSampleDecoded</span><span class="hljs-params">(<span class="hljs-keyword">object</span> sender, EventArgs e)</span>

</span>{

IOSampleDecodedEventArgs eventargs = (IOSampleDecodedEventArgs)e;

<span class="hljs-keyword">string</span> packet = eventargs.DecodedPacket;

writeToFile(packet); <span class="hljs-comment">//write the packet to file</span>

newPackets = <span class="hljs-keyword">true</span>;

}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeToFile</span><span class="hljs-params">(<span class="hljs-keyword">string</span> packet)</span>

</span>{

<span class="hljs-comment">//initialize variables</span>

<span class="hljs-keyword">string</span> fileName = Path.Combine(_root, <span class="hljs-string">"file.txt"</span>);

Stream stream;

<span class="hljs-keyword">try</span>

{

<span class="hljs-comment">//write it to file</span>

<span class="hljs-keyword">if</span> (File.Exists(fileName))

{

stream = File.OpenWrite(fileName);

stream.Position = stream.Length;

}

<span class="hljs-keyword">else</span>

{

stream = File.Create(fileName);

}

<span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> writer = <span class="hljs-keyword">new</span> StreamWriter(stream))

{

writer.WriteLine(packet);

DebugPrint(<span class="hljs-string">"wrote: "</span> + packet);

}

stream.Dispose();

}

<span class="hljs-keyword">catch</span> (Exception e)

{

DebugPrint(e.ToString());

}

}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">timer_Tick</span><span class="hljs-params">(GT.Timer timer)</span>

</span>{

<span class="hljs-comment">// Make sure the file exists</span>

<span class="hljs-comment">// Load the file into a string</span>

DebugPrint(<span class="hljs-string">"tick"</span>);

<span class="hljs-keyword">if</span> (newPackets)

{

<span class="hljs-comment">//populate the device struct with the measurements</span>

DeviceReport device = readPacketData();

<span class="hljs-comment">//Send the data</span>

NotifyServiceQueue(device, <span class="hljs-keyword">null</span>);

newPackets = <span class="hljs-keyword">false</span>;

}

<span class="hljs-keyword">else</span>

{

DebugPrint(<span class="hljs-string">"no new packets"</span>);

}

}

<span class="hljs-function"><span class="hljs-keyword">private</span> DeviceReport <span class="hljs-title">readPacketData</span><span class="hljs-params">()</span>

</span>{

<span class="hljs-comment">//initialize variables</span>

<span class="hljs-keyword">string</span> fileName = Path.Combine(_root, <span class="hljs-string">"file.txt"</span>);

Stream stream = <span class="hljs-keyword">null</span>;

DeviceReport device = <span class="hljs-keyword">new</span> DeviceReport(); <span class="hljs-comment">//this needs to be global</span>

<span class="hljs-keyword">try</span>

{

<span class="hljs-comment">//read it to file</span>

<span class="hljs-keyword">if</span> (File.Exists(fileName))

{

stream = File.OpenRead(fileName);

stream.Position = stream.Length;

<span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> StreamReader(stream))

{

<span class="hljs-keyword">string</span> packet;

<span class="hljs-keyword">while</span> ((packet = reader.ReadLine()) != <span class="hljs-keyword">null</span>)

{

device = parseVivaPacket(packet);

DebugPrint(<span class="hljs-string">"read: "</span> + device.Address);

}

}

stream.Dispose();

}

<span class="hljs-keyword">else</span>

{

DebugPrint(<span class="hljs-string">"The filename does not exist"</span>);

}

}

<span class="hljs-keyword">catch</span> (Exception e)

{

DebugPrint(e.ToString());

}

<span class="hljs-keyword">return</span> device;

<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();

}

<span class="hljs-function"><span class="hljs-keyword">private</span> DeviceReport <span class="hljs-title">parseVivaPacket</span><span class="hljs-params">(<span class="hljs-keyword">string</span> packet)</span>

</span>{

Sensors deviceSensors = <span class="hljs-keyword">new</span> Sensors();

DeviceReport device = <span class="hljs-keyword">new</span> DeviceReport(); <span class="hljs-comment">//this needs to be global</span>

<span class="hljs-keyword">char</span>[] charSeparator = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[] {<span class="hljs-string">'^'</span>};

<span class="hljs-keyword">string</span>[] result;

result = packet.Split(charSeparator, <span class="hljs-number">1</span>);

device.Address = result[<span class="hljs-number">0</span>]; <span class="hljs-comment">//the actual address</span>

device.HasData = (result[<span class="hljs-number">1</span>] == <span class="hljs-string">"true"</span>); <span class="hljs-comment">//if true then true else false</span>

device.DataId = result[<span class="hljs-number">2</span>]; <span class="hljs-comment">//not sure how to use this one...default it to 0</span>

<span class="hljs-keyword">switch</span> (result[<span class="hljs-number">3</span>]) <span class="hljs-comment">//sort the sensor type</span>

{

<span class="hljs-keyword">case</span> <span class="hljs-string">"0"</span>: <span class="hljs-comment">//TEMP</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"TEMP"</span>;

device.DeviceSensors[<span class="hljs-number">0</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">case</span> <span class="hljs-string">"1"</span>: <span class="hljs-comment">//LIGHT</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"LIGHT"</span>;

device.DeviceSensors[<span class="hljs-number">1</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">case</span> <span class="hljs-string">"2"</span>: <span class="hljs-comment">//PH</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"PH"</span>;

device.DeviceSensors[<span class="hljs-number">2</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">case</span> <span class="hljs-string">"3"</span>: <span class="hljs-comment">//HUMI</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"HUMI"</span>;

device.DeviceSensors[<span class="hljs-number">3</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">default</span>: <span class="hljs-comment">//other unknown sensor</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"other"</span>;

device.DeviceSensors[<span class="hljs-number">4</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

}

<span class="hljs-keyword">return</span> device;

}

<span class="hljs-comment">//This is here for debug usage</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SerialLine_DataReceived</span><span class="hljs-params">(GT.Interfaces.Serial sender, <a href="http://System.IO.Ports.SerialData" target="_blank">http://System.IO.Ports.SerialData</a> data)</span>

</span>{

<span class="hljs-comment">//initialize variables</span>

Thread.Sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">//let all the data get there.</span>

<span class="hljs-keyword">int</span> NumberOfBytesToRead = usbSerial.SerialLine.BytesToRead;

<span class="hljs-keyword">byte</span>[] readInputBuffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[NumberOfBytesToRead];

<span class="hljs-comment">//get sensor data</span>

usbSerial.SerialLine.Read(readInputBuffer, <span class="hljs-number">0</span>, NumberOfBytesToRead);

<span class="hljs-comment">// From byte array to string</span>

<span class="hljs-keyword">char</span>[] c = Encoding.UTF8.GetChars(readInputBuffer, <span class="hljs-number">0</span>, NumberOfBytesToRead);

<span class="hljs-keyword">string</span> s = <span class="hljs-keyword">new</span> <span class="hljs-keyword">string</span>(c);

DebugPrint(<span class="hljs-string">"wrote: "</span> + s);

}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DebugPrint</span><span class="hljs-params">(<span class="hljs-keyword">string</span> str)</span>

</span>{

flash = !flash;

Mainboard.SetDebugLED(flash);

Debug.Print(str + <span class="hljs-string">" \r\n"</span>);

<span class="hljs-keyword">try</span>

{

usbSerial.SerialLine.Write(str + <span class="hljs-string">" \r\n"</span>);

}

<span class="hljs-keyword">catch</span> (Exception e)

{

Debug.Print(<span class="hljs-string">"USB Not enabled"</span> + <span class="hljs-string">" \r\n"</span>);

Debug.Print(e.ToString() + <span class="hljs-string">" \r\n"</span>);

}

}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NotifyServiceQueue</span> <span class="hljs-params">(DeviceReport device, DataUploadResponse Dataresponse = <span class="hljs-keyword">null</span>)</span>

</span>{

DebugPrint(<span class="hljs-string">"Sending notification to service bus queue"</span>);

DebugPrint(device.Address);

DebugPrint(device.HasData.ToString());

DebugPrint(createToken(<span class="hljs-string">"<a href="https://vivaplanetbusservicedev.servicebus.windows" target="_blank">https://vivaplanetbusservicedev.servicebus.windows</a>..."</span>, <span class="hljs-string">"DevicePolicy"</span>, <span class="hljs-string">"zxuC2mrAN0o9lRlZmex/KhwSiF6uSr/Fxe/0lAS52G4="</span>));

<span class="hljs-comment">/* need an ethernet connection for this

<a href="http://System.Net.WebRequest" target="_blank">http://System.Net.WebRequest</a> sbRequest = <a href="http://System.Net.WebRequest.Create" target="_blank">http://System.Net.WebRequest.Create</a> (@"<a href="https://vivaplanetbusservicedev.servicebus.windows.net/hummingbirdqueue/messages" target="_blank">https://vivaplanetbusservicedev.servicebus.windows.net/hummingbirdqueue/messages</a>");

var headers = sbRequest.Headers;

sbRequest.Method = "POST";

using (var sbMessageStream = sbRequest.GetRequestStream ())

{

//string body = JsonConvert.SerializeObject (device);

//var bytes = Encoding.UTF8.GetBytes (body);

//sbMessageStream.Write (bytes, 0, bytes.Length);

// headers.Add ("Authorization", createToken ("<a href="https://vivaplanetbusservicedev.servicebus.windows.net/hummingbirdqueue/messages" target="_blank">https://vivaplanetbusservicedev.servicebus.windows.net/hummingbirdqueue/messages</a>", "DevicePolicy", "zxuC2mrAN0o9lRlZmex/KhwSiF6uSr/Fxe/0lAS52G4="));

}

try {

DebugPrint("Sending notification for " + DeviceSerialNumer);

using (var response = sbRequest.GetResponse ())

{

DebugPrint("Sucessfully Sent");

}

} catch (Exception e)

{

DebugPrint("Couldn't post to service bus -" + e);

}

* */</span>

}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-title">createToken</span> <span class="hljs-params">(<span class="hljs-keyword">string</span> resourceUri, <span class="hljs-keyword">string</span> keyName, <span class="hljs-keyword">string</span> key)</span>

</span>{

TimeSpan sinceEpoch = DateTime.UtcNow - <span class="hljs-keyword">new</span> DateTime (<span class="hljs-number">1970</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);

<span class="hljs-keyword">var</span> expiry = sinceEpoch.Seconds.ToString(); <span class="hljs-comment">//EXPIRES in 1h</span>

<span class="hljs-keyword">string</span> stringToSign = Tools.RawUrlEncode(resourceUri) + <span class="hljs-string">"\n"</span> + expiry;

System.Security.Cryptography.X509Certificates.X509Certificate hmac = <span class="hljs-keyword">new</span> System.Security.Cryptography.X509Certificates.X509Certificate(Encoding.UTF8.GetBytes(key));

<span class="hljs-keyword">var</span> signature = hmac.GetHashCode();

<span class="hljs-keyword">var</span> sasToken = System.Globalization.CultureInfo.CurrentUICulture +

<span class="hljs-string">"SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}"</span> +

Tools.RawUrlEncode(resourceUri) + Tools.RawUrlEncode(signature.ToString());

<span class="hljs-keyword">return</span> sasToken;

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DataUploadResponse</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> sasUrl { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> DataId { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> expiry { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DeviceReport</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Address { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> DataUrl { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> HasData { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> DataId { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> Sensors[] DeviceSensors { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; } <span class="hljs-comment">//temp, light ext...</span>

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Sensors</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> SensorType { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Time { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Value { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

}

}

}</pre><br><p>Next we connect with the serial port and pull the packets from file.txt to the computer. This script opens up a serial connection to the cerbuinoBee and reads in all the sensor data that was written and parses it. It then sends this data to the VivaPlanet server. This is much easier to set up than the .netMF side there are better and worse ways to implement this handshake and I encourage you to find a better way than this.</p><pre class="hljs cs"><span class="hljs-keyword">using</span> System;

<span class="hljs-keyword">using</span> System.Text;

<span class="hljs-keyword">using</span> <a href="http://System.Net" target="_blank">http://System.Net</a>;

<span class="hljs-keyword">using</span> System.Web;

<span class="hljs-keyword">using</span> <a href="http://System.IO" target="_blank">http://System.IO</a>;

<span class="hljs-keyword">using</span> Newtonsoft.Json;

<span class="hljs-keyword">using</span> System.Security.Cryptography;

<span class="hljs-keyword">using</span> System.Globalization;

<span class="hljs-keyword">using</span> <a href="http://System.IO.Ports" target="_blank">http://System.IO.Ports</a>;

<span class="hljs-keyword">using</span> System.Diagnostics;

<span class="hljs-keyword">using</span> System.Threading;

<span class="hljs-keyword">namespace</span> <span class="hljs-title">HummingBirdClient</span>

{

<span class="hljs-keyword">class</span> <span class="hljs-title">MainClass</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> DeviceSerialNumer = <span class="hljs-string">"17564321"</span>;

<span class="hljs-comment">//added for serial communication</span>

<span class="hljs-keyword">static</span> SerialPort p = <span class="hljs-keyword">new</span> SerialPort(<span class="hljs-string">"COM3"</span>, <span class="hljs-number">9600</span>, Parity.None, <span class="hljs-number">8</span>, StopBits.One);

<span class="hljs-keyword">static</span> <span class="hljs-keyword">string</span> sbuffer = <span class="hljs-keyword">string</span>.Empty;

<span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span> i = <span class="hljs-number">0</span>;

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span> <span class="hljs-params">(<span class="hljs-keyword">string</span>[] args)</span>

</span>{

<span class="hljs-keyword">bool</span> res = getSerialData();

}

<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> planetCount = <span class="hljs-number">0</span>;

<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getSerialData</span><span class="hljs-params">()</span> <span class="hljs-comment">//fire off the event</span>

</span>{

<span class="hljs-keyword">string</span>[] names = SerialPort.GetPortNames();

Console.WriteLine(<span class="hljs-string">"Serial ports:"</span>);

<span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">string</span> name <span class="hljs-keyword">in</span> names)

{

Console.WriteLine(name);

}

Console.WriteLine(<span class="hljs-string">"Using COM3"</span>);

planetCount++;

<span class="hljs-keyword">if</span> (p.IsOpen)

{

p.Open();

<span class="hljs-keyword">string</span> data_ = <span class="hljs-string">"Viva Planet!"</span> + planetCount.ToString() + <span class="hljs-string">"\r"</span>;

Console.WriteLine(<span class="hljs-string">"Writing data: {0}"</span>, data_);

p.Write(data_);

p.DataReceived += <span class="hljs-keyword">new</span> SerialDataReceivedEventHandler(p_DataReceived);

ConsoleKeyInfo cki;

Console.WriteLine(<span class="hljs-string">"Getting ready to send the data"</span>);

DeviceReport device = parseVivaPacket(p.ReadLine());

NotifyServiceQueue(device, <span class="hljs-keyword">null</span>);

Console.WriteLine(<span class="hljs-string">"I am done sending the data"</span>);

Console.WriteLine(<span class="hljs-string">"type any key to send another data transfer"</span>);

Console.WriteLine(<span class="hljs-string">"Press the Escape (Esc) key to quit: \n"</span>);

cki = Console.ReadKey();

<span class="hljs-keyword">if</span> (cki.Key != ConsoleKey.Escape)<span class="hljs-comment">//yes</span>

{

Console.WriteLine(<span class="hljs-string">"Sending more data"</span>);

getSerialData();

}

<span class="hljs-keyword">else</span>

{

p.Close();

}

}

<span class="hljs-keyword">else</span>

{

<span class="hljs-keyword">string</span> data_ = <span class="hljs-string">"Viva Planet!"</span> + planetCount.ToString() + <span class="hljs-string">"\r"</span>;

Console.WriteLine(<span class="hljs-string">"Writing data: {0}"</span>, data_);

p.Write(data_);

p.DataReceived += <span class="hljs-keyword">new</span> SerialDataReceivedEventHandler(p_DataReceived);

ConsoleKeyInfo cki;

Console.WriteLine(<span class="hljs-string">"Getting ready to send the data"</span>);

DeviceReport device = parseVivaPacket(p.ReadLine());

NotifyServiceQueue(device, <span class="hljs-keyword">null</span>);

Console.WriteLine(<span class="hljs-string">"I am done sending the data"</span>);

Console.WriteLine(<span class="hljs-string">"type any key to send another data transfer"</span>);

Console.WriteLine(<span class="hljs-string">"Press the Escape (Esc) key to quit: \n"</span>);

cki = Console.ReadKey();

<span class="hljs-keyword">if</span> (cki.Key != ConsoleKey.Escape)<span class="hljs-comment">//yes</span>

{

Console.WriteLine(<span class="hljs-string">"Sending more data"</span>);

getSerialData();

}

<span class="hljs-keyword">else</span>

{

p.Close();

}

}

<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;

}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DeviceReport <span class="hljs-title">parseVivaPacket</span><span class="hljs-params">(<span class="hljs-keyword">string</span> packet)</span>

</span>{

Sensors deviceSensors = <span class="hljs-keyword">new</span> Sensors();

DeviceReport device = <span class="hljs-keyword">new</span> DeviceReport(); <span class="hljs-comment">//this needs to be global</span>

<span class="hljs-keyword">char</span>[] charSeparator = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[] { <span class="hljs-string">'^'</span> };

<span class="hljs-keyword">string</span>[] result;

result = packet.Split(charSeparator, <span class="hljs-number">1</span>);

device.Address = result[<span class="hljs-number">0</span>]; <span class="hljs-comment">//the actual address</span>

device.HasData = (result[<span class="hljs-number">1</span>] == <span class="hljs-string">"true"</span>); <span class="hljs-comment">//if true then true else false</span>

device.DataId = result[<span class="hljs-number">2</span>]; <span class="hljs-comment">//not sure how to use this one...default it to 0</span>

<span class="hljs-keyword">switch</span> (result[<span class="hljs-number">3</span>]) <span class="hljs-comment">//sort the sensor type</span>

{

<span class="hljs-keyword">case</span> <span class="hljs-string">"0"</span>: <span class="hljs-comment">//TEMP</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"TEMP"</span>;

device.DeviceSensors[<span class="hljs-number">0</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">case</span> <span class="hljs-string">"1"</span>: <span class="hljs-comment">//LIGHT</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"LIGHT"</span>;

device.DeviceSensors[<span class="hljs-number">1</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">case</span> <span class="hljs-string">"2"</span>: <span class="hljs-comment">//PH</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"PH"</span>;

device.DeviceSensors[<span class="hljs-number">2</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">case</span> <span class="hljs-string">"3"</span>: <span class="hljs-comment">//HUMI</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"HUMI"</span>;

device.DeviceSensors[<span class="hljs-number">3</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

<span class="hljs-keyword">default</span>: <span class="hljs-comment">//other unknown sensor</span>

deviceSensors.Time = result[<span class="hljs-number">5</span>];

deviceSensors.Value = result[<span class="hljs-number">6</span>];

deviceSensors.SensorType = <span class="hljs-string">"other"</span>;

device.DeviceSensors[<span class="hljs-number">4</span>] = deviceSensors;

<span class="hljs-keyword">break</span>;

}

<span class="hljs-keyword">return</span> device;

}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p_DataReceived</span><span class="hljs-params">(<span class="hljs-keyword">object</span> sender, SerialDataReceivedEventArgs e)</span>

</span>{

Thread.Sleep(<span class="hljs-number">500</span>);

sbuffer += (sender <span class="hljs-keyword">as</span> SerialPort).ReadExisting();

Console.WriteLine(sbuffer);

WriteOutputToTextFile(sbuffer);

sbuffer = <span class="hljs-keyword">string</span>.Empty;

}

<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteOutputToTextFile</span><span class="hljs-params">(<span class="hljs-keyword">string</span> _data)</span>

</span>{

<span class="hljs-keyword">string</span> FolderName = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);<span class="hljs-comment">//set destination as your desktop</span>

<span class="hljs-keyword">using</span> (StreamWriter SW = <span class="hljs-keyword">new</span> StreamWriter(FolderName + <span class="hljs-string">"\\test.txt"</span>, <span class="hljs-keyword">true</span>)) <span class="hljs-comment">//true makes it append to the file instead of overwrite</span>

{

SW.WriteLine(_data);

SW.Close();

}

}

<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NotifyServiceQueue</span><span class="hljs-params">(DeviceReport device, DataUploadResponse Dataresponse = <span class="hljs-keyword">null</span>)</span>

</span>{

<span class="hljs-comment">// need an ethernet connection for this</span>

<a href="http://System.Net.WebRequest" target="_blank">http://System.Net.WebRequest</a> sbRequest = <a href="http://System.Net.WebRequest.Create" target="_blank">http://System.Net.WebRequest.Create</a> (<span class="hljs-string">@"<a href="https://vivaplanetbusservicedev.servicebus.windows" target="_blank">https://vivaplanetbusservicedev.servicebus.windows</a>..."</span>);

<span class="hljs-keyword">var</span> headers = sbRequest.Headers;

sbRequest.Method = <span class="hljs-string">"POST"</span>;

<span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> sbMessageStream = sbRequest.GetRequestStream ())

{

<span class="hljs-comment">//string body = JsonConvert.SerializeObject (device);</span>

<span class="hljs-comment">//var bytes = Encoding.UTF8.GetBytes (body);</span>

<span class="hljs-comment">//sbMessageStream.Write (bytes, 0, bytes.Length);</span>

<span class="hljs-comment">// headers.Add ("Authorization", createToken ("<a href="https://vivaplanetbusservicedev.servicebus.windows.net/hummingbirdqueue/messages" target="_blank">https://vivaplanetbusservicedev.servicebus.windows.net/hummingbirdqueue/messages</a>", "DevicePolicy", "zxuC2mrAN0o9lRlZmex/KhwSiF6uSr/Fxe/0lAS52G4="));</span>

}

<span class="hljs-keyword">try</span> {

Console.WriteLine(<span class="hljs-string">"Sending notification for "</span> + DeviceSerialNumer);

<span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> response = sbRequest.GetResponse ())

{

Console.WriteLine(<span class="hljs-string">"Sucessfully Sent"</span>);

}

} <span class="hljs-keyword">catch</span> (Exception e)

{

Console.WriteLine(<span class="hljs-string">"Couldn't post to service bus -"</span> + e);

}

}

<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-title">createToken</span><span class="hljs-params">(<span class="hljs-keyword">string</span> resourceUri, <span class="hljs-keyword">string</span> keyName, <span class="hljs-keyword">string</span> key)</span>

</span>{

TimeSpan sinceEpoch = DateTime.UtcNow - <span class="hljs-keyword">new</span> DateTime(<span class="hljs-number">1970</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);

<span class="hljs-keyword">var</span> expiry = sinceEpoch.Seconds.ToString(); <span class="hljs-comment">//EXPIRES in 1h</span>

<span class="hljs-keyword">string</span> stringToSign = HttpUtility.UrlEncode(resourceUri) + <span class="hljs-string">"\n"</span> + expiry;

System.Security.Cryptography.X509Certificates.X509Certificate hmac = <span class="hljs-keyword">new</span> System.Security.Cryptography.X509Certificates.X509Certificate(Encoding.UTF8.GetBytes(key));

<span class="hljs-keyword">var</span> signature = hmac.GetHashCode();

<span class="hljs-keyword">var</span> sasToken = System.Globalization.CultureInfo.CurrentUICulture +

<span class="hljs-string">"SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}"</span> +

HttpUtility.UrlEncode(resourceUri) + HttpUtility.UrlEncode(signature.ToString());

<span class="hljs-keyword">return</span> sasToken;

}

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DataUploadResponse</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> sasUrl { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> DataId { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> expiry { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DeviceReport</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Address { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> DataUrl { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> HasData { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> DataId { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> Sensors[] DeviceSensors { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; } <span class="hljs-comment">//temp, light ext...</span>

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Sensors</span>

{

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> SensorType { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Time { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Value { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }

}

}</pre><br></div>
                                    </li>
                                
                            </ul>
                        
                        <p>
                            
                            
                                <a href="/project/6032/instructions" class="grey-gold-button medium-button show">See all instructions</a>
                            
                        </p>
                    </div>
                
            
            
            <div class="section section-discussions last">
        <h5 id="j-discussions-title" class="j-discussions-title">Discussions</h5>

    <form id="j-discussion-add-top" action="/discussions/add" name="add-comment" method="POST" class="skip-global-form j-discussion-add hide">
        <div class="textarea-holder">
            <textarea placeholder="Add your comment" name="comment" class="editable input-comment"></textarea>
        </div>
        <input type="hidden" name="categoryId" value="6032" />
        <input type="hidden" name="category" value="project" />
        <input type="hidden" name="_csrf" value="JYxihdnV-EwafA1xLIG46L582I36mhoR9s0k" />
        <input type="hidden" name="replyTo" value="0" />
        <input type="submit" class="grey-gold-button medium-button" value="Post comment" />
    </form>

    <div id="discussion-list">
        
<p>
    <div class="signup-holder textarea-holder">
        <textarea placeholder="Sign in or become a member to leave your comment" name="comment" class="editable input-comment"></textarea>
    </div>
    <a href="#" class="login-button grey-gold-button medium-button half show">Sign in/up to comment</a>
</p>
<div class="modal-content-holder login-modal" id="login-modal">
    <div class="submissions-close modal-cancel"></div>
    <div class="signup-holder">
        <h2>Become a member</h2>
        <p>In order to follow projects & hackers or give skulls
        <br />you need to create an account.</p>
        <form action="/signup" method="POST">
            <fieldset class="form-left">
                <input type="text" class="input-field" placeholder="Enter your email address" required name="email"  />
                <input type="password" class="input-field" placeholder="Pick a secure password" required name="password"  />
            </fieldset>
            <fieldset class="form-right">
              <button class="gold-gold-button signup" type="submit">Sign up</button>
          </fieldset>
          <input type="hidden" name="_csrf" value="JYxihdnV-EwafA1xLIG46L582I36mhoR9s0k" />
          <input class="input-field" placeholder="Invitation Code" required name="invitation_code" value="5Ad0ix2-b96J" type="hidden" />
        </form>
        <a id="login-modal-signin" href="/signin">Already a member?</a>
    </div>
</div>








<script type="text/javascript">

    var pageIndex = 0;


</script>
    </div>

    

</div>



        </div>

    </div>

    
        <div class="container">
            <div class="section-recommendations">
                <h2>Similar projects</h2>
                
                    

<div class="project-item   ">

    
        <ul class="submissions-icons">
            
                
            
                
                    <li>
                        <a href="/submissions/prize2015/list" class="submission-icon submission-icon-5">
                            The 2015 Hackaday Prize
                        </a>
                    </li>
                
            
        </ul>
    

    <a href="/project/4648-analogio" class="item-link">
        <div title="analog.io by Luke Beno" class="project-item-cover"
                
             style="background-image:url(https://cdn.hackaday.io/images/resize/600x600/8393701426045682339.png)"
                
                >

        </div>

        
                <div class="project-item-stats">
                    
                    
                        <span class="icon-view-count" title="View Count">306</span>
                    
                    <span class="icon-comment-with-hover" title="Comments">2</span>
                    <span class="icon-view" title="Followers">37</span>
                    
                        <span class="icon-skull" title="Skulls">9</span>
                    
                </div>
         

        <div class="project-item-title hasBadge">
            A full stack project dedicated to easily collecting, analyzing and sharing IoT sensor data.
        </div>
    </a>
    <div class="project-item-headline">
        <span class="project-owner hide">Project Owner</span>
        <span class="project-owner hide">Contributor</span>
        <h3><a href="/project/4648-analogio" title="analog.io">analog.io</a></h3>
        <p>by <a href="/hacker/46306">Luke Beno</a></p>
    </div>
</div>
                
                    

<div class="project-item m-last-child  ">

    

    <a href="/project/4995-weather-map" class="item-link">
        <div title="Weather Map by Dan Fein" class="project-item-cover"
                
             style="background-image:url(https://cdn.hackaday.io/images/resize/600x600/4594091427649195995.jpg)"
                
                >

        </div>

        
                <div class="project-item-stats">
                    
                    
                        <span class="icon-view-count" title="View Count">283</span>
                    
                    <span class="icon-comment-with-hover" title="Comments">2</span>
                    <span class="icon-view" title="Followers">16</span>
                    
                        <span class="icon-skull" title="Skulls">6</span>
                    
                </div>
         

        <div class="project-item-title ">
            LED map showing temperature and rainfall for 100 points in the US
        </div>
    </a>
    <div class="project-item-headline">
        <span class="project-owner hide">Project Owner</span>
        <span class="project-owner hide">Contributor</span>
        <h3><a href="/project/4995-weather-map" title="Weather Map">Weather Map</a></h3>
        <p>by <a href="/hacker/59575">Dan Fein</a></p>
    </div>
</div>
                
                    

<div class="project-item  b-last-child ">

    
        <ul class="submissions-icons">
            
                
                    <li>
                        <a href="/submissions/prize2014/list" class="submission-icon submission-icon-1">
                            Official Hackaday Prize Entry
                        </a>
                    </li>
                
            
        </ul>
    

    <a href="/project/2432-raspberry-pi-plug-and-play-smart-sensors" class="item-link">
        <div title="Raspberry Pi Plug and Play Smart Sensors by Jeremy Hong" class="project-item-cover"
                
             style="background-image:url(https://cdn.hackaday.io/images/resize/600x600/7763351408069015686.jpg)"
                
                >

        </div>

        
                <div class="project-item-stats">
                    
                    
                        <span class="icon-view-count" title="View Count">957</span>
                    
                    <span class="icon-comment-with-hover" title="Comments">0</span>
                    <span class="icon-view" title="Followers">51</span>
                    
                        <span class="icon-skull" title="Skulls">3</span>
                    
                </div>
         

        <div class="project-item-title hasBadge">
            Control, manipulate, and extract data from things connected to the internet, or through a network structure.
        </div>
    </a>
    <div class="project-item-headline">
        <span class="project-owner hide">Project Owner</span>
        <span class="project-owner hide">Contributor</span>
        <h3><a href="/project/2432-raspberry-pi-plug-and-play-smart-sensors" title="Raspberry Pi Plug and Play Smart Sensors">Raspberry Pi Plug and Play Smart Sensors</a></h3>
        <p>by <a href="/hacker/10394">Jeremy Hong</a></p>
    </div>
</div>
                
            </div>

        </div>
    

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'JYxihdnV-EwafA1xLIG46L582I36mhoR9s0k';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_project&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />
    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>

    
    
    
    
    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evYhvPcTNHjcVmLti9HxMVov4N%2FG0Vb08G3dKHr8dVQWzXej5t18RehizqZ8wIVJ7qCSmA5v7VaFjCQENYTT0gaQoyhjrODHsQk5JUVvz7t44Dtk%2B11xxmipO4Y%2B9cBwn1IdfK1bYjGht%2Bf1yWZu2SwuQOo6kGY9xwArhHVwpedkUh5kLaSLkPbgFU2aMPMYlr%2FkGi5SGh0159v8zUCbh%2Fx4qqGgiq8xue1QDxwAtojDbMufEMnPeES%2BXUvICUCqPFVF9PsrubQsdtbQAJZsDggl-0.48.6.js"></script>

    <style>
        .mediumInsert-buttons {
            display: none !important;
        }
    </style>

    <div id="submission-popup-back"></div>
    <div id="submission-popup"></div>

    <div id="modal-report-back" class="modal-background"></div>
    <div id="modal-report" class="modal-content-holder container">
        <a href="javascript:void(0);" class="modal-close"></a>
        <form action="/report/project" class="j-modal-form">
            <h2>Report project as inappropriate</h2>

            <p class="intro-text">
                You are about to report the project "<b>Hummingbird</b>", please tell us the reason.
            </p>

            <textarea name="comment" class="j-report-comment" placeholder="Why do you report the project as inappropriate"></textarea>

            <input type="hidden" name="_csrf" value="JYxihdnV-EwafA1xLIG46L582I36mhoR9s0k" />
            <input type="hidden" name="projectId" value="6032" />
            <div class="modal-footer">
                <input type="submit" value="Report" class="gold-gold-button"/>
            </div>
            <div class='j-modal-form-message'></div>
        </form>
        <div class='j-modal-message hide'></div>
    </div>



    <div id="modal-contributor-apply-back" class="modal-background"></div>
    <div id="modal-contributor-apply" class="modal-content-holder container">
        <a href="javascript:void(0);" class="modal-close"></a>
        <form id="contributor-apply-form">
            <h2>Send message</h2>

            <textarea name="message" class="j-report-comment">
Hello,

I really like your project and I think I have skills to help you.
            </textarea>
            <p class="application-success">Your application has been submitted.</p>
            <input type="hidden" name="_csrf" value="JYxihdnV-EwafA1xLIG46L582I36mhoR9s0k" />
            <input type="hidden" name="projectId" value="6032" />

            <div class="modal-footer">
                <input type="submit" value="Send" class="gold-gold-button"/>
            </div>
        </form>

    </div>


    <div id="modal-contributor-remove-back" class="modal-background"></div>
    <div id="modal-contributor-remove" class="modal-content-holder container">
        <a href="javascript:void(0);" class="modal-close"></a>
        <form id="contributor-remove-form">
            <h2>Remove Contributor</h2>
            <p>
                Are you sure you want to remove yourself as a contributor for this project?
            </p>
            <p>Project owner will be notified upon removal.</p>
            <input type="hidden" name="_csrf" value="JYxihdnV-EwafA1xLIG46L582I36mhoR9s0k" />
            <input type="hidden" name="projectId" value="6032" />
            <input type="hidden" name="remove_contributor_id" id="remove_contributor_id"/>

            <div class="modal-footer">
                <input type="submit" value="Remove" class="gold-gold-button"/>
                <input value="Nevermind" class="gold-gold-button"/>
            </div>
        </form>
    </div>


    <script>
        HIO.projectId = 6032;
    </script>

  </body>
</html>
