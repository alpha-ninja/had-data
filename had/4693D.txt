<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; Medical tricorder &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F15048">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/4693">Medical tricorder</a>
                    </p>
                    <p class="description-summary">Using artificial intelligence to identify a disease by its symptoms</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/56285-m-bindhammer" title="Visit Profile">
                                M. Bindhammer
                            </a>
                            <span>&bull;</span>
                            5 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <iframe style="width: 500px; height: 281px;" src="//www.youtube.com/embed/Lzw2CkwlwDo" allowfullscreen="" frameborder="0" height="281" width="500"></iframe><p>From <a href="http://en.wikipedia.org/wiki/Medical_tricorder">Wikipedia</a>, the free encyclopedia: A medical tricorder is a handheld portable scanning device to be used by consumers to self-diagnose medical conditions within seconds and take basic vital measurements. The word "tricorder" is an abbreviation of the device's full name, the "TRI-function reCORDER", referring to the device's primary functions; Sensing, Computing and Recording.</p><p>We will sense the 3 basic vital signs, which are body temperature, pulse rate and respiration rate. We will process (compute) these data using naive Bayes classifiers trained in a supervised learning setting for medical diagnosis beside other tools. And we will record the data (on a SD card).</p><p>The medical tricorder works in absence of internet, smart phones and computers, because where it probably will be used aren't such things available for the people in need.<br></p><p><br><strong></strong></p><p><strong>1. Directly diagnosed diseases</strong></p><p>Following diseases can be directly diagnosed, just comparing measured data to look-up-tables:</p><table><tbody><tr><td></td><td><strong>Body temperature</strong></td><td><strong>Heart rate</strong></td><td><strong>Respiratory Rate</strong></td></tr><tr><td><strong>Direct diagnoses</strong></td><td>Hypothermia<br>Fever   (Hyperthermia, Hyperpyrexia)</td><td>Bradycardia<br>Tachycardia</td><td>Bradypnea<br>Tachypnea</td></tr></tbody></table><p><br><strong></strong></p><p>a) <a href="http://en.wikipedia.org/wiki/Human_body_temperature">Body core temperature classification</a><br><strong></strong></p><table><tbody><tr><td><strong>Class</strong></td><td><strong>Body core temperature</strong></td></tr><tr><td>Hypothermia</td><td>&lt; 35 °C</td></tr><tr><td>Normal</td><td>36.5-37.5 °C</td></tr><tr><td>Fever</td><td>&gt; 38.3 °C</td></tr><tr><td>Hyperthermia</td><td>&gt; 40.0 °C</td></tr><tr><td>Hyperpyrexia</td><td>&gt; 41.5 °C</td></tr></tbody></table><hr><p>b) <a href="http://www.nlm.nih.gov/medlineplus/ency/article/003399.htm">Resting heart rate</a><br><strong></strong></p><table><tbody><tr><td><strong>Age</strong></td><td><strong>Resting heart rate</strong></td></tr><tr><td>0-1 month</td><td>70-190 bpm</td></tr><tr><td>1-11 months</td><td>80-160 bpm</td></tr><tr><td>1-2 years</td><td>80-130 bpm</td></tr><tr><td>3-4 years</td><td>80-120 bpm</td></tr><tr><td>5-6 years</td><td>75-115 bpm</td></tr><tr><td>7-9 years</td><td>70-110 bpm</td></tr><tr><td>&gt; 10 years</td><td>60-100 bpm (Well-trained   athletes: 40-60 bpm)</td></tr></tbody></table><hr><p>c) <a href="http://www.rch.org.au/clinicalguide/guideline_index/Normal_Ranges_for_Physiological_Variables/">Respiratory rate</a></p><table><tbody><tr><td><strong>Age<br></strong></td><td><strong>Respiratory Rate</strong><strong> <br></strong></td></tr><tr><td>0-2 months</td><td>25-60 bpm</td></tr><tr><td>3-5 months</td><td>25-55 bpm</td></tr><tr><td>6-11 months</td><td>25-55 bpm</td></tr><tr><td>1 year</td><td>20-40 bpm</td></tr><tr><td>2-3 years</td><td>20-40 bpm</td></tr><tr><td>4-5 years</td><td>20-40 bpm</td></tr><tr><td>6-7 years</td><td>16-34 bpm</td></tr><tr><td>8-9 years</td><td>16-34 bpm</td></tr><tr><td>10-11 years</td><td>16-34 bpm</td></tr><tr><td>12-13 years</td><td>14-26 bpm</td></tr><tr><td>14-16 years</td><td>14-26 bpm</td></tr><tr><td>≥ 17 years</td><td>14-26 bpm</td></tr></tbody></table><p><br><strong></strong></p><p><strong>2. Naive Bayes classifier at a glance</strong></p><p><a href="http://en.wikipedia.org/wiki/Naive_Bayes_classifier">Naive Bayes classifiers</a> are commonly used in automatic medical diagnosis. There are many tutorials about the naive Bayes classifier out there, so I keep it short here.</p><p>Bayes' theorem:</p><img alt="\color{White} \large P \big(h|d)= \frac{P\big(d|h)\times P\big(h)}{P\big(d)}     " title="\color{White} \large P \big(h|d)= \frac{P\big(d|h)\times P\big(h)}{P\big(d)}     " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20P%20%5Cbig(h%7Cd)%3D%20%5Cfrac%7BP%5Cbig(d%7Ch)%5Ctimes%20P%5Cbig(h)%7D%7BP%5Cbig(d)%7D%20%20%20%20%20"><p><em>h</em>: Hypothesis<br><em>d</em>: Data<br>P(<em>h</em>): Probability of hypothesis <em>h</em> before seeing any data <em>d</em><br>P(<em>d</em>|<em>h</em>): Probability of the data if the hypothesis <em>h</em> is true</p><p>The data evidence is given by<br></p><p><img alt="\color{White} \large P \big(d)= \sum_h P \big(d|h)  \times P \big(h)" title="\color{White} \large P \big(d)= \sum_h P \big(d|h)  \times P \big(h)" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20P%20%5Cbig(d)%3D%20%5Csum_h%20P%20%5Cbig(d%7Ch)%20%20%5Ctimes%20P%20%5Cbig(h)">where P(<em>h</em>|<em>d</em>) is the probability of hypothesis <em>h</em> after having seen the data <em>d</em>.</p><p>Generally we want the most probable hypothesis given training data. This is the<em> maximum a posteriori hypothesis</em>: </p><p><img alt="\color{White} \large h_{MAP}=arg~max_{h\in H} P \big(h|d)=arg~max_{h\in H} \frac{P \big(d|h)\times P\big(h)}{P\big(d)}" title="\color{White} \large h_{MAP}=arg~max_{h\in H} P \big(h|d)=arg~max_{h\in H} \frac{P \big(d|h)\times P\big(h)}{P\big(d)}" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h_%7BMAP%7D%3Darg~max_%7Bh%5Cin%20H%7D%20P%20%5Cbig(h%7Cd)%3Darg~max_%7Bh%5Cin%20H%7D%20%5Cfrac%7BP%20%5Cbig(d%7Ch)%5Ctimes%20P%5Cbig(h)%7D%7BP%5Cbig(d)%7D"></p><p><em>H</em>: Hypothesis set or space</p><p>As the denominators P(<em>d</em>) are identical for all hypotheses,<em>  h</em><em>MAP</em> can be simplified:</p><p><img alt="\color{White} \large h_{MAP}=arg~max_{h\in H} P \big(d|h) \times P \big(h)" title="\color{White} \large h_{MAP}=arg~max_{h\in H} P \big(d|h) \times P \big(h)" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h_%7BMAP%7D%3Darg~max_%7Bh%5Cin%20H%7D%20P%20%5Cbig(d%7Ch)%20%5Ctimes%20P%20%5Cbig(h)">If our data <em>d</em> has several attributes, the naïve Bayes assumption can be used. Attributes <em>a</em> that describe data instances are conditionally independent given the classification hypothesis:</p><p><img alt="\color{White} \large P \big(d|h)=P \big(a_{1},...,a_{T}|h) = \prod_t P \big(a_{t}|h) " title="\color{White} \large P \big(d|h)=P \big(a_{1},...,a_{T}|h) = \prod_t P \big(a_{t}|h) " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20P%20%5Cbig(d%7Ch)%3DP%20%5Cbig(a_%7B1%7D%2C...%2Ca_%7BT%7D%7Ch)%20%3D%20%5Cprod_t%20P%20%5Cbig(a_%7Bt%7D%7Ch)%20"><img alt="\color{White} \large h_{NB}=arg~max_{h\in H} P(h)\times \prod_t P \big(a_{t}|h)    " title="\color{White} \large h_{NB}=arg~max_{h\in H} P(h)\times \prod_t P \big(a_{t}|h)    " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h_%7BNB%7D%3Darg~max_%7Bh%5Cin%20H%7D%20P(h)%5Ctimes%20%5Cprod_t%20P%20%5Cbig(a_%7Bt%7D%7Ch)%20%20%20%20"><strong>3. Common cold/flu classifier</strong></p><p>Every human depending on the age catches a cold 3-15 times a year. Taking the average 9 times a year and assuming a world population of 7· 10^9, we have 63· 10^9 common cold cases a year. Around <a href="http://de.globometer.com/krankheiten.php">5·10^6 people will get the flu per year</a>. Now we can compute:</p><p><img alt="\color{White} \large P \big(Flu)= \frac{5 \times 10^{6}}{5 \times 10^{6}+63 \times 10^{9}}  \approx 0.00008" title="\color{White} \large P \big(Flu)= \frac{5 \times 10^{6}}{5 \times 10^{6}+63 \times 10^{9}}  \approx 0.00008" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20P%20%5Cbig(Flu)%3D%20%5Cfrac%7B5%20%5Ctimes%2010%5E%7B6%7D%7D%7B5%20%5Ctimes%2010%5E%7B6%7D%2B63%20%5Ctimes%2010%5E%7B9%7D%7D%20%20%5Capprox%200.00008"><img alt="\color{White} \large P \big(Common~cold)= \frac{63 \times 10^{9}}{5 \times 10^{6}+63 \times 10^{9}}  \approx0.99992" title="\color{White} \large P \big(Common~cold)= \frac{63 \times 10^{9}}{5 \times 10^{6}+63 \times 10^{9}}  \approx0.99992" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20P%20%5Cbig(Common~cold)%3D%20%5Cfrac%7B63%20%5Ctimes%2010%5E%7B9%7D%7D%7B5%20%5Ctimes%2010%5E%7B6%7D%2B63%20%5Ctimes%2010%5E%7B9%7D%7D%20%20%5Capprox0.99992">This means only one of approx. 12500 patients with common cold/flu like symptoms has actually flu! Rests of the data are taken from <a href="http://img.welt.de/img/gesundheit/crop100960397/9056938497-ci3x2l-w900/Grippe-DW-Wissenschaft-BERLIN.jpg">here</a>. The probability-look-up table for supervised learning looks then as follows:</p><table><tbody><tr><td><strong>Prob</strong></td><td><strong>Flu</strong></td><td><strong>Common cold</strong></td></tr><tr><td>P(h)</td><td>0.00008</td><td>0.99992</td></tr><tr><td>P(Fatigue|h)</td><td>0.8</td><td>0.225</td></tr><tr><td>P(Fever|h)</td><td>0.9</td><td>0.005</td></tr><tr><td>P(Chills|h)</td><td>0.9</td><td>0.1</td></tr><tr><td>P(Sore throat|h)</td><td>0.55</td><td>0.5</td></tr><tr><td>P(Cough|h)</td><td>0.9</td><td>0.4</td></tr><tr><td>P(Headache|h)</td><td>0.85</td><td>0.25</td></tr><tr><td>P(Muscle pain|h)</td><td>0.675</td><td>0.1</td></tr><tr><td>P(Sneezing|h)</td><td>0.25</td><td>0.9<br></td></tr></tbody></table><p>Therefore:</p><p><img alt="\color{White} \large h_{NB}=arg~ max_{h\in  \big\{Common~cold,Flu\big\}} P(h)\times P(Fatigue|h) \times P(Fever|h) \times P(Chills|h) \times P(Sore~throat|h) \times P(Cough|h) \times P(Headache|h) \times P(Muscle~pain|h) \times P(Sneezing|h)" title="\color{White} \large h_{NB}=arg~ max_{h\in  \big\{Common~cold,Flu\big\}} P(h)\times P(Fatigue|h) \times P(Fever|h) \times P(Chills|h) \times P(Sore~throat|h) \times P(Cough|h) \times P(Headache|h) \times P(Muscle~pain|h) \times P(Sneezing|h)" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h_%7BNB%7D%3Darg~%20max_%7Bh%5Cin%20%20%5Cbig%5C%7BCommon~cold%2CFlu%5Cbig%5C%7D%7D%20P(h)%5Ctimes%20P(Fatigue%7Ch)%20%5Ctimes%20P(Fever%7Ch)%20%5Ctimes%20P(Chills%7Ch)%20%5Ctimes%20P(Sore~throat%7Ch)%20%5Ctimes%20P(Cough%7Ch)%20%5Ctimes%20P(Headache%7Ch)%20%5Ctimes%20P(Muscle~pain%7Ch)%20%5Ctimes%20P(Sneezing%7Ch)"><br></p><p>Note: The probability that an event <em>A</em> is not occurring is given by</p><p><img alt="\color{White} \large P  \big(\neg A\big) =1-P \big(A\big)" title="\color{White} \large P  \big(\neg A\big) =1-P \big(A\big)" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20P%20%20%5Cbig(%5Cneg%20A%5Cbig)%20%3D1-P%20%5Cbig(A%5Cbig)">Multiplying a lot of probabilities, which are between 0 and 1 by definition, can result in floating-point underflow. Since</p><p><img alt="\color{White} \large \log⁡(x\times y)=\log⁡(x)+\log⁡(y) " title="\color{White} \large \log⁡(x\times y)=\log⁡(x)+\log⁡(y) " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20%5Clog%E2%81%A1(x%5Ctimes%20y)%3D%5Clog%E2%81%A1(x)%2B%5Clog%E2%81%A1(y)%20">it is better to perform all computations by summing logs of probabilities rather than multiplying probabilities. The class with highest final un-normalized log probability score is still the most probable:</p><p><img alt="\color{White} \large h_{NB}=arg~ max_{h\in H} \log \big(P(h)\big)+ \sum_t \log \big(P\big(a_{t}|h\big)\big) " title="\color{White} \large h_{NB}=arg~ max_{h\in H} \log \big(P(h)\big)+ \sum_t \log \big(P\big(a_{t}|h\big)\big) " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h_%7BNB%7D%3Darg~%20max_%7Bh%5Cin%20H%7D%20%5Clog%20%5Cbig(P(h)%5Cbig)%2B%20%5Csum_t%20%5Clog%20%5Cbig(P%5Cbig(a_%7Bt%7D%7Ch%5Cbig)%5Cbig)%20">An according Arduino sketch using the serial monitor and computer keyboard as interface for testing would look as following:<br></p><pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>{
  Serial.begin(<span class="hljs-number">9600</span>);
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>{
  flu_cold_classifier();
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">diagnosis</span><span class="hljs-params">(boolean fatigue, boolean fever, boolean chills, boolean sore_throat, 
boolean cough, boolean headache, boolean muscle_pain, boolean sneezing)</span> </span>{
  <span class="hljs-comment">// probability-look-up table</span>
  <span class="hljs-keyword">float</span> Prob[] = {<span class="hljs-number">0.00008</span>, <span class="hljs-number">0.99992</span>};
  <span class="hljs-keyword">float</span> P_fatigue[] = {<span class="hljs-number">0.8</span>, <span class="hljs-number">0.225</span>};
  <span class="hljs-keyword">float</span> P_fever[] = {<span class="hljs-number">0.9</span>, <span class="hljs-number">0.005</span>};
  <span class="hljs-keyword">float</span> P_chills[] = {<span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>};
  <span class="hljs-keyword">float</span> P_sore_throat[] = {<span class="hljs-number">0.55</span>, <span class="hljs-number">0.5</span>};
  <span class="hljs-keyword">float</span> P_cough[] = {<span class="hljs-number">0.9</span>, <span class="hljs-number">0.4</span>};
  <span class="hljs-keyword">float</span> P_headache[] = {<span class="hljs-number">0.85</span>, <span class="hljs-number">0.25</span>};
  <span class="hljs-keyword">float</span> P_muscle_pain[] = {<span class="hljs-number">0.675</span>, <span class="hljs-number">0.1</span>};
  <span class="hljs-keyword">float</span> P_sneezing[] = {<span class="hljs-number">0.25</span>, <span class="hljs-number">0.9</span>};
  <span class="hljs-comment">// P(¬A) = 1 - P(A)</span>
  <span class="hljs-keyword">for</span>(byte i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i ++) {
    <span class="hljs-keyword">if</span>(fatigue == <span class="hljs-keyword">false</span>) P_fatigue[i] = <span class="hljs-number">1.0</span> - P_fatigue[i]; 
    <span class="hljs-keyword">if</span>(fever == <span class="hljs-keyword">false</span>) P_fever[i] = <span class="hljs-number">1.0</span> - P_fever[i]; 
    <span class="hljs-keyword">if</span>(chills == <span class="hljs-keyword">false</span>) P_chills[i] = <span class="hljs-number">1.0</span> - P_chills[i]; 
    <span class="hljs-keyword">if</span>(sore_throat == <span class="hljs-keyword">false</span>) P_sore_throat[i] = <span class="hljs-number">1.0</span> - P_sore_throat[i]; 
    <span class="hljs-keyword">if</span>(cough == <span class="hljs-keyword">false</span>) P_cough[i] = <span class="hljs-number">1.0</span> - P_cough[i]; 
    <span class="hljs-keyword">if</span>(headache == <span class="hljs-keyword">false</span>) P_headache[i] = <span class="hljs-number">1.0</span> - P_headache[i]; 
    <span class="hljs-keyword">if</span>(muscle_pain == <span class="hljs-keyword">false</span>) P_muscle_pain[i] = <span class="hljs-number">1.0</span> - P_muscle_pain[i]; 
    <span class="hljs-keyword">if</span>(sneezing == <span class="hljs-keyword">false</span>) P_sneezing[i] = <span class="hljs-number">1.0</span> - P_sneezing[i]; 
  }
  <span class="hljs-comment">// computing arg max</span>
  <span class="hljs-keyword">float</span> P_flu = <span class="hljs-built_in">log</span>(Prob[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">log</span>(P_fatigue[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">log</span>(P_fever[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">log</span>(P_chills[<span class="hljs-number">0</span>]) +
  <span class="hljs-built_in">log</span>(P_sore_throat[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">log</span>(P_cough[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">log</span>(P_headache[<span class="hljs-number">0</span>])+ <span class="hljs-built_in">log</span>(P_muscle_pain[<span class="hljs-number">0</span>]) +
  <span class="hljs-built_in">log</span>(P_sneezing[<span class="hljs-number">0</span>]);
  <span class="hljs-keyword">float</span> P_cold = <span class="hljs-built_in">log</span>(Prob[<span class="hljs-number">1</span>]) + <span class="hljs-built_in">log</span>(P_fatigue[<span class="hljs-number">1</span>]) + <span class="hljs-built_in">log</span>(P_fever[<span class="hljs-number">1</span>]) + <span class="hljs-built_in">log</span>(P_chills[<span class="hljs-number">1</span>]) +
  <span class="hljs-built_in">log</span>(P_sore_throat[<span class="hljs-number">1</span>]) + <span class="hljs-built_in">log</span>(P_cough[<span class="hljs-number">1</span>]) + <span class="hljs-built_in">log</span>(P_headache[<span class="hljs-number">1</span>])+ <span class="hljs-built_in">log</span>(P_muscle_pain[<span class="hljs-number">1</span>]) +
  <span class="hljs-built_in">log</span>(P_sneezing[<span class="hljs-number">1</span>]);
  <span class="hljs-comment">/* If we want to know the exact probability we can 
     normalize these values by computing base-e 
     exponential1s and having them sum to 1:
  */</span>
  <span class="hljs-keyword">float</span> P_flu_percentage = (<span class="hljs-built_in">exp</span>(P_flu) / (<span class="hljs-built_in">exp</span>(P_flu) + <span class="hljs-built_in">exp</span>(P_cold))) * <span class="hljs-number">100.0</span>;
  <span class="hljs-keyword">float</span> P_cold_percentage = (<span class="hljs-built_in">exp</span>(P_cold) / (<span class="hljs-built_in">exp</span>(P_flu) + <span class="hljs-built_in">exp</span>(P_cold))) * <span class="hljs-number">100.0</span>;
  <span class="hljs-keyword">if</span>(P_flu &gt; P_cold) {
    Serial.print(<span class="hljs-string">"Diagnosis: Flu (Confidence: "</span>);
    Serial.print(P_flu_percentage);
    Serial.println(<span class="hljs-string">"%)"</span>);
  }
  <span class="hljs-keyword">if</span>(P_cold &gt; P_flu) {
    Serial.print(<span class="hljs-string">"Diagnosis: Common cold (Confidence: "</span>);
    Serial.print(P_cold_percentage);
    Serial.println(<span class="hljs-string">"%)"</span>);
  }
  Serial.println(<span class="hljs-string">""</span>);
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flu_cold_classifier</span><span class="hljs-params">()</span> </span>{
  Serial.println(<span class="hljs-string">"If you have flu/cold like symptoms, answer following questions"</span>);
  Serial.println(<span class="hljs-string">"Enter 'y' for 'yes' and 'n' for 'no'"</span>);
  Serial.println(<span class="hljs-string">""</span>);
  <span class="hljs-keyword">char</span> *symptoms[] ={<span class="hljs-string">"Fatigue?"</span>, <span class="hljs-string">"Fever?"</span>, <span class="hljs-string">"Chills?"</span>, <span class="hljs-string">"Sore throat?"</span>, <span class="hljs-string">"Cough?"</span>, <span class="hljs-string">"Headache?"</span>, <span class="hljs-string">"Muscle pain?"</span>, <span class="hljs-string">"Sneezing?"</span>};
  boolean answ[<span class="hljs-number">8</span>];
  <span class="hljs-keyword">for</span>(byte i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i ++) {
    Serial.println(symptoms[i]);
    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) {
      <span class="hljs-keyword">char</span> ch;
      <span class="hljs-keyword">if</span>(Serial.available()){
        delay(<span class="hljs-number">100</span>);
        <span class="hljs-keyword">while</span>( Serial.available()) {
          ch = Serial.read();
        }
        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'y'</span>) {
          Serial.println(<span class="hljs-string">"Your answer: yes"</span>);
          Serial.println(<span class="hljs-string">""</span>);
          answ[i] = <span class="hljs-keyword">true</span>;
          <span class="hljs-keyword">break</span>;
        }
        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'n'</span>) {
          Serial.println(<span class="hljs-string">"Your answer: no"</span>);
          Serial.println(<span class="hljs-string">""</span>);
          answ[i] = <span class="hljs-keyword">false</span>;
          <span class="hljs-keyword">break</span>;
        }
      }
    }
  }
  diagnosis(answ[<span class="hljs-number">0</span>], answ[<span class="hljs-number">1</span>], answ[<span class="hljs-number">2</span>], answ[<span class="hljs-number">3</span>], answ[<span class="hljs-number">4</span>], answ[<span class="hljs-number">5</span>], answ[<span class="hljs-number">6</span>], answ[<span class="hljs-number">7</span>]);
}</pre><p><br><strong></strong></p><p><strong>4. Temperature measurement</strong></p><p>I think most of you including me feel not very comfortable having a thermometer in any orifice of the body. So called <a href="http://www.brauntherms.com/our-products/no-touch-forehead/">no-touch forehead thermometers</a> exit, which measure the temperature on the skin of the forehead over the temporal artery by an infrared thermopile sensor. So our intelligent thermometer should be such a type. But obviously the forehead temperature is significant lower than the body core temperature. How do these thermometers compute the body core temperature?</p><p><span class="story"><span class="story"><span class="story">Ok, let's start with an assumption. As we have to deal with relatively low temperatures, we neglect</span></span></span> radiative heat transfer of the forehead and just considering <span class="story"><span class="story"> heat transfer by convection.</span></span><span class="story"><span class="story"> The heat transfer per unit surface through convection was first described by Newton and the relation is known as the <a href="http://www.ugrad.math.ubc.ca/coursedoc/math100/notes/diffeqs/cool.html">Newton's Law of Cooling</a>. The equation for convection can be expressed as:</span></span></p><p><img alt="\color{White} \large q=h \times A \times  \big(T_{S}-T_{A}\big) ~~(1)" title="\color{White} \large q=h \times A \times  \big(T_{S}-T_{A}\big) ~~(1)" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20q%3Dh%20%5Ctimes%20A%20%5Ctimes%20%20%5Cbig(T_%7BS%7D-T_%7BA%7D%5Cbig)%20~~(1)"><br></p><p><span class="story"><span class="story"><span class="story"><em>q</em> = heat transferred per unit time [W]</span></span></span></p><p><span class="story"><span class="story"><span class="story"><em>h</em> = convective heat transfer coefficient of the process [W/(m²·K)]</span></span></span></p><p><span class="story"><span class="story"><span class="story"><em>A</em> = heat transfer area of the skin[</span></span></span><span class="story"><span class="story"><span class="story"><span class="story"><span class="story"><span class="story">m²</span></span></span>]</span></span></span></p><p><span class="story"><span class="story"><span class="story"><em>TS</em> = temperature of the skin [K]</span></span></span></p><p><span class="story"><span class="story"><span class="story"><em>T</em></span></span></span><span class="story"><span class="story"><span class="story"><em><span class="story"><span class="story"><span class="story"><em>A</em> </span></span></span></em>= ambient temperature [K]</span></span></span></p><span class="story"><span class="story"><span class="story">The equation for convection can be also expressed as<p><img alt="\color{White} \large q=w \times c \times  \big(T_{C}-T_{S}\big)  ~~(2)" title="\color{White} \large q=w \times c \times  \big(T_{C}-T_{S}\big)  ~~(2)" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20q%3Dw%20%5Ctimes%20c%20%5Ctimes%20%20%5Cbig(T_%7BC%7D-T_%7BS%7D%5Cbig)%20%20~~(2)"></p></span></span></span><p><span class="story"><span class="story"><span class="story"><em>w</em> = blood mass flow rate [kg/s]</span></span></span></p><p><span class="story"><span class="story"><span class="story">c = heat capacity of blood [J/(kg·K)]</span></span></span></p><p><span class="story"><span class="story"><span class="story"><em>TC</em> = body core temperature [K]<br></span></span></span></p><p><span class="story"><span class="story"><span class="story">Equating equation (1) and (2) yields </span></span></span></p><p><img alt="\color{White} \large h \times A \times  \big(T_{S}-T_{A}\big) =w \times c \times  \big(T_{C}-T_{S}\big) " title="\color{White} \large h \times A \times  \big(T_{S}-T_{A}\big) =w \times c \times  \big(T_{C}-T_{S}\big) " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h%20%5Ctimes%20A%20%5Ctimes%20%20%5Cbig(T_%7BS%7D-T_%7BA%7D%5Cbig)%20%3Dw%20%5Ctimes%20c%20%5Ctimes%20%20%5Cbig(T_%7BC%7D-T_%7BS%7D%5Cbig)%20"><span class="story"><span class="story"><span class="story">Dividing by surface area <em>A</em>:</span></span></span></p><p><img alt="\color{White} \large h \times  \big(T_{S}-T_{A}\big) = \frac{w}{A} \times c \times  \big(T_{C}-T_{S}\big) " title="\color{White} \large h \times  \big(T_{S}-T_{A}\big) = \frac{w}{A} \times c \times  \big(T_{C}-T_{S}\big) " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h%20%5Ctimes%20%20%5Cbig(T_%7BS%7D-T_%7BA%7D%5Cbig)%20%3D%20%5Cfrac%7Bw%7D%7BA%7D%20%5Ctimes%20c%20%5Ctimes%20%20%5Cbig(T_%7BC%7D-T_%7BS%7D%5Cbig)%20"><img alt="\color{White} \large h \times  \big(T_{S}-T_{A}\big) = p \times c \times  \big(T_{C}-T_{S}\big) " title="\color{White} \large h \times  \big(T_{S}-T_{A}\big) = p \times c \times  \big(T_{C}-T_{S}\big) " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20h%20%5Ctimes%20%20%5Cbig(T_%7BS%7D-T_%7BA%7D%5Cbig)%20%3D%20p%20%5Ctimes%20c%20%5Ctimes%20%20%5Cbig(T_%7BC%7D-T_%7BS%7D%5Cbig)%20"><br></p><p><span class="story"><span class="story"><span class="story">where <em>p</em> = perfusion rate [kg/(s·</span></span></span><span class="story"><span class="story"><span class="story"><span class="story"><span class="story"><span class="story"><span class="story"><span class="story"><span class="story">m²</span></span></span></span></span></span>)].</span></span></span></p><p><span class="story"><span class="story"><span class="story">Solving for </span></span></span><span class="story"><span class="story"><span class="story"><em>TC</em>:</span></span></span></p><p><img alt="\color{White} \large T_{C}= \frac{h}{p \times c} \times  \big(T_{S}-T_{A}\big) + T_{S}~~(3)" title="\color{White} \large T_{C}= \frac{h}{p \times c} \times  \big(T_{S}-T_{A}\big) + T_{S}~~(3)" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20T_%7BC%7D%3D%20%5Cfrac%7Bh%7D%7Bp%20%5Ctimes%20c%7D%20%5Ctimes%20%20%5Cbig(T_%7BS%7D-T_%7BA%7D%5Cbig)%20%2B%20T_%7BS%7D~~(3)"><span class="story"><span class="story"><span class="story">According to the US patent <a href="http://www.google.com/patents/US6299347">US 6299347 B1</a> h/(p∙c) can be expressed as</span></span></span></p><p><img alt="\color{White} \large \frac{h}{p \times c}=0.001081 \times  T_{S}^{2}-0.2318 \times  T_{S}+12.454" title="\color{White} \large \frac{h}{p \times c}=0.001081 \times  T_{S}^{2}-0.2318 \times  T_{S}+12.454" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20%5Cfrac%7Bh%7D%7Bp%20%5Ctimes%20c%7D%3D0.001081%20%5Ctimes%20%20T_%7BS%7D%5E%7B2%7D-0.2318%20%5Ctimes%20%20T_%7BS%7D%2B12.454">which is an approximation of h/(p·c) with change in skin temperature for afebrile and febrile ranges.</p><p><span class="story"><span class="story"><span class="story">Substituting </span></span></span><span class="story"><span class="story"><span class="story">h/(p·c) in equation (3) we finally get the body core temperature in °F by the forehead and ambient temperature in </span></span></span><span class="story"><span class="story"><span class="story"><span class="story"><span class="story"><span class="story">°F</span></span></span>:</span></span></span></p><p><img alt="\color{White} \large T_{C}=  \big(0.001081  \times T_{S}^{2}-0.2318 \times  T_{S}+12.454\big) \times  \big(T_{S}-T_{A}\big) + T_{S}" title="\color{White} \large T_{C}=  \big(0.001081  \times T_{S}^{2}-0.2318 \times  T_{S}+12.454\big) \times  \big(T_{S}-T_{A}\big) + T_{S}" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20T_%7BC%7D%3D%20%20%5Cbig(0.001081%20%20%5Ctimes%20T_%7BS%7D%5E%7B2%7D-0.2318%20%5Ctimes%20%20T_%7BS%7D%2B12.454%5Cbig)%20%5Ctimes%20%20%5Cbig(T_%7BS%7D-T_%7BA%7D%5Cbig)%20%2B%20T_%7BS%7D"><span class="story"><span class="story"><span class="story">The body core temperature will be monitored by a <a href="http://www.melexis.com/Infrared-Thermometer-Sensors/Infrared-Thermometer-Sensors/MLX90614-615.aspx">MLX90614</a> IR thermometer for non contact temperature measurements. Both the IR sensitive thermophile detector chip and the signal conditioning ASIC are integrated in the same TO-39 can. </span></span></span></p><p><img src="https://cdn.hackaday.io/images/4689601430664924991.jpg"></p><p><span class="story"><span class="story"><span class="story">The schematic is straightforward, just following the data sheet:</span></span></span></p><p><img src="https://cdn.hackaday.io/images/4062501430707690484.JPG"></p><span class="story"><span class="story"><span class="story">The pull-up resistors are optional. Usually the I²C bus of Arduino boards is already equipped with 10k pull-up resistors</span></span></span>.<p>I will probably use the D - 3V medical accuracy version of the <span class="story"><span class="story"><span class="story">IR thermometer</span></span></span> for the next mark of the shield.</p><p><span class="story"><span class="story"><span class="story">Example code:</span></span></span></p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;Wire.h&gt;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;Adafruit_MLX90614.h&gt;</span>
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

<span class="hljs-keyword">float</span> T_SK_buffer;
<span class="hljs-keyword">float</span> T_SK;
<span class="hljs-keyword">float</span> T_Core;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>{
  Serial.begin(<span class="hljs-number">9600</span>);
  mlx.begin();  
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>{
  T_SK_buffer = mlx.readObjectTempF();
  <span class="hljs-keyword">if</span>(T_SK_buffer &gt; T_SK) {
    T_SK = T_SK_buffer;
    T_Core = (<span class="hljs-number">0.001081</span>*T_SK*T_SK-<span class="hljs-number">0.2318</span>*T_SK+<span class="hljs-number">12.454</span>)*(T_SK-mlx.readAmbientTempF())+T_SK;
    T_Core = (T_Core-<span class="hljs-number">32.0</span>)*<span class="hljs-number">5.0</span>/<span class="hljs-number">9.0</span>; <span class="hljs-comment">// convert to degrees C</span>
    Serial.println(T_Core);
  }
}</pre><p><br><strong></strong></p><p><strong>5. Heart beat monitor</strong></p><p>The heart beat monitor consists of following components:</p><p><img src="https://cdn.hackaday.io/images/220051430719240102.JPG"></p>The ear lobe pulse sensor <a href="http://dgkyto.appliances-china.com/Product_Look.php?ProID=122121">HRM-2511B</a> is from Kyto Electronic. R1 and R2 biasing the IR LED and photo transistor in the ear lope sensor which is connected to the shield via 3.5mm phone connector. Safety resistor R6 and the diodes D1 and D2 building a reference voltage generator. The reference voltage is two times the diode forward voltage (approx. 0.7 V for silicon diodes, depending on current and temperature) in respect to GND. C6/R7 and C8/R10 building passive, analog, first-order high-pass filters (HPF). The cutoff frequency <em>f</em><em>c </em>is given by<p><img alt="\color{White} \large f_{c}=\frac{1}{2 \times \pi  \times R  \times C}=\frac{1}{2 \times \pi  \times 47 \times 10^{3} \Omega \times 2.2 \times 10^{-6}F}  \approx 1.54Hz" title="\color{White} \large f_{c}=\frac{1}{2 \times \pi  \times R  \times C}=\frac{1}{2 \times \pi  \times 47 \times 10^{3} \Omega \times 2.2 \times 10^{-6}F}  \approx 1.54Hz" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20f_%7Bc%7D%3D%5Cfrac%7B1%7D%7B2%20%5Ctimes%20%5Cpi%20%20%5Ctimes%20R%20%20%5Ctimes%20C%7D%3D%5Cfrac%7B1%7D%7B2%20%5Ctimes%20%5Cpi%20%20%5Ctimes%2047%20%5Ctimes%2010%5E%7B3%7D%20%5COmega%20%5Ctimes%202.2%20%5Ctimes%2010%5E%7B-6%7DF%7D%20%20%5Capprox%201.54Hz"></p><p>C7/R9 and C9/R12 building active low-pass filters (LPF). The cutoff frequency is here<br></p><p><img alt="\color{White} \large f_{c}=\frac{1}{2 \times \pi  \times R  \times C}=\frac{1}{2 \times \pi  \times 10^{6} \Omega \times 68 \times 10^{-9}F}  \approx 2.34Hz" title="\color{White} \large f_{c}=\frac{1}{2 \times \pi  \times R  \times C}=\frac{1}{2 \times \pi  \times 10^{6} \Omega \times 68 \times 10^{-9}F}  \approx 2.34Hz" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20f_%7Bc%7D%3D%5Cfrac%7B1%7D%7B2%20%5Ctimes%20%5Cpi%20%20%5Ctimes%20R%20%20%5Ctimes%20C%7D%3D%5Cfrac%7B1%7D%7B2%20%5Ctimes%20%5Cpi%20%20%5Ctimes%2010%5E%7B6%7D%20%5COmega%20%5Ctimes%2068%20%5Ctimes%2010%5E%7B-9%7DF%7D%20%20%5Capprox%202.34Hz"><br></p><p>The combination of HPFs and LPFs helps to remove the unwanted DC signal and high frequency noise coming from the sensor and boost the weak puslatile AC component, which carries the required information.</p><p>The amplification of every of the two op-amp stages with negative feedback is set to 101:</p><p><img alt="\color{White} \large A_{CL}=1+ \frac{R_{f}}{R_{g}} =1+ \frac{1000k\Omega}{10k\Omega} =101" title="\color{White} \large A_{CL}=1+ \frac{R_{f}}{R_{g}} =1+ \frac{1000k\Omega}{10k\Omega} =101" src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20A_%7BCL%7D%3D1%2B%20%5Cfrac%7BR_%7Bf%7D%7D%7BR_%7Bg%7D%7D%20%3D1%2B%20%5Cfrac%7B1000k%5COmega%7D%7B10k%5COmega%7D%20%3D101"><br></p><p>The total amplification is simply the squared single amplification: 101²=10201.</p><p>Gain can be adjusted by the potentiometer R1, which is a voltage divider.</p>The analog signal on the output of the second opamp stage is passed to an analog pin of the Arduino for further signal processing and to a comparator with hysteresis (Schmitt trigger) that ignores high frequency noise in its threshold voltage. Noise below the threshold is ignored, and positive feedback latches the output state until the opposite threshold is exceeded.The output of the comparator is passed to an LED to indicate heart beats and to the Arduino digital pin 2, which provides for most boards a hardware interrupt.<p>Beside the heart rate evaluation a so called <a href="http://www.google.de/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=9&amp;cad=rja&amp;uact=8&amp;ved=0CFIQFjAI&amp;url=http%3A%2F%2Flogika.uwb.edu.pl%2Fstudies%2Fdownload.php%3Fvolid%3D48%26artid%3Dka&amp;ei=VcpUVIDdL9XgoATPpoKQAg&amp;usg=AFQjCNHr1xH9HzykgqABLxRuLFVi2yeCxw&amp;bvm=bv.78677474,d.cGU">Poincare plot</a> has been added on software side. A Poincare plot returns a map in which each result of measurement is plotted as a function of the previous one. More formally, let</p><p><img alt="\color{White} \large x_{0}, x_{1} ,x_{2}, x_{3}, x_{4},..." title="\color{White} \large x_{0}, x_{1} ,x_{2}, x_{3}, x_{4},..." src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20x_%7B0%7D%2C%20x_%7B1%7D%20%2Cx_%7B2%7D%2C%20x_%7B3%7D%2C%20x_%7B4%7D%2C...">denote the data, then the return map will be a plot of the points</p><p><img alt="\color{White} \large \big(x_{0},x_{1}\big),\big(x_{1},x_{2}\big),\big(x_{2},x_{3}\big),\big(x_{3},x_{4}\big),..." title="\color{White} \large \big(x_{0},x_{1}\big),\big(x_{1},x_{2}\big),\big(x_{2},x_{3}\big),\big(x_{3},x_{4}\big),..." src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20%5Cbig(x_%7B0%7D%2Cx_%7B1%7D%5Cbig)%2C%5Cbig(x_%7B1%7D%2Cx_%7B2%7D%5Cbig)%2C%5Cbig(x_%7B2%7D%2Cx_%7B3%7D%5Cbig)%2C%5Cbig(x_%7B3%7D%2Cx_%7B4%7D%5Cbig)%2C...">In our case the data are the elapsed times between two following heart beats. The shape of the Poincare plot can be used to visualize the heart rate variability (HRV). In this <a href="http://www.physionet.org/events/hrv-2006/yang.pdf">paper</a> Poincare plots of healthy and critical ill patients are shown. The image below shows a Poincare plot of my heart rate on my medical tricorder display:</p><p><img src="https://cdn.hackaday.io/images/2150711426134948969.jpg"></p>The Poincare plot after sampling is just a simple for-loop:<pre class="hljs cpp"><span class="hljs-keyword">for</span>(byte i = <span class="hljs-number">1</span>; i &lt; sample_size - <span class="hljs-number">1</span>; i ++) {
  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> delta_x = time[i + <span class="hljs-number">1</span>] - time[i];
  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> delta_y = time[i + <span class="hljs-number">2</span>] - time[i + <span class="hljs-number">1</span>]; <span class="hljs-comment">// compute measurement as a function of previous one</span>
  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> pixel_x = <span class="hljs-built_in">map</span>(delta_x, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">0</span>, <span class="hljs-number">63</span>); <span class="hljs-comment">// map elapsed time in ms into pixel x coordinate</span>
  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> pixel_y = <span class="hljs-built_in">map</span>(delta_y, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">63</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// map elapsed time in ms into pixel y coordinate</span>
  display.drawPixel(pixel_x, pixel_y, WHITE); <span class="hljs-comment">// print pixel</span>
  display.display();
}</pre><br><strong></strong><p><strong>6. Respiration rate sensor</strong></p><p>Basically the sensor consists of a disposable respirator- half-mask, a 3-D printed connection nipple, a piece of silicone hose and the pressure sensor <a href="http://cache.freescale.com/files/sensors/doc/data_sheet/MPXV4006.pdf">MPXV4006GP</a>. The advantage of this setup is that the respiration rate also can be measured during activities like running and the exhaled gases could be analyzed by a gas sensor at the same time. The renderings below illustrate the idea:</p><p><img src="https://cdn.hackaday.io/images/4803011427519353865.jpg"></p><p><img src="https://cdn.hackaday.io/images/8015201427519466626.jpg"></p>The connection nipple were printed on an industrial grade 3-D-printer:<p><img src="https://cdn.hackaday.io/images/3687371430711068086.JPG"></p><p>Connection nipple and silicone hose assembled on mask:</p><p><img src="https://cdn.hackaday.io/images/7963121430711963869.JPG"></p>The gauge pressure rises only approx. 10 mm <span class="st">H₂O</span> when breathing out, so the output voltage of the pressure sensor must be amplified. This is done by a <a href="http://en.wikipedia.org/wiki/Operational_amplifier#Non-inverting_amplifier">non-inverting amplifier</a>:<p><img src="https://cdn.hackaday.io/images/249581430718383819.JPG"></p>Vout is given by<p><img alt="\color{White} \large V_{out}= V_{in}  \times \big(1+\frac{R_{f}}{R_{g}}\big) " title="\color{White} \large V_{out}= V_{in}  \times \big(1+\frac{R_{f}}{R_{g}}\big) " src="/api/latex?tex=%5Ccolor%7BWhite%7D%20%5Clarge%20V_%7Bout%7D%3D%20V_%7Bin%7D%20%20%5Ctimes%20%5Cbig(1%2B%5Cfrac%7BR_%7Bf%7D%7D%7BR_%7Bg%7D%7D%5Cbig)%20">I chose a gain of 11, which works just fine.</p><p>Example code:</p><pre class="hljs cpp"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> resp_delta[<span class="hljs-number">2</span>];
<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> resp_counter = <span class="hljs-number">0</span>;
byte led = <span class="hljs-number">13</span>;
byte resp_sense = A0;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>{
  Serial.begin(<span class="hljs-number">9600</span>);
  pinMode(led, OUTPUT); 
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>{
  boolean resp_state = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">if</span>(analogRead(resp_sense) &gt; <span class="hljs-number">650</span>) { 
    resp_state = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span>(analogRead(resp_sense) &gt; <span class="hljs-number">630</span>) {
    digitalWrite(led, HIGH);
    delay(<span class="hljs-number">300</span>); 
    }
  }
  <span class="hljs-keyword">if</span>(resp_state == <span class="hljs-number">1</span>) {
    resp_counter ++;
    <span class="hljs-keyword">if</span>(resp_counter == <span class="hljs-number">1</span>) {
      resp_delta[<span class="hljs-number">0</span>] = millis();
    }
    <span class="hljs-keyword">if</span>(resp_counter == <span class="hljs-number">11</span>) {
      resp_delta[<span class="hljs-number">1</span>] = millis();
      <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> respiratory_rate = <span class="hljs-number">600000</span> / (resp_delta[<span class="hljs-number">1</span>] - resp_delta[<span class="hljs-number">0</span>]);
      Serial.print(<span class="hljs-string">"Respiratory rate: "</span>);
      Serial.print(respiratory_rate);
      Serial.println(<span class="hljs-string">" bpm"</span>);
      resp_counter = <span class="hljs-number">0</span>;
    }
    resp_state = <span class="hljs-number">0</span>;
  }
  digitalWrite(led, LOW);
}</pre><p><br><strong></strong></p><p><strong>7. User interface, SD card &amp; RTC</strong></p><p>The user interface consists of a 5 push button key pad with according pull-down resistors and a 5V-ready 0.96" 128 x 64 OLED (SPI, 7 pin) from <a href="http://www.amazon.com/128X64-Display-Module-Arduino-Serial/dp/B00M9YZIUW">Amazon</a> etc.:</p><p><img src="https://cdn.hackaday.io/images/6621061430659964174.JPG"></p><p><img src="https://cdn.hackaday.io/images/8411681430660991037.JPG"></p>The micro SD card requires a voltage level shifter on SCK/MOSI and CS pin which is carried out with a <a href="http://www.nxp.com/documents/data_sheet/HEF4050B.pdf">HEF4050</a>: <p><img src="https://cdn.hackaday.io/images/4707741430707195856.JPG"></p>The Real Time Clock (RTC) is based on a <a href="http://datasheets.maximintegrated.com/en/ds/DS1307.pdf">DS1307</a> with backup battery, which should keep time for 5 years or more. Also here are no additional pull-up resistors for the<span class="story"> I²C bus</span> necessary.<p><img src="https://cdn.hackaday.io/images/2637011430708515786.JPG"></p>I also added a piezo buzzer to be able to emit acoustical warning signals, e.g. for a pill reminder feature.<p><img src="https://cdn.hackaday.io/images/836721430661360283.JPG"></p><p><br><strong></strong></p><p><strong>8. Shield design</strong></p><p><strong><strong></strong></strong>An according shield for the Arduino Mega was designed and the Gerber files sent to my PCB fab house.</p><p><img src="https://cdn.hackaday.io/images/3507891430656183686.jpg"></p>A couple of days later I got a bunch of PCB's. Time to heat up my soldering iron.<br><strong></strong><p><img src="https://cdn.hackaday.io/images/6920681430710105995.JPG"></p>Populated PCB without OLED:<p><img src="https://cdn.hackaday.io/images/7456431430648443435.JPG"></p>PCB with OLED:<p><img src="https://cdn.hackaday.io/images/2644141430648481401.JPG"></p><p><strong>9. Future work</strong></p><p>A lab-on-a-shield will be designed and build. Below renderings illustrate the idea. Two reagents can be injected into a micro reaction chamber and the reaction observed with a photometer/color sensor and PH meter, e.g. analysis for Leukocytes, Glucose, Bacteria...</p><p><img src="https://cdn.hackaday.io/images/3038561430812696329.jpg"></p><p><img src="https://cdn.hackaday.io/images/4340061430812802289.jpg"></p><span class="story"><span class="story"><span class="story"></span></span></span>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'Elr6NK3M-rWBOV5dhWfRCpUuJq4T_YdOJZQg';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>