<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; ARDUINO MPPT SOLAR CHARGE CONTROLLER &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4613%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4613-arduino-mppt-solar-charge-controller">ARDUINO MPPT SOLAR CHARGE CONTROLLER</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">An Arduino based Solar MPPT charge controller.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/55735-debasish-dutta" title="Visit Profile">Debasish Dutta</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4613#discussion-list" title="See Comments">73 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4613-arduino-mppt-solar-charge-controller">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4613/logs/sort/newest">Newest</option>
                    <option value="/project/4613/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4613/log/15067-schematic-and-working">​SCHEMATIC AND WORKING</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4613/log/15067#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15067"><p><a id="photoset-link-F1NNVS2I71QEUPZ-0" class="photoset-link" rel="photoset-gallery-S92MC2RI5MD0RQK" href="http://cdn.instructables.com/FL2/2QOI/I6EXG10K/FL22QOII6EXG10K.LARGE.jpg"></a><a id="photoset-link-F1NNVS2I71QEUPZ-0" class="photoset-link" rel="photoset-gallery-S92MC2RI5MD0RQK" href="http://cdn.instructables.com/FL2/2QOI/I6EXG10K/FL22QOII6EXG10K.LARGE.jpg"><img alt="Picture of SCHEMATIC AND WORKING" src="http://cdn.instructables.com/FL2/2QOI/I6EXG10K/FL22QOII6EXG10K.MEDIUM.jpg"></a></p><p>You can also see the updated schematic <a href="http://www.instructables.com/files/orig/FKG/HU5O/IAY1ES13/FKGHU5OIAY1ES13.pdf" target="_blank">here</a>.</p><p>The input power connector to the solar panels is the screw terminal JP1 and JP2 is the output screw terminal connector to the battery.The third connector JP3 is connection for the load.</p><p>F1 and F2 are the 5A safety fuses.</p><p>The buck converter is made up of the synchronous MOSFET switches Q2 and Q3 and the energy storage devices inductor L1 and capacitors C1 and C2 The inductor smooths the switching current and along with C2 it smooths the output voltage.Capacitor C8 and R6 are a snubber network,used to cut down on the ringing of the inductor voltage generated by the switching current in the inductor.</p><p>The third MOSFET Q1 is added to allow the system to block the battery power from flowing back into the solar panels at night.In my earlier charge controller,this is done by a diode in the power path. As all diodes have a voltage drop a MOSFET is much more efficient.Q1 turns on when Q2 is on from voltage through D1. R1 drains the voltage off the gate of Q1 so it turns off when Q2 turns off.</p><p>The diode D3 (UF4007) is an ultra fast diode that will start conducting current before Q3 turns on. It is supposed to make the converter more efficient.</p><p>The IC IR2104 is a half bridge MOSFET gate driver. It drives the high and the low side MOSFETs using the PWM signal from the arduino (Pin -D9) .The IR2104 can also be shut down with the control signal (low on pin -D8) from the Arduino on pin 3. D2 and C7 are part of the bootstrap circuit that generates the high side gate drive voltage for Q1 and Q2. The software keeps track of the PWM duty cycle and never allows 100% or always on. It caps the PWM duty cycle at 99.9% to keep the charge pump working.</p><p>There are two voltage divider circuits( R1,R2 and R3,R4) to measure the solar panel and battery voltages.The out put from the dividers are feeds the voltage signal to Analog pin-0 and Analog pin-2 .The ceramic capacitors C3 and C4 are used to remove high frequency spikes.</p><p>The mosfet Q4 is used to control the load.The driver for this mosfet is consists of a transistor and resistors R9 ,R10.</p><p>The diode D4 and D5 are TVS diodes used for over voltage protection from solar panel and load side.</p><p>The current sensor ACS712 sense the current from the solar panel and feeds to the Arduino analog pin-1.</p><p>The 3 LEDs are connected to the digital pins of the microcontroller and serve as an output interface to display the charging state.</p><p>Reset switch is helpful if the code gets stuck.</p><p>The back light switch is to control the back light of LCD dislay.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/19173-troubleshooting-of-ver-3">Troubleshooting of Ver-3 </a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4613/log/19173#discussion-list">
                                    6 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19173"><p><strong>Problem  :</strong></p><p>1. During my prototyping, I have faced a critical issue.The issue was that when I connect the battery to the controller,the connection between the battery and the switching ( buck converter ) become very hot and then MOSFET Q3 burn out. It was due to shorting of MOSFET-Q3. So Current flows from Battery -MOSFET Q3- GND which is unexpected.</p><p>To solve this problem I have put it on comments section.After taking suggestions from all, <a href="https://hackaday.io/farmerkeith" target="_blank">keith.hungerford</a> suggestions really works for me. So I have modified few things and tested it .</p><p><strong><br></strong></p><p><strong>Rectifications / Changes :</strong></p><p><strong><br></strong></p><p>As per Keith suggestions<br></p><p><strong>Modification in MOSFET Driver  Circuit :</strong><br></p><p>1. With the existing circuit, if the panel voltage is zero then the IR2104 has no VCC input. This may make its behaviour unpredictable. As per data sheet, the driver  VCC should be in between 10 and 20 Volts for "proper operation".</p><p>2. It means the driver will always be working, and so there is a positive control over the switching MOSFETs at all times.</p><p>3. The voltage from the solar panels has been specified as up to 25 volts, which is a bit more than needed to connect a standard 36 cell solar panel. The voltage doubler circuit that generates the Vb voltage for the driver will turn that into 50 volts, which in turn will put 25 volts onto the Source-Gate interface of both Q1 and Q2. The maximum rating of this interface is 20 volts, so either of these FETs may become unreliable with a high solar panel voltage of more than 20 volts. </p><p>4. Using the battery for Vcc of the driver means that Q1 and Q2 both only have Source-Gate voltages equal to the battery, which is comfortably within the 10 - 20 Volt range of these MOSFETs.<br></p><p><strong>Changes :</strong></p><p>Powering  the MOSFET driver IR2104 from battery  terminal ( 12V ) instead of solar panel ( earlier ). </p><p><strong><br></strong></p><p><strong> Removing the MOSFET Q1 from the circuit for improving the efficiency </strong><br></p><p>The MOSFET Q1 in the circuit is used for blocking the reverse power flow from battery to solar panel during night. It is noticed that in all the cases when Q1 is OFF, then Q2 is OFF as well. So Q1 is not actually doing anything  useful. So we decide to remove it.Removing it would slightly improve the efficiency of the converter, and simplify the construction also.</p><p><strong>Changes :  </strong>Removing Q1 , D1 and R5 from the original circuit.</p><p>After few more test it is observed that without MOSFET Q1 current flow from battery to solar panel during night, due to conduction of body diode in mosfet (MOSFET is OFF ) .I am really sorry for modifying things repeatedly,but its a learning process for our version-4 design.I apologize for my mistakes.</p><p><strong>Changes on 16/06/15  :</strong> Put back Q1 , D1 and R5 as in the original circuit.</p><p>The updated schematic is attached below.If anyone making this controller, make this changes and test it. If you have any suggestions, comments it.</p><p><a href="http://www.instructables.com/files/orig/FKG/HU5O/IAY1ES13/FKGHU5OIAY1ES13.pdf" target="_blank">MPPT Controller v-3  Schematic updated</a><br></p><p><strong>2. Problem on LCD back light control :</strong></p><p>In the software ,I implemented LCD back light control.When the user press a button,LCD back light should on for 15secs and then goes off. To do so I am monitoring the button status ,if it is pressed then lcd.backlight() is called and delay(15000) pauses for 15sec in other condition lcd.noBacklight() is called to implement no back light.</p><p>Though it works perfectly,but problem is that when the back light switch is pressed the program( charging algorithm ) pause for 15 seconds. During this time delay, the charging will continue without the program knowing that the voltage is rising because of waiting to complete the 15 seconds delay.</p><p><strong>Problem rectified : </strong></p><p>I modify my existing code with <a href="https://hackaday.io/aplavins" target="_blank">aplavins</a> suggested code. It works for me.</p><p>Thank You aplavins for solving the problem.</p><p>Download the <a href="http://www.instructables.com/files/orig/FDM/2AGT/IAWD1DES/FDM2AGTIAWD1DES.rar" target="_blank">updated code</a>.</p><p><strong><br></strong></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/19267-version-4-design-ideas-and-planning">Version-4 Design Ideas and Planning</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4613/log/19267#discussion-list">
                                    71 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19267"><p>After my version-3 Charge Controller became popular on web,I received mails and comments with request for making a higher rating  Controller.  So we are designing our Version-4 Charge Controller which is more advanced, greater capacity and useful more potential applications.When the project complete, it should be useful for off grid electricity users, control of autonomous street lights and signs, and many other applications that need medium power levels and efficient reliable operation</p><p>I would like to give special thanks to <a href="https://hackaday.io/farmerkeith" target="_blank">Keth Hungerford</a> , <a href="https://hackaday.io/papi92" target="_blank">Petar</a>, <a href="https://hackaday.io/aplavins" target="_blank">aplavins</a>  and <a href="https://hackaday.io/chinmay" target="_blank">Chinmay</a>  who are the new members to my project and actively contributing to it. Keith is playing the key role for designing this new version Charge controller.</p><p>For the time being we are planning to see the following changes in existing version charge controller.</p><p><strong>Changes at the moment are:</strong><br></p><ol> <li>Increase panel voltage rating to allow for panels with 60 cells (i.e up to 40 V, so-called &quot;grid connect&quot; panels); </li> <li>Higher current rating, at least 20 amps and preferably 40 amps; </li> <li>Metering current on the battery and load; </li> <li>Improve design robustness to ensure external conditions do not cause any failures; </li> <li>Design that allows multiple controllers to feed into a power distribution switchboard; </li> <li>Optimal battery management for several different battery types, such as Lead Acid (several variants), NiFe, LiFePO; </li> <li>Ability to control more than one load output &#x2013; either to allow for greater capacity, or timing control of when the output is on or off. </li> <li>Real time clock with date to enable time stamping of statistics and timer control of loads.</li> <li>Operational configuration capability (buttons or via WiFi?);</li> <li>Greater data collection to get illumination statistics, battery performance statistics, load statistics. </li> <li>Higher battery voltage (to 24 or 48 V) and associated higher solar panel voltages;</li> <li>Much higher panel voltage (to 150 V or so)</li> <li>Multiple Load outputs regulated to close to 12 V</li> <li>Panel safety and overload disconnect </li> </ol><p>In addition there are some &quot;internal&quot; matters that are worthy of investigation:</p><ol> <li>Focus on maximising efficiency</li> <li>Fail-safe software or self-recovery features</li> <li>MPPT algorithm refinements</li> <li>will it all fit in Arduino Nano? or selecting another Arduino Board ?<strong></strong></li></ol><p>You can find all the ongoing activities <a href="http://www.instructables.com/files/orig/F9J/Y354/ID7UY6O9/F9JY354ID7UY6O9.zip" target="_blank">here</a></p><p>I request to all of my followers,team members and viewers to give suggestions  on it.</p><p>You can write your suggestions/feedback in the comment section below.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/22500-schematic-modification">Schematic Modification</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/4613/log/22500#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22500"><p><img src="https://cdn.hackaday.io/images/3557501439305522681.jpg"></p><p>For easier prototyping I decided to make a PCB for V-3 Charge Controller.To make the PCB more versatile, the schematic has been modified on 21 th June 2015.The schematic has been drawn in Altium PCB designing software by <a class="team-link" href="https://hackaday.io/hacker/70774-petar">Petar</a>. These are the following modification in the updated schematic.</p><p><strong>1. Improvident of voltage sensors : </strong></p><p><strong></strong>The voltage sensors out put is directly hooked up to the Arduino Analog pins A0 and A2. Any unwanted surge may damage the analog pins.So to protect from these surges 5.1V zener diodes ( D6 and D8 ) are included. </p><p><strong>2.Adding space for ACS712 chip on PCB :</strong><br></p><p><strong></strong>Though ACS712 module is used now, we left space for  ACS712 smd chip along with its circuitry  on the board.The smd ACS712 chip is cheaper in compare to the ACS712 module.So it will be helpful in future.</p><p><strong>3. Adding one more  parallel  MOSFET in the position of Q1,Q2,Q3 and Q4 :</strong></p><p>To handle more power in future, there may be need some extra MOSFET to fulfil the current requirement.So additional MOSFETs  are placed in parallel to the Q1,Q2,Q3 and Q4.The new MOSFETS are Q12*,Q22*,Q33* and Q44*.</p><p>4. Adding a additional diode parallel to D3 in the buck converter circuit.The new diode is D32*.<br></p><p><strong>5. Space for Atmega328P :</strong> Added space for Atmega328P along with Arduino Nano board.So user can use according to his choice.The on board Atmega328P option will reduce the power consumption as well as cost.</p><p><strong>6. Programming Port for Atmega 328P :</strong>To program the Atmega328P directly,  ICSP port ( P9 ) is provided.</p><p>7.USB port is placed on board.Two additional resistors ( R12 and R13)  are used for enhancement in the USB circuit.</p><p><strong>8. Adding one more current sensor ( ACS712 ) : </strong>To monitor the battery charging current.</p><p><strong>PORT description :</strong></p><p>P1 : Buck Converter Module</p><p>P2: Reset Key</p><p>P4 : LEDs </p><p>P5 : ESP8266</p><p>P6 : AMS1117 module</p><p>P7 : LCD back light Control Key</p><p>P8: I2C LCD connection</p><p>P9: ICSP programmer</p><p>P10: ACS712 out put  to monitor solar panel current</p><p>P11: ACS712 out put  to monitor the Charging Current.</p><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/22501-pcb-arrived">PCB Arrived</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/4613/log/22501#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22501"><p><img src="https://cdn.hackaday.io/images/9120291439306030580.jpg"></p><p><img src="https://cdn.hackaday.io/images/9936671439306073595.jpg"></p><p>On 4th August 2015, I received the PCB from fab house.It is manufactured locally at <a href="http://www.pcbpower.com/" target="_blank">PCB Power</a>.The board are looking really nice.The size of the board is 12.5mm x 10mm.</p><p><img src="https://cdn.hackaday.io/images/1827011439306703713.jpg"></p><p>This is 3D out look of the board after soldering the components.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/22506-improvement-in-lcd-display-function"> Improvement in LCD Display Function</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/4613/log/22506#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22506"><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/nDfRm2a05-U" frameborder="0" allowfullscreen=""></iframe><p>The LCD display functionality is improved.The above video shows the  simulation to  test the modified software.</p><p>These are the improvements <br></p><p>1. Dynamic battery status in battery icon.Earlier it was always  showing about half full .Now it changes according to the battery SOC, just like in cell phone.<br></p><p>2. Removing the long if else statement for displaying the battery SOC. Now used a math function to do the job.</p><p>3. Adding a spinner icon to show the charger is running.It stops when program stuck up.</p><p><strong>Code before Modification :</strong></p><pre class="hljs php">void lcd_display()
{
  back_light_pin_State = digitalRead(BACK_LIGHT_PIN);
  <span class="hljs-keyword">if</span> (back_light_pin_State == HIGH)
  {
    time = millis();                        <span class="hljs-comment">// If any of the buttons are pressed, save the time in millis to &quot;time&quot;</span>
  }
 
 lcd.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;SOL&quot;</span>);
 lcd.setCursor(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>);
 lcd.write(<span class="hljs-number">1</span>);
 lcd.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);
 lcd.<span class="hljs-keyword">print</span>(sol_volts);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;V&quot;</span>); 
 lcd.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);
 lcd.<span class="hljs-keyword">print</span>(sol_amps);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;A&quot;</span>);  
 lcd.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);
 lcd.<span class="hljs-keyword">print</span>(sol_watts);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;W &quot;</span>); 
 lcd.setCursor(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;BAT&quot;</span>);
 lcd.setCursor(<span class="hljs-number">12</span>, <span class="hljs-number">0</span>);
 lcd.write(<span class="hljs-number">2</span>);
 lcd.setCursor(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>);
 lcd.<span class="hljs-keyword">print</span>(bat_volts);
 lcd.setCursor(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);
 
 <span class="hljs-keyword">if</span> (charger_state == on) 
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;on&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (charger_state == off)
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;off&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (charger_state == bulk)
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;bulk&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (charger_state == bat_float)
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;float&quot;</span>);

 
 <span class="hljs-comment">//-----------------------------------------------------------</span>
 <span class="hljs-comment">//--------------------Battery State Of Charge ---------------</span>
 <span class="hljs-comment">//-----------------------------------------------------------</span>
 lcd.setCursor(<span class="hljs-number">8</span>,<span class="hljs-number">3</span>);
 <span class="hljs-keyword">if</span> ( bat_volts &gt;= <span class="hljs-number">12.7</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;100%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">12.5</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">12.7</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;90%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">12.42</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">12.5</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;80%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">12.32</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">12.42</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;70%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">12.2</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">12.32</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;60%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">12.06</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">12.2</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;50%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">11.90</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">12.06</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;40%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">11.75</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">11.90</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;30%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">11.58</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">11.75</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;20%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &gt;= <span class="hljs-number">11.31</span> &amp;&amp; bat_volts &lt; <span class="hljs-number">11.58</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;10%&quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bat_volts &lt; <span class="hljs-number">11.3</span>)
 lcd.<span class="hljs-keyword">print</span>( <span class="hljs-string">&quot;0%&quot;</span>);
 
<span class="hljs-comment">//--------------------------------------------------------------------- </span>
<span class="hljs-comment">//------------------Duty Cycle-----------------------------------------</span>
<span class="hljs-comment">//---------------------------------------------------------------------</span>
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">0</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;PWM&quot;</span>);
 lcd.setCursor(<span class="hljs-number">19</span>,<span class="hljs-number">0</span>);
 lcd.write(<span class="hljs-number">3</span>);
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">1</span>);
 lcd.<span class="hljs-keyword">print</span>(pwm); 
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;%&quot;</span>);
 <span class="hljs-comment">//----------------------------------------------------------------------</span>
 <span class="hljs-comment">//------------------------Load Status-----------------------------------</span>
 <span class="hljs-comment">//----------------------------------------------------------------------</span>
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">2</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Load&quot;</span>);
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">3</span>);
 <span class="hljs-keyword">if</span> (load_status == <span class="hljs-number">1</span>)
 {
    lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;On&quot;</span>);
 }
 <span class="hljs-keyword">else</span>
 {
   lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Off&quot;</span>);
 }
 backLight_timer();                      <span class="hljs-comment">// call the backlight timer function in every loop </span>
}

void backLight_timer(){
  <span class="hljs-keyword">if</span>((millis() - time) &lt;= <span class="hljs-number">15000</span>) <span class="hljs-comment">// if it&apos;s been less than the 15 secs, turn the backlight on</span>
      lcd.backlight();           <span class="hljs-comment">// finish with backlight on  </span>
  <span class="hljs-keyword">else</span> 
      lcd.noBacklight();         <span class="hljs-comment">// if it&apos;s been more than 15 secs, turn the backlight off</span>
}</pre><strong><br></strong><p><strong>Code After Modification :</strong></p><pre class="hljs php">void lcd_display()
{
  <span class="hljs-keyword">static</span> bool current_backlight_state = -<span class="hljs-number">1</span>;
  back_light_pin_State = digitalRead(BACK_LIGHT_PIN);
  <span class="hljs-keyword">if</span> (current_backlight_state != back_light_pin_State) {
    current_backlight_state = back_light_pin_State;
    <span class="hljs-keyword">if</span> (back_light_pin_State == HIGH)
      lcd.backlight();<span class="hljs-comment">// finish with backlight on</span>
    <span class="hljs-keyword">else</span>
      lcd.noBacklight();
  }

  <span class="hljs-keyword">if</span> (back_light_pin_State == HIGH)
  {
    time = millis();                        <span class="hljs-comment">// If any of the buttons are pressed, save the time in millis to &quot;time&quot;</span>
  }
 
 lcd.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);
 lcd.<span class="hljs-keyword">print</span>(sol_volts);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;V &quot;</span>);
 lcd.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);
 lcd.<span class="hljs-keyword">print</span>(sol_amps);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;A&quot;</span>);  
 lcd.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);
 lcd.<span class="hljs-keyword">print</span>(sol_watts);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;W &quot;</span>); 
 lcd.setCursor(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>);
 lcd.<span class="hljs-keyword">print</span>(bat_volts);
 lcd.setCursor(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);

 <span class="hljs-keyword">if</span> (charger_state == on) 
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;on   &quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (charger_state == off)
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;off  &quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (charger_state == bulk)
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;bulk &quot;</span>);
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (charger_state == bat_float)
 {
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;     &quot;</span>);
 lcd.setCursor(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;float&quot;</span>);
 }
 
 <span class="hljs-comment">//-----------------------------------------------------------</span>
 <span class="hljs-comment">//--------------------Battery State Of Charge ---------------</span>
 <span class="hljs-comment">//-----------------------------------------------------------</span>
 int pct = <span class="hljs-number">100.0</span>*(bat_volts - <span class="hljs-number">11.3</span>)/(<span class="hljs-number">12.7</span> - <span class="hljs-number">11.3</span>);
 <span class="hljs-keyword">if</span> (pct &lt; <span class="hljs-number">0</span>)
     pct = <span class="hljs-number">0</span>;
 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pct &gt; <span class="hljs-number">100</span>)
     pct = <span class="hljs-number">100</span>;

 lcd.setCursor(<span class="hljs-number">12</span>,<span class="hljs-number">0</span>);
 lcd.<span class="hljs-keyword">print</span>((char)(pct*<span class="hljs-number">5</span>/<span class="hljs-number">100</span>));

 lcd.setCursor(<span class="hljs-number">8</span>,<span class="hljs-number">3</span>);
 pct = pct - (pct%<span class="hljs-number">10</span>);
 lcd.<span class="hljs-keyword">print</span>(pct);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;%  &quot;</span>);
 
<span class="hljs-comment">//--------------------------------------------------------------------- </span>
<span class="hljs-comment">//------------------Duty Cycle-----------------------------------------</span>
<span class="hljs-comment">//---------------------------------------------------------------------</span>
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">0</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;PWM&quot;</span>);
 lcd.setCursor(<span class="hljs-number">19</span>,<span class="hljs-number">0</span>);
 lcd.write(PWM_ICON);
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">1</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;   &quot;</span>);
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">1</span>);
 <span class="hljs-keyword">if</span>( charger_state == off)
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-number">0</span>);
 <span class="hljs-keyword">else</span>
 lcd.<span class="hljs-keyword">print</span>(pwm); 
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;% &quot;</span>);
 <span class="hljs-comment">//----------------------------------------------------------------------</span>
 <span class="hljs-comment">//------------------------Load Status-----------------------------------</span>
 <span class="hljs-comment">//----------------------------------------------------------------------</span>
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">2</span>);
 lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Load&quot;</span>);
 lcd.setCursor(<span class="hljs-number">15</span>,<span class="hljs-number">3</span>);
 <span class="hljs-keyword">if</span> (load_status)
 {
    lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;On  &quot;</span>);
 }
 <span class="hljs-keyword">else</span>
 {
   lcd.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Off &quot;</span>);
 } 
 spinner();
 backLight_timer();                      <span class="hljs-comment">// call the backlight timer function in every loop </span>
}

void backLight_timer(){
  <span class="hljs-keyword">if</span>((millis() - time) &lt;= <span class="hljs-number">15000</span>)         <span class="hljs-comment">// if it&apos;s been less than the 15 secs, turn the backlight on</span>
      lcd.backlight();                   <span class="hljs-comment">// finish with backlight on  </span>
  <span class="hljs-keyword">else</span> 
      lcd.noBacklight();                 <span class="hljs-comment">// if it&apos;s been more than 15 secs, turn the backlight off</span>
}
void spinner(void) {
  <span class="hljs-keyword">static</span> int cspinner;
  <span class="hljs-keyword">static</span> char spinner_chars[] = { <span class="hljs-string">&apos;*&apos;</span>,<span class="hljs-string">&apos;*&apos;</span>, <span class="hljs-string">&apos;*&apos;</span>, <span class="hljs-string">&apos; &apos;</span>, <span class="hljs-string">&apos; &apos;</span>};
  cspinner++;
  lcd.<span class="hljs-keyword">print</span>(spinner_chars[cspinner%sizeof(spinner_chars)]);
}
</pre><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/22578-soldering-the-components-on-pcb"> Soldering the Components on PCB</a></h2>
                            <small class="authorship">6 days ago  &bull;
                                <a class="gray-link" href="/project/4613/log/22578#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22578"><p><img src="https://cdn.hackaday.io/images/5009511439348816171.jpg"></p><p><img src="https://cdn.hackaday.io/images/7655431439348862119.jpg"></p><p>Today I soldered most of the components on the new PCB.But few components are not available in my stock.So I can&apos;t solder them.I will solder the remaining components after buying it from my local shop.</p><p>The following components are missing</p><p>1.Fuse Holder</p><p>2.TVS Diodes</p><p>3.5.1V Zener Diode</p><p>4.USB Port </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/22579-finished-the-soldering">Finished the Soldering</a></h2>
                            <small class="authorship">6 days ago  &bull;
                                <a class="gray-link" href="/project/4613/log/22579#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22579"><p><img src="https://cdn.hackaday.io/images/9171291439349622666.jpg"></p><p><img src="https://cdn.hackaday.io/images/9047511439349658246.jpg"></p><p><img src="https://cdn.hackaday.io/images/2073141439349721770.jpg"></p><p>Purchased all the missing components and started to solder it on PCB.After few hours of work, everything is soldered.I have tested auxiliary power circuitry,everything works fine.The next task is to test the charging circuit.I will update it soon.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/22676-keith-presentation">Keith Presentation </a></h2>
                            <small class="authorship">5 days ago  &bull;
                                <a class="gray-link" href="/project/4613/log/22676#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22676"><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/phVTCxbeUoY" frameborder="0" allowfullscreen=""></iframe><p><a class="team-link" href="https://hackaday.io/hacker/70480-keithhungerford">keith.hungerford</a> ( team member ) from Australia, who is one of the major contributor to this project.He has experimented a lot on this project.After my request he made this nice video explaining the efficiency,losses at various load,how DCM will take care at low load condition, about the MPPT v4 controller and writing of a new Arduino TimerOne library to handle our requirement.<br></p><p>These are the loss analysis curves at different load condition.</p><p><strong>At 100 Watt : </strong></p><p><img src="https://cdn.hackaday.io/images/1123881439468169438.jpg"></p><p><strong>At  80 Watt :</strong></p><p><img src="https://cdn.hackaday.io/images/8745091439468527051.jpg"><span class="redactor-invisible-space"><strong>At 1 watt : </strong><br></span></p><p><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/8597341439468565631.jpg"></span><br></p><p>In the 100% ( 100W ) graph, the optimum PWM period is 14 microseconds, at which period the decrease in the core loss is balanced by the increase in the switching and capacitive drive loss. When Keith checked, he found that the capacitive drive losses are so nearly equal to the switching losses that the curves fully overlap and you cannot see the capacitive loss curve. It is more clear at 80%  ( 80W ) load  where both curves are visible. </p><p>As the load decreases, the resistive losses decrease and the relative influence of these period-dependent losses increases, but the pattern remains the same. In the MOSFETS,  the importance of the switching losses decreases with decreasing load, since there is less current flowing and therefore a reduced amount of charge to be absorbed, even though the voltage excursion is unchanged. The capacitive losses come to dominate. Because the switching losses are less, the optimum PWM period decreases with decreasing load. At 10% load it is down to 11 microseconds. </p><p>However the difference between the total loss at 11 microseconds and 14 microseconds is only 5% of the loss, so a single PWM period of around 14 microseconds is quite efficient SO LONG AS THE CONTROLLER IS IN CCM. </p><p>Somewhere below the 10 % load point, but above the 5% load point, the controller goes into DCM. That is, there is not enough current flowing out of the panel to make the current in the inductor always flow in the same direction. <br></p><p>His design assumption in this spreadsheet is that the controller algorithms explicitly support DCM. That is, they switch off Q3 at the time that the current would start flowing &quot;backwards&quot;. So now, in DCM, the controller has 3 phases within the PWM period. There is the phase when current flows from the panel via Q2 through the inductor, and increases. there is the phase when current flows from Earth via Q3 through the inductor, and decrease. Then there is the Null phase when no current flows through the inductor. </p><p>This Null phase is a good one as far as losses in the inductor and MOSFETs are concerned - there is no current and so no loss. However C1 is receiving all of the current from the panels, and C2 is delivering all of the current to the battery or load. This creates extra voltage ripple at the panels, and at the battery/load. </p><p>So long as the voltage ripple at the panels and battery/load is within reasonable limits, in DCM it is better to have a much longer PWM period. Hence the appearance of very long PWM periods at very low load levels. The length of the PWM period is mainly limited by the voltage ripple tolerable at the battery, and the reduction in efficiency of the panel caused by the ripple there. <br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4613/log/22919-quarter-final-video">Quarter Final Video</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/4613/log/22919#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22919"><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/3DRHFD98NdE" frameborder="0" allowfullscreen=""></iframe></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'l3LS6XfK-0mP7r5hNaU39gp29KjfE7asLysc';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>