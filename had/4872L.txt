<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; SubPos - Positioning System &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4872%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4872-subpos-positioning-system">SubPos - Positioning System</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A &#34;dataless&#34; Wi-Fi positioning system that can be used anywhere GPS can&#39;t.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/16981-blecky" title="Visit Profile">Blecky</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/4872#discussion-list" title="See Comments">64 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4872-subpos-positioning-system">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4872/logs/sort/newest">Newest</option>
                    <option value="/project/4872/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4872/log/15574-existing-technologies">Existing Technologies</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15574#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15574"><p>Before we can start developing, we first have to have a quick look at some of the existing technologies on the market today (this is by no means an exhaustive listing).</p><h2>Accelerometer/Sensor Information and Profiled Path </h2><ul><li>Good for metro only.</li><li>Low accuracy.</li><li>May require data connectivity.</li></ul> <p><em>Example:</em></p><p><a href="http://grouplens.org/site-content/uploads/bhecht_sigspatial2014_subwayps.pdf" target="_blank"><em></em></a><em><a href="http://grouplens.org/site-content/uploads/bhecht_sigspatial2014_subwayps.pdf" target="_blank">http://grouplens.org/site-content/uploads/bhecht_sigspatial2014_subwayps.pdf</a></em></p><h2> GPS Relay </h2><ul><li>Can be very expensive to set up.</li><li>Very accurate (depending on setup). </li></ul> <p><em>Example:</em></p><p><a href="http://www.karstworlds.com/2011/01/underground-gps-finally-possible.html" target="_blank"><em></em></a><em><a href="http://www.karstworlds.com/2011/01/underground-gps-finally-possible.html" target="_blank">http://www.karstworlds.com/2011/01/underground-gps-finally-possible.html</a></em></p><strong> <h2>Proprietary</h2>  </strong><ul><li>Can be expensive. </li><li>Accuracy depends on implementation. </li></ul> <p><em>Example:</em></p><p><a href="http://www.businesswire.com/news/home/20130819006343/en/Minetec-Partners-CSIRO-Deliver-Revolutionary-Underground-Positioning#.VQ7Sly5WJ-8" target="_blank"><em></em></a><em><a href="http://www.businesswire.com/news/home/20130819006343/en/Minetec-Partners-CSIRO-Deliver-Revolutionary-Underground-Positioning#.VQ7Sly5WJ-8" target="_blank">http://www.businesswire.com/news/home/20130819006343/en/Minetec-Partners-CSIRO-Deliver-Revolutionary-Underground-Positioning#.VQ7Sly5WJ-8</a></em></p><p><a href="http://www.darpa.mil/Our_Work/STO/Programs/Adaptable_Navigation_Systems_%28ANS%29.aspx" target="_blank">http://www.darpa.mil/Our_Work/STO/Programs/Adaptable_Navigation_Systems_%28ANS%29.aspx</a><br><em><a href="http://www.businesswire.com/news/home/20130819006343/en/Minetec-Partners-CSIRO-Deliver-Revolutionary-Underground-Positioning#.VQ7Sly5WJ-8" target="_blank"></a></em></p><h2> Wi-Fi Positioning System </h2><ul><li>Requires profiling of area (profiling can be inaccurate depending on factors such as time of day, changes over time). </li><li>Requires data connectivity and database server. </li><li>Medium accuracy. </li><li>Widely used.</li><li>Doesn't work where you cannot profile the access points against known positioning (GPS).</li></ul> <p><em>Example:</em></p><p><em><a href="https://support.google.com/gmm/answer/1646140?hl=en" target="_blank">https://support.google.com/gmm/answer/1646140?hl=en</a><br></em><a href="http://lens1.csie.ncku.edu.tw/Library/Paper/IEEE%20MDM%202009/data/3650a371.pdf" target="_blank"><em></em></a><em><a href="http://lens1.csie.ncku.edu.tw/Library/Paper/IEEE%20MDM%202009/data/3650a371.pdf" target="_blank">http://lens1.csie.ncku.edu.tw/Library/Paper/IEEE%20MDM%202009/data/3650a371.pdf</a></em></p><p><a href="  &lt;a href=" target="_blank"></a><a href="http://www.smh.com.au/digital-life/smartphone-apps/indoor-gps-every-step-you-take-every-move-you-make-googles-got-maps-for-you-20121115-29e1b.html" target="_blank">http://www.smh.com.au/digital-life/smartphone-apps/indoor-gps-every-step-you-take-every-move-you-make-googles-got-maps-for-you-20121115-29e1b.html</a></p><p><a href="http://redpin.org/" target="_blank">http://redpin.org/</a><br><em><a href="http://lens1.csie.ncku.edu.tw/Library/Paper/IEEE%20MDM%202009/data/3650a371.pdf" target="_blank"></a></em></p><h2>More Technologies</h2><p><em><a href="http://www.directionsmag.com/entry/10-things-you-need-to-know-about-indoor-positioning/324602" target="_blank">http://www.directionsmag.com/entry/10-things-you-need-to-know-about-indoor-positioning/324602</a></em></p><p>iBeacon - <a href="http://en.wikipedia.org/wiki/IBeacon" target="_blank">http://en.wikipedia.org/wiki/IBeacon</a>, uses bluetooth. Lower range, can be <a href="https://www.youtube.com/watch?v=dMWEl6GBGqk">used to calculate position</a>, requires database connectivity, designed to be context aware rather than used for positioning.</p><p>Blue-Dot - <a href="http://searchengineland.com/aruba-networks-enables-blue-dot-indoor-navigation-beacons-209405" target="_blank">http://searchengineland.com/aruba-networks-enables-blue-dot-indoor-navigation-beacons-209405</a>, similar to iBeacon.</p><p>Seismic Data -<a href="http://www.fastcodesign.com/1671857/can-this-design-student-build-an-open-source-alternative-to-gps#8" target="_blank">http://www.fastcodesign.com/1671857/can-this-design-student-build-an-open-source-alternative-to-gps#8</a><br></p><p>More technologies listed here - <strong></strong><a href="http://en.wikipedia.org/wiki/Indoor_positioning_system" target="_blank">http://en.wikipedia.org/wiki/Indoor_positioning_system</a><br></p><p>You might be asking, how is SPS different to any of the above?<br><a href="http://lens1.csie.ncku.edu.tw/Library/Paper/IEEE%20MDM%202009/data/3650a371.pdf"></a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15579-how-does-it-work">How Does It Work?</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15579#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15579"><p>So you might be wondering, how is this any different from any of the aforementioned technologies? Well SPS fully utilises the capabilities of beacon frames in Wi-Fi, much like traditional Wi-Fi positioning techniques, except we add in additional information that was previously inferred or guessed (through area modelling/profiling; war-driving) and which we had to contact a database to obtain. Additionally, Wi-Fi positioning only works when you have another positioning system to profile against (GPS) while logging the access points.</p><p>SPS as such maintains a passive client implementation (like GPS) and has minimal acquisition times. And since it uses the beacon frame only, a simple beacon only access point can be created without the need for a network or complex hardware/infrastructure (you only require power). One of the goals of this project is to produce a manufacturable device that does just this and is easy to configure as well as set and forget.</p><p>So how do we "exploit" the beacon frame?</p> <h2>SSID Encoding</h2> An SSID contains a total of 256bits. This provides quite a large amount of data to exploit within a beacon frame of an access point. To this effect, we can actually store the physical location of the access point directly in the SSID.<p>Using a 32bit signed integer for the latitude and longitude gives us a worst case position of ±1.1 cm (7 digits of precision after decimal point; towards the equator, 1 degree<strong><strong></strong></strong> is roughly equivalent to <strong></strong>about 110 km<strong></strong>).</p><p>Since we only alter the SSID of a beacon frame, we are also able to easily modify existing equipment or infrastructure (for example, if the access point supports multiple SSIDs) as we aren't altering the Wi-Fi standard itself.</p><p><img src="https://cdn.hackaday.io/images/4850221427209027424.png"></p><p>Note: this has been updated <a href="https://hackaday.io/project/4872/log/16960-nothing-good-comes-easy-mk2">here</a>. We now only have 31 octets.<br><span class="read-more-tag"></span></p><p><br></p><h2> Be Careful of 0x0 String Termination Characters </h2><p> "A common, albeit incorrect assumption, is that an SSID is a string of human-readable characters (such as ASCII), terminated by a NUL character (as in a C-string). SSIDs must be treated and handled as what they are a series of 0 to 32 octets, some of which may not be human-readable."[1]<a href="https://hackaday.io/project/4872/log/15575/edit#_ftn1" name="_ftnref1" title=""></a></p><p>While this is a problem when writing software, it can be easily accounted for; for example we need to use memcpy instead of string functions (in c).</p><p>Obviously this becomes an issue when configuring the SSID manually. So it needs to be handled correctly if augmenting existing systems. In most instances we can just use the hex character representation, but some existing access points might not support this.</p> <h2>Alternate Mapping</h2> <p>This project has a wide variety of applications and is designed to be portable. The above protocol schema is presented as a bare minimum specification to enable accurate location services. The feature flags allow us to enable alternate mapping which presents an application ID and reserved bits for custom services (such as integration into shopping mall navigation apps, indoor tour guide apps). When this alternate mapping is enabled, the latitude and longitude bits are read as centimetres instead of degrees around a point 0,0. This can be treated as the centre-point of a map or the 0,0 X/Y coordinate; it's up to the developer.</p> <h2>Getting Location</h2> <p>While Wi-Fi triangulation is quite a well-known concept nowadays (Received Signal Strength Indication etc.) it presents a problem as it's a fuzzy approach to a solution. SPS tries to remove the unknown by creating a series of fixed and known location transmission nodes (there is a once off manual planning effort to program the position of the node). With this knowledge, we are able to very accurately determine our position. </p><p>Additionally since the position of the AP is known (as it's sent in the beacon) you get almost instantaneous position calculations; this method is sort of like AGPS, but quicker and no need for data connectivity.</p><p>With regard to calculating the right altitude, it is assumed that devices on a plane remain relatively horizontal to some extent. In this sense, if a client device can see multiple access points on different floors, it can ignore these points to create a better altitude calculation (to be determined with further testing). Hopefully we can get very accurate 3D positioning accuracy with multiple nodes placed on the floor and ceiling of a room (hence the large precision for altitude).</p><p>Ideally the nodes themselves will be designed to all have the same or replicable wireless parameters for accurate distance calculations. While, this might not always be true, extra encoded information can help us normalise the output power to bring it in line with the standard nodes worked on within this project. </p><p>Obviously, the more sources the SPS client can see, the more accurate the positioning will be.</p><h2>Why Encode and Not Just Store Strings?</h2><p>Well you could use each character to store fixed digit string representations:</p><pre>SPS:-11999999+111999999-1199999</pre>But you are limited in the amount of information you can actually send. In this instance you can have a tag, latitude, longitude and altitude. The lat/long can be decoded with 6 decimal points of resolution (resolution of meters) only and the altitude gives you a pretty broad range in meters, you could use the BSSID to determine uniqueness of the access point (providing two are never the same). That's where it ends though, you cannot send any more information. The usefulness of encoding starts when you can add even more information that allows us to create more accurate position estimations. In this instance we have packed so much in there that there is even space for future features, alternate mapping functionality and even the ability to mask incorrect characters from the SSID (as it turns out the "+" character doesn't work in the ESP8266).<p>Plus, where is the fun in doing it the lazy way? This is hackaday, not <a href="http://hackaday.io/page/856-they-grow-up-fast">potatoaday</a>.</p><p>[1] - <a href="http://en.wikipedia.org/wiki/Service_set_%28802.11_network%29" target="_blank">http://en.wikipedia.org/wiki/Service_set_%28802.11_network%29</a><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15580-ssid-coder-demo">SSID Coder Demo</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15580#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15580"><p>So let's do something fun. Here is an SSID encoder/decoder that implements the SSID coding scheme (sps_ssid_coder.c). To build run gcc -o sps_ssid_coder sps_ssid_coder.c</p><p>If you can think of ways to optimise the decode_ssid function please fire away.</p><p>Edit: it prints the correct hex string representation out now for use in realterm.<br></p><p>It should yield the following output:</p><p><img src="https://cdn.hackaday.io/images/8415551427196410604.png"></p><p>See <a href="https://hackaday.io/project/4872-subterranean-positioning-system-sps/log/15677-coder-update">Coder Update</a> for the latest code.</p><span class="read-more-tag"></span></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15624-no-this-fun">No This Fun</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15624#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15624"><p>I got one of the ESP8266 modules connected and working as an AP today. </p><p><img src="https://cdn.hackaday.io/images/3154811427289255727.jpg"></p><p>I had to update as the module I received would not run any AT commands:</p><p><img src="https://cdn.hackaday.io/images/8700821427289023617.jpg"></p><p>I updated to <a href="https://drive.google.com/folderview?id=0B3dUKfqzZnlwRXhBTmlhaTROTmM&amp;usp=sharing">0.9.4.2</a>; I couldn't get other firmware to work correctly as they wouldn't respond to input (the device responds on the terminal as you type, but it wouldn't accept a carriage return). This firmware runs at 9600baud.</p><p>One thing to note is that when there isn't enough power to the device, it doesn't seem to initialise correctly and kills any Wi-Fi devices nearby.</p><p>Now since we want to be outputting raw hex to the terminal for the SSID, we will have to use <a href="http://realterm.sourceforge.net/">Realterm</a> for this test.</p><p>We want to send the following commands:</p><p>AT+CWMODE=2</p><p>AT+CWSAP=&lt;ssid&gt;,&lt;pass&gt;,&lt;chan&gt;,&lt;enc&gt;</p><p>Our command (for Realterm) then ends up being:</p><p>AT+CWSAP="\x53\x50\x53\x3a\x20\x41\x55\x53\x00\x00\x00\x63\x3b\x15\x0a\x07\x3b\x76\xff\x31\x07\x5b\xcd\x15\x7a\x02\x00\x00\x00\x00\x00\x00","",1,0</p><p>I altered the output of the <a href="https://hackaday.io/project/4872/log/15580-ssid-coder-demo">coder</a> to format the SSID correctly as above. Note that the hex values need to be a two digit representation or it won't work. Also it seems in this firmware version you need to send both the channel <strong>and </strong>encryption type too (it's not optional contrary to some documentation).</p><p><span class="st"><em></em></span><em></em>The problem might be due to the carriage returns, line feeds, quotation marks and commas stored as hex values in the SSID, so we are going to have to find a way around this affecting the AT command string (I might have to modify the firmware of the ESP8266). </p><p><img src="https://cdn.hackaday.io/images/2749071427289343148.png"></p><p>Interestingly, nulls are ignored on Android (AT+CWSAP="SPS:\x00\x00\x00\x00\x00\x00test","",1,0):</p><p><img src="https://cdn.hackaday.io/images/4459781427289650214.png"></p><p>Tune in next time.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15625-no-this-fun-quick-update">No This Fun Quick Update</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15625#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15625"><p>So as it turns out while the string:<br>AT+CWSAP="\x53\x50\x53\x3a\x20\x41\x55\x53\x00\x00\x00\x63\x3b\x15\x0a\x07\x3b\x76\xff\x31\x07\x5b\xcd\x15\x7a\x02\x00\x00\x00\x00\x00\x00","",1,0</p><p>doesn't work, this one does:</p><p>AT+CWSAP="\x53\x50\x53\x3a\x20\x41\x55\x53\x00\x00\x00\x63\x3b\x15\x0a\x07\x3b\x76\xff\x31\x07\x5b\xcd\x15\x7a\x02\x00\x00\x00\x00\x00","",1,0</p><p>What's different about them?</p><p>Well one is 32 octets and the other is 31. The one that works is 31 octets. I think I found a bug in these modules (unless it's fixed in a later version). Edit: <a href="http://forum.arduino.cc/index.php?topic=295728.0">confirmed elsewhere</a> (looks like I might re-arrange the SSID format to account for other devices possibly not implementing the standard correctly; I might just shift the application ID by 8bits making it 24bit).</p><p><img src="https://cdn.hackaday.io/images/5151641427291376693.png"></p><p>Edit:</p><p>I just restarted and tried to replicate it and it doesn't work again. I'll reattack tomorrow.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15676-when-standards-arent">When Standards Aren&#39;t</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15676#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15676"><p>As it turns out, certain control characters do in fact cause issues. I think the reason it worked yesterday was because the string was parsed incorrectly in the ESP8266 and it was causing some unknowns. I did test the following:</p><p>AT+CWSAP="test\x0a\x0d\x2c\x22","",1,0</p><p>AT+CWSAP="test</p><p>And they both work, so this leads me to believe this is the case (yes even though that second string is improperly formatted).<br></p><p>What I do know is that this device only supports SSIDs of 31 octets and the following control chars are invalid:</p><pre>LF - 0x0a
CR - 0x0d
" - 0x22
+ - 0x2b</pre>So where to from here?<p>The first option is to reprogram the firmware, but I reckon that is a bit drastic and definitely not a portable option if the same issue happens on another Wi-Fi module.</p><p>Instead, let's mask out these invalid characters. We can create a bit mask for the octets that can be affected (we can ignore the tag and country code). Also I have decided to always just use 31 octets of the SSID to increase portability. This leaves us needing to free up some bits since we need 24 and only have 15 reserved. When I first set the SSID encoding layout, I favoured ease of decoding over saving bits (hence why everything was neatly obtainable in 32bit chunks).</p><p>I have now significantly restructured the SSID coding schema:</p><p><img src="https://cdn.hackaday.io/images/5770331429103124224.png"></p><p>Edit: Added path loss coefficient selection (4 values).<br><span class="read-more-tag"></span></p><p><span></span>I've kept the reserve bits in there as they will come in handy and opted to reduce other aspects of the schema instead. One extra feature bit factored for is 3D location mapping to determine your position in a room with nodes on the floor and ceiling (ideally in each corner of a cubed room). This ignores the height of floor requirements and uses all nodes available instead. This can be used in conjunction with alternate mapping enable (offset mapping). Developers might like to set an application ID for this so the client can ignore nodes that aren't located in the room. You could also use some of the reserve bits to specify floor numbers as well (or replace the country code with floor number). While you should use the same channel to get decent positioning information, I will experiment to see what values work best.</p><p>In the code, whenever the encoder encounters a control digit it doesn't like, it increments the value by 1 and stores true in the bit mask. The decoder then decrements the corresponding octet by 1 if it is set in the mask, before decoding. </p><p>While each access point may require a different coding scheme for it (different control characters might affect different models), provided two invalid control characters aren't situated together (their hex value) for that access point, all clients will always be able to decode the string from any access point correctly, without modification to the decoder. If we run into something that does, we still have reserve bits to play with (could create different adding schemes, e.g. add 1, or 2). I did contemplate just adding 32 to any control bit, but sometimes normal characters are affected (like the + character in this instance).</p><p>So here it is working:</p><p><img src="https://cdn.hackaday.io/images/4078831427379379552.png"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15677-coder-update">Coder Update</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15677#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15677"><p>Here is the updated code to handle the new changes:</p><p><img src="https://cdn.hackaday.io/images/1657671427612325869.png"></p><p>Code now on <a href="https://github.com/subpos/">github</a>.</p><span class="read-more-tag"></span><span class="read-more-tag"></span></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15715-nothing-good-comes-easy">Nothing Good Comes Easy</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15715#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15715"><p>I wrote a simple Android application to decode the SSID and display it, unfortunately I am having a slight issue. Some control characters are handled incorrectly by the <a href="http://developer.android.com/reference/android/net/wifi/ScanResult.html">ScanResult</a> class.</p><p>Original string:</p><pre>\x53\x50\x53\x3a\x41\x55\x53\x00\x00\x63\x3b\x15\x0b\x07\x3b\x76\xff\x31\x07\x5b\xcd\x15\x9c\x80\x07\x00\x00\x20\x04\x00\x00</pre><p>Android values:<br></p><p><img src="https://cdn.hackaday.io/images/8300451427464095704.png"></p><p>It looks like the UTF-8 decoder in String is replacing these <a href="http://en.wikipedia.org/wiki/UTF-8#Invalid_byte_sequences">invalid byte sequences</a>.</p><p><span></span>Update: the octets can be obtained from the object's "wifiSsid.octets" buffer:</p><p><img src="https://cdn.hackaday.io/images/5517091427510839936.png"></p><p>Unfortunately his value is <a href="https://github.com/android/platform_frameworks_base/blob/master/wifi/java/android/net/wifi/ScanResult.java">hidden</a> and problematically so is <a href="https://github.com/android/platform_frameworks_base/blob/master/wifi/java/android/net/wifi/WifiSsid.java">WifiSsid</a>:</p><pre class="hljs java"> <span class="hljs-comment">/**
* Ascii encoded SSID. This will replace SSID when we deprecate it.<span class="hljs-phpdoc"> @hide</span>
*/</span>
<span class="hljs-keyword">public</span> WifiSsid wifiSsid;</pre><p>We cannot just straight out use Java reflection as we get a classNotFoundException when trying to use the internal API during development as explained <a href="https://devmaze.wordpress.com/2011/01/18/using-com-android-internal-part-1-introduction/">here</a>.</p><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15743-android-position-decoder">Android Position Decoder</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15743#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15743"><p>So <a href="https://devmaze.wordpress.com/2011/01/18/using-com-android-internal-part-1-introduction/">once</a> you <a href="http://www.xda-developers.com/using-internalhidden-classes-of-the-android-api/">enable</a> "hidden" <a href="http://stackoverflow.com/questions/7888191/how-do-i-build-the-android-sdk-with-hidden-and-internal-apis-available">API</a> features (if using Android Studio, use this <a href="http://forum.xda-developers.com/showthread.php?t=2486340">guide</a>) of Android and have downloaded the SDK source you can do the following:</p><pre class="hljs java"><span class="hljs-keyword">import</span> android.net.wifi.WifiSsid;</pre>The cool thing is you don't need to use reflection to access this hidden variable contained in the ScanResult class. This is because it is actually public within that class and it is no longer "hidden" as it is built into the compiled class file that has been extracted from the emulator (@hide removes it from here on the compiled libraries in the SDK). I had to use the 4.X SDK to do this as the SDK manager didn't allow easy download of the 2.X source, but I aim to get it working on either.<p>So all we need to do now to get this byte array is:</p><pre class="hljs vbscript">WifiSsid result;
<span class="hljs-keyword">byte</span> wifichar[];
...
<span class="hljs-keyword">if</span> (wifiScanList.<span class="hljs-keyword">get</span>(i).SSID.toString().startsWith(<span class="hljs-string">"SPS:"</span>)) {
    result = wifiScanList.<span class="hljs-keyword">get</span>(i).wifiSsid;
    wifichar = result.getOctets();
}</pre><p>And here we have it:</p><p><img src="https://cdn.hackaday.io/images/9437401427605033994.png"></p><p>The plan is to eventually create an Android service application that can integrate with existing location services. You could also filter out SSIDs with the SPS tag for a cleaner Android Wi-Fi UI (Windows already doesn't show values past a null character, so the SSID shows as "SPS" if you change the tag to SPS\x00).</p><p>Now I'm just waiting to receive a few more ESP8266 modules to implement the position triangulation (I want to test this first with identical modules rather than starting to normalise different AP signals with the TX power data).</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4872/log/15821-esp8266-arrived">ESP8266 Arrived</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4872/log/15821#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-15821"><p>My ESP8266 order arrived in one piece (thankfully, since they just sent it in a standard paper envelope...).</p><p><img src="https://cdn.hackaday.io/images/8488611427705560667.jpg"><span></span>Just waiting on the <span class="component-content">Microchip PIC16LF1824</span>, which should arrive tomorrow and then I can get to work on using that to create each node. The <span class="component-content">PIC16LF1824</span> will store position data in EEPROM which configures the ESP8266 on startup and will have an easy to use serial interface that you just input the position parameters into. This could then be connected to a bluetooth module to allow for easy configuration.</p><p>Edit: <span class="component-content">PIC16LF1824</span>'s arrived today.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'X6PpAFvD-p_k5HjB6tDH1KtBYs4OG-YtUowI';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>