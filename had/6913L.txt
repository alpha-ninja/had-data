<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Evivar: Better Batteries Enabled (IoT + BMS)  &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F6913%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/6913-evivar-better-batteries-enabled-iot-bms">Evivar: Better Batteries Enabled (IoT + BMS) </a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">We want to bring Internet of Things to batteries, enabling consumers to become prosumers. </p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/11991-storken" title="Visit Profile">Storken</a><span>&bull;</span>
                
                25 days ago<span>&bull;</span><a href="/project/6913#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/6913-evivar-better-batteries-enabled-iot-bms">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/6913/logs/sort/newest">Newest</option>
                    <option value="/project/6913/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/6913/log/21604-were-late-to-the-party">We&#39;re late to the party</a></h2>
                            <small class="authorship">22 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/21604#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21604"><p>After putting in a lot of energy on different revisions using Atmel&apos;s <a href="http://www.atmel.com/devices/ATA6870N.aspx">ATA6870N</a> as AFE, TI&apos;s <a href="http://www.ti.com/product/bq76940">BQ76940</a> came to market. For our specification and intended usage, it was perfect. Out with nearly all the work and in with a clean slate. But, all the experience with earlier PCB layout and schematic drawing meant that we were ready to try Designing for Manufacture (DFM) from the get-go.</p><p>Our strategy for
prototyping was to connect external known-to-work development kits. One example
of this is the SAM-D20 Xplained dev-kit. Instead of placing and programming the
Sam d20 on the PCB - wires was soldered to the needed connections. The following development looked a lot like this (also, electrical tape for size):</p><p><img src="https://cdn.hackaday.io/images/2284081437747502856.jpg"></p><p>We want to compete in Hackaday prize, both for the main and best product prize. After reviewing the rules it is painfully apparent that we will be very busy up until 17 Aug. You might wonder, what is our product? Our product is an Battery Management System that should be:</p><ul><li>Easy to use</li><li>Cheap<span></span></li><li>Open source</li><li>Fully featured</li><li>Connected</li></ul><p>We want
to open this design. As part of opening the design we&apos;re revising the layout.
The revised board is bigger and status - leds and testpoints are added. The fixed footprint for the bluetooth module
is replaced with a header. Other wireless-communication modules can be used - or your Arduino. We hope these changes will make the board easier to work with.<span></span></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/21845-pcbs-arrive">PCBs arrive!</a></h2>
                            <small class="authorship">19 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/21845#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-21845"><p>Fresh from China! </p><p><img src="https://cdn.hackaday.io/images/764011438250534897.jpg"></p><p>Several changes were made to the board from the prototype.</p><p>- HW bugs are corrected. There were two missing connections. </p><p>- Larger size for easier probing and debugging and...</p><p>- Test Points! The prototype was designed to work like a charm in a compact size. You can&apos;t blame us for lacking confidence! Well, there were some hardware bugs, and let&apos;s not forget that there still is software onboard that needs debugging. Probing the milled copper traces on the prototype proved to be a proper pain in the arse.. The test points added are GND, top cell, 3V3 from the BQ&apos;s regulator, SDA and SCL between the SAM and BQ, ALERT from the BQ, the mechanical button, TS1 for activating the BQ, enable for the 3V3 regulator for the HC06 bluetooth module, 3V3 and GNG for the HC06, RX/TX between the SAM and HC06 plus KEY and LED.</p><p>- LEDs for debugging. Allways handy. </p><p>- Mechanical button added. </p><p>- Through hole mounted MOSFET&apos;s in TO220 packages. The SMD ones are a bit hard to solder and desolder when things get too hot to handle. </p><p>- HC-06 is moved outside of the board. This adds greater flexibility in placing the BMS or choosing a casing for the battery pack (hint: metal casings don&apos;t work well with Bluetooth). </p><p>Here it is side-by-side with our prototype:</p><p><span class="redactor-ie-paste"><img src="https://cdn.hackaday.io/images/6080901438250607986.jpg"><br></span></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/22032-video-update">Video update!</a></h2>
                            <small class="authorship">16 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/22032#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22032"><p>What problem are we solving? Check out this video for more information!</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/16v3KEWCdIE" frameborder="0" allowfullscreen=""></iframe></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/22044-its-alive">It&#39;s alive!</a></h2>
                            <small class="authorship">15 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/22044#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22044"><img src="https://cdn.hackaday.io/images/6845151438549951771.JPG"><p>Friday was spent soldering parts to the new PCB. Everything is fitted, with the exeption of the 3V3RF regulator. The board, not much bigger than the previous prototype, is much easier to prototype with - something we quickly found out when we activated the board for the first time.</p><p><img src="https://cdn.hackaday.io/images/9502701438549998987.JPG"></p><p>Our previous revisions has had trouble with the internal 3V3 regulator, found in the AFE. We found out why now. The source follower (a voltage regulator) had the wrong footprint. Drain and source was effectively swapped. This meant the AFEs internal regulator was destroyed from overvoltage.</p><p>Our plan now is focused on getting these parts of the software to work:</p><ul><li>Prevent overcharge</li><li>Prevent overdischarge</li><li>Balancing algorithm to equalize cell voltages</li><li>Adjust charge treshold (cutoff) from phone</li><li>Stream real time data to phone (voltage, current, power, SOC)</li><li>Turn discharge on/off from phone</li></ul></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/22190-programming-the-evivar-board">Programming the Evivar board</a></h2>
                            <small class="authorship">12 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/22190#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22190"><p>The Evivar board can be programmed and debugged in Atmel Studio using a JTAGICE3. The board was originally designed to be programmed and debugged from an Explained SAMD20 evaluation kit, but the JTAGICE3 will work just as well. </p><p>First, you would probably want to simulate a battery pack safely. You can do this using a breadboard and a resistor ladder, where each resistor represents a group of cells in parallell and a power supply capable of voltages up to 63V. If you want to simulate charging as well, you will need another power supply. The supply simulating the battery must then be able to sink current. However, charging can to some degree be simulated during debugging in Atmel Studio. </p><p>Be careful with handling the conductors and the PCB - at 60V current starts to hurt!</p><p><img style="display: block; margin: auto;" alt="Connecting the board for developing" src="https://cdn.hackaday.io/images/7465751438817672782.png"></p><p>   Solder pin headers to the 16x header row, facing down. Place the resistors in a ladder and place the Evivar board on top. Connect the wires as shown above. You don&apos;t need neither the &quot;charger&quot; lab supply nor the load to get started, but the wire running to BAT- must be there.</p><p><img src="https://cdn.hackaday.io/images/6306161438821072277.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/2119001438822454261.jpg"></span>The extra jumpers you see here are for providing the BT module with power untill we get the regulator. No &quot;charger&quot; connected yet, only a wee little load resistor. <br></p><p>Take your JTAGICE3 and grab your squid cable. The programming interface is Serial Wire Debug. Connect the individual wires in the following manner:</p><p>Squid 1 -&gt; pin 4 (SWDCLK)</p><p>Squid 2 -&gt; pin 3 or 5 (GND)</p><p>Squid 4 -&gt; pin 1 (VCC)</p><p>Squid 5 -&gt; pin 2 (SWDIO)</p><p>Squid 6 -&gt; pin 10 (nReset)</p><p>Squid 0 -&gt; pin 3 or 5 (GND)</p><p><img src="https://cdn.hackaday.io/images/2837351438821261908.jpg"></p>
<p>(See <a href="http://www.farnell.com/datasheets/1858376.pdf">http://www.farnell.com/datasheets/1858376.pdf</a> for more details.)<span class="redactor-invisible-space"></span></p><p>Go to <a href="http://www.atmel.com/tools/atmelstudio.aspx">http://www.atmel.com/tools/atmelstudio.aspx</a>, download Atmel Studio and install it. The driver for the JTAGICE3 should be installed when you plug it into your computer. </p><p>Power up the &quot;battery&quot; power supply to 30V to start with and push SW0. This will bring TS1 over V_BOOT and wake the BQ76940 up from SHIP-mode. The chip&apos;s internal 3.3V regulator will power the SAMD20 and you should be able to make contact with the micro controller!</p><p> In Atmel Studio, you can verify the connection by going to Tools -&gt; Device Programming. Select the JTAGICE3 as tool, select the ATSAMD20E17 as device, SWD as interface and press Apply. If the hardware is working correctly you should get the device signature and voltage by pressing Read. </p><p><img style="display: block; margin: auto;" alt="Bingo!" src="https://cdn.hackaday.io/images/5092081438821311670.png"></p><p>All set! When starting a new project, be sure to select the correct device in the wizard. We&apos;re programming Evivar in C using ASF and will post updates on the code along with the hardware design. Take a look at some of Atmel&apos;s ASF examples to get started yourself. <br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/22406-waiting-for-parts">Waiting for parts</a></h2>
                            <small class="authorship">8 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/22406#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22406"><p>Last week, parts were ordered. Once the parts arrive, we&apos;ll have about two days to solder and test three boards. Then ship them off to California. Our absolute last cutoff date must be 14 Aug, but then the post service has no room for error.</p><p>The parts should have been here today, but they seem to come tomorrow.</p><p>The software for Evivar is coming together and we&apos;re looking forward to release material in the days to come.</p><p>Now, GitHub bootcamp.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/22429-temperature-compensated-copper-shunt">Temperature Compensated Copper Shunt</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/22429#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22429"><p>Managing a battery, measuring current is very important. Current is measured for several reasons:</p><ul><li>To protect against overcurrent</li><li>To protect against short circuit</li><li>To calculate power</li><li>To estimate State of Charge (SOC)</li></ul><p>Current can be measured in several ways, we&apos;re using a shunt resistor. This method is low cost, accurate and our AFE come equipped with a dedicated 16-bit <a href="https://en.wikipedia.org/wiki/State_of_charge">Couloumb Counter</a>. This integrates current over 250ms and delivers a reading at the end.</p>From the <a href="http://www.ti.com/lit/ds/symlink/bq76940.pdf">datasheet</a>, calculating the voltage is easy: <p style="margin-left: 20px;">CC Reading (in &#xB5;V) =
[16-bit 2&#x2019;s Complement Value] &#xD7; (8.44 &#xB5;V/LSB) <br></p><p>Combine this with Ohms law, U=R*I, I=U/R - and the current can be calculated.</p><p>But we&apos;re complicating things, by making the design cheaper. We&apos;re taking the shunt resistor to the next level - cost wise. Instead
of fitting a precision alloy resistor that don&apos;t change resistance - we&apos;re
using the copper found on the PCB. Since the resistance of copper vary a lot with
temperature, a NTC is also added. The temperature can be measured, the
resistance change can be quantified - and hey presto: a free (only board area +
NTC), 1% accurate shunt resistor. We call this Temperature Compensated Copper Shunt, TCCS
shortened. </p><p>The viabillity of TCCS has been proven some times before, but the best papers require IEEE access. As a <a href="http://www.digchip.com/datasheets/parts/datasheet/3480/AS8510_COOPER_SHUNT_MINI_BOARD-pdf.php">commercial product</a> &quot;TCCS&quot; has been available for about a year now (prohibitively expencive).</p><p><img src="http://cdn.edn.com/ContentEETimes/Images/01SNordyk/ams%20AS8510.JPG"><span class="redactor-invisible-space"></span>In software, the current measurement can be broken down into these two functions:</p><ul><li>Read ADC from AFE, calculate current in mA</li><li>Read temperature of TCCS, recalibrate new resistance</li></ul><p>The current shunt has a very low resistance, coming in at around 0,5 mOhm. As we will only operate with a maximum current of 40A, the ADC will only yield about 10-bit current accuracy. That is ok as it ensures BMS heating stays very low.<br></p><p>Look back in a week, then we&apos;ll see how and if it works as it should.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/22492-charge-and-discharge-protection">Charge and discharge protection</a></h2>
                            <small class="authorship">7 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/22492#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22492"><p>Evivar
features two MOSFETS that can stop both discharge and charge of the battery. A
MOSFET can only stop current in one direction, therefore two is needed. We&apos;re
using these for control and protection.</p><p>The
AFE has internal MOSFET gate drivers and integrate many of the triggers for
protection, which is then controlled without command from the MCU. This means
the AFE will continue to protect the battery, should the MCU fail or be
occupied with something else.</p><p>The
triggers integrated into the AFE is:</p><ul>
 <li>Overvoltage
     (OV) or undervoltage (UV)</li>
 <li>Short
     Circuit in Discharge (SCD)</li>
 <li>OverCurrent
     in Discharge (OCD)</li>
</ul><p>These
parameters can be adjusted or set:</p><ul>
 <li>UV/OV
     levels and allowable time in OV/UV (1-16s)</li>
 <li>SCD
     sensitivity and delay</li>
 <li>OCD
     sensitivity and delay</li>
</ul><p>MOSFETs
on resistance can be so low that heatsinking is not needed. TIs <a href="http://www.ti.com/product/csd19506kcs">CSD19506KCS</a> with only 2,3 mOhm
on resistance. It&apos;s costly, and for lower currents it is not needed. We&apos;ve yet
to find out how low on resistance is needed for different current levels. A
measurement of thermal impedance of the BMS/Battery will give data that can be used
to predict what MOSFET performance is needed.</p><p>For
the development board - TO-220 footprints are used. On our &quot;manufacturing
ready&quot; BMS, PQFN 5x6mm MOSFETs are used.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/22719-3-beta-units-sent">3 Beta units sent!</a></h2>
                            <small class="authorship">4 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/22719#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22719"><p><img src="https://cdn.hackaday.io/images/954621439504637821.jpg"></p><p>We could not keep the DHL courier waiting. Beta units indeed. Only one, of three, worked perfectly. One had a slight measurement error on 5 cells (one AFE internal module). The last had a I2C bus that would not cooperate. But! The units look good, and with some more love - they will probably all work perfectly.</p><p>The main reason for the haste was bad parts procurement. We thought the PCBs would be the latest to the party, but those arrived two weeks ago. The parts from farnell was delivered three days ago. Three days for soldering and testing 3 boards turned out a bit too ambitious.</p><p><img src="https://cdn.hackaday.io/images/6479911439504838220.png"></p><p>In the next days we&apos;ll publish BOM, schematics, gerber files, software and our test app - our prototype works as it should now!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/6913/log/23062-workings-of-the-firmware">Workings of the firmware</a></h2>
                            <small class="authorship">2 days ago  &bull;
                                <a class="gray-link" href="/project/6913/log/23062#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23062"><p>At this stage, the firmware running on the Atmel SAM20 is built as follows.</p><p><img style="display: block; margin: auto;" alt="State machine, Evivar software overview" src="https://cdn.hackaday.io/images/6757551439730371226.png">The firmware is modelled like a semi state machine. There are three states of the firmware, derived by the amount of capacity left on the battery pack. These states are Active, Batt Low and Ship Mode. As of now, X is 2.9V, Z is 2.75V and X+Y is ~3.15V. Between the states Active and Low Batt there are transition states, turning things on and off for the next state.</p><p>In Ship Mode, nothing really happens. This is the mode that BMSs are often stored and shipped in, to avoid uneccecary discharge of the battery cells. In this state, everything is disabled, and the Evivar board will draw only a few micro amperes. We&apos;re making a battery management system, not a battery murdering system ;) To boot the BMS from the Ship state, a voltage above 1V must be applied to TS1 of the BQ769x0. Do this on Evivar by pressing the SW0 button on the board. The BQ will power on it&apos;s internal 3.3V regulator which in turn will make the SAMD20 boot. </p><p><img style="width: 386px; height: 896px; display: block; margin: auto;" alt="The Active state simplified" src="https://cdn.hackaday.io/images/2724901439732652293.png" height="896" width="386"></p><p>Active is the state where the battery is operative and can be discharged. Above is a rough diagram of what&apos;s going on. Here the microcontroller is doing regular checks of the battery cells and pack, logging it&apos;s condition (in the future), acting on conditions and faults and communicating with an external device using bluetooth. </p><p><img style="width: 536px; height: 318px; display: block; margin: auto;" alt="Interrupts in the Active state" src="https://cdn.hackaday.io/images/2972621439738427263.png" height="318" width="536"></p><p>There are currently three interrupts enabled in Active. They are kept as short as possible, and will set flags that the main loop as shown above will act on. <br></p><p><img style="width: 614px; height: 869px; display: block; margin: auto;" alt="The Low batt state simplified" src="https://cdn.hackaday.io/images/271191439738288917.png" height="869" width="614"></p><p>The Low batt state will disable bluetooth, disable the discharge mosfet,  turn off the Coulumb counter in the BQ and enter the device into sleep in order to conserve current. A timer wil awaken the micro controller at regular intervals to do some checks (and in the future store the battery condition on flash).</p><p>The details of the code should hopefully be apparent upon reading it. All variables and function names are given pretty descriptive names. Source code will be out in a bit.</p><p>We defined following as the Minimum Viable Product (MVP):</p><ul><li>Monitor battery cells </li><li>Prevent over discharge / charge currents</li><li>Prevent over charging</li><li>Prevent over discharging</li><li>Send real time data to a mobile device using bluetooth</li><li>Enable / disable discharge from the mobile device</li></ul><p>Our prototype does nearly all that. Some tweaks must be done in order to calculate current correctly, but apart from that, it seems to be performing OK. The BMS is yet to be tested outside a lab environment, but extensive tests with a battery pack are planned in the coming period. <br></p><p>Some important things remaining software wise, among them are</p><ul><li>Logging battery data on flash memory using simulated EEPROM</li><li>Enable balancing during trickle charging</li><li>Calculate total amount of cycles</li><li>Error handling</li><li>Extensive testing and debugging</li><li>Save power by enabling the bluetooth in intervals, possibly by pressing external button</li><li>Open battery parameters from file</li><li>Bullet proof communication between external device</li></ul></div>
                            </div>
                        </li>
                    
                </ul>

                
                <div class="pagination">
                    
                    
                    <a href="?page=2" class="grey-gold-button next-button show">Next</a>
                    
                </div>
                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'tCvpNUsd-NpSZplOQxzGsqRXnhVT5ayVQ-tA';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>