<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Open Source Cell Phone &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F2478%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/2478-open-source-cell-phone">Open Source Cell Phone</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A completely open hardware and open source software cell phone</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/12798-pusalieth" title="Visit Profile">Pusalieth</a><span>&bull;</span>
                
                a year ago<span>&bull;</span><a href="/project/2478#discussion-list" title="See Comments">2 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/2478-open-source-cell-phone">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/2478/logs/sort/newest">Newest</option>
                    <option value="/project/2478/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/2478/log/7175-get-up-and-running-with-the-gprs-shield">Get up and running with the GPRS Shield</a></h2>
                            <small class="authorship">a year ago  &bull;
                                <a class="gray-link" href="/project/2478/log/7175#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-7175"><p>So I took me a couple days to really narrow down what to do and how to do it. I wanted to just check basic functionality and confirm everything is working, SMS, Calling, etc. First you need to load the library into the arduino ide then upload the gprs_test sketch. I am using an Arduino Mega so don't forget to change the pins for software serial to 7,8 for other arduinos. In this scenario it just sets up a basic tunnel between the SIM900 module and the computer using the arduino to act as a go between. Next it issue commands to the arduino that will get passed to the SIM900 module, which then talks to the SIM card. In this case I use a program(SSCO32E.exe) provided by seedstudio, but you can use any uart terminal, just a little trickier.</p><p>Downloads the files needed from my server, everything is archived</p><p><img src="https://cdn.hackaday.io/images/5334131408227273217.png"></p><p>I've blacked out any personal numbers.</p><p>Make sure your settings are as follows, if you get jumbled characters it may be because your arduino is talking to the shield at the incorrect baud rate, or visa versa. Try the&nbsp;</p><p>AT+IPR=</p><p>command to set the baud rate, otherwise change the software serial rate in the arduino sketch to 19200 and work backwards from there. I use 4800 because it seems to be the most reliable. Later I will connect by hardware serial, but right now we are looking for, "does the thing work" no frills idea. Start off with the&nbsp;</p><p>AT+CCLK?</p><p>command to ask the SIM what time is it. If it answers anything back that's not the truth, correct it with the&nbsp;</p><p>AT+CCLK="yy/mm/dd,hh:mm:ss+00</p><p>with a second delay between the command and the actual time, then recheck the SIM card time, repeat as necessary.&nbsp;</p><p>Next is to send a sms, so send the command&nbsp;</p><p>AT+CMGS="number to send to here"</p><p>including the country prefix and area code, so it'll look like this for the US&nbsp;</p><p>AT+CMGS="19995551234"</p><p>Then click send, it'll prompt with a&nbsp;</p><p>&gt;</p><p>Type the message you want to send after the &gt;, then click send, then click SendHEX and type 1A, then click send, this tells the SIM900 you finished the text and want to send. To which then you should receive the response,</p><p>+CMGS: 31<br><br>OK</p><p>meaning the text successfully sent, with the number 31 being the number of how many successful texts you've sent from the SIM card, so it should show 1 for everyone's first time. If you receive a response from the person you just texted it should look like this</p><p>+CMTI: "SM",26</p><p>with the number being the amount of received texts, same idea as explained above. To read a sms use the command&nbsp;</p><p>AT+CMGR=26</p><p>Where the number 26 is the number of the received sms, or you can list all messages received with the command</p><p>AT+CMGL="ALL"</p><p>One problem I did run into is you can hit a limit of sms received when the SIM card's storage is full, at which point you must delete one or all to receive more. Trust me, I plan on fixing this in the future by adding some type of external storage, but right now just delete them. To delete a single sms use&nbsp;</p><p>AT+CMGD=numbered text</p><p>and to delete all use&nbsp;</p><p>AT+CMGL=1,4</p><p>more details on this command is found in the AT reference.</p><p>Next if you'd like to pace a call, its really quite easy but took me hours to figure out, make sure your headphone/microphone is plugged in, then use the command&nbsp;</p><p>ATDnumber to dial;</p><p>that last semi-colon is what took me hours to figure out, so don't forget it, if you get No Carrier response you probably forgot it. To hang up the call just sent the command</p><p>ATH</p><p>To answer an incomming call use the command</p><p>ATA</p><p>You now have basic phone functionality, I will update will any new features or additions I make</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/7204-hardware-serial-through-and-through">Hardware Serial through and through</a></h2>
                            <small class="authorship">a year ago  &bull;
                                <a class="gray-link" href="/project/2478/log/7204#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-7204"><p>8/16/2014</p><p>So I did some reading on the Mega and its extra serial ports, and the coding involded ect. and switching the software serial port to hardware is really quite easy. On the mega the extra serial ports are labeled such as Pin19 is RX1 and Pin18 is TX1. So first add the two jumper cables to the new pins like so&nbsp;</p><p><img src="https://cdn.hackaday.io/images/5283421408248401876.JPG"></p><p>What would be Pin7 needs to connect to Pin19/RX1 and Pin8 connects to Pin18/TX1</p><p>To change the software settings lets examine our arduino sketch, even the software changes are easy, I just used find and replace</p><p>//Serial Relay - Arduino will patch a <br>//serial link between the computer and the GPRS Shield<br>//at 4800 bps 8-N-1<br>//Computer is connected to Hardware UART<br>//GPRS Shield is connected to the Software UART <br> <br>#include &lt;SoftwareSerial.h&gt;<br><br>SoftwareSerial GPRS(50, 8); //RX pin, TX pin<br>unsigned char buffer[64]; // buffer array for data recieve over serial port<br>int count=0;  // counter for buffer array <br>void setup()<br>{<br>  GPRS.begin(4800);  // the GPRS baud rate   <br>  Serial.begin(4800);  // the Serial port of Arduino baud rate.<br>}<br> <br>void loop()<br>{<br>  if (GPRS.available())  // if date is comming from softwareserial port ==&gt; data is comming from gprs shield<br>  {<br>  while(GPRS.available())  // reading data into char array <br>  {<br>  buffer[count++]=GPRS.read();  // writing data into array<br>  if(count == 64)break;<br>  }<br>  Serial.write(buffer,count);  // if no data transmission ends, write buffer to hardware serial port<br>  clearBufferArray();  // call clearBufferArray function to clear the storaged data from the array<br>  count = 0;  // set counter of while loop to zero<br> <br> <br>  }<br>  if (Serial.available())  // if data is available on hardwareserial port ==&gt; data is comming from PC or notebook<br>  GPRS.write(Serial.read());  // write it to the GPRS shield<br>}<br>void clearBufferArray()  // function to clear buffer array<br>{<br>  for (int i=0; i&lt;count;i++)<br>  { buffer[i]=NULL;}  // clear all index of array with command NULL<br>}</p><p>To setup extra serial ports just change a couple lines of code first we delete the lines</p><p>#include &lt;SoftwareSerial.h&gt;<br><br>SoftwareSerial GPRS(50, 8); //RX pin, TX pin</p><p>then replace the invocation of GPRS with Serial1, simple right? But don't upload the new code yet, first we need to tell the SIM900 module to start talking at the new speed. First open back up the program sscom32e.exe, and send the command</p><p>AT+IPR=19200</p><p>This will change the baud rate of the SIM900, after which change the baud rate used in the program, then close the port (CloseCom button) or close the program</p><p><img src="https://cdn.hackaday.io/images/4010651408247520088.PNG"></p><p>Then upload the new sketch, open the sscom program, reopen the port and start sending commands</p><p>A new file has been uploaded to the github named GPRS_HardwareSerial_Test.ino with the modifications already made for the hardware serial, and the previous GPRS_Test.ino file has been named GPRS_SoftwareSerial_Test.ino</p><p>For more information on the Mega and the extra serial ports and how to use them refer to here. </p><p><a href="http://arduino.cc/en/Tutorial/MultiSerialMega">http://arduino.cc/en/Tutorial/MultiSerialMega</a></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/7350-beginings-of-a-pre-prototype">Beginings of a Pre-Prototype</a></h2>
                            <small class="authorship">a year ago  &bull;
                                <a class="gray-link" href="/project/2478/log/7350#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-7350"><p>So I wasn't able to get much work done today, but rest assured I'll be back tomorrow for more updates, and a working pre-prototype portable phone, no bells or whistles, just runs on battery and call, text, and answer all from one simple, portable device.</p><p>So far today I've just been learning about the serial for the LCD display, and wiring up the buttons to test, which I plan to implement as an array for the AT commands as a number pad. As you can see below</p><p><img src="https://cdn.hackaday.io/images/5582921408345683484.JPG"></p><p>I've got the basic setup ready, with my display figured out, my next goal is to implement the commands in a serial form when pushed. I've written a basic sketch I wrote tonight while extremely tired so its probably a little sloppy, and doesn't work, but you'll get the idea of where I'm going with it. The new file named PrototypePhone.ino is up on github, have fun and I'll see you tomorrow.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/7989-prototype-under-development">Prototype under Development</a></h2>
                            <small class="authorship">a year ago  &bull;
                                <a class="gray-link" href="/project/2478/log/7989#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-7989"><p>&nbsp;&nbsp;&nbsp; So I had ordered a Due, 4.3" TFT touch screen, and RA8875 driver from adafruit that arrived today 8/19/2014, and quickly got started on the programming and such here is what it looks like so far with the background cut out to make the components easier to see</p><p><img src="https://cdn.hackaday.io/images/1676721408513217347.JPG"></p><p>&nbsp; &nbsp; I've got the display up and running aside from the GPRS shield that still works but the two are not working together yet. I spent most of the day writing, rewriting and such. I also learned a great deal more c++, and byte registers and such, and improved the library from adafruit to include a rotate text function now defined as textRotate(boolean), cool ay. I'm having a blast with this project as I've never taken any classes nor learned a programming language so I'm teaching myself as I go along. I've created a new prototype project sketch and will include the new libraries and references on the github site. In order to use the Due you'll need arduino-ide-beta which currently is 1.5.7 which i have included the msi in the github as well.</p><p>&nbsp;&nbsp; Now for the what I've done and why, first adafruit was kind enough to include libraries to the RA8875 the .cpp(c++) file and the .h(header) file, thank you for that. by examining the header file you can quickly see all the different functions available that is written. The files on the github are the ones I've modified to include the rotate text function, check out the modifications to see how I implemented them. In the datasheet to the RA8875 page 20 you'll it defines that function as Reg(22h) with bit 4 being the flipper, 0 normal 1 for 90 degress rotate. So I read up on c++, examined the other functions in the .cpp file that define the functions, wher I reverse engineered and hacked my way to a boolean function to define the 4th bit, which if I read everything today and understood it, it means in the register 0x22 or 0b0010 0010 we change the 4th bit 0b001[0] 0010 to one, to read 0b001[0] 0010. To accomplish this I wrote </p><p>void Adafruit_RA8875::textRotate(boolean on)<br>{<br>  if (on)<br>  writeReg(0x22, (1 &lt;&lt; 4));<br>  else <br>  writeReg(0x22, 0);<br>   <br>}</p><p>&nbsp;&nbsp;&nbsp;&nbsp; in the .cpp file just below enlarge in the text definitions section. What this means is to first define a function named textRotate, so when we use the arduino IDE we can just say tft.textRotate(some value here);. Then the (boolean on) means the value to input is either true or false, the next bit (tiny joke) is on what happens if we change it. As written the function says if true then write to register 0x22, bit 4 a value of 1, otherwise just write 0 instead, end function. The (1 &lt;&lt; 4) means that change the 4th bit to 1, just as we needed as stated in the datasheet to rotate the text. Next we need to include the function in the header file, so under text functions we add the line</p><p>void  textRotate(boolean on);</p><p>and thats it. Now when we are programing inside the IDE we can call the function by textRotate(true); to change the orientation of the text, cool huh?</p><p>&nbsp;&nbsp;&nbsp; I also experimented with the display to get to know its capabilities and parameters. First thing is the Max values for both x and y are one pixel less the the actual count of the display. With the grid layout as see here</p><p><img src="https://cdn.hackaday.io/images/9501541408515112920.jpg"></p><p>&nbsp;&nbsp;&nbsp; So lets say you wanted to draw a rectangle for half the screen, write tft.fillRect(0, 0, 240, 271, RA8875_RED), this will fill the screen half way horizontally. The parameters are (X0, Y0, +X, +Y, color) or (X0, Y0, W, H, color), the starting pixel is always top left, and for rectangles you say how much to add in pixels to form next corner, then it fills the enclosed space with the color specified, which the colors defined are found in the header file under // Colors (RGB565), which you can just insert as stated above. To draw lines use the same syntax as above except tft.drawLine(X(start point), Y(start point), X(end point), Y(end point), RA8875_RED);. So if the statement tft.drawLine(0, 0, 479, 271, RA8875_RED); this would draw a red line from the top left to the bottom right. You'll see that in the Prototype sketch there is some experimenting with text and some lines, which will turn into a number pad, that when a touch is registered in that space, that corresponding number will be written to a buffer in line with the corresponding AT command for the desired function, at which time a touch on the screen will initiate the and transfer the buffer and, fingers crossed, will send the command to the GPRS shield and register the correct desire.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/9094-number-pad-and-screen-orientation">Number pad and Screen orientation</a></h2>
                            <small class="authorship">a year ago  &bull;
                                <a class="gray-link" href="/project/2478/log/9094#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-9094"><p>&nbsp;&nbsp;&nbsp; So today I've been working on the numberpad and screen orientation as before I had to work upside down, and the orientation of the number were flipped left to right and visa versa, so now all thats solved. It was actually a pretty simple fix, if you look at the reference for the RA8875 on page 19 you'll see you can change the vertical and horizontal scan directions by writing to register 0x20 and change the 3rd and 2nd bits, 3rd being horizontal and 2nd being vertical. So by add the code</p><p>void Adafruit_RA8875::scanV_flip(boolean V_scan)<br>{<br>  if (V_scan)<br>  writeReg(0x20, (1 &lt;&lt; 2));<br>  else <br>  writeReg(0x20, 0);<br>}<br>void Adafruit_RA8875::scanH_flip(boolean H_scan)<br>{<br>  if (H_scan)<br>  writeReg(0x20, (1 &lt;&lt; 3));<br>  else <br>  writeReg(0x20, 0);</p><p>to the .cpp file or the c++ file, which just says to add the function scanV_flip with boolean input and scanH_flip with boolean function. In each function we write a 1 binary bit to the correct bit in the 0x20 register while leaving it a 0 otherwise or its normal/default. Next we need to add the functions in the header by adding the lines</p><p>void  scanV_flip(boolean V_scan);<br>  void    scanH_flip(boolean H_scan);</p><p>Now to call it up in the arduino IDE the function&nbsp;</p><p>tft.scanV_flip(true);&nbsp;</p><p>to flip the vertical scan, and&nbsp;</p><p>tft.scanH_flip(true);</p><p>to flip the horizontal scan, effectively giving us control over what the display looks like from all orientations and displayed text orientations. I can now see as I hope you see that c++ not only a fun, versatile language to learn but easy too, as I've completed this with no prior knowledge of c++.</p><p>All files have been added to the Github repo, with all files released under the same original license in hopes the code will be included in the adafruit libraries from default. Here is what the prototype and display looks like now with the screen reoriented and the number pad drawn. You'll see that in the previous arduino sketch I had the background white and numbers black but I decided to flip them to save on battery consumption in the future.</p><p><img src="https://cdn.hackaday.io/images/4437941408824726139.JPG"></p><p>As you can see I've changed a few of the wires, the SPI reset and Vcc is held off to the side, while pin 9 and 10 are now reset and CS respectively, this was mainly done because the CS on the SPI or pin 52 didn't seem to be working everytime and sure enough if you look at the pinout for the Due on the repo in references you'll see its not recommended per se. And the RESET is easier to soft reset rather than reset the arduino to reset the screen.</p><p>Its my girlfriend's birthday today so I probably won't get any more work done, but I'll be back on tomorrow, enabling the first of the touchscreen and input. Until then happy hacking</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/9146-learning-refining-and-ordering">Learning, Refining, and Ordering</a></h2>
                            <small class="authorship">a year ago  &bull;
                                <a class="gray-link" href="/project/2478/log/9146#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-9146"><p>&nbsp;&nbsp;&nbsp; So today was pretty much a day of reading, experimenting, failure, more reading, experimenting failure, in fact this last statement could be put into a while statement for when c=0, c==20, c++ to say the least. But with each failure I learned something more that I either knew an immediate solution, knew what to look for, or know I don't know how to solve it yet. So the first problem with with the programming port on the Due. The Due wouldn't upload correctly continuously, so my first solution was to reset the com port in windows, in this case I just went through the driver manager and changed the com port to port 5 and noticed you could change the baud rate....hmmm....that might be nice, faster uploading on the Due perhaps, set to 19200. Well the com port change didn't help, so next, google it. I read through some forums where people were saying that R23 is 10k when it should be either shorted or 1k to be safe. So I went hunting through the schematics and diagrams of the Due to find that indeed R23 is in series to the RESET for the Due, with an high ohm internal pull-up resistor 10k in series would significantly drop the voltage not allowing the RESET to go high, but this doesn't apply to me as my Due has the updated board with 1k ohm R23, damn, but there in lies the solution, the RESET probably isn't getting pulled high or perhaps some off pin needed to through into programing, as I do have more boards and chips being supplied by the ever so finite USB port. So I threw on an external power supply at DV 9v 800ma and sure enough that's all it took, programing and uploading fixed.&nbsp;</p><p>&nbsp;&nbsp;&nbsp; Next was trying to register touches on the screen, yet for some reason when I did so I couldn't register any touch, well time to dive into the libraries and RA8875 reference. The solution lied in the fact that in order to receive touch input from the registers you need to enable graphics mode with</p><p>tft.graphicsMode();</p><p>so in the end another simple fix.</p><p>&nbsp;&nbsp;&nbsp; Next was to create a layout that allowed me to draw a matrix of x and y values that when touched would output a specific function or character, while doing once, yet allowing it to be repeated, but only repeated after so long. Yeah. That one took a while. First I needed to specifically map out the pixels I wanted to use as input, next I needed to define the matrix per number on the pad as a specific output, but worst was trying to get the de-bouncing gremlin/demon/asshole to stop inputting two characters, this took a while to find a perfect or near perfect solution. In the end the best was to use a timer that I could use an if statement asking if the timer had passed a certain amount of milliseconds then read the value of tx and ty and perform this function,</p><p>//variable definition timelast</p><p>long timelast = 0;</p><p>//the if statement</p><p>if (millis() &gt;= (timelast + uint8_t(250)))</p><p>which just says if millis() is greater than or equal to the variable timelast plus 250 is satisfied then perform</p><p>if (tx &gt; 605 and tx &lt; 675 and ty &gt; 185 and ty &lt; 305)<br>  {<br>  delay(50);<br>  Serial.print("1");<br>  delay(50);</p><p>which uses a second if statement to ask if a touch has been detected in the matrix defined, delay 50millis print to the console 1 then delay another 50 millis, which then repeat for other numbers like so</p><p>if (tx &gt; 108 and tx &lt; 180 and ty &gt; 443 and ty &lt; 577)<br>  {<br>  delay(50);<br>  Serial.print("0");<br>  delay(50);</p><p>with all the center points and boundaries defined in the note in the sketch, and last the end of the original if statement</p><p>timelast = millis();</p><p>which just takes the value of millis as of that point and redefines timelast. This solution works pretty well, the input is pretty steady and consistent, while allowing for normal dialing speed, and repeating numbers in the dialing sequence. All the new code and files have been uploaded to use or follow along. My step is to take the input from the number pad, create a value, store the value in a buffer of some kind, then when asked input buffer into an AT command and write to the GPRS shield effectively completing the first call from the phone using nothing but the components.</p><p>&nbsp;&nbsp; I'm also looking for a name for the phone, so far I've only come up with Genesis and LibrePhone, let me know what you think or if you have something better. As always happy hacking</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/10514-working-phonesomewhat">Working Phone....somewhat</a></h2>
                            <small class="authorship">10 months ago  &bull;
                                <a class="gray-link" href="/project/2478/log/10514#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-10514"><p>So I know its been a while but this is a good update. I have completed all the software required to dial out, look at the number dialed, call, answer, receive, clear the screen etc. It tooks a little bit of doing, and a brilliant idea if I might say so, but the way I made the dial part work was to hack the way cpp uses strings. In cpp it uses a character array in order to store the strings, and you can concatenate the string with an additional character. So I started by first declaring bufStr at "ATD" the first part of the AT command required to initiate a call, then for each touch space area I used bufStr += "(number wanted here". Thereby you enter 10 numbers you get something like bufStr = "ATD1234567890" with all the neccessary digits reuired to initiate a phone call, the only last needed characters are, bufStr += ";\r\n", while the carriage return and newline actually took me reading the HEX code coming from the commands sent from the SSCOM32.exe program, and then back tracing them on an ASCII table to the appropriate characters. Then define a new touch area with the character C, and have it send bufStr by serial1.write() to the GPRS shield, only thing is it needs to be in characters, not a defined string. So that too is an easy fix by using the toCharArray function in Arduino, with the resulting command looking like so <br></p><p>bufStr.toCharArray(charBuf, 16);<br> Serial1.write(charBuf);</p><p>16 being the 16 bytes of characters needed to transmit. I then need to create a way to to see the numbers dialed in progress. Suffice it to say, this was much harder, and in the end, I used a switch statement with each touch field. I guarantee this isn't the best way, but at this moment, I couldn't find any other way to do it, and I tried a few, but I also guarantee its my inexperience in coding, so please chime in and correct me if you can or want. So an example for the "1" digit it looks like</p><p>if (tx &gt; 605 &amp;&amp; tx &lt; 675 &amp;&amp; ty &gt; 185 &amp;&amp; ty &lt; 305) {<br> delay(50);<br> bufStr += "1";<br> place++;<br> tft.textMode();<br> tft.textRotate(true);<br> tft.textColor(RA8875_WHITE, RA8875_BLACK);<br> tft.textEnlarge(2);<br> switch (place) {<br> case 1:<br> tft.textSetCursor(75, 40);<br> break;<br> case 2:<br> tft.textSetCursor(75, 60);<br> break;<br> case 3:<br> tft.textSetCursor(75, 80);<br> break;<br> case 4:<br> tft.textSetCursor(75, 100);<br> break;<br> case 5:<br> tft.textSetCursor(75, 120);<br> break;<br> case 6:<br> tft.textSetCursor(75, 140);<br> break;<br> case 7:<br> tft.textSetCursor(75, 160);<br> break;<br> case 8:<br> tft.textSetCursor(75, 180);<br> break;<br> case 9:<br> tft.textSetCursor(75, 200);<br> break;<br> case 10:<br> tft.textSetCursor(75, 220);<br> break;<br> }<br> tft.textWrite("1");<br> delay(50);<br> }</p><p>with place declared at the top at 0. In this way each character is written in order, by the number in the array it falls to. Last is to place the call with touch zone "C"</p><p>if (tx &gt; 800 &amp;&amp; tx &lt; 1024 &amp;&amp; ty &gt; 0 &amp;&amp; ty &lt; 200) {<br> delay(50);<br> if (bufStr.length() == 13) {<br> bufStr += ";\r\n";<br> bufStr.toCharArray(charBuf, 16);<br> Serial1.write(charBuf);<br> // reset string<br> bufStr = "ATD";<br> // clear onscreen display<br> tft.graphicsMode();<br> tft.fillRect(75, 40, 75, 200, RA8875_BLACK);<br> place = 0;<br> }<br> delay(50);<br> }</p><p>I have it reset the string each time whether C, A, or H was touched, letting H be almost a clear on all accounts. And to clear the text of numbers dialed I just draw right over the top of them. At some point in the future I want to be able to backspace a character, display a call coming in, have dynamic screens, and ultimately have text messaging, as right now all texts have to be answered by my computer. And I haven't really looked further into off storage of texts, but a while back I saw an AT command for offload to storage, so I'll be exploring that further. Anyway good luck and have fun, next post will be all the units in a portable container.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/11013-much-much-much-more-features-getting-cool">Much, much, much more Features (Getting COOL)</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/2478/log/11013#discussion-list">
                                    1 comment
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11013"><p>    So a couple weeks ago I got sick and although I hated it, it did give me a lot of free time to program, so this next roll out it a pretty big one. Tons of code enhancements and optimizations, including new functions, but most of all the phone is looking awesome. There is a new passcode lock, and dedicated screen, and new dedicated screens for home, phone, and sms. I also implemented a power led, new message led, and missed call led, along with a button to turn the display on and off, with a lock at each push, an answer screen (still don't know how.tf ignore works on modern phones), and the display reacts to incoming data from the GPRS. Suffice it to say, lots of cool stuff, where the only missing is a send SMS screen, which I'm currently working on, and then its fully portable and ready to go, abliet low memory for SMS, but that'll come as a quick second thing to do. <br><br>     I've also done some preliminary power tests, and the GPRS shield uses 7mA with the SIM900 powered off, 17mA powered up, and 7mA when in sleep mode (AT+CSCLK=2, any data on UART will wake it, just make sure to add some garbage bytes at the head stream), while in sleep mode it periodically wakes up to check the network. The display driver uses 52mA, and the display uses 144mA while on. I'm also working on sleep modes and reading datasheets on the SAM chip to figure out if there is any efficiency I can pull from it, otherwise I'm using &gt;240mA with display on and &gt;140mA with the display off, which with a current/modern lipo battery that would give me 22hours stand by time, and 12 hours usage, which I think sucks. I'd like to double those numbers if possible, and get quite literally the lowest possible power consumption, while still workable. Which is why I'll be playing around with both the sleep modes on the SIM900, and the atmel SAM, and possibly completely cut power to the display driver with a transistor, and a light sensor to shut off display when the phone is up to a persons face. All in the hopes of droping the power usage down to just a few mA, say like 10, giving me a 12 day standby time, and 30-40mA during call, giving a 77 hours talk time, which sounds a lot better to me. And just for you smart readers out there, I'm using mA right now just because its easier to estimate and judge, in the future I'll come back with exact watts.<br><br>     As for now have fun, and hack away, its really starting to look cool, and act well I think. <br><br>PS. I fried my SAM chip and had to order a new one from mouser for $14, so if your following along, don't accidently touch any power leads to exposed pins or blam, you'll get the same. And if you need to check the chip, while everything is unplugged, do a continuity test from the GND pin to any of the voltage pins, if its a yes, bye bye chip. To replace the chip cheaply, which I currently don't have enough money for a hot-air rework station, I just used a frying pan on my stove top, and used my non-contact thermometer to guage the stove-top setting, shooting for around 240-280C. Be prepared for small melts of the plastic, and little smoke from the bottom silkscreen.</p><p>Pictures using my MEGA for reasons stated above (had to use 2400 baud instead of 38400)</p><p>===================================BOOT SCREEN==================================<br></p><p><img src="https://cdn.hackaday.io/images/7702101415754251516.JPG"></p><p>================================PASSCODE SCREEN================================</p><p><img src="https://cdn.hackaday.io/images/7395431415754457495.JPG"></p><p>==================================HOME SCREEN==================================<br></p><p><img src="https://cdn.hackaday.io/images/4826571415754241633.JPG"></p><p>=================================PHONE SCREEN=================================</p><p><img src="https://cdn.hackaday.io/images/2618311415754410350.JPG"></p><p>==================================SMS SCREEN==================================</p><p><img src="https://cdn.hackaday.io/images/9264581415754426385.JPG"></p><p>=================================ANSWER SCREEN=================================</p><p><img src="https://cdn.hackaday.io/images/9874051415754485938.JPG"></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/11151-bitwise-operations">Bitwise Operations</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/2478/log/11151#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11151"><p>So interestingly when I went to go write the code for the sending screen for SMS, the screen scanning functions didn't work. After doing a formal research I found that in the code when it reads the registers from the the ra8875 driver, it stores it as uint8_t or a 8-bit character or char. When I wrote the code <br><br>writeReg(0x20, ((1 &lt;&lt; 4)));<br><br>I thought I was saying at bit 4 flip to one, in fact this isn't the case. The &lt;&lt; operator actually means shift, so I was shifting a 1 into bit 4 from bit (3 or 4), still haven't fully learned the logic and syntax yet, when what I wanted was just to flip the 4th bit, then for the other functions the 3rd bit and/or the 2nd bit, depending on the functions. This is where the bitwise operators come into play. The basic operators are ^= meaning XOR, &amp;= meaning AND and |= meaning OR. Now here's how they work. For all scenarios we'll be using 8 bits. For XOR lets say you read the number 106 and store it in the variable uint8_t. If you were to read that back it would show 106. But what we need to be looking at is the binary, for this you can do it by hand, or with a calculator, I used which one in the OS I was at the time, and I can confirm both Windows and Linux calculators have programmer mode, albeit I prefer the Linux version, straighter to the point. So the number 106 in binary is 0110 1010. If we were to use the the binary sequence 1001 0101 with the operator XOR the result is as follows<br><br>0110 1010<br>1001 0101 XOR<br>-------------<br>1111 1111 result<br><br>So if you follow the logic, everything is flipped so long as there isn't the same bit in the same sequence here's another couple examples.<br><br></p><p>0110 1010<br>1111 0101 XOR<br>-------------<br>1001 1111 result</p><p>1001 1111<br>1001 0101 XOR<br>-------------<br>0000 1010 result<br><br>So its pretty simple logic, the and and or operators are identical to there normal counter parts, if using AND and both bits in each sequence is a 1, then its a 1, if both are 0, then its a 0. If using OR then only one of the bits in the same sequence needs to be a one for it to be a one. Examples<br><br></p><p>1001 1111<br>1001 0101 AND<br>-------------<br>1001 0101 result</p><p>1001 0101<br>1111 1010 OR<br>-------------<br>1111 1111 result</p><p>The next step is to actually use them, and do real operations. In the cpp file of the ra8875 library, the function scanV is as follows<br></p><p>void Adafruit_RA8875::scanV_flip(boolean V_scan)<br>{<br> if (V_scan) {<br> writeCommand(0x20);<br> uint8_t temp = readData();<br> temp ^= 2;<br> writeData(temp);<br> }<br> else {<br> writeCommand(0x20);<br> uint8_t temp = readData();<br> temp ^= 2;<br> writeData(temp);<br> }<br>}<br><br>Now as you can see I've already made the neccesary changes to reflect the operations I wanted, but lets start from scratch. The first part says define a new function called scanV_flip, accept a boolean input, and create a temporary (boolean) variable named V_scan. Next is to check that new temp variable V_scan, and if true, then perform writeCommand(0x20). This is what allows us to tell the driver, hey we are referring to your register address in hex 0x20. Then we create a new variable 8 bits long with uint8_t temp, and initialize it to readData() or the 8-bit sequence located at Register address 0x20. We now have some unknown sequence, that right now we really don't care. What we do want is is to flip the #1 bit in the sequence, like this XXXX X_XX. So if its a zero, make it a 1, if its a 1, make it a 0. For this operation I decided to use the XOR operator for the logic stated above. Now the number 2 is used because when we represent the number 2 in binary (using 8-bits) 0000 0010. So now matter whats int the rest of the sequence we'll only flip the 2nd bit. Lets say we wanted to flip the 3rd bit, XXXX _XXX. We would use the number 4. This is because each bit in the sequence is really just 2 ^ of that bit. So bit 0 is XXXX XXX_ and is equal to 1  (2^0), and bit 7 is _XXX XXXX and is equal to 128 (2^7). So we can write any sequence of binary in any number want by just knowing the bit we want to operate. Another example its lets say we wanted to flip the 3rd, 4th, and 7th bit, again I would use the XOR operator and write <br><br>temp ^= 152; <br><br>Because 1001 1000, with the bits 3, 4 and 7 flipped to one. So if we had the sequence read from the Register address 0x20 read out 44, or 0010 1100. Then after the XOR operator using temp ^= 152; the same address would read, 180 or 1011 0100 in binary. <br><br>I've corrected my mistake in the libraries and uploaded the new versions to Github. This was a good learning experience and a real wtf is going on. Especially when I would use just one function and it would work, but not two, and not if the same one was used again? Took awhile but that's the result. Good old fashioned learning by failure, after failure, and the desire to get it right.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/2478/log/11245-wrong-yet-againsigh">Wrong yet again.....sigh</a></h2>
                            <small class="authorship">9 months ago  &bull;
                                <a class="gray-link" href="/project/2478/log/11245#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-11245"><p>So I was wrong again on the implementation of the functions for scanning flip for horizontal and vertical, and the text Rotate. I was ^= for both the true and false statements, which didn't work out well with the logic. Here's the logic needed, if 0 and false, remain false, if 0 and true, change to 1, if 1 and true, remain 1, if 1 and false change to 0. With my implementation it was just a switch statement, whether you used true or false, whatever is there will get a XOR of 1 or 0 depending on whether you said true or false, thereby switching no matter what. In the end the result I currently have and seems to be working with no bugs, for true use temp |=, which flips 0 to 1, but leaves 1 if true is used elsewhere, and for false,  temp &amp;= ~ which checks if 1 flip to 0, if 0 leave 0, where the ~ means to flip or NOT. Here is an example of the scanV_flip function<br></p><p>if (V_scan) {<br> writeCommand(0x20);<br> uint8_t temp = readData();<br> temp |= 4;<br> writeData(temp);<br> }<br> else {<br> writeCommand(0x20);<br> uint8_t temp = readData();<br> temp &amp;= ~4;<br> writeData(temp);<br>}</p><p>Currently all the functions are working as intended, but if you find otherwise just let me know and I'll do some debugging. Hopefully this is the last revision of this particular code.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'tpRNjizz-lbxNEisdCmsqWIqLMUNiWuJd-1U';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>