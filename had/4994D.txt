<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; BSU - BS Free USB &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F15800">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/4994">BSU - BS Free USB</a>
                    </p>
                    <p class="description-summary">How is it 2015 and USB to Serial is still a thing?</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/6668-coflynn" title="Visit Profile">
                                coflynn
                            </a>
                            <span>&bull;</span>
                            5 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p>This project aims an ongoing and serious issue in my community - the community being that of hardware developers. The serious issue is how much hassle it is to communicate to devices over USB.</p><p>No more specialized chips. No more expensive one-off boards. No more issues forcing you to install root signing certificates or disable driver signing on Windows. Just sweet sweet USB.</p><p>This project falls in the realm of quazi-commercial. It's run through my company (NewAE Technology Inc.) to provide some needed business stuff (such as signed drivers for the USB devices), but it's not being run to make a lot of money. Instead it's run to solve an extremely frustrating problem.</p><h2>Overview of the Solution</h2><p>Several companies make awesome microcontrollers with USB interfaces. I most frequently use Atmel or Microchip devices, but there are also solutions from NXP, Cypress, and more.</p><p>These chips are cheap - Microchip has some (such as the PIC16F1454), which is <a href="http://mouser.com/ProductDetail/Microchip-Technology/PIC16F1454-I-SL/?qs=sGAEpiMZZMvqv2n3s2xjsZrsqiNldtFlMElIR%252bsMJOA%3d">only $1.50(!)</a> in onsies. It's pretty basic (doesn't include a programmer), so if you want a more advanced chip <a href="http://mouser.com/ProductDetail/Atmel/ATXMEGA128A4U-AU/?qs=sGAEpiMZZMtQuSbTnHsVtv%2fcTIk9%252b7dN">see the Atmel XMEGA for under $5</a>. Need high-speed? Also possible for a low cost... I use an Atmel SAM3U device in my ChipWhisperer-Lite project.</p><p>I'm providing firmware for these devices, along with a simple Python interface. Toggle IO pins, read from the ADC, send SPI or UART data. The Python code just uses libusb (via pyusb), so you can talk to this device with C/C++ instead too. But the idea of Python is to make a simple enough solution for most users. </p><p>So imagine something like this:</p><pre class="hljs python"><span class="hljs-comment">#Example of how I plan on the BSU API working, this will rely on</span>
<span class="hljs-comment">#using libusb/pyusb for actual low-level USB comms. This just adds</span>
<span class="hljs-comment">#an API for talking to the firmware in the device</span>
<span class="hljs-keyword">import</span> bsu

<span class="hljs-comment">#BSU will support detection by USB serial number, along with a user </span>
<span class="hljs-comment">#GUID, eliminating the requirement for a central repository of user</span>
<span class="hljs-comment">#PIDs. This example just opens the first BSU device</span>
devlist = bsu.find()
dev = bsu.open(guid=devicelist[<span class="hljs-number">0</span>][<span class="hljs-string">"guid"</span>])

<span class="hljs-comment">#Set IO pins high or low - by default will automatically set as</span>
<span class="hljs-comment">#an output for high/low</span>
dev.set_io(<span class="hljs-number">5</span>, <span class="hljs-keyword">True</span>)

<span class="hljs-comment">#Read ADC channel voltage, channel auto-configured as analog</span>
<span class="hljs-comment">#input by this call too</span>
v = dev.read_voltage(<span class="hljs-number">1</span>)

<span class="hljs-comment">#Write something to an internal register in the chip - makes it easy</span>
<span class="hljs-comment">#to extend the API to access peripherals not otherwise exposed</span>
dev.write_reg(<span class="hljs-number">0xAF</span>, <span class="hljs-number">0x22</span>)

<span class="hljs-comment">#Avoid USB traffic delays with simple routines to wait for bits to be</span>
<span class="hljs-comment">#set/cleared (i.e. for waiting status change)</span>
dev.wait_reg(<span class="hljs-number">0xAF</span>, <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">5</span>)

<span class="hljs-comment">#Simple SPI routines and whatnot</span>
spidev = dev.spi(MOSI=<span class="hljs-number">1</span>, MISO=<span class="hljs-number">2</span>, SCK=<span class="hljs-number">3</span>, autoCS=<span class="hljs-keyword">True</span>)
resp = spidev.write([<span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0C</span>])

<span class="hljs-comment">#More advanced routines for stuff like AVR programming a target</span>
dev.program_avr(MOSI=<span class="hljs-number">1</span>, MISO=<span class="hljs-number">2</span>, SCK=<span class="hljs-number">3</span>, flash=<span class="hljs-string">r"c:\somewhere\test.hex"</span>)

<span class="hljs-comment">#Maybe even FPGA programming via slave serial protocol? It's all</span>
<span class="hljs-comment">#done with SPI so might be slow due to USB traffic but in a pinch</span>
<span class="hljs-comment">#would work. I've already got some of this code on other platforms.</span>
dev.program_xilinx_s6(DO=<span class="hljs-number">1</span>, CLK=<span class="hljs-number">2</span>, PGM=<span class="hljs-number">3</span>, DONE=<span class="hljs-number">4</span>, bitstream=<span class="hljs-string">r"c:\somewhere\test.bit"</span>)

<span class="hljs-comment">#I'd also like to implement a basic comm protocol, so you can use</span>
<span class="hljs-comment">#BSU for talking to your existing device, but without having to</span>
<span class="hljs-comment">#make a complex protocol. So something like:</span>
data = bsu.wait_for_data()
<span class="hljs-comment">#Where the underlying protocol gets the data along with variable</span>
<span class="hljs-comment">#name somehow, so you can just do:</span>
<span class="hljs-comment">#print data</span>
<span class="hljs-comment"># data.temperature = 24.445</span>
<span class="hljs-comment"># data.timestamp = "10:04:33"</span></pre><h2>Buying the Units</h2><p>This is far from the first solution aiming to provide firmware for an existing microcontroller. In fact a number of companies have offered this exact solution for a long time. Instead my project aims to make this less painful - rather than physically forcing you to somehow buy a preprogrammed microcontroller, you buy the microcontroller from a distributor (such as Digikey or Mouser), and program it yourself. If buying a lot of devices just buy them preprogrammed from the manufacture (such as at <a href="http://www.microchipdirect.com/" target="_blank">http://www.microchipdirect.com/</a>).</p><p>With any luck some of the regular distributors such as Adafruit and SparkFun will pick these up and start selling them preprogrammed, maybe even they will be sold by Hackaday themselves? How easy would that be?</p><h2>Why Doesn't This Exist?</h2><p>There is lots of discussion about the problem with using USB in open-source products (in particular buying a VID, and getting signed drivers). It all costs money, something regular OS projects don't have. And according to membership agreements you can't share these between companies, so it's not something that a larger organization such as the OSHWA could do on behalf of members.</p><p>This means you need a commercial product which gets integrated into your project. The extremely low cost almost guarantees this won't make money (for me anyway, the distributors might). I'd have to sell &gt;50000 licenses/year to even begin covering the cost of memberships + certificates. Making this a reasonable business would be looking at &gt;1000000 licenses. While I enjoy dreaming big, it's just not happening.</p><p>That is basically the reason this doesn't exist yet. There is no business model. While the silicon vendors could provide the demo firmwares, they don't want to be caught supporting them. Because I'm running this as a small business, I'm perfectly happy to tell you get get stuffed if you email me looking for support on your $0.10 license.</p><p>It's not entirely open-source, since you can't modify the code and use my VID. But I'm planing on making the end device flexible enough you can do 'most things you want', and if I get enough requests for specific features might add it in.<br></p><h2>Current Status</h2><p>Currently this project is very much in the 'idea' phase. It's something I've thought about on and off for a few years now. Having some cash from the Hackaday Prize 2014 helped encourage me use it to give back a bit to the community, as some of that money was used in getting HW &amp; required USB membership to make this project a reality. I'm hoping to have time to get the firmware + software done over the summer, but we will see.</p><p>I'm going to use the Microchip PIC16F1454/5 device initially, as it's the cheapest thing I could find. It's also in a DIP package (along with SOIC and QFN), making it suitable for a range of targets - breadboard to tiny dongle.</p><p><span></span><br></p>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '8VYhQK2P-OWmsdV0fMlIntb11-_XSn9cLkG4';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>