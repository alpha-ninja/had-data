<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Modular Vertical Farming &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F5084%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/5084-modular-vertical-farming">Modular Vertical Farming</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">Growing food where it&#39;s needed, ready to be sold.</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/128-alphaninja" title="Visit Profile">alpha_ninja</a><span>&bull;</span>
                
                5 months ago<span>&bull;</span><a href="/project/5084#discussion-list" title="See Comments">1 Comment</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/5084-modular-vertical-farming">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/5084/logs/sort/newest">Newest</option>
                    <option value="/project/5084/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/5084/log/16032-modeling-module-meditations">Modeling &amp; Module Meditations</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/16032#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16032"><p>I have begun with modeling the plant containers, for which I'm using OpenSCAD.<br>Here's a picture of my current progress:</p><p><img src="https://cdn.hackaday.io/images/6230861428069455272.png">The plants, soil, and watering tube are in the image to clarify usage.</p><p>Finished modules will contain:<span></span> (not a final BOM yet. Just some thoughts)</p><ul><li>~ $0.30: a small LED indicator (probably a red/green LED),</li><li>~ $3.50: a microprocessor (probably an atmega, not sure which one yet)</li><li>$???: connections for power and I²C (I've had problems finding good electrical connectors for this application. Any ideas?)</li><li>~ $4.00/m: LED strip(s) to provide light (likely red/blue)</li><li> Irrigation connector (likely normal 1/4" irrigation connector and tubing for prototypes)</li><li> ~ $2.00/m: Irrigation tubing (probably silicone)</li><li>~ $1.50 Soil humidity sensor (the price is for one you'd find on amazon. I might be able to integrate this to the board [and seal it off with silicone], thus reducing costs.)</li></ul><p>I'll post the .scad files  eventually (when I have figured out the mounting and connection methods I want to use and have integrated those into the model.)</p><p>The container will likely be 3d-printed for the prototypes. Injection Molding would be preferable (after optimization therefore) for a larger-scale run.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/16150-organizational-structure">Organizational Structure</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/16150#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16150"><p>An image depicting the organizational structure I plan of having:<img src="https://cdn.hackaday.io/images/2718431428306244937.png">I've thought a bit about the organizational structure of the project. I've come to the following conclusions:<span></span></p><ol><li><strong>Modules should not "think on their own"</strong>, but rather do the following things when the controller requests them:<ol><li>Enable/disable grow lights</li><li>Give Hygrometer readings</li><li>Change status indicators</li><li>Report their unique ID, module size (!), plant type (?)</li></ol>Controllers will ping each position every few seconds to find new and removed modules.</li><li>Plumbing should be handled  by the controller. It should control the valves based on the reported hygrometer status. It is probably a good idea to do one of the following:<ol><li> <strong>Have a valve for each module</strong>, <em>directly controlled</em>. Better precision in plant watering.</li><li><strong>Have
 a valve for each module</strong>, directly controlled. However, the 
<strong></strong><em>valve power would run through the module</em>, ensuring water doesn't flow <em>unless a module is present</em>.  The controller can only turn all on or off. (Makes controllers easier, but probably not worth price of extra valves - 1. probably a better idea)</li><li><strong>Have a valve for each module</strong>, <em>controlled</em> <em>by the module</em><em></em>. The controller would probably tell the module whether it should water itself. The controller won't have to control so much with this approach.</li><li><strong>Have
 a valve for each section</strong>. In this case, missing modules would mean 
water leaks, but this can be averted by asking all positions for their 
modules (and the modules' sizes) and simply waiting until every position is populated. This might require dummy modules that don't permit water from entering to plug the water connection.</li><li><strong>Have a valve for each section</strong>. Figure out a way to (mechanically)<strong> shut off water flow if no module is present</strong>. Although this may be more preferable than 3., this would likely bulk up the frame more than I'd want. Some kind of lever connected to a spring pushing it to close the silicone tube</li></ol>1. and 3. are probably the best solutions to this. I like 3. especially because it means the controller itself doesn't need to turn so many things on/off.<br>Should 1. - 3. be chosen, a transistor should probably be incorporated into the frame (near the valve) for switching the valve.</li><li>Grow Lights<br>While solutions 1. (controller controls directly), 3. (module controls for controller), or 4. (controller controls <strong>all</strong> directly) above could be applied to this (2. and 5. are pointless because no power is lost should a module not be attached.), I'm  tending to 3. or 4. The reason it might be nice to control LED strips individually is the different growth cycles of different plants. Different seasons could be simulated for different plants this way.<br>Should 3. be chosen, a transistor should probably be incorporated into the module for switching the lights.</li><li>Thermometers<br>Probably connected to a microcontroller that can communicate directly with the section controller.</li></ol></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/16440-docking-deliberations">Docking deliberations</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/16440#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16440"><p>Hey there!</p><p>I'd like to write a bit about the docking the modules and connectors used today.</p><p>I've chosen 30cm as the minimum side length for the modules. This is since most small-ish gardening pots are around 12" in diameter (about 30cm). Of course, multiples of that figure will be allowed.</p><p>As has been previously determined, each slot will have LED power, solenoid enabling &amp; disabling (to reduce necessary connections: high-impedance for off, GND to enable. The solenoid will be connected to 12V power on the other side), I²C,  +5V, and ground connections. (coming up to 6 ports, assuming a common ground is used.)I've decided to use normal pin headers (the 0.1" pitch type) for the prototype, but give them a protective shrouding that also aligns them. I'm not sure yet just how, but I'll verify that they can be only plugged in one way, probably with a missing pin or a half-pin offset, as can be found on arduinos.</p><p>Thus, the electrical connections are:</p><p style="margin-left: 20px;">GND, SCK, SDA, SOL (solenoid), 12V (for led strip), 5V (for microcontroller.)</p><p>There are two water connections:</p><p style="margin-left: 20px;">Irrigation (solenoid with pressure reducer will be in the frame)</p><p style="margin-left: 20px;">Extra water (might eventually lead to a water filtering system.)</p><p>I'm not sure whether I want the modules to lock into the frame. It's probably not worth the extra cost. I do, however, want some plastic protrusions that align the module to the correct location upon insertion.</p><p>Automated removal and insertion of modules will be relatively easy. Since the modules have overhangs on the sides, robots can latch into these and pull it directly out. It would probably be good to have alignment markings on the modules in this case, though - this would also benefit computer vision setups that monitor the plants.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/16721-ic-troubles-mcu-ideas">I²C troubles &amp; MCU ideas</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/16721#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16721"><p>I²C is great.</p><p>When it works.</p><p>I've been doing a lot of work on the controller-module communication—and, while doing so, I've learned a lot.</p><ol><li>The Raspberry Pi I²C implementation would be a lot better if it had support for clock stretching.<br>(I probably won't be using πs as part of this project.)</li><li>The Arduino Wire library, which I'm probably going to use, has a really weird bug. I'm not sure if it's specific to that library, but it's annoying as all hell</li></ol><p>So, want to know more about that bug?</p><p>Here it is.</p><p><img src="https://cdn.hackaday.io/images/9045201429474558443.png">Yep.</p><p>So, using the line of code you'll find anywhere when you search for "<a target="_blank" href="http://bit.ly/1cML9DL">arduino change i2c frequency</a>", this mess comes out. I'm assuming the stuff at the far left is a result of the exponential curves being shorter than I could detect using 1kHz steps. I'm using an Arduino UNO as master and Arduino NG as slave. I'm using this code:</p><pre class="hljs cpp">TWBR = ((<span class="hljs-number">16000000L</span> / I2C_HZ) - <span class="hljs-number">16</span>) / <span class="hljs-number">2</span>;</pre><p> If you're wondering, I've been experimenting around mostly to see what frequencies I can safely use for this project - the signal will have to go several meters, after all.</p><hr><p>On a slightly unrelated note: I've been thinking about I²C addresses. Here's my thoughts.</p><p>I've decided it makes most sense to add a few pins to the module-frame connections to tell modules where they are (and use that to calculate their address). This means 6 extra pins are needed per module. Theoretically, less could be used with voltage-dividing by resistors and using the analog inputs on the AVRs.</p><p>The addresses should then be assigned based on the top-left position of the module.</p><p>The address for a given spot is:</p><p style="margin-left: 20px;">(row + 1) &lt;&lt; 3 + col</p><p>Thus, each controller should have, at most, 8x8 space for modules (that's 2,40m × 2,40m or [7' 10.5" × 7' 10.5"]). I think this should be enough.</p><p>Examples of addresses (with (x | y) positions):</p><p style="margin-left: 20px;">top left (0 | 0) - 0001000<br>bottom left (0 | 7) - 1000000<br>top right (7 | 0) - 1000000<br>bottom right (7 | 7) - 1000111</p><p>The reason for the row codes starting at one is that some I²C addresses beginning with 000 or 111 are <a href="http://www.i2c-bus.org/addressing/">reserved</a>.</p><p>This method leaves addresses beginning with 101, 110, 0001, and 1110 completely free (that's 48 additional slaves, while leaving the possibility for future use of 10-bit addresses open)</p><p>Of course, it is possible to use I²C switches, but I doubt that will be necessary for my prototypes.<br></p><hr><p>Another thing: I'll probably use <a href="http://www.mouser.com/ProductDetail/Atmel/ATMEGA168PB-AU/?qs=sGAEpiMZZMsn4IaorHFpMHaZoNGvw2tCZZJ4Kc3uehU%3d">AtMEGA168</a>s for the modules. They seem to be the cheapest AtMEGAs on mouser (in a SMD package), and the AtTINYs I was considering (<a href="http://www.mouser.com/ProductDetail/Atmel/ATTINY441-SSU/?qs=sGAEpiMZZMvqv2n3s2xjsbIpYQ1MY%2fsKfWCGs1H7NRjTmZwqvLsyJQ%3d%3d">AtTINY441</a> - the simplest ones with EEPROM and TWI / I²C) are cheaper by only a few cents and not quite as strong.</p><p>For the controllers, a normal arduino is probably all that's necessary. I'll probably use an ethernet connection in the future.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/16798-module-electronics-connections">Module Electronics &amp; Connections</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/16798#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16798"><p>So, I think I've found a good solution for electrical connections between the frame and module. To recap, we need the following connections:</p><p style="margin-left: 20px;">GND, SCK, SDA, SOL (solenoid), 12V (for led strip), 5V (for microcontroller.)</p><p>Now, I've decided to add another 6 pins for module location sensing (which decides the module's I²C address). That brings us to a grand total of 15 pins.</p><p>Of course, something that will used so often in the frame and module needs to be cheap.</p><p>I think I've found the cheapest thing I will. It's ubiquitous, cheap, and the male connector is the circuit board itself.</p><p><a href="http://www.mouser.com/ProductDetail/FCI/10018783-10200TLF/?qs=sGAEpiMZZMtWxQ3D3EXBNw3nQbjtjJvk9eZW81lD2s0%3d">PCIe.</a> Of course it will need sanding on the module PCBs, but I'm sure that will cost much less than most other connectors would in the end. I'll use the 36-position version (that's PCIe x1).</p><p>About module location sensing: I'm not sure what would make sense in an industrial context, but cut-traces (to ground) on the frame PCBs should be enough for me.</p><p>If you're worried about currents being too high for the connector: LED grow light strips seem to take around 600mA/m and the PCIe connector I linked is rated for 1.1A. Just to be safe, I'll probably use more than one pin for this, so I should be good on that front.</p><p>I've decided on this pin allocation:</p><p><img src="https://cdn.hackaday.io/images/1470481429997787384.png"></p><p>I didn't stay that close to the original PCIe allocation in the end.</p><p>Edit 2015-04-25: Added UART connections<br></p><hr><p>About connections within the module: I originally planned to have the microcontroller within the bottom bezel of the board. However, it might make more sense to move this to the top - it is shielded from water there anyway, it's closer to the grow LEDs, and I might get away with one circuit board per module! (apart from the hygrometer). I'm probably going to leave out the indicator LED. Instead, whoever performs maintenance on the system will be able to press a button that causes problematic modules to flash their lights, indicating where they are.</p><hr><p>If you have any thoughts on this, please post a comment. Thanks!<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/16997-stop-hardware-time">Stop! Hardware Time.</a></h2>
                            <small class="authorship">4 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/16997#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-16997"><p>To begin with, I'd love to thank you all for following/skulling this project and the Hackaday team for choosing me for the prize last week.</p><hr><p>I've been doing some work on the hardware aspect of the project (mostly the module part.)</p><p>I started up by whipping this up (please excuse the messiness of the wires):</p><p><img style="width: 269px; height: 285.93px;" src="https://cdn.hackaday.io/images/973611430092847223.JPG"></p><p>I tested it, and I²C, FTDI, and ICSP all work great!</p><hr><p>Then, I went on to KiCad. <span></span>I'm not going to post the schematic because it's just too chaotic, but long story short, here's the preliminary board design:</p><p><img style="width: 473px; height: 138.98px; display: block; margin: auto;" alt="The PCB design" src="https://cdn.hackaday.io/images/9024171430092939869.png"><img style="width: 458px; height: 209.783px; display: block; margin: auto;" alt="A render from KiCad." src="https://cdn.hackaday.io/images/9382831430092945759.png"></p><p>I'll be ordering this from OSHPark soon, but I'll go through a lot of revisions before I'll be done. For example, you might have noticed that the above boards don't include the mosfet and connections that will be necessary for the grow lights or the  hygrometer connections. I will eventually remove all connections aside from the PCIe-ish connector and those necessary for the lights and the hygrometer.</p><p>I'll upload the KiCad Files to the github repo when I feel it's a bit more stable, but if any of you want to see them, just ask.<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/17803-pcbs-arrived">PCBs arrived.</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/17803#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17803"><p>The PCBs arrived from OSHPark!</p><p><img style="width: 343px; height: 257.072px;" src="https://cdn.hackaday.io/images/362761431482787740.JPG"></p><p>I really don't want to do this now, but I'll need to assemble it and sand down the PCIe connector.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/18311-module-pcb-assembly-and-testing">Module PCB assembly and testing</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/18311#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18311"><p>To begin with, I now have a twitter account. I'll be using it mostly for posting minor progress updates, so feel free to check it out : <a href="https://twitter.com/not_beta_ninja">@not_beta_ninja</a></p><hr><p>Now, I'd like to apologize for taking so long to post this (well, nine days. It could be worse :] ). Anyway, here's the board assembled and sanded, fit in a PCIe x1 connector. I decided to put the power pins on the back because they would otherwise be blocking the ICSP pins. Design flaw, maybe, but meh. This is just a prototype ;)<br></p><p><img src="https://cdn.hackaday.io/images/9089571432260227757.jpg"></p><p>It's a pretty tight fit, and one of the boards required a tiny bit of additional sanding in the cutout just to fit, so I'm going to make the connector a bit thinner. No other complaints on the boards though—they came out great!</p><hr><p>Now, on to testing.</p><p>I began with a simple power-on test. Worked! (I preloaded the chip with a blinking sketch with an Arduino NG, using the excellent <a href="https://github.com/carlosefr/atmega">barebones ATMega </a>board files for the Arduino IDE)</p><p>I continued with testing FTDI—no problems. I'm pretty happy I didn't swap TX and RX :P</p><p>Then, I tested the ICSP. That worked great too. I think I'm going to leave out the FTDI connector on future boards, simply because it's not really necessary. TX and RX are still in the connector design, and since I want to keep the UART broken out, I'll just leave that as it is.</p><p>Finally, I loaded up my I²C sketch. It worked communicating with an Arduino UNO, except for a small bug that was quickly squashed ;)<br></p><p>Also, I just checked the resistance through the connector. I'm getting about 0.3 Ohms, which is great.</p><hr><p>What I'll be working on next is:</p><ul><li>LED control—I'll probably use some white LED strips I have laying around</li><li>Solenoid control—I have no clue what to test this with, so ordering one or two of those valves from ebay is probably the easiest solution.</li><li>Connector board—I've already designed the connector footprint in KiCad (as always, ask if you want any files!) but I want to get those other things done first.</li></ul><p>Thanks for reading, have a nice day (or night!)</p><hr><p>Edit 2015-05-26: 0.3 ohms, not 3 ;)<br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5084/log/19777-connection-considerations">Connection Considerations</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/5084/log/19777#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19777"><p>To begin with, I'm sorry for not posting in a long time—I hope I will be able to make a 
lot of updates over the next few days. Regardless, this won't be a long 
project log.</p><hr><p>I've decided to use the Teensy-LC I got as a prize a few weeks back as the section controller.</p><p>The main reason is because of its USB capabilities. In fact, it turns out it's <a href="https://www.pjrc.com/teensy/rawhid.html">relatively</a> easy to use as a raw HID, meaning that sending 64-byte packets between any computer and the teensy is a breeze.</p><p>It also has a relatively high clock speed, so that's great.</p><p>I'll be doing some testing &amp; coding for this over the next few days and will keep you updated.</p><p>Goals for software: (I'll most likely be using python)</p><ul><li>Figure out some kind of protocol</li><li>Get that protocol implemented<ul><li>Both controller and computer-side<ul><li>Run a simulation on the teensy for testing</li></ul></li></ul></li><li>Get some basic GUI going computer-side</li></ul><p>I will eventually get a π set up, connected to the teensy, connected to a few modules.<br></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '3dsP5NXh-HzRQJ1j-d07NSwSnK41DjL5x-6c';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>