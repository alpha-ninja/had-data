<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; World&#39;s first Android autonomous vehicle &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F20480">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/6622">World&#39;s first Android autonomous vehicle</a>
                    </p>
                    <p class="description-summary">An autonomous vehicle that utilizes machine vision as well as data from sensors, to follow street lanes, park and overtake obstacles.</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/78752-platissolutions" title="Visit Profile">
                                platis.solutions
                            </a>
                            <span>&bull;</span>
                            a month ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p>Team Pegasus created an autonomous vehicle that utilizes machine vision algorithms and techniques as well as data from the on-board sensors, in order to follow street lanes, perform parking maneuvers and overtake obstacles blocking its path. The innovational aspect of this project, is first and foremost the use of an Android phone as the unit which realizes the image processing and decision making. It is responsible for wirelessly transmitting instructions to an Arduino, that controls the physical aspects of the vehicle. Secondly, the various hardware components (i.e. sensors, motors etc) are programmatically handled in an object oriented way, using a custom made Arduino library, which enables developers without background in embedded systems to trivially accomplish their tasks, not caring about lower level implementation details.</p><p>The use of a common mobile phone, instead of specialized devices (i.e. a Linux single-board computer), offers much higher deployability, user friendliness and scalability. Android-based autonomous vehicles, which could be deployed on the road, were not found in the literature, therefore the team behind it believes this avant garde work, can constitute the basis of further research on the subject of autonomous vehicles controlled by consumer, handheld, mobile devices.</p><p>This article will cover details on the development and the implemented features of the first Android autonomous vehicle. It was created by Team Pegasus during the last couple of months, within the context of the <a href="http://gul.gu.se/public/courseId/66254/coursePath/46831/ecp/lang-en/publicPage.do" target="_blank">DIT168</a> course, at the University of Gothenburg. The rest of the Team Pegasus who worked on this project and I would like to thank very much were (in alphabetical order): Yilmaz Caglar, <a href="https://se.linkedin.com/pub/aur%C3%A9lien-hontabat/a3/826/154" target="_blank">Aurélien Hontabat</a>, David Jensen, <a href="https://se.linkedin.com/in/ivanovsimeondotcom" target="_blank">Simeon Ivanov</a>, <a href="https://se.linkedin.com/pub/ibtissam-karouach/bb/355/83b/en" target="_blank">Ibtissam Karouach</a>, <a href="https://se.linkedin.com/pub/jiaxin-li/96/405/5a5" target="_blank">Jiaxin Li</a>, <a href="https://se.linkedin.com/pub/dimitrios-platis/97/902/187" target="_blank">Dimitrios Platis</a>, <a href="https://se.linkedin.com/pub/petroula-theodoridou/bb/798/b0a/en" target="_blank">Petroula Theodoridou</a>.</p><p><strong>Related repositories</strong></p><p><a href="https://github.com/Petroula/Android-Car-duino" target="_blank">Android application</a></p><p><a href="https://github.com/davidkron/AutodriveSim" target="_blank">Driving logic</a> (for <a href="http://www.cse.chalmers.se/~bergerc/opendavinci/" target="_blank">OpenDaVinci</a> simulation)</p><p><a href="https://github.com/platisd/AndroidCar" target="_blank">Arduino library</a></p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/IMG_8906.jpg"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/IMG_8906-300x225.jpg" alt="IMG_8906"></a></p><p><strong>Background story</strong></p><p>In the <a href="http://gul.gu.se/public/courseId/66254/coursePath/46831/ecp/lang-en/publicPage.do" target="_blank">DIT168</a> course, offered by professor <a href="http://www.christianberger.net/" target="_blank">Christian Berger</a>, the students who were divided in groups of 8, were tasked to create self-driving autonomous vehicles, that could follow street lanes, overtake obstacles and perform parking maneuvers. In order to achieve that, they were supplied with an RC car, a single board Linux computer (<a href="http://www.hardkernel.com/main/products/prdt_info.php?g_code=g138745696275" target="_blank">ODROID-U3</a>), a web camera (to provide machine vision capabilities to the system) as well as a plethora of sensors and microcontrollers. Over the span of approximately three months, they had to first implement the various features in a virtual simulation environment and then deploy and integrate them on the actual vehicle. The <a href="http://www.cse.chalmers.se/~bergerc/opendavinci/" target="_blank">OpenDaVinci</a> middleware, was suggested by the course administration as both the testing and the deployment platform.</p><p>This was an overview the default course setting, which has been working well over the years the course has been taught. However, “well” was not good enough for us. :-)</p><p><strong>The problem</strong></p><p>To begin with, we did not like how the previous end products looked. Particularly, all of them were characterized by a tower looking structure where the webcam was mounted. Because of that, a hole had to be curved off the vehicle's default enclosure. This plastic enclosure merely serves aesthetic purposes but since it makes the vehicle look like... a vehicle, we considered important to maintain its integrity.</p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/old_car.png"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/old_car-300x242.png" alt="old_car"></a></p><p>Furthermore, the OpenDaVinci platform seemed rather excessive for what we were trying to do. Since OpenDaVinci is designed as a distributed, platform independent solution, that even includes a simulation environment it inevitably is accompanied by a specific degree of complexity, especially when it comes to deployment and use. Do not get me wrong, OpenDaVinci seems to be a software with a lot of potential, however we believed we could make do without it. Last but not least, everyone, all these years has been doing essentially the same thing. Using a Linux single board computer, that is connected to a camera and some kind of microcontroller and sensors, to perform the given tasks. We wanted to be fundamentally different and innovative.</p><p><strong>How</strong></p><p>The three aforementioned problems, a) the “ugly” appearance, b) the excessive software and c) the lack of originality in the default setup, lead us to embrace Android as the optimum solution. Utilizing an Android mobile device, as the entity that handles the decision making, we first of all managed to combine the functionalities of the single board computer and the webcam into one component, thus saving considerable space and scoring many points on the “beauty” scale. Moreover, using a single dedicated Android application, we circumvent the OpenDaVinci's dependencies, difficulties to deploy and space requirements. Finally, such an initiative had never been taken up before neither in the context of the specific course nor globally, therefore we found it particularly intriguing to create something that will really stand out in terms of originality, future potential and of course, performance.</p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/IMG_8902.jpg"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/IMG_8902-300x225.jpg" alt="IMG_8902"></a></p><p>We began development on four different fronts. First, the physical layer on the vehicle which included the assembly of the various components, the design of custom parts and all the programming involved. This is where I was mostly involved in and therefore will describe with more details later. Jiaxin Li, also took part in this part by providing input and valuable help during assembly.</p><p>Then, there was the front end, which included an Android application that communicated via Bluetooth with the on-board microcontroller, that drove the motors and parsed data from the sensors. I was initially involved in setting up the communication channel and protocol, however I soon focused my efforts on the physical layer, due to its increased requirements. Petroula Theodoridou is who worked mostly on this and also is to thank for the intuitive graphical interface and its overall functionality.</p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/Screenshot_2015-06-27-19-20-40.png"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/Screenshot_2015-06-27-19-20-40-300x169.png" alt="Screenshot_2015-06-27-19-20-40"></a></p><p>Furthermore, we wanted to use the simulator included in OpenDaVinci platform so to test algorithms and tactics, before deploying them in the non-deterministic real world environment, where many things can go wrong. The OpenDaVinci environment is written in C++, therefore in order to be able to use the same code on the Android device and the OpenDaVinci simulation, we <a href="http://thebreakfastpost.com/2012/01/21/wrapping-a-c-library-with-jni-introduction/" target="_blank">wrapped</a> the C++ functions with JNI, in order to be able to use it natively through JAVA. The main drawback to this, was the difficulty to debug the C++ side of things. Other than that, migrating code from the simulator to Android, was trivial. Consequently, we had to develop the core driving logic in C++ and create the interface between C++ and JAVA. I was very little involved in these, mostly offering bug fixes and helping my colleagues understand practical limitations when it came to sensor readings and testing on the actual environment. David Jensen contributed in setting up the C++ wrapper and also the lane following, while Aurelien Hontabat worked on the parking. Ibtissam Karouach and Simeon Ivanov, worked on the really challenging task of overtaking. I believe that Jiaxin Li chipped in there too. Last but not least, Yilmaz Caglar tried to enhance our lane following functionality with a PID controller. I will write more on the driving logic features later.</p><p>Finally, there was the image processing, which was written in C++, utilizing OpenCV, so to keep it consistent with the simulator. This enabled us to use sample recordings of the real environment (e.g. by mounting the camera on the vehicle and manually driving it along the test track) in order to test the various machine vision algorithms from the comfort of our laptops. Image processing was a really interesting field, which I sadly did not have the chance to work on at all. However, I was monitoring closely the ones responsible for it and I am glad to say that I picked up a thing or two. Another feature of the application, was that it could visualize the various transformations happening on the phone's screen. This helped us do some on-the-spot debugging but also looks very cool. From a technical perspective, I know that we were applying light normalization, canny edge detection, Hough line transform and finally perspective transform in order to get a bird-eye (vertical) view of the video stream, captured from the phone's camera, in order to later decide how to steer the car. Additionally, there is a custom made “line builder” functionality, that utilizes trigonometry to iterate over the pixels using a probability estimate, so to reduce false positives and decide which pixels or vectors are part of a street lane. David Jensen did a wonderful job on this. The following screenshots are from lines sought and found on... my living room carpet. It looks cooler on the actual track. :-D</p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/Screenshot_2015-06-27-19-21-14.png"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/Screenshot_2015-06-27-19-21-14-300x169.png" alt="Screenshot_2015-06-27-19-21-14"></a></p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/Screenshot_2015-06-27-19-41-391.png"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/Screenshot_2015-06-27-19-41-391-300x169.png" alt="Screenshot_2015-06-27-19-41-39"></a></p><p>The Android application, which we named <a href="https://github.com/Petroula/Android-Car-duino">CARduino</a>, was tested to be successfully working with Jelly Bean, KitKat and Lollipop on the following, 2014, phones: JiaYu G4S, XiaoMi Mi3, OnePlus One.</p><p>You can try our various features (check the various branches), in the OpenDaVinci testing environment, using the resources found in <a href="https://github.com/davidkron/AutodriveSim" target="_blank">this repository</a>. It includes an image of the OpenDaVinci environment, with our image processor and driving logic features (parking, overtaking, lane following) ready to be compiled and ran.</p><p><strong>Features::Innovative hardware platform</strong></p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/IMG_0356.jpg"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/IMG_0356-300x225.jpg" alt="IMG_0356"></a></p><p>The physical platform, was based on a remote controlled 1/10th scale RC car, which we basically hacked, by initially replacing its ESC, DC and Servo motor. It is from the brand HSP Racing and you can find the model we got (or one almost like it) <a href="http://www.hspracing.com/product_view.asp?id=981" target="_blank">here</a>. Next, we used a piece of black hard plastic, in order to create a compartment, on which we placed the microcontroller (Arduino Mega), a gyroscope and cable terminals among other components.</p><p>On one of the wheels, we fitted (with the aid of super glue) a speed encoder and on the front bumper a 9DOF IMU from Sparkfun, the <a href="https://www.sparkfun.com/products/10736" target="_blank">Razor IMU</a>. This board, includes an accelerometer, a gyroscope, a magnetometer as well as an Atmega328p, that runs sensor fusion <a href="https://github.com/ptrbrtz/razor-9dof-ahrs" target="_blank">firmware</a> which in turn calculates the displacement from the north, in 3 axis and transmits it via the Serial port. Sadly, due to strong interference on the magnetometer (and possibly lack of firmware optimization) of the IMU, we could not take advantage of this really cool and expensive piece of technology. Ideally, if we could find a place sufficiently far away from the motors or cables, it would increase the movement accuracy of our vehicle.</p><p>Moreover, inside the red enclosure, that makes our vehicle look like a red fancy race car, we mounted three infrared and three ultrasonic sensors as well as LEDs lamps, that serve as flash and stop lights. In order to organize the cables, we have created a wire bus that connects the middle compartment (with the Arduino and the gyroscope) with the upper one (the enclosure). Moreover, to decrease the number of connections that have to be made from the Arduino, we built a LED driver board, based on the versatile ATtiny85, that receives signals over Serial and blinks the equivalent LEDs.</p><p><a href="https://platis.solutions/blog/wp-content/uploads/2015/06/android_vehicle_bb.png"><img src="https://platis.solutions/blog/wp-content/uploads/2015/06/android_vehicle_bb-300x260.png" alt="android_vehicle_bb"></a></p><p>Currently, there are also two infrared arrays in the front of the car, as well as an ADNS3080 based, optical flow sensor, but I will specifically write more about it when it works satisfactory enough. To be precise, I am waiting for an extra component to arrive from China and when it does, I hope I will be in the position to announce some very good news.</p><p><strong><strong>Features::</strong>Arduino library</strong></p><p>On the software dimension of the physical layer, an <a href="https://github.com/platisd/AndroidCar" target="_blank">Arduino library</a> was created (based on a previous work of mine [<a href="https://github.com/platisd/smartcar_core">1</a>], [<a href="https://github.com/platisd/smartcar_sensors" target="_blank">2</a>]) which encapsulated the usage of the various sensors and permits us to handle them in an object oriented manner. The <a href="https://github.com/platisd/AndroidCar/wiki/API-documentation" target="_blank">API</a>, sports a high abstraction level, targeting primarily novice users who “just want to get the job done”. The components exposed, should however also be enough for more intricate user goals. The library is not yet 100% ready to be deployed out of the box in different hardware platforms, as it was built for an in house system after all, however with minor modifications that should not be a difficult task. This library was developed to be used with the following components in mind: an ESC, a servo motor for steering, HC-SR04 ultrasonic distance sensors, SHARP GP2D120 infrared distance sensors, an L3G4200D gyroscope, a speed encoder, a Razor IMU. Finally, you can find the sketch running on the actual vehicle <a href="https://github.com/platisd/AndroidCar/tree/master/examples/androidCar" target="_blank">here</a>. Keep in mind that all decision making is done in the mobile device, therefore the microcontroller's responsibility is just to fetch commands, encoded as <a href="https://github.com/platisd/Netstrings" target="_blank">Netstrings</a> and execute them, while fetching sensor data and transmitting them.</p><p><strong>Features::Lane following</strong></p><p>Lane following is the primary feature of our autonomous vehicle and utilizes image processing conducted through the OpenCV library, in order to make the car capable of driving within the appropriate street lane. I will not pretend I am aware of all the technical details, but from a high level perspective, we utilized OpenCV to define what is a valid street lane and as long as we are able to find them, we make sure we stay in the middle of the lane. We tried to enhance this with a PID controller, however we faced some difficulties mainly due to time constraints, so we never managed to fully implement and integrate this feature. The lane following feature of our vehicle, which is also the basis for overtaking, has currently a very high success rate at the race track we are using for testing. In a few months, we will be able to try it on a different track and we are hoping for similar results.</p><p>Finally, check out a video of lane following, thanks to David Jensen and his work. The car kept driving seamlessly around the track, until we decided to stop it. Looks neat, doesn't it? :)</p><iframe width="500" height="281" src="https://www.youtube.com/embed/6D2pbcFY8Uw?feature=oembed" frameborder="0" allowfullscreen="" style="-webkit-user-select: none; max-width: 100%; background: transparent;"></iframe><p><strong>Features::Overtaking</strong></p><p>Overtaking obstacles that happen to be in the car's path, is the one of the most exciting and challenging features of the vehicle, since it combines machine vision, with interpreting the inherently imperfect real world data from the sensors. While this feature worked perfectly fine in the OpenDaVinci simulations, with the vehicle successfully being able to overtake many different scenarios, it was very interesting to see how dramatically things differed in reality! A lot of struggle, effort and sleepless nights were invested by Ibtissam Karouach and Simeon Ivanov, however the final result was very rewarding. Particularly, the two main hurdles were for the vehicle to be constantly “aware” of its current relative position compared to the obstacle and the fact that due to the small size of our test track, after overtaking an obstacle we found ourselves on a curve, therefore there was no time to realign with the appropriate street lane. We found a satisfactory work-around for the first problem, with the addition of an infrared array, below the car. This enabled us to know when we are switching lanes, with the infrared sensors sending a signal when they happen to detect the middle dashed line. Of course this is only a temporary solution, adopted due to pressing time constraints and a more “proper” one - based on image processing, both for detecting the presence of an obstacle and recognizing when exactly we switched lane - is being currently devised. Check out a video of our Android autonomous vehicle avoiding obstacles in the video below.</p><iframe width="500" height="281" src="https://www.youtube.com/embed/UCI57yplw4U?feature=oembed" frameborder="0" allowfullscreen="" style="-webkit-user-select: none; max-width: 100%; background: transparent;"></iframe><p><strong>Features::Parking</strong></p><p>Parking was another fun feature that we managed to include in our vehicle's core functionality. It was challenging due to the fact, that we were completely reliant on sensor data, more particularly that of the gyroscope, the speed encoder, the infrared and the ultrasonic distance sensors, to determine the surroundings and park the car. Surprisingly, the amount of noise we would get from the measurements, was not a concern, however we were challenged by the inability of the distance sensors to function properly when facing an obstacle at steep angles. This happens because the ultrasonic wave or the infrared beam, bounces away and never returns to be collected. Thus even if we are close to an obstacle, if the sensor is facing it from a high angle, it is not detected. Unfortunately, this is an inconsistency between the simulator (where everything functions ideally) and the real life behavior of the sensors, therefore we were forced to change the sensor locations and try many things on the real environment, until we would identify the ideal parameters for our algorithms to work. We are planning to improve this feature and make it more versatile, by integrating a mouse sensor, so to increase the car's awareness of its position, as well as researching ways to enhance the procedure with machine vision. Check out a parking video, by Aurelien Hontabat.</p><iframe width="500" height="281" src="https://www.youtube.com/embed/hHplQweMip8?feature=oembed" frameborder="0" allowfullscreen="" style="-webkit-user-select: none; max-width: 100%; background: transparent;"></iframe><p><strong>Retrospective</strong></p><p>This project, was overall very interesting and involved many of the typical challenges faced in physical computing, self driving vehicles and the automotive industry. Another useful experience that I personally acquired, was how to manage and motivate a relatively large software development team, with different technical backgrounds, priorities and availability. Sailing uncharted waters, attempting something that has never been done before and having to be continuously innovative in order to resolve issues, did not make things easier. Although, judging by the final result, I believe a good job was done. It was also exciting to see our efforts recognized, outside the academic community. Particularly, we were invited to present our vehicle at <a href="http://hiq.se/" target="_blank">HiQ</a>, which is a large IT consulting company. Click on the link, to check out more about our <a href="http://www.meetup.com/Embedded-Gothenburg/events/222782940/" target="_blank">presentation at HiQ</a>. Furthermore, we also had the honor to demonstrate some features of our vehicle during the Chalmers University president's, Karin Markides, <a href="http://www.chalmers.se/safer/EN/news/news-archive/chalmers-university" target="_blank">inauguration ceremony</a>, organized by <a href="http://www.chalmers.se/safer/EN/projects" target="_blank">SAFER</a>.</p><p>I should also express our gratitude, for our professor <a href="http://www.christianberger.net/" target="_blank">Christian Berger</a>, who offered us the chance to follow a fundamentally different approach to his course and to innovate and productively express our creativity. I know from experience, this is not always the case in academia. Moreover, if you are interested on building autonomous vehicles and a more complete, platform independent and polished solution, do not forget to check the <a href="http://www.cse.chalmers.se/~bergerc/opendavinci/" target="_blank">OpenDaVinci</a> platform and its <a href="http://opendavinci.readthedocs.org/en/latest/" target="_blank">documentation</a>!</p><p>To conclude, it is my firm belief, there is a lot of potential for future research and development on the subject and I hope that the work done thus far can be the starting point of something bigger, that will change the way we view transport.</p>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'OfcH2q8F-11GW1dE0-hwGt5O5aLzp4aSIlHE';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>