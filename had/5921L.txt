<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; GroBots - OpenGrow &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F5921%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/5921-grobots-opengrow">GroBots - OpenGrow</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">At is essence and automation system, as Grobots, a set of modular Bots that control any type of agricultural growing system</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/69842-joao-melo" title="Visit Profile">Joao Melo</a><span>&bull;</span>
                
                3 months ago<span>&bull;</span><a href="/project/5921#discussion-list" title="See Comments">9 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/5921-grobots-opengrow">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/5921/logs/sort/newest">Newest</option>
                    <option value="/project/5921/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/5921/log/19756-mechanical-journey">Mechanical Journey</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/5921/log/19756#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19756"><p>When we first start developing the GroBots, the first thing we needed was to understand how the product would look and feel. For that we outsourced some concept designs, that were brainstormed between me, Eddie Piazza and Ryan Roberts the designer on the project.</p><p>We need to think in two different type of boxes.</p><p>A first one to handle all generic modules, the smaller GroBots that mainly handle sensors and low power actuators. <a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_GN_Render.png"><br></a><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_1.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_1-300x171.png" alt="Concept_Design_1"></a>And a second one to handle high voltage,  energy hunger grow peripherals, like HPS lamps.<a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_PB_1.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_PB_1-300x188.png" alt="Concept_Design_PB_1"></a>We started to realize, when brainstorming the smaller GroBot box, that it would need to be very versatile, since it was harboring some different types of electronics, connectors, and addons like OxiBot solar panel or battery.<img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_2-300x185.png" alt="Concept_Design_2">Finally we reach the sketch that could do all this things, and most of all, it was clean, we didn't want to make a control system with industrial aspect, we wanted something that screams modern. This was one of our best/worst decisions.<img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_3-300x156.png" alt="Concept_Design_3"></p><p>So we got some renders from Ryan, and they looked awesome, as an Engineer I was already scratching my head and thinking. How the hell are we bring this to production.</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_GN_Render-300x185.png" alt="Concept_Design_GN_Render"></p><p>It obviously requires a plastic case, to prototype it's totally possible with a 3D printer, but to take it production we would need to make a steel injection mold, and those are not cheap.</p><p>Without talking about it, we decided that at that stage we should not think in costs, but think about the dream product we wanted to build, we would step down when engineering problems started to show up.</p><p>So for PowerBot we went with the same a approach, and worked with Ryan with some more concept designs.</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_PB_2-300x187.png" alt="Concept_Design_PB_2"><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_PB_Render.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_PB_Render-300x181.png" alt="Concept_Design_PB_Render"></a></p><p>It also looked really clean and high tech, the cables where organized, and protected by a cover, but this case would even bring us more troubles in production, it's big and made of several different plastic parts that would be really expensive to create. We were aimming to 8 power sockets at that point, we soon realized we should make it for 4, trying to reduce injection molds costs, and also 8 is a little bit too much.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_PB_Render_2.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Concept_Design_PB_Render_2-300x184.png" alt="Concept_Design_PB_Render_2"></a></p><p>At this point we had all the need design to start to talk to an mechanical engineer and create some real mechanical designs for our GroBots.</p><p>I'm an Electronic Engineer, so how the hell is a injection mold made was something out of my league. So  I schedule a bunch of meetings, took a day to went to the Meca of injection plastic molds in Portugal, Marinha Grande is the name of the city.</p><p>There you have hundreds of companies specialized only on creating plastic molds.</p><p>We had printed our first test parts and I took them with me so I could show them better what we were aiming for.</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/First_Prints-300x235.jpg" alt="First_Prints"></p><p>It was a really educational day, they were all real nice and told us exactly what troubles this part could bring when creating a mold.</p><p>There are 3 main things you need to take in account when creating an injection mold, first of all, size, the greater the dimension of the plastic part, greater is the block of material to make the mold, therefore more expensive.</p><p>Second is the type of material, you can make injection molds in silicone, the problem is that they don't last long, so you have aluminium, usually cheaper or steel, the main difference of the last two is the number of parts you can inject without loosing mold quality, from what I understood aluminium tends to stretch/contract more then steel with heat, this reduces the lifetime of the mold.</p><p>So silicone to prototype, aluminium for small/medium series and steel for high productions.</p><p>Third but not least it's what they call movements or negatives (may be tampering with the correct terms, not an expert), these negatives happen when you inject a part and you can't release it from the mold without the help of some clamps, this means you need some extra control, cylinders, moving parts, etc. that make the mold much more expensive, first because it has movable parts, and secondly because the time you need to inject a part is larger.</p><p>After this long day I knew all I need to do in order to make the molds as cheap as possible. Also realized that PowerBot as it was, would be really expensive, so a new approach should also be take to PowerBot.</p><p>After going back and forward with our outsourced Mechanical Engineer, and even learning some mechanical design in the way, we reached to these new designs.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/GroBot_Box_Render.jpg"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/GroBot_Box_Render-300x169.jpg" alt="GroBot_Box_Render"></a><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/GroBot_Box_Top_Render.jpg"><br></a></p><p>We're able to make the parts without any negatives in order to make the molds cheapest as possible.</p><p>Also we prepared the smaller GroBot part to harbor an Arduino, and different types of cuts were also made on the top for people to place their own sensors if they want.</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/GroBot_Box_Top_Render-300x169.jpg" alt="GroBot_Box_Top_Render"></p><p>Regarding PowerBot all the design was remade because the box for it was large, and with a lot of unused space. Also, the cover was a different part which involved a different mold.</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/GroBot_PowerBox_Render-300x169.jpg" alt="GroBot_PowerBox_Render"></p><p>So at this point we have all mechanical designs almost closed, they just need a few tweaks and a reprint so we ensure everything is alright before we send them to production.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5921/log/22573-oxibot-big-picture">OxiBot - Big Picture</a></h2>
                            <small class="authorship">6 days ago  &bull;
                                <a class="gray-link" href="/project/5921/log/22573#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22573"><p>OxiBot is one of the most interesting GroBot we created so far. The idea of free placement and power autonomy was something that was crucial for this Bot. No wires is not an easy thing to achieve, even more when you need  constant wireless communication.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/OxiBot_Smaller.jpg"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/OxiBot_Smaller-1024x720.jpg" alt="OxiBot_Smaller" style="display: block; margin: auto;"></a></p><p>Oxibot needs to sample temperature, humidity and luminosity. In the future we want it to be able to also measure CO2 and also have some a smoke/flame detector.</p><p>We were not kind selecting the battery for OxiBot, we are using a 3.2V 1450mAh battery, from our tests so far OxiBot can stay alive for 2/3 straight days without any extra charge.</p><p>We still need to make some tests to understand how much we are over killing it, because we are for sure, but for now we need to focus on making all the electronics work properly, and then we&apos;ll see how far we can stretch the battery and the solar panel.</p><p>Current consumption of the GroBot is 20mA(max) at 3.0V, around 60mW and our solar panel makes an output of 6.5V with 15mA, around 97.5mW. So if the solar panel is at full efficiency we have around 30mW to spare and charge the battery.</p><p><strong>OxiBot can be treated as an Arduino Duemilanove</strong>, so it comes with an Arduino Bootloader that you can hack anyway you want, you can use our code to connect it to a GroNode, or upload your own code, interfacing the OxiBot with whatever RF or RS-485 system you have at hand.</p><p>For now the OxiBot comes standard with RF communication(NRF24L01), but if you have the skills you can always populate the RS-485 circuitry in the PCB and put it to work ;)</p><p>Regarding the electronics to charge and manage the battery our design was based on an adafruit schematic using the MCP73871 from Microchip.</p><p><img src="https://learn.adafruit.com/system/assets/assets/000/010/372/original/projects_solarv2.png?1396904194" alt=""></p><p>Here you can find the link for their own charger module and all info.</p><p><a href="https://learn.adafruit.com/usb-dc-and-solar-lipoly-charger/solar-charger-preparation">https://learn.adafruit.com/usb-dc-and-solar-lipoly-charger/solar-charger-preparation</a></p><p>To this schematic we made some changes. First of all we needed to sample the state of the baterry in order to provide the user some info on how is battery is.</p><p>Second of all, we wanted to have some light sensor, so we could verify that in a indoor grow the lights are turning on has they should, for that we are directly checking the voltage on the solar panel output.</p><p>To achieve this we add some extra MOSFETs to check this two parameters that we pull every few minutes.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/07/Pull_MOSFETS.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/07/Pull_MOSFETS-1024x438.png" alt="Pull_MOSFETS"></a></p><p>To switch between the USB supply or the solar panel we are using a TPS2113A from Texas Instruments, it&apos;s a quite handy chip, fast response, and with voltage selection indicator, the only problem with it it&apos;s is price, a little expensive.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/07/TPS2113A.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/07/TPS2113A.png" alt="TPS2113A"></a></p><p>Temperature measure can be done in a number of ways, digital, analog, etc. The problem arrives when you want to measure humidity, the range of sensors is not that wide as temperature, in that way, or you aim for a capacitive sensor and you need some extra electronics and/or firmware to acquire the data, or you go for a digital one that can be much more expensive comparing to the capacitive solution.</p><p>We decided that for now we will stick to a solution that can combine both temperature and humidity in a single chip.</p><p>For that we are using an SHT21.</p><p>We wanted to go for a DHT family, DHT11/21/22 the problem with this sensor is it&apos;s size, to big and doll. Wiith the SHT21 you can choose from a different type of variants, digital I2c, PWM or SDM format. We made arrangments in order to use or the I2c or the SDM format.</p><p>In the future we want the change this for a capacitive sensor and use also a cheaper, but still accurate solution for temperature.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5921/log/22638-unnamed-software">Unnamed Software</a></h2>
                            <small class="authorship">5 days ago  &bull;
                                <a class="gray-link" href="/project/5921/log/22638#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22638"><p>To bring the GroBots to a a friendly agricultural digital environment, we started to develop a software for the user to manage his Grows and his GroBots. A real team work here at Open Grow, illustrations by Eddie Piazza, communications stack by Jo&#xE3;o Melo, and GUI and overall code by S&#xE9;rgio Pereira</p><p>We still haven&apos;t defined a name for our software, we&apos;re are looking for that perfect match and think you can help us, so leave a comment, tweet with the hastag <strong>#GroNameIt</strong> or directly at us with <strong>@Open_Grow</strong> and <strong>@OpenGrowEs</strong>, bother us on <strong><a href="https://www.facebook.com/OpenGrowEN" target="_blank">facebook</a></strong>! All inputs are welcome :)</p><p><strong>-Areas Configuration</strong></p><p>The interface with the real Grows and real GroBots, is software defined by Areas, Grows, Inputs, Outputs. This means you can mix those up has you need, for example you can have just one TankBot irrigating 4 different grows spread along 4 different Areas.</p><p>The system can have the maximum of 4 Areas, and an Area can have the maximum of 2 Grows.</p><p>All configurations are done when a user creates his first Area or edits a previously created one.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/Areas_Config.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/Areas_Config.png" alt="Areas_Config"></a></p><p>In this configurations you can give a name to your Area, and associate inputs or outputs to the standard needs of a growing Area..</p><p>Values like temperature, humidity or outputs like lamps and ventilators are essential here since they manage the micro climate imitation in an indoor Area..</p><p><strong>-Day Night Configuration</strong></p><p>The Day and Night is a variable extremely important because your plants have different needs during the different day periods.</p><p>If in an Area is day or night, different alarms can be applied for example for temperature, humidity, soil moisture levels, etc.</p><p>To start, you need to define a type of light for the Area. Your light types are basically two, Sunlight (by Astronomical Clock) or Artificial Light (by Manual Clock).</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/light_overview.png" alt="light_overview">If you are using a light to replace the Sun in your system, you need to configure the time to turn it on, making Day Time in the Area or turn it off making into Night Time.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/Manual_Clock.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/Manual_Clock.png" alt="Manual_Clock"></a></p><p>You can also changed the physical type of light your using, this case LED, and spectrum the output, this case mixed for vegetative and flowering phases.</p><p>If you have an outdoor area you can provide the approximate coordinates to your Grow, Timezone and Offset, and the SunRise and Sunset is accurately calculated for any day of the year.</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/Light_Astro.png" alt="Light_Astro"></p><p><strong>-Grows Configuration</strong></p><p>After your area is configured you start to configure your Grows, up to 2 per Area as we said before.</p><p>You can define a Name, a start sate, and choose from a variety of Grow Types.</p><p>Soil, Ebb&amp;Flow, Aquaponics, Drip System, etc.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/Grow_Types.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/Grow_Types.png" alt="Grow_Types"></a></p><p>In most cases, if you want to control your irrigation you need a water tank. This water tank is also configured with inputs and outputs presented by the GroBots in the network, TankBot and PowerBot are always good for this job.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/Areas_Grows.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/Areas_Grows.png" alt="Areas_Grows"></a></p><p>Define your PH, EC and level sensors, define your main irrigation pump or electro valve, configure your security flood sensor and main moisture sensor from a SoilBot, et voil&#xE1;!  you have all basics defined to automate your water tank.</p><p><strong>-Areas Overview</strong></p><p>If all the configurations are ok, your GroBots are alive in the network, and your GroNode is doing his supervising/control job, you should get to see your Area overview like the next image,</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/Areas_Overview.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/Areas_Overview.png" alt="Areas_Overview"></a></p><p>At this point you just standardize your Areas and Grows and you don&apos;t need to make any more changes, now the fun begins, it&apos;s when you start the real-time control, and experiment with your grows via Alarms and Schedules, two tools that the Software provides that we&apos;ll explore in a future post.</p><p>Cheers,</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5921/log/23125-user-bot">User Bot</a></h2>
                            <small class="authorship">a day ago  &bull;
                                <a class="gray-link" href="/project/5921/log/23125#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23125"><p>With our Open Source Firmware for your Arduino you can make from  your development board one more GroBot for our system to control.</p><p>In this way you are able to build your own GroBots with the sensors and outputs you need.</p><p>The example provided in this post is for the Default User Bot we created, a GroBot with one button and one LED.</p><p>Always keep in mind that you can configure up to 10 different inputs and 10 different outputs, you just need to make some firmware tweaks as we&apos;ll explain later.</p><p><strong><em>Basic Hardware Config</em></strong></p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/UserBot_BreadBoard.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/UserBot_BreadBoard-300x112.png" alt="UserBot_BreadBoard"></a><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/UserBot_Schematic.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/UserBot_Schematic-300x178.png" alt="UserBot_Schematic"></a>An Arduino, one module NRF24L01, one button and one LED is everything you need to create your basic UserBot.</p><p>Usually these RF Modules present some troubles with floating power, happens because the module has some current spikes that probably your Arduino can&apos;t handle, so a 10uF capacitor was added to eliminate possible power issues.</p><p>As you can see, the schematic is quite simple, just assemble your RF Module as showed, and use the remaining free pins in your Arduino to connect your inputs/outputs.</p><p>In this case <strong>Analog 0 for the button and Digital 3 for the LED</strong>. Digital 3 was chose because it can implement PWM in that way you can see the speed parameter working.</p><p><strong><em>Firmware Basics</em></strong></p><p>Before we explain what bits of code you need to change in order to add your own sensors, let&apos;s look at the main firmware and understand how those parts are configured by default.</p><p>Lets start to understand the structures for an Input and an Output are defined in <em>GroBotConfig.h</em></p><p>Definition of an Arduino Input:</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Output_structure.png"><br></a><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Input_structure.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Input_structure.png" alt="Input_structure"></a></p><ul><li>type - A value that defines what type of input you are using</li></ul><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Input_Types1-280x300.png" alt="Input_Types"></p><ul><li>growRoomID - The Area that you want to associate this sensor.</li><li>growID - Grow inside the Area where the sensor belongs.</li><li>value - a double value that contains the sensor acquired from sensor (If Boolean. sensor value = 0 = false, value &gt;0 = true.</li><li>Name - A string with 14 chars,, that describes this sensor.</li></ul><p>Definition of an Arduino Output:</p><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Output_structure.png" alt="Output_structure"></p><ul><li>type - A value that defines what type of output you are using</li></ul><p><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Output_Types1-277x300.png" alt="Output_Types"></p><ul><li>growRoomID - The Area that you want to associate this output.</li><li>growID - Grow inside the Area where the output belongs.</li><li>value - a byte value that contains the state of the output</li><li>speed - A value from 0 to 255 to define the speed of the output (useful for dimming, pwm control, etc..)</li><li>Name - A string with 14 chars, that describes the output</li></ul><p>These structures are aggregated in two different arrays of size 10 each, this means you can configure up to 20 I/O&apos;s, 10 of each.</p><p>As it is the firmware is ready to communicate with a GroNode with masterID 0x01.</p><p>The firmware was also configured with one input, a button, and an output, a LED.</p><p>That configuration can be seen in <em>SensorsTask.cpp</em>. If you want to add more sensors or outputs you should start looking at this file.</p><p>At the top you&apos;ll see that we are defining the position inside the respective Input/Output array, and also on what physical Arduino pin you are connecting that sensor.</p><p>One button and one LED looks like this.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/Default_Config_IOs.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/Default_Config_IOs.png" alt="Default_Config_IOs"></a></p><p>After that we need to initialize our pins with the respective configuration.</p><p>That is done in the object constructor.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/IO_Init.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/IO_Init.png" alt="IO_Init"></a></p><p>After you make this configurations, and you know what kind of sensors and actuators you are dealing with, you should look at the SensorsTask state machine (<em>GoSensorsTask()</em>) and see that all reading or writing on this pins is exclusively made here.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/SensorTask_StateMachine.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/SensorTask_StateMachine.png" alt="SensorTask_StateMachine"></a></p><p>Your UserBot should show up in the software like this</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/UserBot_Software.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/UserBot_Software.png" alt="UserBot_Software"></a></p><p><strong><em>Firmware Config</em></strong></p><p>The code you&apos;ll see below in the Green Boxes is commented in the firmware provided in our GitHub repository. We removed them from coment here so you can better understand what to change in order to add your inputs and outputs.</p><p>In the next example we are adding an extra button and an extra LED.</p><p>To do so you first need to configure the index array and the I/O respective pin.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/New_Config_IOs.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/New_Config_IOs.png" alt="New_Config_IOs"></a></p><p>As you can see we added an extra button to pin A1 at index 1 and a extra LED to output 4.</p><p>Then we need to look at the sensor state machine and add the actual code to pull or push the data into the new IO&apos;s.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/06/SensorTask_StateMachine_Extra.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/06/SensorTask_StateMachine_Extra.png" alt="SensorTask_StateMachine_Extra"></a></p><p>If your sensor needs some kind of math before being send to the GroNode, here is were you made that math. Gronode doesn&apos;t handle raw values, for example if you have an analog temperature sensor, the values 0~1024 won&apos;t make any sense to the GroNode, you first need to do your sensor math and only then you save it in the input structure array.</p><p>This should be the result of your new configuration.</p><p><a href="http://blog.opengrow.es/wp-content/uploads/2015/08/UserBot_Software_2.png"><img src="http://blog.opengrow.es/wp-content/uploads/2015/08/UserBot_Software_2.png" alt="UserBot_Software_2"></a></p><p>GitHub repository is available for checkout, expect some updates in the next weeks.</p><p>Cheers,</p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'gEtSLBnO-OBCm4HB-xtGPfjgNaOBMB2vhj6c';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>