<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Interactive Disco Dance Floor &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F4209%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/4209-interactive-disco-dance-floor">Interactive Disco Dance Floor</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">A large interactive disco dance floor with hidden capacitive sensors</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/621-jeremy" title="Visit Profile">Jeremy</a><span>&bull;</span>
                
                7 months ago<span>&bull;</span><a href="/project/4209#discussion-list" title="See Comments">1 Comment</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/4209-interactive-disco-dance-floor">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/4209/logs/sort/newest">Newest</option>
                    <option value="/project/4209/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/4209/log/14882-rs485-bus-protocol">RS485 Bus Protocol</a></h2>
                            <small class="authorship">5 months ago  &bull;
                                <a class="gray-link" href="/project/4209/log/14882#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-14882"><p>I finally got the disco floor slave/master network working end-to end. Here's how the protocol works (see <a href="https://github.com/jgillick/DiscoDanceFloor/tree/master/Arduino/DiscoFloorNode">README</a> for more info).</p><p>There is one master and many floor cells (slaves) all running on an RS485 bus. Each floor cell is daisy chained to the next  with a single 'enable' wire, for automatic address registration. There are 3 phases in the floor life cycle: <em>addressing</em>, <em>status</em>, <em>updating</em>.</p><ol><li>Addressing phase<ol><li>Master makes the enable pin on first floor cell HIGH and sends a global message with the current highest address (1). (master will repeat this message every 500ms that the bus is idle)</li><li>The first node... <ol><li>See's the enable pin is HIGH</li><li>Receives the address message from master</li><li>Increments the address by 1 and responds to master with this address (2).</li><li>Makes the enable pin on the next floor cell high</li><li>Master responds with this new address. (and repeats every 500ms)</li><li>Repeat 1 - 4 for each node on the floor.</li></ol></li><li>Once the bus is idle for more than 5 seconds, master moves onto the status phase</li></ol></li><li>Status phase<br>
<ol><li>Master sends a global message asking for nodes to report their status.</li><li>First node responds with it's status, which includes<ul><li>Is it fading</li><li>Does the capacitive sensor detect anything</li><li>It's current color</li><li>What color it's fading to (if it's fading)</li></ul></li><li>Each node waits until the node before it reports status before sending it's status.</li><li>If a node does not respond after 500ms, master sends another status request for all nodes from that node forward.</li><li>If it still does not get a response, master skips that node and asks for status from the next node forward.</li><li>Once all nodes have responded, master moves to the update phase.</li></ol></li><li>Update phase<ol><li>Master sends a program update to nodes. Either set a color or fade to a color</li><li>After master has finished updating nodes, it repeats the status phase.</li></ol></li></ol><p>This has all been prototyped with an <a href="https://github.com/jgillick/DiscoDanceFloor/blob/master/Arduino/DiscoFloorNode/TestMaster.h">arduino</a> as the master node. The next step is to update the nodejs computer program to talk to the nodes directly.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/17945-almost-ready-for-full-scale-construction">Almost ready for full-scale construction!</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4209/log/17945#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-17945"><p>The last couple months have been BUSY. Here's an update on all of the things we've been working on.<span class="read-more-tag">---------- more ---------</span></p><h2>Floor Square Size and Plastic</h2><p>Originally we wanted the floor squares to be 14" x 14". Nick, who is a structural engineer by day, did some stress testing and found that using half-inch acrylic wouldn't be strong enough to reliably withstand the load of "the drunk hippie stomping" on it.</p><p><img src="https://cdn.hackaday.io/images/3733691431647428203.png"></p>I also investigated using polycarbonate instead of acrylic; which would be much stronger. The problem is that semi-opaque polycarbonate does not come in 1/2" thick sheets. I tried laminating small polycarbonate sheets together (1 layer clear + 1 layer semi-opaque) but it always had air bubbles that disrupted the light.<p>In the end, we're going with 1/2" semi-opaque acrylic over 11" squares. This now increases the number of squares from 81 to 144.</p><h2>Plastic and the wood base</h2><p>Next was figuring out how to attach the plastic to the wood base. We're still planning to break the floor into 4' x 4' sections, which will hopefully transport well and go together quickly. Each section will have 16 squares underneath it. </p><p>The base will be made of wood ribs that are notched so that they fit together into a grid. The inside ribs will be between 1/2" to 1" thick, with the outside wall being half that, so the border between squares is consistent across the floor.</p><p><img src="https://cdn.hackaday.io/images/9692781431648051583.png"></p><p><img src="https://cdn.hackaday.io/images/9102421431649115560.png"></p>Initially we wanted to be able to attach the plastic in a way that would be easy to remove. Unfortunately, all the ideas were either too complicated, not strong enough or might crack the plastic during a week of abuse. The plan now is to glue it to the base using an industrial adhesive, like E6000. Accessing the electronics will have to be done by removing the bottom base board.<h2>LEDs<br></h2><p>Which brings us to lighting the whole thing. After testing many LEDs and looking at several sources, it seems that using LED strips will be the cheapest and easiest way to go. We built a scale test platform and tested several arrangements. The two options that work the best are:</p><p>1. Mounting 1 meter of the LED strip around the perimeter of the box. This uses 1A at max output per square.</p><p>2. Mounting two 25cm strips on the bottom of the box, approximately 3" from the sides. This uses about 500mA at max output per square.</p><p>Both options produce approximately the same amount of perceived light through the plastic. The first option is easier to install, but needs twice the amount of juice. So we're going with the option number 2. This means that we'll need to put a couple of thin pieces of wood across the bottom of each square that the LED strips can mount to.</p><p><img src="https://cdn.hackaday.io/images/2222401431649911632.jpg" style="width: 456px; height: 608.4864px;"></p><p><img src="https://cdn.hackaday.io/images/3440161431649936843.png" style="width: 307px; height: 269.6688px;"></p><p><img src="https://cdn.hackaday.io/images/7306381431650086656.png"></p><p><img src="https://cdn.hackaday.io/images/7788191431650096163.png"></p><h2>Mylar Reflective Film</h2><p>I'm about to test what happens if I cover the bottom of the box with a mylar reflective sheet. I'm hoping this will help increase the light output coming through the plastic. My only concern is that it could also turn the squares into mini ovens and damage the electronics and LEDs. I'll have to find a way to test this as well.</p><h2>Capacitive Sensor</h2><p>Lastly, in this update is the capacitive sensor. </p><p>First, we've found that using chicken wire under the plastic as the sensor area is much more reliable than loops of magnet wire! This is cheap and much easier to setup than figuring out how to attach loops of wire to the underside of the plastic!</p><p>We're still using the Arduino <a href="http://playground.arduino.cc/Main/CapacitiveSensor" target="_blank">CapacitiveSensor</a> library for detecting if a person is standing on a square. This works, however the library requires a blocking action. With a network of 144 nodes, this can block communication and cause some latency issues. I've added some code to try to do the sensing when the node is not responding to the network and master will skip a node if it is taking too long to respond. This helps, but is not perfect. The plan is to write a custom library that will use timers or interrupts, so it will seem to happen in the background.</p><h2>Next Steps</h2><p>In the next couple weeks we're going to be finalizing the circuit board design and building the first 4' x 4' section! Stay tuned.</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/18620-floor-construction">Floor Construction</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4209/log/18620#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18620"><p>The floor structure team met last Monday and we spent a few hours hashing out the final design ideas so we can spend the upcoming weekend building the first full-scale prototype!!!</p><p><img src="https://cdn.hackaday.io/images/4318711432831152713.png"></p><p>Here's what we came up with. The floor will still be made up of several 4' x 4' sections with 16 light-up squares in each. The biggest area of debate was how to connect them together and keep everything aligned.</p><p>The simplest answer was to have alternating pegs and holes around the perimeter that neighboring sections can mate with. Then we'll tie all the sections together with a modular frame that can be setup around the entire floor. </p><p>We're still working on how the frame will actually work. The simplest idea would be to use a simple ratcheting tie down strap around the floor. Although, we're working on something with wood planks and specialized clips. Stay tuned.</p><p>You can see the latest sketchup files in <a href="https://github.com/jgillick/DiscoDanceFloor/Construction">github</a>. </p><p><img src="https://cdn.hackaday.io/images/7520111432831629390.png"></p><p><em>Floor light-up cell with electronics and sensor</em></p><p><img src="https://cdn.hackaday.io/images/4712751432831781178.png"></p><em>Cut dimensions</em></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/18622-circuit-boards-ordered">Circuit Boards Ordered!</a></h2>
                            <small class="authorship">3 months ago  &bull;
                                <a class="gray-link" href="/project/4209/log/18622#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-18622"><p><img src="https://cdn.hackaday.io/images/4332541432833181607.png"></p><p>Our resident AVR/electronics expert Cameron, has been spending the last few weeks refining the circuit diagrams and patiently dealing with my lack of experience with a project of this size and complexity. Our conversations often go like this:</p><p></p><p><em><strong>Jeremy:</strong></em><strong></strong> Look, I made a thing!<br></p><p><em><strong>Cameron:</strong></em> Cool! I noticed &lt;xyz&gt;. Did you consider &lt;abc&gt;? You should really never do &lt;123&gt;...<br></p><p><em><strong>Jeremy:</strong> *head explodes a little*</em></p><p><em><em><strong>Cameron:</strong></em> *more experience tested advice*<br></em></p><p><em><em><strong>Jeremy:</strong> *head expanding with knowledge...then asks stupid question*</em></em></p><p><em><em><em><em><em><strong>Cameron:</strong> *patient reply*</em></em><br></em></em></em></p><p><em><em><em><em><em><em><em><strong>Jeremy:</strong> *feeling smarter for knowing new things*</em></em><br></em></em></em></em></em></p><p>So for the past few weeks he's been doing double duty: finishing up the circuit board design and providing me with direction on the firmware and capacitive sensor programming. </p><p>After all that, we have very good news, we have ordered our first run of circuit boards! This run of boards will have extra circuitry that, hopefully, we won't need in the production run. We've been trying to figure out if the Atmega will be able to reliably handle the capacitive sensing or if we'll need to use a specialized chip (Azoteq IQS211).</p><p>The de facto <a href="http://playground.arduino.cc/Main/CapacitiveSensor?from=Main.CapSense">Arduino capacitive sensing</a> library blocks the execution of the main program while it's reading sensor data. This will significatly slow down how fast the nodes on the network will be able to communicate with the master. So we've added pads to the PCB for the specialized Azoteq chip, just in case. The good news is that  the latest capacitive sensor libraries we've been writing are working really well. So I'm confident the next board will be much simpler. </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/19143-we-have-circuit-boards">We have circuit boards!</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4209/log/19143#discussion-list">
                                    3 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19143"><p>Our first batch of circuit boards arrived and they are beautiful!</p><p><img src="https://cdn.hackaday.io/images/553221433711926571.jpg"></p><p>And with the boxes of fresh components, it was like [insert your favorite holiday here]!</p><p><img src="https://cdn.hackaday.io/images/7644001433712112974.jpg"></p><p>Pretty quickly Cameron noticed the problem with the boards. We accidentally used a 32-VQFN footprint for the AVR instead of TQFP-32A. The good news is that Cameron had a few spare Atmega328s in the workshop with the correct footprint. Disaster averted and now on to find the next bugs before moving into full-scale production.</p><p><img src="https://cdn.hackaday.io/images/2888751433712264899.jpg"></p><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/19633-crystals-and-blocking-timers">Crystals and blocking timers</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4209/log/19633#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19633"><p>While putting the new boards through their paces we've found a couple small problems.</p><h2>Crystals and bus communication</h2><p>To keep the BOM down, the boards were designed without external crystals assuming the AVR's internal oscillator would be good enough for prototyping. The problem we've found is that the oscillator isn't accurate enough to talk on the RS485 bus any faster than 4800 baud. Even then, there are too many dropped packets to make communication viable for testing. The next boards will have crystals!</p><h2>Capacitive sensors and blocking timers</h2><p>I've spent the last few weeks working on building a capacitive sensor library that would not block main program execution. The idea was to set an interrupt timer that would check and update the sensor every 5 - 10μs. It's pretty much a non-blocking version of Paul Stoffregen's <a href="https://github.com/PaulStoffregen/CapacitiveSensor">Capacitive Sensor</a>.<span class="redactor-invisible-space"> The code was lightweight and performed really well...that is, on a prototype that didn't have to do anything else. As soon as I integrated it into the main program, all communication on the bus stopped. Doh! It looks like the timer is still doing too much, too often and getting in the way of everything else.</span></p><p>I'm now going back to an earlier prototype that uses the AVR's input capture interrupt. The results are quite a bit noisier, but it should be more performant.  </p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/19764-non-blocking-capacitive-sensing">Non blocking Capacitive Sensing</a></h2>
                            <small class="authorship">2 months ago  &bull;
                                <a class="gray-link" href="/project/4209/log/19764#discussion-list">
                                    2 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-19764"><p>I think I've finally created a reliable non-blocking capacitive sensor library for the Atmega!</p><p><img src="http://i.imgur.com/UC0CIWJ.gif"><br></p><p></p><h1>The Problem</h1><p>Originally I was using Paul Stoffregen's <a href="https://github.com/PaulStoffregen/CapacitiveSensor">Capacitive Sensor library</a>, which works great, except that the main program has to wait while it takes enough samples (~30) for a stable proximity reading. It's usually pretty quick, but when you're trying to poll 144 nodes at 250Kbps, this delay can add up significantly. </p><p>I had to find a way to get the capacitive sensor running "in the background". There is a dedicated cap sense chip that we <em>could</em><span class="redactor-invisible-space"> use, but I prefer the challenge of making it all work on one little chip. After several failed iterations the latest appears to be working  well...so far.</span></p><h1>How capacitive sensing works</h1><p>The capacitive sensor is basically an <a href="https://en.wikipedia.org/wiki/RC_circuit">RC circuit</a> with the person being a variable capacitor. The circuit looks something like this:<br></p><p> <img src="http://playground.arduino.cc/uploads/Main/CapSense.gif"></p><p><span class="redactor-invisible-space">The process to detect someone's proximity starts by setting the <em>send</em> pin to high and then tracks how long it takes for the <em>receive</em> pin to go high. The closer someone is to the foil, the longer this will take (ther person acts as a larger capacitor in the RC circuit).</span></p><p><span class="redactor-invisible-space">Paul Stoffregen<span class="redactor-invisible-space">'s method is to create a <em>while</em> loop which waits for the receive pin to register as HIGH and then waits another 10µs for everything to stabilize before taking the next reading.<br></span></span></p><h1>The non-blocking solution!</h1><p>The solution came down to juggling a few interrupts to handle this entire process without blocking the main program execution.</p><p><img src="https://cdn.hackaday.io/images/8824241434754792921.png" width="466" height="434" style="width: 466px; height: 434px;"></p><p>The program basically works by using the Atmega's input capture unit (ICU) to take a timestamp every time the receive pin goes HIGH. Then it uses a timer interrupt (triggered in ~4ms) to process the timestamp and give the pins time to discharge before starting the process all over again.</p><h1>Noise<br></h1><p>Trying to sense proximity (1+ inches / 25+ mm) with a capacitive sensor is inherently noisy since it can react to everything in its environment. I fought with this for a while -- playing with moving baselines, low pass filters, high pass filters, burning sage and chanting to the project Gods. </p><p><img src="https://cdn.hackaday.io/images/4425521434842044399.png"></p><p>The solution came from implementing a simple 1-dimensional <a href="http://interactive-matter.eu/blog/2009/12/18/filtering-sensor-data-with-a-kalman-filter/">Kalman filter</a>. The results were almost immediately a smooth and predictable line. </p><p><img src="https://cdn.hackaday.io/images/4433161434842031959.png"></p><p>I also created a <a href="http://output.jsbin.com/roxeri">simple tool</a> that will run the kamlan filter over a list of raw data, so I could play with various noise values offline.</p><h1>See the code</h1><ul><li><a href="https://github.com/jgillick/DiscoDanceFloor/blob/master/Arduino/DiscoFloorNode/CapacitiveTouch.h">CapacitiveTouch.h</a></li><li><a href="https://github.com/jgillick/DiscoDanceFloor/blob/master/Arduino/DiscoFloorNode/CapacitiveTouch.cpp">CapacitiveTouch.cpp</a><span></span></li></ul></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/20549-build-party-weekend">Build Party Weekend!</a></h2>
                            <small class="authorship">a month ago  &bull;
                                <a class="gray-link" href="/project/4209/log/20549#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-20549"><p>Is there a better way to spend 4th of July weekend than to build stuff? I don't think so.</p><p><img src="https://cdn.hackaday.io/images/5385601436220629198.JPG"></p><p>I was lucky enough to pull about 15 people together this weekend to start on full-scale production! We gathered at my Dad's workshop in San Jose, where we could use all of his big tools and benefit from his amazing old school maker skills. Many people in the group had never soldered or handled big machinery, but no one was afraid to step up and learn.</p><p>By the end of the weekend we had all 5 floor structures assembled (minus the plastic), at least 200 LED strips cut and soldered, lots of connectors crimped and many other small odds and ends handled. The next step is to start assembling the new run of PCBs which arrived today. In a few weeks we'll put it all together and finish with a dance party!</p><p>Here are some pics of the weekend build.</p><p><img src="https://cdn.hackaday.io/images/4716301436220197253.jpg" width="324" height="290" alt="" style="width: 324px; height: 290px; margin: auto; display: block;"></p><img src="https://cdn.hackaday.io/images/4930751436220217727.JPG" width="326" height="243" alt="Cutting LED platforms" style="width: 326px; height: 243px; margin: auto; display: block;"><p><em>Cutting LED platforms</em><br></p><p><img src="https://cdn.hackaday.io/images/7461621436220407432.JPG"></p><p><em>A jig</em><em> that notches 10 strips of wood at once.</em></p><p><em><br></em></p><p><img src="https://cdn.hackaday.io/images/1341571436220390712.JPG"></p><p><img src="https://cdn.hackaday.io/images/404421436220486313.JPG"></p><p><img src="https://cdn.hackaday.io/images/5730221436220554938.JPG"></p><p><em>Some assembly required</em></p><p><em><br></em></p><p><img src="https://cdn.hackaday.io/images/9008021436220570872.JPG"></p><p><em>Completed floor sections!</em></p><p><em><br></em></p><p><img src="https://cdn.hackaday.io/images/5385601436220629198.JPG"></p><p><img src="https://cdn.hackaday.io/images/8824781436220642995.JPG"></p><p><em>Solder and crimping party!</em></p><p><em><br></em></p><p><img src="https://cdn.hackaday.io/images/3859431436220713475.JPG"></p><p><em>QA - Testing completed LEDs</em><br></p><p><em><br></em></p><p><img src="https://cdn.hackaday.io/images/7828101436220751339.JPG"></p><p><em>Just a handful of our LEDs</em><br></p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/4209/log/22188-down-to-the-wire">Down to the wire</a></h2>
                            <small class="authorship">12 days ago  &bull;
                                <a class="gray-link" href="/project/4209/log/22188#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-22188"><p>A lot has happened in the last month. I&apos;ve been working nonstop on getting everything finished up and ready for the desert -- which is in a few short weeks (!!!) -- and of course we&apos;re running into some last minute problems.</p><p><img src="https://cdn.hackaday.io/images/4932391438819850732.JPG" style="width: 314px; height: 236px;" width="314" height="236"></p><p></p><h2>New Boards</h2><p>There were a few problems with the last round of PCBs, so we updated the design and ordered a new batch. One of the biggest improvement is the two data connectors. Originally we were using connectors that we&apos;d have to manually crimp ends for (240 wires to crimp, to be exact!). We swapped those out with ethernet plugs so we can use ready-made cords. Also, since we only need 3 wires for the data bus, we can use the other 5 wires for power!</p><p>I also ordered solder stencils with this round of PCBs and had an assembly line of board building at the last build party.</p><p><img src="https://cdn.hackaday.io/images/1431321438818560780.JPG"></p><h2>Capacitive Sensor Hell</h2><h2><p>The topic has been my personal hell for the past few months. I was able to get the capacitive library working well on its own, and of course, it all blew up as soon as I threw it in the matrix of floor nodes. Now it&apos;s returning numbers that are completely unstable and useless.</p><p>I have a few theories:</p><ul><li>Interference from neighboring floor node sensors.</li><li>Communicating on the bus at a constant 250kbps is not giving the capacitance library enough time for sensing and processing.</li><li>The new power supply might not be grounded well enough.</li></ul><p>There are so many other things left to do that I&apos;m going to have to shelve the sensor problem until I get everything else together. The good news is that I&apos;ve written a couple floor programs that can respond to audio, so at least the floor will be able to light and pulse to the music.</p><p>If anyone has ideas on the capacitive sensor problems, please let me know!!!</p></h2><h2>Floor Sections</h2><p>We finally picked up the plastic and some high strength silicone glue and started putting it all together. It feels great to finally have a full floor section to load electronics into.</p><p><img src="https://cdn.hackaday.io/images/8854771438818682056.JPG"></p><p><img src="https://cdn.hackaday.io/images/8816011438819365651.JPG"></p><h2><img src="https://cdn.hackaday.io/images/3855151438818956989.JPG"></h2><h2>New Bus Protocol</h2>I won&apos;t get too much into the details now, but after quite a bit of discussion &amp; debug, we decided to rewrite the bus protocol to make it more efficient. Now we can get the status of all nodes with a single byte per node (previously it took 5+ bytes). More details to come.<h2>Assembly</h2><p>Next is to do the final assembly and throw a dance party before Burning Man!</p><p><img src="https://cdn.hackaday.io/images/4890741438819582053.JPG"></p><p><img src="https://cdn.hackaday.io/images/4469781438818619722.JPG"></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = '7VspmO3Q-15zndz1E4NrQGv-_rPgKlaIYCSc';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>