<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; commonCode (not exclusively for AVRs) &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F12818">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/3828">commonCode (not exclusively for AVRs)</a>
                    </p>
                    <p class="description-summary">A shit-ton of things that are useful for a shit-ton of projects. (and, Think &#39;apt-get&#39; for reusable project-code)</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/40107-esoteric" title="Visit Profile">
                                esot.eric
                            </a>
                            <span>&bull;</span>
                            7 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p><strong>Details Table Of Contents:</strong><br></p><ul><li>Brief Intro</li><li>Useful Code!</li><li>More than just a bunch of commonly-used code;<em><strong> &apos;commonCode&apos; is a system</strong></em></li><li><strong></strong>Examples (if the Linux Kernel used commonCode)<strong></strong></li><li>A Little History</li><li>A List of &apos;commonThings&apos;</li><li>Starting a new project</li><li> <a href="https://hackaday.io/project/3828-commoncode-not-exclusively-for-avrs/log/23363-system-design">System Design/Flow (in project log)</a><a></a></li><li>Status</li><li>Project Log Table Of Contents</li><li>Licensing</li><li>mehPL (my &quot;meh public license&quot;)</li></ul><p><strong>Brief Intro</strong><br></p><p>(Every code-bearing project I&apos;ve made available contains a _commonCode_localized/ directory! Find out, here, what it does, and help me develop it further! Also, look <a href="https://sites.google.com/site/geekattempts/home-1/commoncode">here</a> for more info.)<br></p><p><strong>Useful Code!</strong></p><p><strong></strong>I think the name says it, &apos;commonCode&apos; is a bunch of useful code. But it&apos;s <strong>more than that</strong>.  </p><p>Similar to a &apos;library&apos;, I refer to each piece of commonCode as a &apos;commonThing&apos;. CommonThings cover a broad-range of functionality: <strong>math functions, graphics, motion-control, I/O, peripheral drivers, protocols, etc.</strong></p><strong></strong><p>(A <strong>listing</strong> of &apos;commonThings&apos; follows the next explanation. Scroll down, then  <strong>Please click &quot;Read More&quot;</strong>)<br><strong></strong></p><p><br><strong></strong></p><p><strong>What is &apos;commonCode&apos; besides just a bunch of commonly-used code?</strong></p><p><strong></strong><em></em><em><strong>&apos;commonCode&apos; is a system,</strong></em><strong> implementing:</strong><em><strong></strong></em></p><ul><li><strong></strong>Example/test-code &#x2013; most commonThings come with dedicated test-code <ul><li>Similar to &apos;hello-world&apos; or &apos;blinky&apos; (or the ol&apos; AVR &apos;gcc-tests&apos;) getting-started projects</li><li><em>Great place to start a new project, to learn how to implement a commonThing in your own project, or even get-started with a new architecture/MCU.  </em></li></ul><em> </em></li><li><em></em>Centralized &apos;commonThings&apos; <ul><li>Make a bug-fix or improvement to one commonThing, and it will be applied to all projects using that commonThing (when they&apos;re recompiled).</li></ul> </li><li>Configuration/Optimization-options and Abstraction <ul><li>What pin is your LED connected-to? Configure that in your project configuration, rather than modifying the commonThing. (Think about the centralized-bug-fixes, mentioned above. Now think about having five concurrent projects with different pinouts, fixing a bug in one, then having to modify four other files either with the bugfix or to copy the file with the bugfix four times and modify each with the pinout which you&apos;d already had defined in the previous unbugfixed &apos;library.&apos;)</li><li>Don&apos;t need certain functionality a commonThing provides? Mark that portion as &quot;unused&quot; and recover some program-space.</li><li>Want to use that fancy commonThing on a different architecture? Many commonThings are completely architecture-independent. Many other once-AVR-specific pieces of code are being abstracted with no speed/program-space penalty. E.G. Your MCU doesn&apos;t use PB4/PORTB definitions? Override the default *inline* LED-On/Off functions with your own. Or replace the default LED-On/Off functions with functions containing printf&apos;s, and simulate that fading LED-thing in a console window on your desktop-PC.   </li></ul> </li><li>Distribution-system <ul><li>Handles dependencies/versions</li><li>Can create a package of your project and all necessary commonCode: &apos;make localize&apos;</li><li>Can extract commonCode from a downloaded-project, placing it in your central commonCode directory: &apos;make delocalize&apos;</li><li>...This bit is hard to explain, see the example below<strong></strong></li></ul> </li></ul> <p>I don&apos;t know exactly how to describe it, but it&apos;s a bit more like a distribution-system ala &apos;apt-get&apos; for reusable project-code; handling dependencies, versions, etc. keeping it all centralized, and allowing for project-specific customization without modifying the centralized code. And all it requires is the standard toolchain (C, preprocessor, make, etc.). </p><p><strong>Examples (if the Linux Kernel used commonCode):</strong></p><p><strong>Example 1:</strong> Say you were compiling two Linux Kernels, side-by-side... one for your desktop and one for your android phone. Normally you&apos;d have two *HUGE* and nearly-identical source-trees containing all the code needed by both kernels, and both also containing code for all the drivers for a bunch of systems you&apos;ve never even seen before. </p><p>If the Linux Kernel used something like &apos;commonCode&apos;, you&apos;d have two folders containing little more than the specific configuration-files necessary for your two targets, and a third containing all the common stuff (and, optionally, wouldn&apos;t even need to have the code for unused systems/drivers). </p><p><br><strong>Example 2:</strong> If you were working on two separate (but numerically-near) versions of the kernel (possibly testing whether your custom driver&apos;s code is backwards-compatible?), it&apos;s quite likely that the two kernels&apos; source-trees would be largely identical. So why have two separate copies if you&apos;re not even working on that stuff? Instead, a shared source-tree could e.g. contain drivers/graphics/someModelGPU/ and under that folder could be 1.00/ and 1.02/...</p><p><br>This is what makes &apos;commonCode&apos; what it is... I don&apos;t do kernel-development, but the &apos;commonCode&apos; system works great for other types of projects as well...</p><p><br><br>For AVRs and other limited-memory systems, this bit&apos;s also quite handy: &apos;commonThings&apos; have options that make it a bit like using lib-math without it already being precompiled... E.G. If the sin()/cos() functions aren&apos;t used in your project, then don&apos;t compile them! You don&apos;t use some of the more esoteric &lt;stdio.h&gt; functions? Then why the heck are we compiling them into our program-memory? Etc. Etc. Etc. Again, this is an example. As it stands, this system only works with commonThings, not lib-math or stdio. <br></p><p><br><strong></strong></p><p><strong>A Little History:</strong><br></p><p>commonCode is *NOT* exclusively for AVRs, and is being detached from &apos;em more and more every-day. (see: <a data-mention-project-id="6450" href="/project/6450">#operation: Learn The MIPS (PIC32MX1xx/2xx)</a>, wherein commonCode is being abstracted and ported to PIC32)<br></p><p>I&apos;ve been developing software for AVRs since before Arduino existed and have done literally dozens of projects, many in permanent installations, and many others are being constantly improved... </p><p>In the process I&apos;ve written and reused a bunch of code a bunch of times...</p><p>And in *that* process, I&apos;ve developed this method for keeping this oft-reused code in a central location, handling dependencies, versions, etc. </p><p>As I&apos;ve been developing more with desktop-applications, I too have been modifying the commonCode system to be architecture-independent.  </p><p>I&apos;ve found that this system lends itself well to development of new projects...<br></p><p>I&apos;ll describe that after the list.</p><p><strong>A List of &apos;commonThings&apos;</strong></p><p>The list below contains some of my more well-developed commonThings...<br></p><p>The bold ones are regularly/recently updated. Some non-bold ones may be used-regularly but indirectly (e.g. hfModulation is used by heartbeat). </p><p>Some are quite old... (I&apos;ve tried to eliminate the questionably-functional from this list) </p><p><strong></strong><br><strong></strong></p><p><strong></strong>General / Misc.:<br></p><ul><li><strong>__std_wrappers</strong> - stuff from STDIO that I use in specific ways, regularly. E.G. &apos;serIn_nonBlock&apos; handles reading serial-input (on your desktop PC) without twiddling its thumbs until data&apos;s available. Similarly, there&apos;s a &apos;<a href="https://sites.google.com/site/geekattempts/home-1/commoncode/stdin_nonblock">stdin_nonBlock</a>&apos; that allows your main while-loop to run other processes while awaiting keyboard input. </li><li><strong>_make</strong> - Contains &apos;reallyCommon[2/3].mk&apos; used by *every* project, also avr-specific makefile-snippets, etc. <strong>reallyCommon[2/3].mk is basically what makes the commonCode system possible.</strong></li><li>cirBuff - Circular Buffer</li><li>avrOverride - Disable some AVR-only things for testing on a desktop PC</li></ul><ul><li><strong>bithandling</strong> - Lots of bit-manipulation stuff. LOTS</li></ul><ul><li>adc - Use that AVR ADC</li><li>adcFreeRunning - Use that AVR ADC in free-running mode</li></ul><p>Positioning (Not limited to motors):</p><ul><li>gotoPoxn - These implement motion-control using coordStuff</li><li>gotoRamped</li><li>holdPoxn - This implements a feedback system for holding a position despite varying loads. </li><li>motorPoxn</li><li>xyTracker - Handle motions where every intermediate point is to be traversed (e.g. drawing a line on a screen). Has many other uses as well, and is similar to hfModulation.</li><li>sineTravel - Create travel-plans with sinusoidal-motion, circles, arcs, etc. This is also used by gotoRamped to ramp the speed of a linear-motion</li></ul><p>Motor Control:</p><ul><li>lmd18200 - H-Bridge chip</li><li>l298 - H-Bridge chip</li><li>hctl - Connect a quadrature encoder via the HCTL-2000 series chips</li><li>encoderDirect - Connect a quadrature encoder</li></ul><p>Modulation and blinking:<br></p><ul><li><strong></strong><a href="https://github.com/ericwazhung/meh-heartbeat"><strong>heartbeat</strong></a><strong></strong> - fade/error-blink an LED and use a pushbutton</li><li>pwm - Attempts to standardize the AVRs&apos; PWM interface</li><li>hfModulation - &quot;High Frequency Modulation&quot; similar to PWM, but toggles the output as quickly as possible to maintain the average power</li></ul><p>Keyboards/Keypads and other input:<br></p><ul><li><a href="https://sites.google.com/site/geekattempts/home-1/commoncode/hsstowawaykb">hsStowawayKB</a> - Connect a Targus Stowaway Keyboard for Handspring Visor (RS-232)</li><li><strong></strong><a href="http://hackaday.io/project/3663-anabuttons"><strong>anaButtons</strong></a> - Connect a button-matrix to a digital I/O via resistors and capacitor</li><li>piezoHitDetector - Use a piezo-element to detect sharp noises and physical taps/hits</li></ul><p>LCDs / Graphics:</p><ul><li>lcd - ASCII/Text LCDs</li><li><strong>lcdStuff</strong> - GRAPHICAL -  Hsync/Vsync-based LCD displays... This works with <a href="http://hackaday.io/project/3898-my-very-first-binary-clock" target="_blank">http://hackaday.io/project/3898-my-very-first-binary-clock</a>, also <a href="https://sites.google.com/site/geekattempts/home-1/sdramthing" target="_blank">https://sites.google.com/site/geekattempts/home-1/sdramthing</a> and originated with <a href="https://sites.google.com/site/geekattempts/home-1/drive-an-old-laptop-display-from-an-avr" target="_blank">https://sites.google.com/site/geekattempts/home-1/drive-an-old-laptop-display-from-an-avr</a> </li><li>nlcd - The hacker-friendly B/W Nokia display. This is based on the widely-available code, but extends functionality like scrolling text</li><li>colorThing - Display every displayable color on an LCD in various patterns</li><li>charBitmap - A Bitmap-character-set</li><li>hpglText - a simple vector-based font originally used in HP plotters/printers. This was based on the program &apos;hp2xx&apos; This has been implemented in </li></ul><p>Math:</p><ul><li>multDiv64</li><li>typechg - handle changing of types (e.g. uint16-&gt;uint8) while trying to maintain the closest possible value (i.e. 512(u16) -&gt; 255(u8))</li><li>sineTable - a table of SINE values, in integer-form, no floats necessary.</li><li>coordStuff - Unlimited-axes 32-bit coordinate-system</li><li>goertz - The Goertzel-Algorithm (measure phase and magnitude of a specified frequency)</li></ul><p>Serial/Protocols:</p><ul><li>midi_in - Receive and process MIDI notes, etc.</li><li>midi_out - Transmit MIDI notes, etc.</li><li>sysex_debug - Use MIDI SysEx to send debugging messages</li><li>polled_ps2_host - Use a PS2 device, like a touchpad</li><li><a href="https://github.com/ericwazhung/meh-polled_uar">polled_uar</a> - bitbanged/polled UART (Receiver-Only)</li><li>polled_uat - bitbanged/polled UART (Transmitter-Only) (Test-Code also exists here which implements full duplex Tx/Rx via polled_uar)</li><li>uart_in - Use the AVR U[S]ART Receiver</li><li>uart_out - Use the AVR U[S]ART Transmitter</li><li>usart_spi - Use the AVR USART as an SPI Master</li><li>usi_spi - Use the ATTiny series&apos; USI for SPI</li><li>usi_uar - Use the ATTiny series&apos; USI for UART (Receiver-Only)</li><li><a href="https://sites.google.com/site/geekattempts/home-1/wacom-tablet-bluetoother">btbConnector</a> - Connect a serial peripheral to a computer via a BlueToothBee, transparently to its driver</li></ul><p>Timers and such:<br></p><ul><li><strong>tcnter</strong> - Use a free-running timer for high-precision timing (This is used quite a bit, these days... polled_ua[r/t] use this to handle bit-banging, etc.) </li><li>timerCommon - Attempt to standardize an interface to AVRs&apos; timers</li><li>tinyPLL - Start the ATTiny861/85&apos;s PLL</li><li>delayCyc - Delay an *exact* number of cycles from 1-127 (AVR assembly)</li><li>dmsTimer - &quot;Deci-Millisecond&quot; (.0001s) timer for various timing things</li></ul><p><br><strong></strong></p><p><strong>Starting a new project:</strong></p><p>When I start a new AVR project, I usually start with nothing more than the &apos;heartbeat&apos; test-code... This gets me running with a fading LED, a timer, and a pushbutton. (I have an LED and pushbutton attached to my SPI-programmer&apos;s &quot;dongle&quot;, so that I only need to wire-up the AVR, power, and a programming-header). If the LED fades at 8-seconds per cycle, then I know everything&apos;s working/configured right.</p><p><br>From there, I move on to the &apos;polled_uat&apos; test-code, at which point I have serial I/O at 9600bps. (Recently, I&apos;ve leaned away from using the U[S]ART and USI peripherals, as these are device-specific. The polled_uar and polled_uat are NOT AVR-Specific, and actually have desktop-PC based test-code that allows you to simulate serial I/O with a couple keys on the keyboard. Further, the polled_uar/t can be placed on any pins, so the default is to have them attached to pins on my programmer&apos;s &quot;dongle,&quot; as well.).</p><p>Depending on my needs, I usually steal a few lines of code from other commonThings&apos; test-code (throw their init() and update() functions in main, and copy a few lines from their &apos;makefile&apos;). Then start modifying code as-necessary.</p><h2>SEE: <a href="https://hackaday.io/project/3828-commoncode-not-exclusively-for-avrs/log/23363-system-design">System Design/Flow</a><br></h2><p><strong>STATUS:</strong></p><p>I started making my commonCode available as a result of posting my &apos;audioThing&apos; project. (Thanks to the Trinket Everyday-Carry Contest for the motivation!)</p><p>As part of that process, I&apos;ve come up with some new and easier methods for using and distributing commonThings, some new standards as far as test-code, and more. I&apos;m hoping to make the getting-started process more step-by-step, implement test-code in commonThings that don&apos;t have them, and more.</p><p>A *big* hurdle I&apos;ve yet to figure-out is *how* to distribute it! You see there&apos;s *dozens* of commonThings, and even more I didn&apos;t list here... I wouldn&apos;t mind using something like git, and even started putting stuff up on gitHub, but that doesn&apos;t really seem to lend-itself well to the structure, here... For one thing, it means having dozens of separate repositories. Then, to make things even more confusing; how should I handle *versions*? &apos;heartbeat&apos; is now at v2.02 and has about 10 *functional* versions leading up to that. For the most-part there&apos;s no reason to distribute *all* of these, but some older projects still depend on older versions... changing them over to v2+ is a big change... and there&apos;s no guarantee that v1.50 is backwards-compatible with v1.10 (though most-likely v1.19 is). You get the idea. Even if I *only* uploaded the latest versions, what when I&apos;ve developed 2.50?</p><p>Unless I can find (or am directed to?) a system that lends itself to a structure like this, the best I can think is to run a custom web-server... That would be my normal path; (I tend to reinvent the wheel, but usually do-so in a way that works well for my needs while giving me a good learning-experience in the process), but these days I don&apos;t have a steady internet-connection to serve from, nor access to a server like that...</p><p>So, for now, there&apos;s a bit to be done, and a bit to ponder.</p><p><strong>Progect Log Table Of Contents </strong>(roughly oldest to newest, some from &apos;the other projects&apos;)<strong>:</strong></p><p><strong></strong></p><ul><li><a href="https://hackaday.io/project/3828/log/12964-new-layout-thoughts"><strong>breakdown of files/configs ideas</strong> - 12964-new-layout-thoughts</a></li><li>	<a href="https://hackaday.io/project/3828/log/17442-wee"><strong>potential scrapping of new file/config layout</strong> - 17442-wee</a></li><li><a href="https://hackaday.io/project/3828/log/13282-had-blog-mention-please-commentfollow"><strong>hacklet mention</strong> - 13282-had-blog-mention-please-commentfollow</a></li><li><a href="https://hackaday.io/project/3828/log/19480-had-blog-entry-new-followers-and-a-brief-revisit"><strong>blog mention! + Maybe the new file-layout isn&apos;t so bad...</strong> - 19480-had-blog-entry-new-followers-and-a-brief-revisit</a></li><li><a href="https://hackaday.io/project/3828/log/19655-hey-coding"><strong>Maybe Git can be forced to work...</strong> - 19655-hey-coding</a></li><li><a href="https://hackaday.io/project/3828/log/19754-gitty"><strong>Git automation attempts</strong> - 19754-gitty</a></li><li><a href="https://hackaday.io/project/3828/log/20141-abstractn-and-picn"><strong>initial thoughts on abstracting code via PIC32... once simulated motion-control via openGL!</strong> - 20141-abstractn-and-picn</a></li><li><a href="https://hackaday.io/project/6450/log/20427-its-alive"><strong>&apos;heartbeat&apos; running on PIC32 + video</strong> - pic32/log/20427-its-alive</a></li><li><a href="https://hackaday.io/project/6450-operation-learn-the-mips-pic32mx1xx2xx/log/20769-wins-and-tcnter"><strong>tcnter explanation + PIC32 porting/abstraction process</strong> - pic32/log/20769-wins-and-tcnter</a></li><li><a href="https://hackaday.io/project/6450/log/22496-finally"><strong>heartbeat, polled-uat, polled-uar ported/abstracted to pic32, now on to motion-control (detailed)</strong> - pic32/log/22496-finally</a> </li><li><a href="https://hackaday.io/project/3828/log/22497-the-main-three-now-on-pic32"><strong>heartbeat, polled-uat, polled-uar ported/abstracted to pic32, now on to motion-control</strong> <strong>(brief)</strong> - 22497-the-main-three-now-on-pic32</a></li><li><a href="https://hackaday.io/project/3828/log/23266-this-is-getting-confusing-video"><strong>Three Projects That Feed Into Each Other + Video of commonCode&apos;s motion-control on PIC32</strong> - 23266-this-is-getting-confusing-video</a></li><li><a href="https://hackaday.io/project/3828-commoncode-not-exclusively-for-avrs/log/23363-system-design"><strong>System Design/Flow</strong> - 23363-system-design</a></li></ul><p><br><strong></strong></p><p><strong>Licensing:</strong></p><p>The Vast Majority of &apos;commonCode&apos; and its &apos;commonThings&apos; are written by me, in their entirety, and fall under my so-called &apos;mehPL&apos; (included below). </p><p>Exceptions are noted in the corresponding code. </p><p>Exceptions include:</p><ul><li>&apos;nlcd&apos; - drivers for the &quot;hacker-friendly&quot; Nokia LCD, whose code is based heavily on <em>3310_routines.c</em> found all over the internets. Unfortunately, it&apos;s so ubiquitous I have yet to locate an original source, nor licensing info. The original author is claimed to be: &quot;CC Dharmani, Chennai (India)&quot; and was modified by &quot;Michael Spiceland (<a href="http://tinkerish.com" target="_blank">http://tinkerish.com</a>)<span class="redactor-invisible-space">&quot; before my heavy modifications.</span></li><li><span class="redactor-invisible-space">&apos;hpglText&apos; - which implements a simplistic vector-font originally used in HP Pen-Plotter. The character-set was originally part of &apos;HP2xx&apos; &quot;<em></em></span><em>Copyright (c) 1992 - 1994 Heinz W. Werntges.  All rights reserved. Parts Copyright (c) 1999  Martin Kroeker  All rights reserved. Distributed by Free Software Foundation, Inc</em>.&quot; &quot;<em>under the conditions described in the GNU General Public License.</em>&quot;</li><li>Also a note should be made about commonCode&apos;s original inspiration which came from the &apos;gcc-test&apos; AVR &apos;tutorials&apos; by Eric B. Weddington, some tiny pieces of makefile code (variable names, mainly) still remain from his work. <strong>TODO!</strong> </li></ul><p>See the mehPL for additional gratititude!</p><p>&apos;commonCode&apos; was developed to make use of GPLed tools such as gcc, gnu-bash, gnu-make, etc. as well as avr-libc, etc. However, commonCode does not contain their source-code except where explicitly mentioned (again, e.g. variable/register names/dereferencing-methods found in avr/io.h, etc) <strong>TODO!</strong> Similarly, Microchip&apos;s xc32-gcc, associated tools (xc32-objdump, etc.), and header/linker files are used by-default for PIC32 devices, but these files are not included with commonCode, and must be downloaded from Microchip and installed by the user.<br></p><p><strong>mehPL:</strong></p><p>My so-called &quot;mehPL&quot; is listed below. There&apos;s certainly room for improvement, and I&apos;m willing to flex on a few requirements, in light of better ideas. (Feel free to contact me with &apos;em!) I haven&apos;t yet fully read the GPL nor other de-facto open-source licenses, but I am pretty certain they do not include some aspects I consider essential in my willingness to share my code... Again, I&apos;m open to being enlightened!</p><p>Currently the top of each file is noted as follows:</p><pre class="hljs cpp"><span class="hljs-comment">/* mehPL:
 *    This is Open Source, but NOT GPL. I call it mehPL.
 *    I&apos;m not too fond of long licenses at the top of the file
 *    Please see the bottom.
 *    Enjoy!
 */</span></pre><p>The bottom of each file is noted with the terms of the mehPL:<br><strong></strong></p><p><strong></strong></p><pre class="hljs cpp"><strong><span class="hljs-comment">/* mehPL:
 *    I would love to believe in a world where licensing shouldn&apos;t be
 *    necessary; where people would respect others&apos; work and wishes,
 *    and give credit where it&apos;s due.
 *    A world where those who find people&apos;s work useful would at least
 *    send positive vibes--if not an email.
 *    A world where we wouldn&apos;t have to think about the potential
 *    legal-loopholes that others may take advantage of.
 *
 *    Until that world exists:
 *
 *    This software and associated hardware design is free to use,
 *    modify, and even redistribute, etc. with only a few exceptions
 *    I&apos;ve thought-up as-yet (this list may be appended-to, hopefully it
 *    doesn&apos;t have to be):
 *
 *    1) Please do not change/remove this licensing info.
 *    2) Please do not change/remove others&apos; credit/licensing/copyright
 *         info, where noted.
 *    3) If you find yourself profiting from my work, please send me a
 *         beer, a trinket, or cash is always handy as well.
 *         (Please be considerate. E.G. if you&apos;ve reposted my work on a
 *          revenue-making (ad-based) website, please think of the
 *          years and years of hard work that went into this!)
 *    4) If you *intend* to profit from my work, you must get my
 *         permission, first.
 *    5) No permission is given for my work to be used in Military, NSA,
 *         pranks, victimizations, &apos;hacking&apos; of others&apos; computers/networks,
 *         or other creepy-ass purposes. No exceptions. And if there&apos;s
 *         any question in your mind as to whether your project qualifies
 *         under this category, you must get my explicit permission.
 *
 *    The open-sourced project this originated from is ~98% the work of
 *    the original author (me), except where otherwise noted.
 *    That includes the &quot;commonCode&quot; and makefiles.
 *    Thanks, of course, should be given to those who worked on the tools
 *    I&apos;ve used: avr-dude, avr-gcc, gnu-make, vim, usb-tiny, and
 *    I&apos;m certain many others.
 *    And, as well, to the countless coders who&apos;ve taken time to post
 *    solutions to issues I couldn&apos;t solve, all over the internets.
 *
 *
 *    I&apos;d love to hear of how this is being used, suggestions for
 *    improvements, etc!
 *
 *    The creator of the original code and original hardware can be
 *    contacted at:
 *
 *        EricWazHung At Gmail Dotcom
 *
 *    This code&apos;s origin (and latest versions) may be found at:
 *
 *        <a href="https://github.com/ericwazhung">https://github.com/ericwazhung</a>
 *        <a href="https://code.google.com/u/ericwazhung/">https://code.google.com/u/ericwazhung/</a>    
 *        <a href="https://github.com/esot-eric-test">https://github.com/esot-eric-test</a>         
 *
 *    The site associated with the original open-sourced project is at:
 *
 *        <a href="https://sites.google.com/site/geekattempts/">https://sites.google.com/site/geekattempts/</a>
 *
 *    If any of that ever changes, I will be sure to note it here,
 *    and add a link at the pages above.
 *
 *    (Wow, that&apos;s a lot longer than I&apos;d hoped).
 *
 *    Enjoy!
 */</span>
</strong></pre><br>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'nEOwrJrA-VEGJgescttSxqAzth_OErwGzZ8E';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>