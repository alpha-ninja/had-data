<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Redtree Hydra: A modular platform for robotics &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

    


        <meta name="description" content="The Redtree Hydra is the 1st computer for robotics designed to easily add components, communicate with groups of other robots and share data">
        <link rel="canonical" href="http://hackaday.io/project/5808-redtree-hydra-a-modular-platform-for-robotics" />



    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>

    <!-- Twitter Card data -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@hackadayio">
    <meta name="twitter:title" content="Redtree Hydra: A modular platform for robotics">
    
        <meta name="twitter:description" content="The Redtree Hydra is a project created by Redtree Robotics, a startup out of Waterloo, ON. 

It was built to solve three problems. First - it is difficult and takes a long time to connect all the sensors, motors and parts to a robot. Second, communication is usually an afterthought in robotics. Third, robots are increasingly data focused, but design of robots is not.

The Hydra uses an FPGA to enable plug-and-play like connectivity of sensors, motors and components to the computer. We also provide software that reduces the need for low level driver development to make connecting parts easy. The Redtree Hydra also comes with built-in Wi-Fi, Bluetooth and 4G/LTE along with software that manages these connections so you don&#39;t need to be an expert in communications. Our software supports swarming and cloud connectivity. Our cloud software lets you visualize sensor data and manage fleets of robots in real-time anywhere in the world.">
    
    
        <meta name="twitter:image" content="https://cdn.hackaday.io/images/resize/600x600/9420451433881215878.png">
    

    <!-- Open Graph data -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Redtree Hydra: A modular platform for robotics">
    <meta property="og:url" content="http://hackaday.io/project/5808-redtree-hydra-a-modular-platform-for-robotics">
    
        <meta property="og:description" content="The Redtree Hydra is a project created by Redtree Robotics, a startup out of Waterloo, ON. 

It was built to solve three problems. First - it is difficult and takes a long time to connect all the sensors, motors and parts to a robot. Second, communication is usually an afterthought in robotics. Third, robots are increasingly data focused, but design of robots is not.

The Hydra uses an FPGA to enable plug-and-play like connectivity of sensors, motors and components to the computer. We also provide software that reduces the need for low level driver development to make connecting parts easy. The Redtree Hydra also comes with built-in Wi-Fi, Bluetooth and 4G/LTE along with software that manages these connections so you don&#39;t need to be an expert in communications. Our software supports swarming and cloud connectivity. Our cloud software lets you visualize sensor data and manage fleets of robots in real-time anywhere in the world.">
    
    
        <meta property="og:image" content="https://cdn.hackaday.io/images/resize/600x600/9420451433881215878.png">
    

    <script>
        var HIO = {};
    </script>

</head>
<body class="project-detail ">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F5808-redtree-hydra-a-modular-platform-for-robotics">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

    
        <div class="page-basic-info-static guest-message-signup">
            
                <h2>Does this project spark your interest?</h2>
                <p class="page-basic-info-text">Become a member to follow this project and don't miss any updates</p>

            

            <div class="signup-holder">
                <form method="POST" action="/signup">
                    <input type="hidden" name="_csrf" value="wUxnDOKP-E3brzvJVAOt9rjiI6QI5gGamPYo" />
                    <input type="text" class="input-field input-email" placeholder="Your email address"  name="email"  /><input type="password" class="input-field input-password" placeholder="Password"  name="password" /><button class="black-gold-button signup" type="submit">Become a member</button>
                    <input class="input-field" placeholder="Invitation Code" required name="invitation_code" value="5Ad0ix2-b96J" type="hidden" />
                </form>
            </div>

        </div>
    


    

    <div class="header-photo" >
        <div class="overlay"></div>
    </div>

    <div class="headline">
        <div class="container">
            

            <h2><a href="/project/5808-redtree-hydra-a-modular-platform-for-robotics">Redtree Hydra: A modular platform for robotics</a></h2>
            <p class="description">The Redtree Hydra is the 1st computer for robotics designed to easily add components, communicate with groups of other robots and share data</p>

            

            
                <div class="author">
                    <a href="/hacker/68366">
                        <img src="https://pbs.twimg.com/profile_images/540626597389156352/aPg6BKN0.png" />
                        
                            <div class="author-details">
                                <div class="author-name">Redtree Robotics</div>
                            </div>
                        
                    </a>
                </div>
            
        </div>
    </div>

    <div class="container">
        <div class="content-left">

            
                <ul class="submissions-icons">
                    
                        
                            <li>
                                <a href="/submissions/prize2015/list" class="submission-icon submission-icon-5">
                                    The 2015 Hackaday Prize
                                </a>
                            </li>
                        
                        
                            <script>
                                HIO.forPrize = true;
                            </script>
                        
                    
                </ul>
            

            
                <a href="/project/5808/gallery#ab74603ec8566c386579131c3eb10804" id="project-image" class="image-holder" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/9420451433881215878.png)" data-image="https://cdn.hackaday.io/images/resize/600x600/9420451433881215878.png">
                </a>
            

            <div class="thumbs-holder">
                
                        <a href="/project/5808/gallery#ab74603ec8566c386579131c3eb10804" class="image-holder thumb" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/9420451433881215878.png)" data-image="https://cdn.hackaday.io/images/resize/600x600/9420451433881215878.png">
                    </a>
                
                        <a href="/project/5808/gallery#d739f094f034da086ed9f6c1db8fd78d" class="image-holder thumb" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/7484831431629158162.jpg)" data-image="https://cdn.hackaday.io/images/resize/600x600/7484831431629158162.jpg">
                    </a>
                
                        <a href="/project/5808/gallery#d428c2b4ed38991c8897032f893c2024" class="image-holder thumb thumb-last" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/5483841431628817375.png)" data-image="https://cdn.hackaday.io/images/resize/600x600/5483841431628817375.png">
                    </a>
                
                        <a href="/project/5808/gallery#cb3226e548c013395038d791239d7425" class="image-holder thumb" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/3275351431629490788.jpg)" data-image="https://cdn.hackaday.io/images/resize/600x600/3275351431629490788.jpg">
                    </a>
                
                        <a href="/project/5808/gallery#c59e09e957cba9d9f5b4ec3c46fa079d" class="image-holder thumb" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/4566321433881359230.jpg)" data-image="https://cdn.hackaday.io/images/resize/600x600/4566321433881359230.jpg">
                    </a>
                
                        <a href="/project/5808/gallery#e9ef03134a2b20c331e85d5d4fda541f" class="image-holder thumb thumb-last" style="background-image: url(https://cdn.hackaday.io/images/resize/600x600/5872511433881368202.jpg)" data-image="https://cdn.hackaday.io/images/resize/600x600/5872511433881368202.jpg">
                    </a>
                
            </div>

            
                <div class="view-gallery-holder">
                    <a href="/project/5808/gallery">
                        <div class="view-gallery grey-gold-button very-small-button">View Gallery</div>
                    </a>
                </div>
            

            

            

            

            

                <div class="project-following-container ">
                    <a href="javascript:void(0)" data-href="/project/5808/event/unfollow" class="gold-gold-button unfollow text-changing-button" data-before="<span class='icon-checkmark-gray'>Following</span>" data-after="Unfollow?"><span class="icon-checkmark-gray">Following</span></a>
                    <a href="javascript:void(0)" data-href="/project/5808/event/follow" class="gold-gold-button follow">Follow project</a>
                </div>
                
                

                <div id="similars">
                    <div class="similars-header">
                        Similar projects worth following
                        <a href="javascript:void(0)" class="submissions-close"></a>
                    </div>
                </div>

                
                    <div class="project-skulling-container ">
                        <a href="javascript:void(0)" data-href="/project/5808/event/unskull" class="gold-gold-button unskulled text-changing-button" data-before="<span class='icon-skull'>You</span>" data-after="Unskull?"><span class="icon-skull">You</span></a>
                        <a href="javascript:void(0)" data-href="/project/5808/event/skull" class="gold-gold-button skulled"><span class="icon-skull">Give a</span></a>
                    </div>
                

            

            
            

            <div class="section section-project-stats">
                
                    <span class="icon-view-count" title="View Count">1.7k</span>
                
                <a>
                    <span class="icon-comment-with-hover oi-font-color-grey" title="Comments" id="comment_count">0</span>
                </a>
                
                    <a href="/hackers/all/project/5808/following">
                
                    <span class="icon-view oi-font-color-grey" title="Followers" id="follower_count">30</span>
                
                    </a>
                

                
                    
                        <a href="/hackers/all/project/5808/likers">
                    
                            <span class="icon-skull oi-font-color-grey" title="Skulls" id="like_count">17</span>
                    
                        </a>
                    
                
            </div>

            
                <div class="section section-team">
                    <h5>
                        
                            Team
                        
                    </h5>

                    <ul>
                        
                            
                                <li>
                                    <img src="https://pbs.twimg.com/profile_images/540626597389156352/aPg6BKN0.png" class="team-photo"/>
                                    <a class="team-link" href="/hacker/68366-redtree-robotics">Redtree Robotics</a>

                                    

                                    
                                </li>
                            
                        
                            
                                <li>
                                    <img src="https://pbs.twimg.com/profile_images/538829040442822657/gSjdWrM8.jpeg" class="team-photo"/>
                                    <a class="team-link" href="/hacker/68378-jason-ernst">Jason Ernst</a>

                                    

                                    
                                </li>
                            
                        
                            
                                <li>
                                    <img src="https://cdn.hackaday.io/images/resize/100x100/8231971431707310468.jpg" class="team-photo"/>
                                    <a class="team-link" href="/hacker/68521-tom-hummel">Tom Hummel</a>

                                    

                                    
                                </li>
                            
                        
                    </ul>

                    <div class="error-message hide" id="team-error"><p></p></div>

                    
                    <input type="hidden" name="HADPrizeSubmission" value="true"/>
                        
                            <a href="javascript:void(0)"
                               
                                    class="login-button"
                               
                            >Request to join this project</a>
                        
                    

                </div>
            

            

            
                <div class="section section-links">
                    <ul class="links-list">
                        
                            <li class="links-item">
                                <a href="http://www.redtreerobotics.com/" target="_blank" class="icon-other">Redtree Robotics - Homepage</a>
                            </li>
                        
                            <li class="links-item">
                                <a href="https://www.youtube.com/channel/UCeggoKrqZ4lwIMNCBFT5_3Q" target="_blank" class="icon-other">Redtree Robotics - Youtube</a>
                            </li>
                        
                            <li class="links-item">
                                <a href="https://github.com/redtreerobotics" target="_blank" class="icon-github">Redtree Robotics - Github</a>
                            </li>
                        
                    </ul>
                </div>
            


            
                
                    <div class="section section-tags">
                        
                            <div class="special-tags">
                                <a href="/projects/tag/hardware" class="tag tag-hardware">hardware</a>
                            </div>
                        
                            <div class="special-tags">
                                <a href="/projects/tag/ongoing%20project" class="tag tag-ongoing">ongoing project</a>
                            </div>
                        
                        
                            <a href="/projects/tag/UnManned" class="tag">UnManned</a>
                        
                            <a href="/projects/tag/drone" class="tag">drone</a>
                        
                            <a href="/projects/tag/linux" class="tag">linux</a>
                        
                            <a href="/projects/tag/Mobile" class="tag">Mobile</a>
                        
                            <a href="/projects/tag/FPGA" class="tag">FPGA</a>
                        
                            <a href="/projects/tag/bluetooth" class="tag">bluetooth</a>
                        
                            <a href="/projects/tag/wifi" class="tag">wifi</a>
                        
                            <a href="/projects/tag/Sensors" class="tag">Sensors</a>
                        
                            <a href="/projects/tag/Visualization" class="tag">Visualization</a>
                        
                            <a href="/projects/tag/Robotics" class="tag">Robotics</a>
                        
                            <a href="/projects/tag/C" class="tag">C</a>
                        
                            <a href="/projects/tag/control" class="tag">control</a>
                        
                            <a href="/projects/tag/ROBOT" class="tag">ROBOT</a>
                        
                            <a href="/projects/tag/Xilinx" class="tag">Xilinx</a>
                        
                            <a href="/projects/tag/ZIGBEE" class="tag">ZIGBEE</a>
                        
                            <a href="/projects/tag/cloud" class="tag">cloud</a>
                        
                            <a href="/projects/tag/c%2B%2B" class="tag">c++</a>
                        
                            <a href="/projects/tag/opencv" class="tag">opencv</a>
                        
                            <a href="/projects/tag/Api" class="tag">Api</a>
                        
                            <a href="/projects/tag/UAV" class="tag">UAV</a>
                        
                            <a href="/projects/tag/ros" class="tag">ros</a>
                        
                            <a href="/projects/tag/ugv" class="tag">ugv</a>
                        
                            <a href="/projects/tag/computer" class="tag">computer</a>
                        
                            <a href="/projects/tag/rover" class="tag">rover</a>
                        
                            <a href="/projects/tag/TheHackadayPrize" class="tag">TheHackadayPrize</a>
                        
                            <a href="/projects/tag/hackadayprize" class="tag">hackadayprize</a>
                        
                            <a href="/projects/tag/4g" class="tag">4g</a>
                        
                            <a href="/projects/tag/Motors" class="tag">Motors</a>
                        
                            <a href="/projects/tag/CONNECTION" class="tag">CONNECTION</a>
                        
                            <a href="/projects/tag/TEXAS%20INSTRUMENTS" class="tag">TEXAS INSTRUMENTS</a>
                        
                            <a href="/projects/tag/communications" class="tag">communications</a>
                        
                            <a href="/projects/tag/debian" class="tag">debian</a>
                        
                            <a href="/projects/tag/real-time" class="tag">real-time</a>
                        
                            <a href="/projects/tag/Zynq" class="tag">Zynq</a>
                        
                            <a href="/projects/tag/2015HackadayPrize" class="tag">2015HackadayPrize</a>
                        
                            <a href="/projects/tag/lte" class="tag">lte</a>
                        
                            <a href="/projects/tag/components" class="tag">components</a>
                        
                            <a href="/projects/tag/Swarms" class="tag">Swarms</a>
                        
                            <a href="/projects/tag/Redtree" class="tag">Redtree</a>
                        
                            <a href="/projects/tag/redtree%20hydra" class="tag">redtree hydra</a>
                        
                            <a href="/projects/tag/Hydra" class="tag">Hydra</a>
                        
                            <a href="/projects/tag/UUV" class="tag">UUV</a>
                        
                            <a href="/projects/tag/Quectel" class="tag">Quectel</a>
                        
                            <a href="/projects/tag/ARM-a9" class="tag">ARM-a9</a>
                        
                    </div>
                
            

            <div class="section section-share">
                <h5>
                    
                        Enjoy this project?
                    
                </h5>
                
                <a href="https://twitter.com/intent/tweet?url=http://hackaday.io/project/5808-redtree-hydra-a-modular-platform-for-robotics&text=Redtree%20Hydra%3A%20A%20modular%20platform%20for%20robotics by redtree-robotics&related=hackadayio&via=hackadayio" target="_blank" class="icon-twitter icon-twitter-notext gray-link">Share on twitter</a> &nbsp; <a href="https://www.facebook.com/sharer/sharer.php?u=http://hackaday.io/project/5808-redtree-hydra-a-modular-platform-for-robotics" target="_blank" class="icon-facebook icon-facebook-notext gray-link">Share on Facebook</a> &nbsp; <a href="https://plus.google.com/share?url=http://hackaday.io/project/5808-redtree-hydra-a-modular-platform-for-robotics&h1=en-US" target="_blank" class="icon-google icon-google-notext gray-link">Share on Google+</a>
            </div>

            
            
                <div class="section section-lists">
                    <h5>This project is in these lists</h5>
                    
                        <div class="section-lists list-items">
    <a href="/list/5844-2015-thp-texas-instruments-parts">
        <div title="2015 THP: Texas Instruments Parts" class="list-item-cover"
                
                    style="background-image: url('https://cdn.hackaday.io/images/resize/600x600/5750831431802027935.jpg')"
                
                >
        </div>

        <div class="project-item-title">
            <h4>2015 THP: Texas Instruments Parts</h4>
        </div>
    </a>
</div>

                    
                        <div class="section-lists list-items">
    <a href="/list/5435-texas-instruments-parts">
        <div title="Texas Instruments Parts" class="list-item-cover"
                
                    style="background-image: url('https://cdn.hackaday.io/images/resize/600x600/6264021429904489331.jpg')"
                
                >
        </div>

        <div class="project-item-title">
            <h4>Texas Instruments Parts</h4>
        </div>
    </a>
</div>

                    
                    <a href="/lists/">Browse all lists »</a>
                </div>
            

            
                <div class="section section-submissions-lists">
                    <h5>This project is submitted for</h5>
                    <ul>
                        
                            <li><a href="/submissions/prize2015/list">The 2015 Hackaday Prize</a></li>
                        
                    </ul>
                </div>
            

            <div class="section section-project-time">
                <p class="project-time">
                    This project was
                        
                            created on 05/14/2015
                            
                                 and last updated 20 days ago.
                            
                        
                </p>
            </div>

            

        </div>

        <div class="content-right">

            
                <div class="section section-description">
                    <h5>Description</h5>
                    <div class="description">The Redtree Hydra is a project created by Redtree Robotics, a startup out of Waterloo, ON. <br /><br />It was built to solve three problems. First - it is difficult and takes a long time to connect all the sensors, motors and parts to a robot. Second, communication is usually an afterthought in robotics. Third, robots are increasingly data focused, but design of robots is not.<br /><br />The Hydra uses an FPGA to enable plug-and-play like connectivity of sensors, motors and components to the computer. We also provide software that reduces the need for low level driver development to make connecting parts easy. The Redtree Hydra also comes with built-in Wi-Fi, Bluetooth and 4G/LTE along with software that manages these connections so you don't need to be an expert in communications. Our software supports swarming and cloud connectivity. Our cloud software lets you visualize sensor data and manage fleets of robots in real-time anywhere in the world.</div>
                </div>
            

            
                <div class="section section-details">
                    <h5>
                        
                            Details
                        
                    </h5>
                    

                    
                        <div class="post-content details-content">
                            <p><p>The Redtree Hydra is designed for connectivity. We have made it easy to attach sensors, actuators and motors with our hardware so you no longer need to design complicated circuits.</p><p>Our software tools help to auto-generate device drivers so that plugging in a component is almost as easy as plugging a mouse into a computer. This means you can get data from sensors into the computer so you can focus on writing programs and working with the data right away.</p><p>Hydra's seamless networking API makes it simple to share data with other robots or to the cloud where it can be used anywhere in the world. The Hydra middleware automatically sets up and managing your wireless connections so your robots are always connected.</p><p>We use a cutting edge Zynq dual-core ARM-A9 processor with an FPGA. This is the ideal tradeoff between performance and energy efficiency.<br></p><p>Sensors, motors, actuators and components can be added to our system with up to four modular I/O cards. You only pay for what you require.</p><p>Out of the box, we provide Wi-Fi and Bluetooth with the option to add Zigbee and 4G/LTE. Our seamless technology uses all of them together to always stay connected.<br></p><p>Our real-time linux kernel means data gets where it needs to be when it needs to be there.</p><p>We know engineers are used to their tools. We support everything from c/c++, ROS and OpenCV, to Matlab / Labview.<br></p><p>It's easy to share data with other robots, store it in the cloud and analyze it in real-time with Hydra.<br></p><p>Four I/O slots are provided, and can be populated with these cards:<br></p><p>Reconfigurable I/O Card - Can support any set or combination of digital interfaces. A total of 20 lines at 5V are supplied and can be configured with our yet-to-be-released configuration tool. All you have to do is assign each line to an interface. Digital interfaces supported:</p><p>GPIO In/Out</p><p>PWM</p><p>Quadranture Encoders</p><p>Counters</p><p>UART (Full or Half Duplex and modem signals optional)</p><p>CAN</p><p>I2C/SMBus</p><p>SPI (2, 3, or 4 wire and as many chip selects as desired)</p><p>etc, the list goes on</p><p>For example, with 20 lines you can have 4x UARTs, 4x PWM, 1x I2C, and 6 GPIO, or maybe you want to have 10 I2C interfaces. The combinations are endless, and all accessible and in our Linux environment.</p><p>Analog I/O Card - 32 Analog input Channels of 0-5V at 16 bits and 1ksps per channel. Never run out of analog interfaces again. Can be configured to a lower number of channels for a higher data rate for audio applications.</p><p>Standard Interfaces - These always come with our system:</p><p>1x Gigabit Ethernet</p><p>4x USB 2.0 Highspeed Ports</p><p>Wireless Inteferfaces - </p><p>WiFi 802.11 b/g/n </p><p>Bluetooth EDR v4.0</p><p>ZigBee 900 MHz (Optional)</p><p>3G/4G/LTE (Optional)</p><p>GPS (Optional)</p><p>Our main board also comes with a 9 degrees of freedom IMU (gyro/accelerometer/magnetometer).</p><p>The target price of the Redtree Hydra + one I/O card will be between $200 and $300. We also plan to offer a drone kit, a rover kit (each around $700-1000) and drone / rover kit (around $1000-1400). We intend on crowd funding this project and will post links to the campaign when we launch in the fall of 2015.</p><p>In the long run, we want to miniaturize all of this further so that it can be integrated as a system-level component into your own designs while retaining all of the benefits of our technology so that scalable, affordable, easy to build robotics are possible.</p>
                                
                            </p>
                        </div>
                    
                    <div class="detail-btns">
                    
                            
                    
                    </div>
                </div>

            

            
                
                    <div class="section section-components">
                        <h5>
                            
                                Components
                            
                        </h5>
                        
                            <ul class="section-component-list">
                                
                                    
    <li class="component-46941">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            Xilinx Zynq 7010
            <span class="component-description">Dual core ARM-A9 and FPGA</span>
       </span>
    </li>

    <li class="component-46942">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            1GB DDR3 SDRAM
            <span class="component-description"></span>
       </span>
    </li>

    <li class="component-46943">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            4G/LTE
            <span class="component-description">Exact Module TBD</span>
       </span>
    </li>

    <li class="component-46944">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            TI WiLink8
            <span class="component-description">Wi-Fi Bluetooth Module</span>
       </span>
    </li>

    <li class="component-46945">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            Zigbee
            <span class="component-description">Exact Module TBD</span>
       </span>
    </li>

    <li class="component-46946">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            10/100/1000 Ethernet 
            <span class="component-description"></span>
       </span>
    </li>

    <li class="component-46947">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            9 degrees of freedom IMU
            <span class="component-description">Exact Module TBD</span>
       </span>
    </li>

    <li class="component-46948">
        <span class="component-number">1</span>
        <span class="component-x">×</span>
        <span class="component-content">
            Real-time Linux OS
            <span class="component-description">Custom Real-time Debian Operation System</span>
       </span>
    </li>

    <li class="component-46949">
        <span class="component-number">4</span>
        <span class="component-x">×</span>
        <span class="component-content">
            Redtree I/O Cards
            <span class="component-description">Up to four supported, handles PWM, QEI, CAN, Analog, I2C, UART, USB, HDMI, Flexray, LIN, CAMIF, CSI-2, Camera Link and many more</span>
       </span>
    </li>

                                
                            </ul>
                        <p>
                            
                            
                        </p>
                    </div>
                
            

            
                <div class="section section-buildlogs">

                    <h5>Project logs</h5>
                    
                    <ul class="buillogs-list post-content details-content">
                    
                        <li>
                            <h2><a href="/project/5808/log/21757-complete-rover-build">Complete Rover Build</a></h2>
                            <small class="authorship">20 days ago  &bull;
                            <a class="gray-link" href="/project/5808/log/21757#discussion-list">
                                0 comments
                            </a>
                            </small>
                            <p><h2><span class="mw-headline">Assemble the Rover Frame</span></h2><p>We used a rover kit from Robotshop: <a rel="nofollow" class="external free" href="http://www.robotshop.com/ca/en/lynxmotion-tri-track-chassis-kit.html">http://www.robotshop.com/ca/en/lynxmotion-tri-track-chassis-kit.html</a>. Assemble it according to their instructions to build the frame and attach the motors. You can also use other kits, but you may need to make adjustments to the current outputted to the motors if you use something else. It should look something like this when you are done. </p><p><img src="https://cdn.hackaday.io/images/1261641438174883536.jpg"></p><p><img src="https://cdn.hackaday.io/images/3674601438174908214.jpg"></p><h2><span class="mw-headline">Attach the motor controller</span></h2><p><span class="mw-headline">We used a motor driver from Robotshop: <a class="external free" href="http://www.robotshop.com/ca/en/sabertooth-dual-regenerative-motor-driver.html">http://www.robotshop.com/ca/en/sabertooth-dual-regenerative-motor-driver.html</a> - wire up the motors to each channel, wire up power and ground from the battery and attach the wires to the motors. It should look like this when you are done:<br></span></p><p><span class="mw-headline"><img src="https://cdn.hackaday.io/images/2267651438174955422.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/278351438174971212.jpg"><span class="redactor-invisible-space"></span></span></span></p><h2><span class="mw-headline">Insert the Redtree I/O card into the Redtree Hydra</span></h2><div><span class="mw-headline">Insert the ribbon cable from the Redtree Hydra into the I/O card. Attach the I/O card wiring harness to the card and then wire the wires into the motor driver. You can configure which wires / pins control the signals with the <a href="http://www.redtreerobotics.com/wiki/index.php/Attach_a_Sensor" title="Attach a Sensor">FPGA configuration tool</a>. We attach the appropriate wires from the configuration tool to the signal wires on the motor driver. Our I/O card also provides power and ground so we attach these to the motor driver as well. The yellow wires are the signal wires and the black is the ground wire on the motor controller.<br></span></div><div><span class="mw-headline"><br></span></div><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/l1goSt8_IUs" frameborder="0" allowfullscreen=""></iframe><p><span class="mw-headline"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/7056211438175023794.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/4737991438175038584.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/8402601438175049748.jpg"><span class="redactor-invisible-space"></span></span></span><br></span></span></p><h2><span class="mw-headline">Attach Voltage Regulator</span></h2><div><span class="mw-headline">The Voltage regulator converts the battery from around 11 volts to 5 volts which is what the Redtree Hydra requires. We also added a switch here so we can turn the whole robot on and off. We have this wrapped in this black styrofoam / electrical tape to give it a bit of a cleaner look.<br></span></div><div><span class="mw-headline"><br></span></div><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/IHsenBLyfSM" frameborder="0" allowfullscreen=""></iframe><p><img src="https://cdn.hackaday.io/images/4489821438175094859.jpg"></p><h2><span class="mw-headline">Attach Xbox Receiver and Cleanup</span></h2><div><span class="mw-headline">The last hardware step is attaching the Xbox receiver: <a class="external free" href="http://www.amazon.ca/HDE-Wireless-compatible-Controllers-Platforms/dp/B0096PLB9O">http://www.amazon.ca/HDE-Wireless-compatible-Controllers-Platforms/dp/B0096PLB9O</a> since we are using an Xbox 360 controller to drive the robot around, and cleaning everything up. We basically just cable tie the wires and hot glue everything down so that it stays in place.<br></span></div><div><span class="mw-headline"><img src="https://cdn.hackaday.io/images/1043051438175120847.jpg"><span class="redactor-invisible-space"><br></span></span></div><h2><span class="mw-headline">Programming the FPGA</span></h2><div><span class="mw-headline">For more detailed information, see <a href="http://www.redtreerobotics.com/wiki/index.php/Attach_a_Sensor" title="Attach a Sensor">FPGA configuration tool</a>. In this step, we use the web tool which will be available at <a class="external free" href="http://www.redtreerobotics.com/fpga">http://www.redtreerobotics.com/fpga</a> to program the fpga. This tells the Hydra what pins on the I/O card are attached to the motor controllers. In this case, we are using two digital I/O, so we click &quot;digital out&quot; twice to add this to the pinout, and click finish. <br></span></div><div><span class="mw-headline"><img src="https://cdn.hackaday.io/images/2628761438175156308.png"><span class="redactor-invisible-space">When you click finish, the tool will automatically generate the files to program the FPGA when the Redtree Hydra is booted. Take the SDcard out of the Redtree Hydra and insert it into your computer. The two files &apos;boot.bin&apos; and &apos;system_wrapper.bit&apos; should be moved to the SDcard. The SDcard can then be ejected and re-inserted into the Redtree Hydra. <span class="redactor-invisible-space"></span><br></span></span></div><div><span class="mw-headline"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><br><img src="https://cdn.hackaday.io/images/9563511438175179811.png"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/1404391438175201243.jpg"><span class="redactor-invisible-space"><img src="https://cdn.hackaday.io/images/3363631438175205094.jpg"><span class="redactor-invisible-space"></span></span></span></span></span></span></div><h2><span class="mw-headline">Programming the Robot</span></h2><div><p>Next, turn on the robot, connect to its Wi-Fi network (default is rtr), and ssh to the robot. Default IP is 192.168.8.1. The username and password is &quot;redtree&quot; and &quot;robotics&quot;.</p><p>Check out the &quot;hello rover&quot; example from the Redtree Apps repository:</p><pre><span class="kw2">svn co</span> http:<span class="sy0">//</span>www.redtreerobotics.com<span class="sy0">/</span>svn<span class="sy0">/</span>redtree-apps<span class="sy0">/</span>trunk<span class="sy0">/</span> redtree-apps<span class="kw3">cd</span> redtree-apps<span class="sy0">/</span>hello_rover</pre><p>or if you prefer git:</p><pre><span class="kw2">git clone</span> https:<span class="sy0">//</span>github.com<span class="sy0">/</span>redtreerobotics<span class="sy0">/</span>redtree-apps.git<span class="kw3">cd</span> redtree-apps<span class="sy0">/</span>hello_rover</pre><p>You&apos;ll notice a makefile, a header file, and a .cpp file file. The Makefile has been setup to download the Redtree libraries automatically. It is also set up to automatically compile together any .cpp that exist within the folder, so feel free to add your own .cpp files as your projects become more complicated.</p><p>Compared with the previous two examples, we have spit this one into a header and source files. This shows a slightly different way to organize the files instead of doing everything in the source file. Let&apos;s start with the header file. There are a few key things here.</p><p>First is including the &quot;rt_input_user&quot; file. This brings in all the code for handling user input from Joysticks, Xbox controllers etc.</p><p>Second is &quot;XBOX_Joystick...</p></div>
                                
                                    <a class="readmore" href="/project/5808/log/21757-complete-rover-build">Read more &raquo;</a>
                                
                            </p>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/19047-redtree-hydra-software-model">Redtree Hydra: Software Model</a></h2>
                            <small class="authorship">2 months ago  &bull;
                            <a class="gray-link" href="/project/5808/log/19047#discussion-list">
                                0 comments
                            </a>
                            </small>
                            <p><p>In the Redtree Hydra system, everything is an <i>m_module</i>. This could be algorithms, entire robots, sensors, motors or anything else which might make up the "robot". This class defines what makes up the component (data types, other m_modules, m_devices etc).<br></p><p>A special type of <i>m_module</i> is an <i>m_device</i>. This is similar to an m_module except that it has defined behaviour states for handling failures. This is useful for things like motors or sensors. You might wish to attempt to land a flying device on a sensor failure to try to avoid a crash.</p><p>Repeating executable functions are given the type <i>m_worker</i> in the Redtree Hydra system. Functions which should run once are given the type <i>m_job</i>.</p><h2><span class="mw-headline">m_module</span></h2><p>An m_module has several important functions which define the behaviour when the module loads.</p><span class="mw-headline">configure()</span><p>The configure() function is called for every single tag, device, and module in reverse creation order.</p><p>The configure function lets the user set data dependicies for m_extern tags and low level settings like queue sizes based on low level settings. Which means this step is to setup the device/module/etc. into a state that it can then be initialized.</p><span class="mw-headline">initialize()</span><p>The initialize function is used to apply the configuration that was created in the previous step. This steps are separated because parent modules and devices will likely change the configuration of child tags/devices, and modules. (i.e. A the CANOpen protocol module will change the baud rate tag of the CANBus Peripheral, or a Motor will configure the gains of its Control System Module)</p><span class="mw-headline">setup()</span><p>The setup function is provides an intermediate step between initialize and the device/module/or tag starting its runtime behaviour. Sometimes this is necessary depending on the complexity of module/device or tag.</p><span class="mw-headline">start()</span><p>Finally, the start method is called. The start function of any tag, module, or device must bring that component to its normal runtime state, and execute "Started = true;" once the unit is functional and runtime capable.</p><h2><span class="mw-headline">m_device</span></h2><p>An m_device inherits all of the previous functions specified from the m_module above. In addition, there are some extra functions which are used to handle failure cases.</p><h2><span class="mw-headline">m_worker</span></h2><p>In order for a module or device to run executable functions periodically or continually, the code must be wrapped as an m_worker. This allows the code to function with tags and take advantage of the real-time and seamless networking features of the Redtree Hydra system.</p><p>Here is an example of a globally available m_worker:</p><pre class="hljs cpp">m<span class="hljs-emphasis">_worker&lt;void, void&gt; my_</span>task{"my_task",[<span class="hljs-link_label">&amp;</span>](<span class="hljs-link_url"></span>){<span class="hljs-code">	cout &lt;&lt; "Executing my task function" &lt;&lt; endl;</span> }};</pre><p>And here is an example of an m_worker defined within a class:<br></p><pre class="hljs cpp"><span class="hljs-keyword">class</span> myclass : <span class="hljs-keyword">public</span> m_device{	<span class="hljs-keyword">public</span>:		<span class="hljs-keyword">using</span> m_device::m_device;		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{}		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{}		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{Started = <span class="hljs-keyword">true</span>;}; 	<span class="hljs-keyword">private</span>:		<span class="hljs-keyword">int</span> sockfd;		<span class="hljs-keyword">struct</span> addrinfo *servinfo;		<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;		m_worker&lt;<span class="hljs-keyword">void</span>, <span class="hljs-keyword">void</span>&gt; myclass{<span class="hljs-keyword">this</span>, <span class="hljs-string">"myclass"</span>, std::bind(&amp;myclass::my_task, <span class="hljs-keyword">this</span>)};};myclass my_instance{<span class="hljs-string">"my_instance"</span>}; <span class="hljs-keyword">void</span> my_instance::my_task(<span class="hljs-keyword">void</span>){	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Executing my task function within a class"</span> &lt;&lt; endl;}</pre><h2><span class="mw-headline">Periodic User Functions</span></h2><p>User functions within an m_module or m_device can be run every <i>x</i> microseconds.</p><p>For instance, if you have an m_worker called my_task, you can run it every 500ms as follows:</p><pre class="hljs cpp">my_task.run_every(500000)</pre><h2><span class="mw-headline">Continual User Functions</span></h2><p>You can also have a function run continually (it does not wake up on enforced time schedules - it is essentially a non-realtime task)</p><p>This is the type of function you would run a busy loop inside of if, for some reason you needed one. Note - in either of these cases - both of the functions never return - they will just be called over and over again.</p><pre class="hljs cpp">my_task.run_when(Started);</pre>Right now, it is only possible to run continual functions on a trigger (for example when the module has started) - but in the future we plan to allow functions to just "run" as soon as possible by removing...
                                
                                    <a class="readmore" href="/project/5808/log/19047-redtree-hydra-software-model">Read more &raquo;</a>
                                
                            </p>
                        </li>
                    
                        <li>
                            <h2><a href="/project/5808/log/18325-the-redtree-hydra-software">The Redtree Hydra Software</a></h2>
                            <small class="authorship">3 months ago  &bull;
                            <a class="gray-link" href="/project/5808/log/18325#discussion-list">
                                0 comments
                            </a>
                            </small>
                            <p><p>The last few posts were pretty much all about progress so far related to hardware. This update will be focused on software. What makes the Redtree Hydra run, how do you program it and what is the current state.</p><p><strong>FPGA Configuration / Programming:</strong><br></p><p>Since the Hydra runs an FGPA - and this is how all of the peripherals are connected (enabling really flexible I/O assignments and near plug-and-play robotics) - we have a configuration tool being completed where you specify with a graphical interface exactly what you are connecting to the robot. For instance, you might some UARTs, and some analog I/O for your particular robot configuration. You might want to come back later and add I2C as well - that is all easy and possible. Our toolchain will then configure the FPGA bitstream for you so you don't have to program in VHDL or Verilog. </p><p><strong>Real-time Linux:</strong><br></p><p>Next for the operating system. One of the key limitations of many of the existing platforms people use for robotics is that they aren't real-time. In some cases - they are "deep-embedded" and don't run Linux so they are totally dependent on the libraries created for the platform. We have a customized Linux 3.14-RT kernel. This means you get the benefits of real-time along with the flexibility of full compatibility with anything that runs on Linux. Furthermore, we run Debian, so you can also take advantage of anything in the Debian armhf repositories.</p><p><strong>Library Compatibilities:</strong><br></p><p>We know that people who build robots like to use whatever tools are available, and we aren't interested in re-inventing good things ourselves. Our systems are compatible right out of the box with ROS, OpenCV and other popular robotics tools. Further down the line we can see compatibility with Matlab / Labview as well.</p><p><strong>Redtree Middleware:</strong><br></p><p>In order to make it easy to access data from the sensors, motors and components connected to the robot, we also provide a library of function calls that work with the FPGA side of things. In addition, this library also provides a framework for easily programming real-time tasks, tasks that fire on data changes and lots of other cool features we'll post about in future updates. Finally, because the Redtree Hydra comes with built-in Wi-Fi, Bluetooth, 4G/LTE and Zigbee - part of the middleware manages all of these networks for you. The software will automatically form mesh networks between groups of Hydras in range of each other. If one network goes down (eg: Wi-Fi) the Hydra will automatically continue to use another option (eg: 4G/LTE). The same libary also provides the ability to send any data point (ie: variable) into the cloud with a single function call. </p><p><strong>Wireless Configuration:</strong><br></p><p>On first boot of a Redtree Hydra, the system creates it's own Wi-Fi access point which the programmer can connect to with a computer. The programmer can then visit a webpage and configure it, similar to how setting up a DD-wrt router works. This is an early version that just lets you configure the Wi-Fi SSID, name the robot (this is important if you want to write code in one robot that depends on a very specific second robot), and some of the cloud connectivity.</p><p><img src="https://cdn.hackaday.io/images/392291432306347765.png"></p><p><strong>Cloud Connectivity:</strong><br></p><p>On the cloud side, anything from the robot can be visualized in near real-time (all the data is dumped to a MySQL DB so you can use the cloud infrastructure we are building or use your own - you own all of your own robot data). Here's a short video that shows a little bit about what this means:</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/BO8v-5RollY" frameborder="0" allowfullscreen=""></iframe><p>There will be more details to follow including some sample code in the coming days, but hopefully some of this has piqued people's interest. </p>
                                
                            </p>
                        </li>
                    
                    </ul>
                    <p class="log-btns">
                        
                        
                            <a href="/project/5808/logs" class="grey-gold-button medium-button show">
                            
                                View all 8 project logs
                            
                            </a>
                        
                    </p>
                </div>
            

            
                
                    <div class="section section-instructions">
                        <h5>Build instructions</h5>
                        
                        
                            <ul class="post-content section-instructions-list">
                                
                                    <li>
                                        <span class="instruction-number">1</span>
                                        <div class="instruction-list-item"><h1>Setting Up the Environment</h1><p>Redtree Hydra currently requires a Ubuntu or Debian based development environment. For the remaining instructions, open the terminal application in Ubuntu. In Ubuntu It can be found by clicking the Ubuntu search icon on the toolbar, and then typing terminal.</p><p><img src="http://www.redtreerobotics.com/wiki/images/9/9c/Terminal.png" alt="Terminal.png"></p><p>This command will install all of the tools required to build applications for the Hydra robot computer:<br></p><pre class="hljs bash">sudo apt-get <span class="hljs-operator"><span class="hljs-keyword">install</span> subversion git build-essential g++-<span class="hljs-number">4.8</span></span></pre><p>At the moment, we currently support development in c/c++. We do not have an in-house IDE, so you can use whatever you are comfortable writing code in. All of the code will be compiled in the terminal with a Makefile we provide.</p><p>We currently like using <a class="external text" href="http://www.geany.org/">Geany</a> because it&apos;s simple. You can get it on Ubuntu / Debian with:</p><pre class="hljs bash">sudo apt-get <span class="hljs-operator"><span class="hljs-keyword">install</span> geany</span></pre><h2><span class="mw-headline">Setting up environment to run Redtree Hydra code on your computer: </span><span class="mw-editsection"><span class="mw-editsection-bracket"></span></span></h2><p><span class="mw-headline">It is also possible to run Redtree Hydra code on your Linux (preferably Ubuntu / Debian) computer (in case you want to make apps that control robots from your computer, or a phone or whatever). This will require an additional step. You need to checkout and install the Redtree Hydra middleware library (only the first time) - after that it will always be installed on your computer in the /lib directory. *note* This is not required on the actual Redtree Hydra unit as the units will ship with libaries already setup. Right now, we only support 64-bit Ubuntu / Debian computers, but will shortly also support 32-bits.<br></span></p><pre class="hljs bash"><span class="hljs-title">svn co <span class="hljs-url"><a href="http://www.redtreerobotics.com/svn/redtree-lib" target="_blank">http://www.redtreerobotics.com/svn/redtree-lib</a></span>
cd redtree-lib
./install64</span></pre><p>Or for those of you who like git instead:<br></p><pre class="hljs bash">git <span class="hljs-built_in">clone</span> <a href="https://github.com/redtreerobotics/redtree-lib.git" target="_blank">https://github.com/redtreerobotics/redtree-lib.git</a>
<span class="hljs-built_in">cd</span> redtree-lib
./install64</pre><p>You can see more information on our wiki: <a href="http://www.redtreerobotics.com/wiki/index.php/Setting_Up_the_Environment">http://www.redtreerobotics.com/wiki/index.php/Setting_Up_the_Environment</a><br></p></div>
                                    </li>
                                
                                    <li>
                                        <span class="instruction-number">2</span>
                                        <div class="instruction-list-item"><h1>Hello Robot</h1><p>Making your first program for the Redtree Hydra is really easy. Just check out the example code and change to the hello_robot folder:</p><pre class="hljs bash"><span class="hljs-title">svn</span> co <span class="hljs-url"><a href="http://www.redtreerobotics.com/svn/redtree-apps/trunk/" target="_blank">http://www.redtreerobotics.com/svn/redtree-apps/trunk</a></span> redtree-apps
cd redtree-apps/hello_robot</pre>or if you prefer git:<pre class="hljs bash">git <span class="hljs-built_in">clone</span> <a href="https://github.com/redtreerobotics/redtree-apps.git" target="_blank">https://github.com/redtreerobotics/redtree-apps.git</a>
<span class="hljs-built_in">cd</span> redtree-apps/hello_robot</pre><p>You&apos;ll notice a makefile, and a .cpp file file. The Makefile has been setup to download the Redtree libraries automatically. It is also set up to automatically compile together any .cpp that exist within the folder, so feel free to add your own .cpp files as your projects become more complicated,<br></p><p><img src="http://www.redtreerobotics.com/wiki/images/4/48/Hello_robot.png" alt="Hello robot.png"></p><p>Let&apos;s look in more detail at what is inside the hello_robot.cpp file. This file contains the code that will run on the robot. You can open this with your favourite editor and work on the code in here. When you open the file you should see something like this:<br></p><pre class="hljs cpp"><span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;rtr.h&gt;</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> &lt;iostream&gt;</span>
 
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
 
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>{}
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>{}
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>{}
 
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>
</span>{ 
  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;HELLO FROM THE ROBOT&quot;</span> &lt;&lt; endl; 
}</pre>Notice it looks like a normal c/c++ main - the only real change is including the rtr.h. Our toolchain and libraries take care of all of the rest of the work for you. To compile, just type make in the terminal where you checked out the code with subversion.<pre class="hljs bash">make</pre>Note: the first time you compile a Redtree app you may need to install a bunch of dependencies.<h2><span class="mw-headline">Running the code on the robot</span></h2><p><span class="mw-headline">If you did this process on the robot itself (via SSH or through a USB serial connection for example) you just restart the robot and it will automatically run the new code you created. For now this is only way to get code onto the robot - but we&apos;re working on some easier ways such as through an IDE, over a web form or through the cloud service to deploy code to groups of robots.</span></p><h2><span class="mw-headline">Running the code on your computer</span></h2><p><span class="mw-headline">Make sure you&apos;ve installed the Redtree Hydra library on your computer (see <a href="http://www.redtreerobotics.com/wiki/index.php/Setting_Up_the_Environment#Setting_up_environment_to_run_Redtree_Hydra_code_on_your_computer" title="Setting Up the Environment">here</a>)</span></p><p>Note: you need to run rtr-mid as root right now to take advantage of the networking libraries.</p><pre class="hljs bash"><span class="hljs-title">sudo</span> rtr-mid</pre><p>You should see something like this after you run: </p><p><img src="http://www.redtreerobotics.com/wiki/images/a/a7/Robot_output.png" alt="Robot output.png"></p><p>You can find out more information on our <a href="http://www.redtreerobotics.com/wiki/index.php/Hello_Robot">wiki</a></p></div>
                                    </li>
                                
                                    <li>
                                        <span class="instruction-number">3</span>
                                        <div class="instruction-list-item"><h1>Attaching a Sensor</h1><p>In order to attach a sensor, motor, camera or other component to the Redtree Hydra, the FPGA inside must be programmed. We know that this is normally a tricky task, so we created a tool to simplify it. The Redtree Hydra has four I/O cards, each of which can be connected to devices. Our web tool lets you configure what is attached to each I/O card so that it will work with the Redtree Hydra API. The tool is located at: <a rel="nofollow" class="external free" href="http://www.redtreerobotics.com/fpga">http://www.redtreerobotics.com/fpga</a> (coming soon).</p><p><img src="http://www.redtreerobotics.com/wiki/images/7/77/Sensor1.png" alt="Sensor1.png"></p><h2><span class="mw-headline">Digital or Analog I/O</span></h2><p><span class="mw-headline">The first step is to select whether the I/O card in each slot is digital or analog (right now we do not support mixed cards - but we do support a mixture of analog and digital cards). <br></span></p><p><span class="mw-headline"><br></span></p><p><img src="http://www.redtreerobotics.com/wiki/images/e/ec/Sensor2.png" alt="Sensor2.png"></p><h2><span class="mw-headline">Analog</span></h2><p><span class="mw-headline">If the card is analog, the next step is to specify the number of pins that will be used. Typically this will be 16 or 32 bit, but any number may be selected up to 32 bits. <br></span></p><p><span class="mw-headline"><br></span></p><p><img src="http://www.redtreerobotics.com/wiki/images/b/b1/Sensor3.png" alt="Sensor3.png"></p><h2><span class="mw-headline">Digital</span></h2><p><span class="mw-headline">If the card is digital, the next step is to specify the types of interfaces connected to the card. At the current time, we support IIC, UART, SPI, PWM and general purpose Digital. As interfaces are clicked, they are added to the pinout diagram which you should use when connecting the components to the Redtree Hydra. <br></span></p><p><span class="mw-headline"><br></span></p><p><img src="http://www.redtreerobotics.com/wiki/images/3/3f/Sensor4.png" alt="Sensor4.png"></p><h2><span class="mw-headline">Repeat for Remaining I/O Cards</span></h2><p><span class="mw-headline">Additional cards can be configured at this time by changing the slot and repeating the previous steps.<br></span></p><p><img src="http://www.redtreerobotics.com/wiki/images/4/45/Sensor5.png" alt="Sensor5.png"></p><h2><span class="mw-headline">Finish and Program the FPGA</span></h2><p><span class="mw-headline">When you click finish, the tool will automatically generate the files to program the FPGA when the Redtree Hydra is booted. Take the SDcard out of the Redtree Hydra and insert it into your computer. The two files &apos;boot.bin&apos; and &apos;system_wrapper.bit&apos; should be moved to the SDcard. The SDcard can then be ejected and re-inserted into the Redtree Hydra. <br></span></p><p><span class="mw-headline"><br></span></p><p><img src="http://www.redtreerobotics.com/wiki/images/e/e9/Sensor6.png" alt="Sensor6.png"></p><p>The last step is to connect together all the motors, sensors, cameras and all the other components and start up the Redtree Hydra. You can now begin programming with C/C++ and the Redtree Hydra API and interacting with the components.<br></p><p><img src="http://www.redtreerobotics.com/wiki/images/7/71/Sensor7.png" alt="Sensor7.png"></p><p>You can find out more information on our <a href="http://www.redtreerobotics.com/wiki/index.php/Attach_a_Sensor">wiki</a><br></p></div>
                                    </li>
                                
                            </ul>
                        
                        <p>
                            
                            
                                <a href="/project/5808/instructions" class="grey-gold-button medium-button show">See all instructions</a>
                            
                        </p>
                    </div>
                
            
            
            <div class="section section-discussions last">
        <h5 id="j-discussions-title" class="j-discussions-title">Discussions</h5>

    <form id="j-discussion-add-top" action="/discussions/add" name="add-comment" method="POST" class="skip-global-form j-discussion-add hide">
        <div class="textarea-holder">
            <textarea placeholder="Add your comment" name="comment" class="editable input-comment"></textarea>
        </div>
        <input type="hidden" name="categoryId" value="5808" />
        <input type="hidden" name="category" value="project" />
        <input type="hidden" name="_csrf" value="wUxnDOKP-E3brzvJVAOt9rjiI6QI5gGamPYo" />
        <input type="hidden" name="replyTo" value="0" />
        <input type="submit" class="grey-gold-button medium-button" value="Post comment" />
    </form>

    <div id="discussion-list">
        
<p>
    <div class="signup-holder textarea-holder">
        <textarea placeholder="Sign in or become a member to leave your comment" name="comment" class="editable input-comment"></textarea>
    </div>
    <a href="#" class="login-button grey-gold-button medium-button half show">Sign in/up to comment</a>
</p>
<div class="modal-content-holder login-modal" id="login-modal">
    <div class="submissions-close modal-cancel"></div>
    <div class="signup-holder">
        <h2>Become a member</h2>
        <p>In order to follow projects & hackers or give skulls
        <br />you need to create an account.</p>
        <form action="/signup" method="POST">
            <fieldset class="form-left">
                <input type="text" class="input-field" placeholder="Enter your email address" required name="email"  />
                <input type="password" class="input-field" placeholder="Pick a secure password" required name="password"  />
            </fieldset>
            <fieldset class="form-right">
              <button class="gold-gold-button signup" type="submit">Sign up</button>
          </fieldset>
          <input type="hidden" name="_csrf" value="wUxnDOKP-E3brzvJVAOt9rjiI6QI5gGamPYo" />
          <input class="input-field" placeholder="Invitation Code" required name="invitation_code" value="5Ad0ix2-b96J" type="hidden" />
        </form>
        <a id="login-modal-signin" href="/signin">Already a member?</a>
    </div>
</div>








<script type="text/javascript">

    var pageIndex = 0;


</script>
    </div>

    

</div>



        </div>

    </div>

    
        <div class="container">
            <div class="section-recommendations">
                <h2>Similar projects</h2>
                
                    

<div class="project-item   ">

    
        <ul class="submissions-icons">
            
                
                    <li>
                        <a href="/submissions/prize2014/list" class="submission-icon submission-icon-1">
                            Official Hackaday Prize Entry
                        </a>
                    </li>
                
            
        </ul>
    

    <a href="/project/249-moti-a-smart-servo" class="item-link">
        <div title="Moti, a smart servo by nsted" class="project-item-cover"
                
             style="background-image:url(https://cdn.hackaday.io/images/resize/600x600/2814041393703589741.jpg)"
                
                >

        </div>

        
                <div class="project-item-stats">
                    
                    
                        <span class="icon-view-count" title="View Count">25.5k</span>
                    
                    <span class="icon-comment-with-hover" title="Comments">38</span>
                    <span class="icon-view" title="Followers">491</span>
                    
                        <span class="icon-skull" title="Skulls">252</span>
                    
                </div>
         

        <div class="project-item-title hasBadge">
            Moti is a smart servo that simplifies the design of intricate robots. 
        </div>
    </a>
    <div class="project-item-headline">
        <span class="project-owner hide">Project Owner</span>
        <span class="project-owner hide">Contributor</span>
        <h3><a href="/project/249-moti-a-smart-servo" title="Moti, a smart servo">Moti, a smart servo</a></h3>
        <p>by <a href="/hacker/1027">nsted</a></p>
    </div>
</div>
                
                    

<div class="project-item m-last-child  ">

    
        <ul class="submissions-icons">
            
                
                    <li>
                        <a href="/submissions/prize2015/list" class="submission-icon submission-icon-5">
                            The 2015 Hackaday Prize
                        </a>
                    </li>
                
            
        </ul>
    

    <a href="/project/6912-the-user-friendly-servomotor-you-hoped-existed" class="item-link">
        <div title="The User friendly Servomotor you hoped existed. by Chris" class="project-item-cover"
                
             style="background-image:url(https://cdn.hackaday.io/images/resize/600x600/4298551437938633900.jpg)"
                
                >

        </div>

        
                <div class="project-item-stats">
                    
                    
                        <span class="icon-view-count" title="View Count">1.5k</span>
                    
                    <span class="icon-comment-with-hover" title="Comments">8</span>
                    <span class="icon-view" title="Followers">23</span>
                    
                        <span class="icon-skull" title="Skulls">11</span>
                    
                </div>
         

        <div class="project-item-title hasBadge">
            High performance, closed loop servo motor for all your applications. Platform independent, and high dynamics 
        </div>
    </a>
    <div class="project-item-headline">
        <span class="project-owner hide">Project Owner</span>
        <span class="project-owner hide">Contributor</span>
        <h3><a href="/project/6912-the-user-friendly-servomotor-you-hoped-existed" title="The User friendly Servomotor you hoped existed.">The User friendly Servomotor you hoped existed.</a></h3>
        <p>by <a href="/hacker/82636">Chris</a></p>
    </div>
</div>
                
                    

<div class="project-item  b-last-child ">

    
        <ul class="submissions-icons">
            
                
            
                
                    <li>
                        <a href="/submissions/prize2015/list" class="submission-icon submission-icon-5">
                            The 2015 Hackaday Prize
                        </a>
                    </li>
                
            
        </ul>
    

    <a href="/project/5905-updroids-up1" class="item-link">
        <div title="UpDroid&#39;s UP1 by Kartik Tiwari" class="project-item-cover"
                
             style="background-image:url(https://cdn.hackaday.io/images/resize/600x600/4361081436995065149.png)"
                
                >

        </div>

        
                <div class="project-item-stats">
                    
                    
                        <span class="icon-view-count" title="View Count">698</span>
                    
                    <span class="icon-comment-with-hover" title="Comments">0</span>
                    <span class="icon-view" title="Followers">19</span>
                    
                        <span class="icon-skull" title="Skulls">5</span>
                    
                </div>
         

        <div class="project-item-title hasBadge">
            UP1 robotics platform, bringing robotics to everyone
        </div>
    </a>
    <div class="project-item-headline">
        <span class="project-owner hide">Project Owner</span>
        <span class="project-owner hide">Contributor</span>
        <h3><a href="/project/5905-updroids-up1" title="UpDroid&#39;s UP1">UpDroid&#39;s UP1</a></h3>
        <p>by <a href="/hacker/69127">Kartik Tiwari</a></p>
    </div>
</div>
                
            </div>

        </div>
    

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'wUxnDOKP-E3brzvJVAOt9rjiI6QI5gGamPYo';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_project&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />
    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>

    
    
    
    
    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evYhvPcTNHjcVmLti9HxMVov4N%2FG0Vb08G3dKHr8dVQWzXej5t18RehizqZ8wIVJ7qCSmA5v7VaFjCQENYTT0gaQoyhjrODHsQk5JUVvz7t44Dtk%2B11xxmipO4Y%2B9cBwn1IdfK1bYjGht%2Bf1yWZu2SwuQOo6kGY9xwArhHVwpedkUh5kLaSLkPbgFU2aMPMYlr%2FkGi5SGh0159v8zUCbh%2Fx4qqGgiq8xue1QDxwAtojDbMufEMnPeES%2BXUvICUCqPFVF9PsrubQsdtbQAJZsDggl-0.48.6.js"></script>

    <style>
        .mediumInsert-buttons {
            display: none !important;
        }
    </style>

    <div id="submission-popup-back"></div>
    <div id="submission-popup"></div>

    <div id="modal-report-back" class="modal-background"></div>
    <div id="modal-report" class="modal-content-holder container">
        <a href="javascript:void(0);" class="modal-close"></a>
        <form action="/report/project" class="j-modal-form">
            <h2>Report project as inappropriate</h2>

            <p class="intro-text">
                You are about to report the project "<b>Redtree Hydra: A modular platform for robotics</b>", please tell us the reason.
            </p>

            <textarea name="comment" class="j-report-comment" placeholder="Why do you report the project as inappropriate"></textarea>

            <input type="hidden" name="_csrf" value="wUxnDOKP-E3brzvJVAOt9rjiI6QI5gGamPYo" />
            <input type="hidden" name="projectId" value="5808" />
            <div class="modal-footer">
                <input type="submit" value="Report" class="gold-gold-button"/>
            </div>
            <div class='j-modal-form-message'></div>
        </form>
        <div class='j-modal-message hide'></div>
    </div>



    <div id="modal-contributor-apply-back" class="modal-background"></div>
    <div id="modal-contributor-apply" class="modal-content-holder container">
        <a href="javascript:void(0);" class="modal-close"></a>
        <form id="contributor-apply-form">
            <h2>Send message</h2>

            <textarea name="message" class="j-report-comment">
Hello,

I really like your project and I think I have skills to help you.
            </textarea>
            <p class="application-success">Your application has been submitted.</p>
            <input type="hidden" name="_csrf" value="wUxnDOKP-E3brzvJVAOt9rjiI6QI5gGamPYo" />
            <input type="hidden" name="projectId" value="5808" />

            <div class="modal-footer">
                <input type="submit" value="Send" class="gold-gold-button"/>
            </div>
        </form>

    </div>


    <div id="modal-contributor-remove-back" class="modal-background"></div>
    <div id="modal-contributor-remove" class="modal-content-holder container">
        <a href="javascript:void(0);" class="modal-close"></a>
        <form id="contributor-remove-form">
            <h2>Remove Contributor</h2>
            <p>
                Are you sure you want to remove yourself as a contributor for this project?
            </p>
            <p>Project owner will be notified upon removal.</p>
            <input type="hidden" name="_csrf" value="wUxnDOKP-E3brzvJVAOt9rjiI6QI5gGamPYo" />
            <input type="hidden" name="projectId" value="5808" />
            <input type="hidden" name="remove_contributor_id" id="remove_contributor_id"/>

            <div class="modal-footer">
                <input type="submit" value="Remove" class="gold-gold-button"/>
                <input value="Nevermind" class="gold-gold-button"/>
            </div>
        </form>
    </div>


    <script>
        HIO.projectId = 5808;
    </script>

  </body>
</html>
