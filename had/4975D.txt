<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; Kinect Object Localization for Robotic Arm &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F17749">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/4975">Kinect Object Localization for Robotic Arm</a>
                    </p>
                    <p class="description-summary">Using some trig, we found a way to report the X &amp; Y coordinates of an object using  the RBG camera with ~96% accuracy</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/59243-angeliki-beyko" title="Visit Profile">
                                Angeliki Beyko
                            </a>
                            <span>&bull;</span>
                            3 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p><b><b>First and foremost, I wish to thank my fellow team members, all of which helped write the code, test the setup, and brainstorm ideas for improvement as we went along. The entire project from conception to implementation took approximately 1 month. </b></b></p><p><strong>TEAM:</strong></p><p><b><b>Michael Van Dyk who hel<strong>ped t</strong>remendously with the conceptual design and equations.</b></b></p><p><b><b>Jianjun Meng who setup communication between this program and the robotic arm software by writing separate code that delivered the corrected positional data to the arm (not for viewing in this project).</b></b></p><p><b><b>Shuying Zhang who helped sharpen the Kinect's localization accuracy and provided us with the detailed summary (including the diagrams) below.</b></b><br></p><p><b><b><br></b></b></p><p><b><b>INTRO:</b></b></p><p><b><b>In the application of Brain Computer Interface (BCI), we demonstrated the use of Kinect sensor to give the real-world coordinates of a target object and to inform the robotic arm to grasp the target accurately. The proposed method mapped a 2-D image to the real-world coordinate of an object by calculating distortion due to distance from the sensor. The object recognition relied on a color tracking function with use of the (red, green, blue) RGB camera on the Kinect sensor. The proposed method was able to provide reliable and accurate coordinates with of an object in a 12-inch by 12-inch square range. <b>The accuracy was estimated at 96% based on a 4% error rate.</b></b><br></b></p><p><b><b><b><br></b></b></b></p><p><b>DIAGRAMS / SCHEMATICS:</b></p><p><b><br></b></p><p><b>Microsoft Kinect v1 sensor:</b></p><img src="https://cdn.hackaday.io/images/4032471431445977856.png"><br><b><p><strong></strong><b><strong>Basic parameters for Microsoft Kinect sens</strong>o<strong>r:</strong></b></p><table><tbody><tr><td>
 
  
  Field
  of view (Horizo<strong>nta</strong>l x Vertical)
  
 
</td><td>
 
  
  57°
  x 43°
  
 
</td></tr><tr><td>
 
  
  RGB
  camera resolution (H x V)
  
 
</td><td>
 
  
  640
  x 480 (VGA)
  
 
</td></tr><tr><td>
 
  
  RGB
  camera color depth
  
 
</td><td>
 
  
  24
  bits (8 bits per channel)
  
 
</td></tr><tr><td>
 
  
  IR
  camera resolution (H x V)
  
 
</td><td>
 
  
  640
  x 480 (interpolated) and 320 x 240
  
 
</td></tr><tr><td>
 
  
  IR
  camera color depth
  
 
</td><td>
 
  
  11
  bits
  
 
</td></tr><tr><td>
 
  
  Maximal
  frame rate
  
 
</td><td>
 
  
  30
  Hz
  
 
</td></tr></tbody></table>
<p><b><br></b></p><p><img src="https://cdn.hackaday.io/images/3356111431448350915.png"></p><p><b><br></b></p><p><b>A schematic camera view of the square range. The origin starts from the upper right corner. +x direction is horizontal pointing the left and +y direction is vertical pointing down on the screen.</b><br></p><p><img src="https://cdn.hackaday.io/images/1641431431446945011.png"></p><p><b><br></b></p><p><b>Camera view of the square range. Note that the square looks like a trapezoid from the perspective of the camera. </b><br></p><p><b><br></b></p><p><b><img src="https://cdn.hackaday.io/images/607181431448196952.png"></b></p><b><b><p><b><b><br></b></b></p><p><b><b><b>The side view of the camera and the square range.</b><br></b></b></p><p><b><br></b></p><p><b><b><img src="https://cdn.hackaday.io/images/8612451431448403845.png"></b></b></p>A schematic screen viewed by the camera to calculate the x position of the object. The outer edges are the boundary of the screen. The size of the screen is 640 x 480 pixels. The coordinates represent the pixel number with respect to the origin located at the upper right corner. </b><br></b><p><b><b><br></b></b></p><p><b><b><b><b><b>-----------------------------------------------------------------------------------<b></b><b><b><b><b><b><b>------------------------------------------</b></b></b></b></b></b></b></b></b><br></b></b></p><p><b><b><br></b></b></p><p><b><b>CALCULATING X COORDINATE :</b></b></p><p><b><b><br></b></b></p><p><b><b>The x-coordinate of the object is obtained by calculating relative position of the object to the left and right sides of the trapezoid. The field of view we scanned was shortened in the code (from 640 x 480 pixels) to only scan through the pixels within the trapezoid (based on the coordinates we obtained through color tracking using the RGB camera on the Kinect). We chose to make the assumption that there was no distortion, which means that x2 and x1 appear equal in size to m1. This does not imply that there is no x distortion, since m1 is closest to the lens, an object placed there will appear larger than objects placed further away on either side. However, since we were scanning a small area of 12 x 12 inch square that was ~2-3 ft distance from the base of the Kinect, the difference in the x coordinates we measured along the x axis appeared negligible. The diagram below depicts the slight difference (1-2 pixels change) between x coordinates along the same x-axis:<br></b></b></p><p><b><b><img src="https://cdn.hackaday.io/images/6909211431449798678.png"></b></b></p><p>Since there is no x- axis distortion, the ratio of the object position to the left border of the square is equal to the ratio of that to the left border of the trapezoid. Based on this relationship, we were able to calculate the x-coordinate of the object. The first step was to collect the object's coordinates at all four corners in the 2D image and then to map the position of the object onto the trapezoid. The x and y coordinates of x1, x2, x3 and x4 with a unit of pixels are stored in two arrays, x and y respectively. The slope of the left and right sides of the trapezoid are calculated with the following pseudo code:</p><p>rightSide_x_diff = abs(x[4] - x[1]);</p><p>leftSide_x_diff = abs(x[3] - x[2]);</p><p>rightSide_y_diff = abs(y[4] - y[1]);</p><p>leftSide_y_diff = abs(y[3] - y[2]);</p><p>rightM = (rightSide_x_diff / rightSide_y_diff); // Slope for right side of trapezoid</p><p>leftM = (leftSide_x_diff / leftSide_y_diff); // Slope for left side of trapezoid <br></p><p>Next, the distance between the object position and the left side of the trapezoid left_border is calculated using the relationship between leftM (slope for left side of trapezoid) and the distance between the object to the upper border of the trapezoid:<br></p><p>left_border = x[3] + (distortedY - y[3])*leftM; <br></p><p> Note that since x3 to x4 is increasing for the robotic arm (although for the camera is decreasing), the (distortedY - y[3])*leftM is the distance added in terms of x that is relative to the side of x[3]. Similarly, the distance between the object position and the right side of the trapezoid right_border is calculated as following (Figure 3b):<br></p><p>right_border = x[4] - (distortedY - y[4])*rightM;<br></p><p>Since x values from X4 to X3 is decreasing for the robotic arm (for the camera it is decreasing), the (distortedY- y[4])*rightM needs to be subtracted from x[4]. The width of the trapezoid at the object position is calculated as:<br></p><p>w = abs(right_border-left_border);<br></p><p>The ratio of how far the object is from left edge is calculated as: <br></p><p>X_p = abs(distortedX-left_border)/w*100</p><p>return X_p;</p><p>X_p is the x position that is sent to the robotic arm.</p><p><b><b><b></b><b><b><b><b><b><b>-----------------------------------------------------------------------------------<b></b><b><b><b><b><b><b>------------------------------------------</b></b></b></b></b></b></b></b></b></b></b></b></b></b></p><p><b><b>CALCULATING Y COORDINATE :</b></b></p><p><b><b><br></b></b></p><p><b><b>The y-coordinate of the object is obtained by measuring the relative position of the vertical distance from the object to the camera. We assumed that the distortion was linearly correlated with the change measured in degrees per inch. Thus, as the object's distance from the RGB camera increases, theta or the angle from m1 to the object can be calculated as follows: </b></b></p><p>theta = theta1 - (m1 - distortedy) / (m1 - m2) * theta2;</p><p>This translates to real-word distance from the base of the Kinect to the object as follows:</p><p>distance = tan(theta) * (kinectHeight));</p><p>Finally, since each side of the square range is 12 inches and m1 is 21.3 inches from the base of the Kinect, the percentage of how far the object is located from m1 is calculated as:</p><p>Y_p = (Distance - 21.3) / 12 * 100;</p><p>return Y_p; </p><p>Where Y_p is the y position that is sent to the robotic arm.</p><p><b><b><br></b></b></p><p><b><b><b><b></b><b><b><b><b><b><b>-----------------------------------------------------------------------------------<b></b><b><b><b><b><b><b>------------------------------------------</b></b></b></b></b></b></b></b></b></b></b></b></b><br></b></b></p><p><b><b><br></b></b></p><p><b><b>TECHNICAL DETAILS:</b></b></p><p><b><b><br></b></b></p><p><b><b>We placed a light emitted diode in the center of the front side of the foam block. The LED was used as a marker for the Kinect , from which its RGB lens was able to give positional data by scanning the entire image and reporting the pixel location (x,y) for a target color (we chose white) or RGB value (255, 255, 255). We originally chose red, though due to changes in light intensity within the room, the RGB values would vary considerably and confuse the color red for black. Also, if there were other red objects in the room, it would report those pixel coordinates instead. This is the reason why we chose to narrow down the scanning of the display from the maximum 640 x 480 to the area of the trapezoid instead. Also, we switched to an LED instead of a colored marker (a red flag) because we thought it would be less susceptible to this light intensity issue since it is providing its own stable light source. In order for the Kinect to view the square within its field of view at a close range, we tilted the Kinect to -45 degrees and placed it at a height of  ~ 19 inches. Since the Kinect was observing the object from above, at an angle, we shifted the position of the led upward or +45 degrees. Once we did this, the Kinect was able to detect the lumen portion of the LED. Since these calculations depended on the position of the Kinect to remain fixed, we used a Kinect stand (seen below) and placed it on top of a computer monitor facing the direction of the square.</b></b></p><p><b><b><br></b></b></p><p><b><b><img src="https://cdn.hackaday.io/images/9944661431450776724.jpg"><br></b></b></p></b>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'YdhrGH7L-s491b3LoxJfx2PTtobmxNECD--0';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>