<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <title>Details &bull; Open Source IoT Platform (thinger.io) &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
        <script type="text/javascript">
        function getCommentIdFromUrl() {
            if(window.location.hash) {
                var hash = window.location.hash.substring(1);
                var commentId = parseInt(hash.replace('j-discussion-', ''));
                if (commentId) {
                    return commentId;
                }
            }
            return null;
        }

        var commentId = getCommentIdFromUrl();
        if (commentId) {
            var url = window.location.href;
            if (url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
            }
            if (url.indexOf('#') > -1) {
                url = url.substring(0, url.indexOf('#'));
            }
            url += '/discussion-' + commentId;
            window.location.href = url;
        }
    </script>
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body>

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fpost%2F19606">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    

        <div class="headline">
            <div class="container">
                

                    

                    <h2>Project Details</h2>
                    <p class="description-title">
                        For <a href="/project/6329">Open Source IoT Platform (thinger.io)</a>
                    </p>
                    <p class="description-summary">Open Source Platform for the Internet of Things. Focused on providing an awesome developer experience.</p>
                    <div class="description-metainfo">
                        <span>created by
                            <a href="/hacker/75480-alvarolb" title="Visit Profile">
                                alvarolb
                            </a>
                            <span>&bull;</span>
                            2 months ago
                        </span>
                    </div>

                

            </div>
        </div>

        <div class="container post-content">
            <p>Do you have to interact with your devices from the Internet? or from a mobile phone? Tired of building web servers in small microcontrollers only for switching some relays, leds, or controlling a servo? Tired of using platforms where you need to build and submit complete HTTP requests to post data to the Internet? Bored of parsing JSON or XML in your devices? If you have answered to some of this questions to yes, this is your platform, and you can start testing it in <a href="https://thinger.io" target="_blank">https://thinger.io</a>. Just request a beta access key to start connecting your devices.</p><p>As a maker and developer, I started connecting things to the internet some years ago. There were not many alternatives to providing fast, easy, and cheap connectivity to our devices, and we were tied to some specific and expensive modules. Nowadays we can find several cheap alternatives, like TI CC3200, and ESP8266, and the tend is to have any device or sensor connected somehow to the Internet (you all know the Internet of Things).<br></p><p>In this transition I started to look the way of connecting things to the Internet, in the way the devices or sensors can be managed remotely (actuating and sensing), or transmitting information or alarms to third party services, mobile phones, push notifications, and so on. I found that there are several alternatives from different vendors to provide closed clouds for the connection (mainly for interoperate with their custom hardware), and some open source initiatives. None of them fits in he idea I have about how a device should be connected to the Internet, mainly from the point of the developer. I get scared when I look at some code examples in different platforms just for turning on and of a led from the internet, or for sending a temperature report. I see tons of platforms relying in the same old idea of making HTTP request to a cloud platform.... or parsing a bunch of JSON data or strings for just discover what is the command to run with their parameters. Who loves working and programming with this platforms and libraries? Not me! (not to mention the poor performance in terms on power and traffic consumption).</p><p>In this way, I started to think in different ways of interaction. Something easier for the developers, so doing simple things do not become a nightmare. Something that is compatible with practically any hardware, from small microcontrollers like Arduinos, to devices with more capabilities like Intel Edison or Raspberry Pi. And of course, something that can become an open source platform. This way born the <a href="https://thinger.io" target="_blank">https://thinger.io</a> platform.</p><p>At this moment I have been working so hard in the server side (creating a fully C++ ASIO server from scratch), creating some client libraries for the platform (for Arduinos, ESP8266, Raspberry Pi, Intel Edison, etc), defining and creating the encoding protocol between the devices and the server (named as protoson), and creating a frontend so the users can manage and handle their devices easily. Some of this code is already available in Github, but I am in the process of opening the platform in an alpha state to some users... So this is just the beginning on building a open source platform for the IoT.</p><hr><p>Here you have two short videos that illustrates the current functioning of the thinger.io platform. The first video is a full example of connecting a ESP8266 device (Node MCU) to the platform for reading a DHT11 sensor from the Internet. The whole process does not requires more than 4 minutes, including registering the device, compiling and uploading the sketch, and interacting with the device from the Internet. It demonstrates how easy is to define new resources in the device and how to interact with them from the Internet.</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/EyKMfMsyPDk" frameborder="0" allowfullscreen=""></iframe><p>The second one is a TL;DW example of controlling a led from the Internet using an Arduino Nano with the Adafruit CC3000. You can see more details in the second video.</p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/CmFh-jCgrPw" frameborder="0" allowfullscreen=""></iframe><hr><p>The thinger.io platform is composed by two different parts at this moment. The first one is the backend, that is a multithreaded server fully written in C++ using modern C++11 code with ASIO techniques for ensuring maximum performance. Using C++ allows consuming much less resources on the cloud infrastructure, which will provide better scaling required in the IoT domain. The server handles all the things connections, providing authentication, and communication. All the devices resources can be accessed from a REST API. The server provides both TCP and TLS connections to the devices, and communicates with them using <a href="https://github.com/thinger-io/Protoson">protoson</a>, a encoding protocol specifically designed in this project for microcontrollers and devices with small memory capabilities. The protoson can be directly transcoded to and from JSON, so all the data transfer from/to the devices through the REST API interface is done in JSON. This ensures saving communication bandwidth in the devices side while allowing maximum interoperability with external clients like webs or mobile devices. The server provides also some interconnection capabilities to the devices, like sending emails, doing HTTP/HTTPS requests, enabling Websockets and Server Side Events for streaming device data, integrating with IFTTT Maker Channel, Keen.io, and so on.</p><p><img src="https://cdn.hackaday.io/images/4517891439751108407.png"></p><hr><p>The second part are the client libraries that are compiled in the devices to allow exposing them to the Internet. The libraries have been designed thinking in microcontrollers, so they can be compiled both on small microcontrollers like Arduinos, and more powerful devices like ESP8266, Raspberry Pi, Intel Edison, etc. All the code is in C++, so it can be compiled in almost every platform. At this moment, the libraries have been tested with Arduino Nano + CC3000, ESP8266, Texas Instruments CC3200, Raspberry Pi, Intel Edison, Arduino Yun, Arduino Ethernet, and some other linux distributions. Those libraries are already available for the Arduino ecosystem through the Library Manager, so connecting devices is so easy. The libraries use the already mentioned protoson encoding for the communications with the server, which reduces memory and bandwidth requirements compared to other encodings techniques like JSON, XML or string parsing. The client libraries also allows calling configurable endpoints in the cloud infrastructure for sending emails, sending HTTP/HTTPS request, and so on. You can take a look to <a href="https://community.thinger.io/t/plant-water-monitor/24">this project</a> example that sends an email when a plant requires water. You can see also in this project how to configure some parameters on the device, like the hysteresis time, enabling/disabling the led alarm and so on.</p><p>Here you have a simple example for exposing some device resources with input/output parameters for a ESP8266 device that you can compile and upload directly from the Arduino IDE:</p><pre class="hljs cpp"><span class="hljs-preprocessor">#include <span class="hljs-title">&lt;SPI.h&gt;</span></span>
<span class="hljs-preprocessor">#include <span class="hljs-title">&lt;ESP8266WiFi.h&gt;</span></span>
<span class="hljs-preprocessor">#include <span class="hljs-title">&lt;ThingerWifi.h&gt;</span></span>

<span class="hljs-preprocessor">#define USERNAME <span class="hljs-title">&quot;your_user_name&quot;</span></span>
<span class="hljs-preprocessor">#define DEVICE_ID <span class="hljs-title">&quot;your_device_id&quot;</span></span>
<span class="hljs-preprocessor">#define DEVICE_CREDENTIAL <span class="hljs-title">&quot;your_device_credential&quot;</span></span>

<span class="hljs-preprocessor">#define SSID <span class="hljs-title">&quot;your_wifi_ssid&quot;</span></span>
<span class="hljs-preprocessor">#define SSID_PASSWORD <span class="hljs-title">&quot;your_wifi_ssid_password&quot;</span></span>

ThingerWifi thing(USERNAME, DEVICE_ID, DEVICE_CREDENTIAL);

<span class="hljs-keyword">void</span> setup() {
  pinMode(BUILTIN_LED, OUTPUT);

  thing<span class="hljs-variable">.add_wifi</span>(SSID, SSID_PASSWORD);

  <span class="hljs-comment">// resource input example (i.e. turning on/off a light, a relay, configuring a parameter, etc)</span>
  thing[<span class="hljs-string">&quot;led&quot;</span>] &lt;&lt; [](pson&amp; <span class="hljs-keyword">in</span>){ digitalWrite(BUILTIN_LED, <span class="hljs-keyword">in</span> ? LOW : HIGH); };

  <span class="hljs-comment">// resource output example (i.e. reading a sensor value)</span>
  thing[<span class="hljs-string">&quot;millis&quot;</span>] &gt;&gt; [](pson&amp; <span class="hljs-keyword">out</span>){ <span class="hljs-keyword">out</span> = millis(); };

  <span class="hljs-comment">// resource input/output example (i.e. passing input values and do some calculations)</span>
  thing[<span class="hljs-string">&quot;in_out&quot;</span>] = [](pson&amp; <span class="hljs-keyword">in</span>, pson&amp; <span class="hljs-keyword">out</span>){
      <span class="hljs-keyword">out</span>[<span class="hljs-string">&quot;sum&quot;</span>] = (<span class="hljs-keyword">long</span>)<span class="hljs-keyword">in</span>[<span class="hljs-string">&quot;value1&quot;</span>] + (<span class="hljs-keyword">long</span>)<span class="hljs-keyword">in</span>[<span class="hljs-string">&quot;value2&quot;</span>];
      <span class="hljs-keyword">out</span>[<span class="hljs-string">&quot;mult&quot;</span>] = (<span class="hljs-keyword">long</span>)<span class="hljs-keyword">in</span>[<span class="hljs-string">&quot;value1&quot;</span>] * (<span class="hljs-keyword">long</span>)<span class="hljs-keyword">in</span>[<span class="hljs-string">&quot;value2&quot;</span>];
  };
}

<span class="hljs-keyword">void</span> loop() {
  thing<span class="hljs-variable">.handle</span>();
}
</pre><hr><p>This project is supported by some open source libraries:</p><ol><li>Boost (<a href="http://www.boost.org/users/license.html">Boost License</a>)</li><li>Crypto++ (<a href="http://www.cryptopp.com/License.txt">Boost License</a>)</li><li>Nlohmann JSON (<a href="https://github.com/nlohmann/json/blob/master/LICENSE.MIT">MIT License</a>)</li><li>GeoIP (<a href="LGPL License">LGPL License</a>)</li><li>Protoson (<a href="https://github.com/thinger-io/Protoson/blob/master/LICENSE">MIT License</a>)</li><li>OpenSSL (<a href="https://www.openssl.org/source/license.html">License</a>)</li><li>Jemalloc (<a href="http://www.canonware.com/jemalloc/license.html">BSD-derive License</a>)</li><li>Mongo CXX Driver (<a href="https://github.com/mongodb/mongo-cxx-driver">Apache License</a>)</li></ol>
        </div>

        

        

    

    <div class="j-modal-confirmation modal-background"></div>
<div class="j-modal-confirmation modal-content-holder">
    <p class="align-center" id="modal-message"></p>
    <p class="align-center"><a class="medium-button gold-gold-button delete-project-button" id="modal-yes" href="">Yes, delete it</a> <a class="medium-button grey-gold-button cancel-button" id="modal-cancel">Cancel</a> </p>
</div>
    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'X8RpoQ15-DUInGGUyCFk_NcADQNEBaHj99lc';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_post&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    
    
    
    

    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbpIGEWjpnPaaIvcAHwzCnxb%2FHLKGUM1bvoOeG5HC0xFU9LJ%2B910rZ72abfN8vxNDn41XRsK%2BvNLzydIft0iwmMulI7CjfWKAELKuUfOMCuUWjmKstkIZy4LyUZZqGjubUq7baOpUEVdpT0W01PyzlwivRvc7EDpLluqPEa2JX%2FBw%3D%3D-0.48.6.js"></script>

</body>
</html>