<!doctype html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9]>    <html class="no-js ie9" lang="en"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" lang="en" ng-app="buildlogApp"> <!--<![endif]-->
<head>
    
    <title>Project logs &bull; Linux Control System &bull; Hackaday.io</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" href="//cdn.hackaday.io/css/style.css?version=0.48.6" />
    <script type="text/javascript" src="//use.typekit.net/ymb0lgk.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
</head>
<body class="logs">

    <!--
############################################################################################
############################################################################################
############################################################################################
#####################Kt;tL#######################################Kti,E######################
#######################;   .###################################G    E#######################
#######################K    f##################################    ;########################
########################Wj   E###############################K:  .W#########################
##########################.  :E##############################:  .L##########################
#########################D    f##############################.   .##########################
########################,     ;##############################     :E#######K################
################f######K      ,##############################      ,######Lt################
################  W###W       i##############################       t####j t################
################:  E#L.        f###########################L.        f#Ki .E################
################j  ;E.          j##########################.         .G;  i#################
#################L               i#######################K                ##################
#################W                E#####################K;               ;##################
###################:               .###################D               :f###################
#####################DLfGD           G####WEEEEKW####W           ;GffGK#####################
##########################i         iD##Kfi    :jKW##D          iE##########################
###########################W      ,G##f            jE#E;       j############################
############################L     D##D              ,##K       W############################
#############################D:  G#W                  K#E,   G##############################
###############################;i#L                    j## ,E###############################
###############################KK#.                     ##iE################################
#################################j                      ;K##################################
################################W                        ,##################################
################################E                         ##################################
###############################Ki                         D#################################
###############################E.                         L#################################
###############################f    iD##W;       D###D    :#################################
###############################i   i######K     K#####K;   #################################
###############################;  .E#######     #######D   #################################
###############################;  L########     ########   #################################
###############################i  G#######K     K#######   #################################
###############################j  L#####E,       fE#####   #################################
###############################D  .E##j            .t##E  ;#################################
###############################E:  ;##.              #Wt  j#################################
################################G   ;t      tWi      t    E#################################
#############################KL##           K#K;          #K:K##############################
#############################i ##:          ###t         j#f ;K#############################
############################:  G#K          #E#L        L##    D############################
###########################D   ;W#:         #;#L        W#K    .############################
#####################KKEKK      :##L        ; ..      :D##.      fKEEK######################
###################t.            ;##G:               ,##E,             tD###################
##################G               E##E               i##;               :###################
#################D                W##W    iL    E.    ###D                ##################
################W,               G###W    tG    K.    ####:               K#################
################;  LW;         ,E#####:  ;W#    #G   f#####;         ;KG  :K################
################  D###E       ;########WW####WW####WW#######W       :####: j################
################ ,#####:      ;##############################       G####E i################
################K#######.     ;##############################      L######WG################
########################f     i##############################     j#########################
#########################W   .D##############################.   i##########################
#########################E   G###############################D   ,##########################
########################G:   #################################j   G#########################
#######################f    K##################################j    W#######################
#####################Kt :iE#####################################KL:  K######################
############################################################################################
############################################################################################
############################################################################################
-->

<div class="header" id="header">
    <div class="container">
        <h1 class="logo">
            <a href="/" title="Hackaday.io Home" class="home" onclick="CT(this, 'Menu', 'Home'); return false;"></a>
            <a href="/" title="Hackaday.io Home" class="brand" onclick="CT(this, 'Menu', 'Home'); return false;">Hack a Day</a>
        </h1>

        <a href="javascript:void(0);" class="responsive-menu">Menu</a>

        <ul class="nav" role="navigation">
            <li><a href="/projects" class="">Projects</a></li>
            <li><a href="/lists" class="">Lists</a></li>
            <li><a href="/stack" class="">Stack</a></li>
            <li class="dropdown more-nav j-more-open">
                <a href="javascript:void(0)" class="dropdown-link icon-dropdown">More</a>
                <ul role="menu" class="dropdown-menu more-menu" id="j-more">
                    <li><a href="http://hackaday.com/blog/" target="_blank">Blog</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/hackerspaces">Hackerspaces</a></li>
                    <li><a href="/hackers">Profiles</a></li>
                    <li><a href="/contests">Contests</a></li>
                    <li><a href="/prize" target="_blank">The Hackaday Prize</a></li>
                    <li><a href="/submissions/prize2015/list">2015 Prize Entries</a></li>
                </ul>
            </li>
            <li class="menu-last-child">
                <div class="search-holder show">
                    <form id="search-form" action="/search" onsubmit="return submitSearch();" method="GET">
                        <input type="text" placeholder="Search" name="term" class="input-search j-add-search" id="j-add-search" value="" autocomplete="off" pattern=".{3,}" required title="3 characters minimum" />
                        <input type="submit" class="search-button" />
                    </form>
                </div>
            </li>
        </ul>

        

            <ul class="nav pull-right" role="navigation">
                <li><a href="/signup" class="grey-white-button become-member">Sign up</a></li>
                <li><a href="/signin?returnUrl=%2Fproject%2F7281%2Flogs">Sign in</a></li>
            </ul>

        
    </div>
</div>

<div id="topMessage" class="alert"><span class="j-top-content"></span><a href="javascript:void(0);" class="alert-close j-top-message-close">Close</a></div>




    <div class="headline">
        <div class="container">
            <h2><a href="/project/7281-linux-control-system">Linux Control System</a></h2>
            <p class="description-title"> Project logs</p>
            <p class="description-summary">An expandable control system for Linux with apps that lets you control your Linux devices without any hassle</p>
            <div class="description-metainfo">
                
                    <span>created by <a href="/hacker/61401-arsenijs" title="Visit Profile">Arsenijs</a><span>&bull;</span>
                
                a day ago<span>&bull;</span><a href="/project/7281#discussion-list" title="See Comments">0 Comments</a></span>
            </div>
        </div>
    </div>

    <div class="container post-content">
        <div class="section-buildsort">
            <span class="pull-left">
                <a href="/project/7281-linux-control-system">&#171; Back to project details</a>
            </span>
            <span class="sort-holder pull-right">
                <label for="sort-by">Sort by:</label>
                <select class="sort" id="sort-by">
                    <option value="/project/7281/logs/sort/newest">Newest</option>
                    <option value="/project/7281/logs/sort/oldest" selected="selected">Oldest</option>
                </select>
            </span>
        </div>
        <div class="section section-buildlogs last">
            

                <ul class="buillogs-list">
                    
                        <li>
                            <h2><a href="/project/7281/log/23195-how-it-all-started">How it all started</a></h2>
                            <small class="authorship">a day ago  &bull;
                                <a class="gray-link" href="/project/7281/log/23195#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23195"><p>It all started 4 years before, when I just got to know about the Raspberry Pi. It was still in the prototyping stage, a HDMI stick-like device back then, just like numerous Linux-capable HDMI dongles we can see now. It occured to me that it&apos;s wonderful just how little a computer can be, and how much power it can pack. I had many thoughts about it, but not so much real project ideas - being just an inexperienced guy repairing computers for pocket money. I didn&apos;t even know it was just a start of all the failures that&apos;d occur.</p><p>3 years before, I asked my parents to gift me money. See, Raspberry Pi just appeared and i wanted to try it out, since I&apos;ve always wanted to build a robot or something, or maybe a portable computer. I hardly had any money back then, and it hardly changed since. I got the money, put it into a nice envelope, but went on a trip where my phone got broken and I had to fix it, and had no possibility to get more money after this. Envelope went empty, but I still did something. I made a case out of an old CD-ROM drive enclosure. The case would house Raspberry Pi, break out all the connectors, add an USB hub or two and house some peripherals, such as WiFi, BT and other modules, oh, and be insertable where the CD drive at the PC. I did manage to make the basics, specifically, the case and breakout connectors, as well as the power supply part. It was super ghetto and as much as I could have made, being broke 99% of the time. I knew I needed an interface, so planned to include 3 Nokia 3310 screens on the front, have menus on them and control them using an IR remote. I also did some programming - you know, writing lines of code is free =)</p><p>2 and a half years before today, I&apos;ve got a laptop. An i3 laptop with a nice graphics card. My parents paid for it, thankfully. Almost as soon as I got it, I decided to make some projects using a new programming language - and chose Python. It was awesome. Compared to the other languages I have tried, it enabled me to do awesome things exactly the way I wanted to do them - mind you, even on Windows ;-) I wrote a program that&apos;d parse local public transportation provider schedules and make a menu where I could input transport number and get its arrival times for a certain bus stops. It even worked offline, and had a nice CLI interface for selection - as nice as it could be, given that cmd.exe doesn&apos;t seem to support certain Unicode characters, which were all over the place in bus stop names =) Still, it was lacking in terms on interface. The very next month, I had chosen to write an interface for it for my mobile phone. Mobile phone and Python, you ask? Well, Symbian is almost dead, but it sure left some nice things behind, including a Python SDK for developing apps. Even though debugging by [&quot;compiling&quot;, &quot;&quot;uploading a package on a SD card&quot;, &quot;installing it on the phone&quot;, &quot;reading print statements&quot;, &quot;trying to understand thrown exceptions&quot;] was a pain, I still got it working and even managed to submit it as my high school programming project and get a nice mark. Though mainly I was exploring the Capital and the Mojave Wastelands - you didn&apos;t miss the part about &quot;nice graphics card&quot;, right?</p><p>In half a year, I got myself an EEE Pc 701 with a broken screen - for, like, 10 bucks. It immediately became my Linux hacking machine, running webservers, Python applications and all kinds of stuff I&apos;ll never ever use. Mainly though, it was my portable hotspot - it accepted a 3G modem or an Ethernet cable link and worked as a WiFi gateway. It also hosted various Left4Dead contests we had with my soon-to-be wife =) The problem was controlling various aspects of it. I&apos;ve had SSH clients installed on every machine I&apos;d use with that thing, and even this wouldn&apos;t help when the network lagged - requiring WiFi or DHCP service restart, which is &apos;kinda&apos; hard to do over local network when those services are providing the said local network. A reboot by button was a fix, but not always. Besides that, I wanted to make a config interface because I was tired of SSH-ing every time there was a problem. I&apos;ve decided on a web interface, and used web.py as a base. It&apos;s a truly beautiful framework, but I feel like I&apos;ve put too much on it. I&apos;ve managed to make a few apps, but then I started making a module system (it needed to be modular, see).e end, it became complicated enough to justify logging in through SSH - which I did anyway while I was developing the framework.</p><p>Another half a year forward - earned the money somewhere. I put it in the case I had made a year before - and it worked. I hacked things till I broke most of the peripherals I had embedded, but it was great while it lasted. My other failure was desoldering all the connectors. See, after all the Wastelands a Pip-boy-like device has become a necessity for me, so I desoldered all the big bulky connectors, put it all into a small and what could be roughly-described as wrist-wearable case and... Accidentally the whole customised SD card image. I was stuck with a stock Raspbian image, no Ethernet jack and a WiFi card which needed custom drivers that needed to be compiled against the kernel headers - which I were unable to install on my Pi, as well as any other package. Oh, and It was a mess of wires and headers with pinouts that I&apos;ve myself had created but forgot to describe so had to reverse-engineer a couple of times. I have learned to etch Internet-downloaded PCBs but weren&apos;t yet able to do it properly. Oh, and one day I&apos;ve got tea with sugar spilled over my laptop. It died immediately, and so did my programming advancements.</p><p>The winter that year was exhausting, but it wasn&apos;t about weather. I&apos;ve been betrayed by a person who I&apos;ve considered to be my best friend for about 8 years, and the betrayal was about a large sum of money - which I still owe to one organisation he convinced me to sign papers for. Unfortunately, while dealing with all that mess I had developed clinical depression and have spent a year trying to battle it. My projects and ideas had halted for more than a year, and I still didn&apos;t have money - which didn&apos;t help, basically, nothing did. It was only after a year that I started to recover, getting some hope that in the end it would all become. And it did.</p><p>I&apos;ve got to know about Sci Fi Your Pi competition. Basically, it&apos;s one of the contests Element14 organises. You have an idea fitting their contest topic, you submit it, they send you some parts and you get on working, submitting your project logs. A PipBoy idea did fit the sci-fi topic, I mean, at least, a little bit? Regardless, from 2 years of thinking I had plenty to write in the application form, as well as was ready to be working even if I didn&apos;t get accepted... But I did. It was the first time I&apos;ve seen a Raspberry Pi 2, not to say touch. It soon has proved itself a reliable desktop replacement, fitted with lightweight Raspbian install - it still is. Much more powerful than 1st generation but still consuming as much as a smartphone... Why can&apos;t it be a smartphone? And a wearable computer? And a workstation you could take with you? I&apos;m pretty sure it can.<br> </p><p>I&apos;ve failed the Element14 competition. See... Depression comes back once in a while and it can be quite difficult to obtain motivation compared to what it was before. I also need social interaction, or else it becomes worse. My laptop I had for writing had developed a HDD failure, so I got cut out of being able to write posts in my spare time - which is mainly not at home. Regardless, I started hacking on a Raspberry Pi once in a while. I already knew what kind of interface I would need, having some 16x2 displays and USB numpads at hand. It was just a matter of time before first versions came to be, but it was a long road before it has become what it is. </p><p><strong>My goals for this project:</strong></p><ol><li>Finish the system. Make it usable and, possibly, useable by many people - I&apos;m an avid Hackaday blog reader and I see an application for this system here and there, as well as have already received feedback from people that had gotten ideas about how they could use it. It can&apos;t be perfect, but it&apos;ll be close.</li><li>Then, proceed on making my PipBoy. Basically, finish what I&apos;ve started with that Element14 contest application - and what I feel like I owe them. It&apos;s no use anyway - until I make the control system there&apos;s no sense in building the custom hardware - you can&apos;t even test it the way it&apos;s intended to be used!</li><li>Get rid of depression. Like, finally. It ain&apos;t gonna disappear completely, I know, but I also don&apos;t get depressed while coding an interesting thing and for some days afterwards, and this system is full of interesting things which are still to be written.</li></ol><p>That&apos;s all for this post. - Now - onto describing the system!</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7281/log/23228-the-structure">The structure</a></h2>
                            <small class="authorship">a day ago  &bull;
                                <a class="gray-link" href="/project/7281/log/23228#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23228"><p>First of all, there are input devices. That&apos;s what I started with - when I was working on my Raspberry Pi case, it had an IR receiver. It was connected using lirc and emulated keyboard media key presses using Python and its uinput bindings. I hoped media keys would control mocp, a nice console music player I was accustomed to use, or omxplayer, which is a RPi-specific player making use of hardware acceleration available there. I was wrong but it was a great learning experience about how input devices work. No wonder first thing I did was looking at the existing input devices and incorporating them into my project which desperately needed some input (pun intended). Most input devices I have at home are HID (I&apos;ve written HID-enabling drivers for those which aren&apos;t =) ) This, of course, means that by using HID devices as input device base it is possible to cover most input devices, and make a room for the others by using a standardised interface - therefore the choice. I&apos;ve got a global input driver taking care of this, it uses evdev - a Linux method of grabbing input device events, and it has nice Python bindings. I&apos;ve written a wrapper around it which is asynchronous, therefore, everything that connects to this drier is callback-driven. You provide key names and callback functions, then it takes care of the rest. Callback functions are what drives various applications and parts of them such as menus. <br></p><p>Of course, menus have to output themselves somewhere. So every time menu&apos;s callback such as move_up, move_down or select_element is called, it has to do something on the screen. That&apos;s solved - you guessed it right - by a callback which the driver provides. Now, output drives are more numerous. There are much more HD44780 screen connection ways than there are input device types - just remember about all the ways one can connect an IO expander outputs to those 8 data lines. It&apos;s 8!, and sometimes I feel like those people developing cheap I2C HD44780 backpacks have an inside joke of some kind: </p><p>-<em>&quot;Let&apos;s swap D0 and D1 so that they need to rewrite their Arduino libraries MWAHAHAHA&quot;</em> </p><p>-<em>&quot;You thought this library was okay NOW YOUR BACKLIGHT FLASHES AT 20Hz LOL&quot;</em> </p><p>-<em>&quot;Oh look garbled characters with that custom library, why don&apos;t you use our library IT COMPILES ONLY ON ARDUINO IDE 15 THOUGH WHAT A SHAME&quot;</em></p><p>Anyway, I was saying... There&apos;s plenty of ways to output data on a character display. However, I&apos;ve got a plan on how to write drivers to support most of them, and it&apos;s limited only by how much different displays I can get access to - chances are it&apos;s got an Arduino library and those are simple to rewrite into Python. I plan to develop wrappers for most popular display ICs, which would contain commands needed to be sent to ICs to display anything, so you needn&apos;t redefine all the commands to write a new driver.</p><p>Once we&apos;ve got input and output, the situation is good. As long as we don&apos;t need to run more than one thing using it. You could just make one big script which would contain every import there is and give them access directly... And every time there is an unlucky exception, it crashes the whole system. I&apos;m not even talking about how big the file would be. It also would need to run as root, since once the monolith system like this becomes big enough, it is run as root - nobody wants to mess with permissions when you can just type &quot;sudo&quot;. Oh, writing your own apps? You&apos;d need to incorporate them into that file. Debugging sure would be hard. It&apos;d be an equivalent of compiling your web browser together with your window manager. </p><p>So, we need a window manager of some sort. After a week of hard work, it&apos;s finally there, even though very basic - but mostly working. It&apos;s all thanks to Pyro4 - an IPC solution for Python objects, really powerful and worth trying if you ever need inter-process communication capable of also providing security features, which IMO is a must in my system. By some clever (and sometimes bruteforcish) principles I&apos;ve managed to make it work without pulling too much of my hair, and it&apos;s clear it&apos;s here to stay. Once it&apos;s finished, and that is - in a couple of days, I&apos;ll be able to write apps. Lots of apps, controlling various aspects of my Linux system - that sure will be the best part to write =)</p><p>Oh, but menus... Somebody has to code them, right? So I plan on including every control there can be into an application creation framework. First, menus. That&apos;s the only UI design framework element I have by now - but I&apos;ll fix that. Menus I have now aren&apos;t as flexible as they could be but it&apos;s pretty easy to modify them by instantiating and overriding certain functions, you know, that&apos;s one of the things I know people and I personally will do. I can also add dialogs, text input fields using keyboards, keypads, T9 and whatever text input facilitation method I can invent or implement, [comboboxes, radiobuttons, buttons] and lists of them, confirmation dialogs, message boxes, warnings and stuff like that. Basically, I won&apos;t run out of ideas on what to implement as long as I have an access to any WYSIWYG-capable IDE, such as Visual Studio =) </p><p>So far, it&apos;s all I&apos;ve got. There sure are more components, but they are seem more or less optional. The main thing is - it will all be about applications. See, I actually think there are many awesome Linux things, some of them just need an interface to be noticed. Some need an interface to be useable =) By making an interface like this, people are enabled to use their Linux boxes at full power - and what could be better?</p></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7281/log/23386-a-simple-helloworld-application-example">A simple hello_world application example</a></h2>
                            <small class="authorship">13 hours ago  &bull;
                                <a class="gray-link" href="/project/7281/log/23386#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23386"><p>Now it&apos;s time to present you a simple &quot;Hello world&quot; app. It&apos;s supposed to be short and easy to understand, and as for now it&apos;s as simple as a web.py web framework &quot;Hello world&quot;.  The app is located here and, well, works for me ;-)</p><p>First, you import the wcs module:</p><pre class="hljs java"><span class="hljs-keyword">import</span> wcs</pre><p>Then, you send an application request to a window manager. WM returns an application object which has information about your application.</p><pre class="hljs ini"><span class="hljs-setting">application = <span class="hljs-value">wcs.wm.create_new_application(<span class="hljs-string">&quot;Hello world&quot;</span>)</span></span></pre><p>This object contains a Window object, which stores your input and output interfaces you can use for controlling your screen and input device.</p><pre class="hljs ini"><span class="hljs-setting">window = <span class="hljs-value">application.get_window(<span class="hljs-string">&quot;Hello window&quot;</span>)</span></span></pre><p>Now it&apos;s time to make an object class for your application. It needs to have a function with a blocking loop that can be interrupted on a call - a simple: </p><pre class="hljs objectivec"><span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span><span class="hljs-variable">.running</span>:
    sleep(<span class="hljs-number">1</span>)</pre><p>will do. It also needs to have a function to interrupt the loop (setting the self.running variable to False). This is our stop() method.</p><p>But, of course, it needs to have output functions:</p><pre class="hljs objectivec"><span class="hljs-keyword">self</span><span class="hljs-variable">.output</span><span class="hljs-variable">.display_data</span>(<span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-string">&quot;ENTER to exit&quot;</span>)</pre><p>output.display_data takes an arbitrary number of strings and display them line by line on the screen provided. It also needs a function that&apos;d end the loop on a keypress:</p><pre class="hljs python"><span class="hljs-keyword">self</span>.input.set_callback(<span class="hljs-string">&apos;KEY_ENTER&apos;</span>, <span class="hljs-string">&apos;stop&apos;</span>, <span class="hljs-keyword">self</span>)</pre><p>This function takes a key ecode, an object and a object&apos;s method name which to call on a keypress. An object passing is necessary because Pyro, an IPC solution that&apos;s used, cannot pass functions around but can only pass objects and built-in types. There&apos;s also a &apos;KEY_KPENTER&apos; callback which does the same - it&apos;s just that Enter key ecodes for a numpad depend on whether Numlock is on or off.</p><pre class="hljs ini"><span class="hljs-setting">helloworld = <span class="hljs-value">HelloWorld(input, output)</span></span></pre><p>That&apos;s it, we&apos;re done with the class! we&apos;ll just make an instance of it and register the object with Pyro, a function that&apos;s conveniently hidden by a wcs module, which also takes care of the concurrency - the loop that runs the Pyro daemon is blocking:<br></p><pre class="hljs python">wcs.register_object(helloworld)
wcs.start_daemon_thread()</pre><p>Let&apos;s ask for a WM to switch context to our application - so that it immediately appears on the screen:<br></p><pre class="hljs python">wcs<span class="hljs-variable">.wm</span><span class="hljs-variable">.activate_app</span>(<span class="hljs-keyword">self</span><span class="hljs-variable">.app</span><span class="hljs-variable">.number</span>)</pre><p>The last thing is running the blocking loop. WCS has a wrapper for this that gives a graceful shutdown feature. First argument to this wrapper is the function to be run - our run() method, second is the application.destroy function - it lets the WM know about the shutdown and cleans it all up nicely.<br></p><pre class="hljs python">wcs.run(helloworld.run, application.<span class="hljs-keyword">shutdown</span>)</pre><p>So, here&apos;s our Hello, world! <br><br></p><iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/SidDkQQ7LLA" frameborder="0" allowfullscreen=""></iframe></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7281/log/23457-a-simple-app-mocp-music-player-control-interface">A simple app - MOCP music player control interface</a></h2>
                            <small class="authorship">11 hours ago  &bull;
                                <a class="gray-link" href="/project/7281/log/23457#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23457"><p><iframe width="500" height="281" src="//www.youtube.com/embed/3NyWGo_g-rc" frameborder="0" allowfullscreen=""></iframe>Here, I will show you how to make a script that does actual work. Let&apos;s say I want to control a music player that is Ncurses-only. Fortunately, by passing some parameters to its executable it is possible to control its playback. So, we&apos;ll be executing commands:</p><pre class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> call</pre><p> We&apos;ll also need a menu. For now, it&apos;s imported like that:<br><span class="pl-k"></span></p><pre class="hljs python"><span class="hljs-keyword">from</span> menu.menu <span class="hljs-keyword">import</span> Menu</pre>As soon as I package my framework, it&apos;ll be something like:<pre class="hljs python"><span class="hljs-keyword">from</span> wcs.interfaces <span class="hljs-keyword">import</span> Menu</pre><p> But, as for now, it&apos;s not yet properly packaged so every script using menus is to be run from the working tree. I&apos;m going to fix this soon.<br><br>The setup part is mainly the same. We import the wcs framework, create an application with a self-descriptive name, then a window and get interfaces from it.<br></p><pre class="hljs python"><span class="hljs-setting">application = <span class="hljs-value">wm.create_new_application(<span class="hljs-string">&quot;MOCP control&quot;</span>)</span></span></pre>Now is the fun part - getting working Python commands to change things. First, I have made two wrappers. One is for calling mocp executable:<pre class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mocp_command</span><span class="hljs-params">(*command)</span>:</span>
    <span class="hljs-keyword">return</span> call([<span class="hljs-string">&apos;mocp&apos;</span>] + list(command))</pre>Then, all the other commands can be described like:<br><pre class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mocp_next</span><span class="hljs-params">()</span>:</span>
    mocp_command(<span class="hljs-string">&quot;-f&quot;</span>)</pre>The second wrapper is for calling amixer program. It&apos;s called to change volume. MOCP can do it by itself, it&apos;s just that I don&apos;t have some component on my system so the control from inside the application is not really working. Fortunately, it doesn&apos;t matter if we use one more executable - it&apos;s just another wrapper:<pre class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">amixer_command</span><span class="hljs-params">(*command)</span>:</span>
    <span class="hljs-keyword">return</span> call([<span class="hljs-string">&apos;amixer&apos;</span>] + list(command))</pre>From which we can make commands like this:<br><pre class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plus_volume</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">return</span> amixer_command(<span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;--&quot;</span>, <span class="hljs-string">&quot;sset&quot;</span>, <span class="hljs-string">&quot;PCM&quot;</span>, <span class="hljs-string">&quot;400+&quot;</span>)</pre><br>Now we&apos;ve got the commands, all that is left is making a menu. We&apos;ll start with the contents:<br><br><pre class="hljs python"><span class="hljs-title">main_menu_contents</span> = [ 
[<span class="hljs-string">&quot;Toggle play/pause&quot;</span>, mocp_toggle_play],
[<span class="hljs-string">&quot;Next song&quot;</span>, mocp_next],
[<span class="hljs-string">&quot;Previous song&quot;</span>, mocp_prev],
[<span class="hljs-string">&quot;Increase volume&quot;</span>, plus_volume],
[<span class="hljs-string">&quot;Decrease volume&quot;</span>, minus_volume],
[<span class="hljs-string">&quot;Toggle mute&quot;</span>, toggle_mute]
]</pre>It&apos;s as simple as that. A list of lists representing menu items, where first element is the menu item name and second element is a function to be called when said element is chosen.<br>Let&apos;s initialise this:<br><br><pre class="hljs ini"><span class="hljs-setting">menu = <span class="hljs-value">Menu(main_menu_contents, output, input, <span class="hljs-string">&quot;Main menu&quot;</span>, daemon = wcs._daemon)</span></span></pre>Now we&apos;re registering the menu object with the daemon, same as we did with our HelloWorld object:<pre class="hljs python">wcs.register_object(menu)</pre>For wcs.run wrapper, we need a blocking call, and Menu.activate is just the thing. So - let&apos;s start the application!<br><br><pre class="hljs perl">wcs.run(menu.activate, application.<span class="hljs-keyword">shutdown</span>)</pre><br>The result is on the video above. The full code for the application can be seen <a href="https://github.com/CRImier/WCS/blob/window_manager/mocp_control.py">here</a>.<br><br>What do you think about it? Do you have an idea of how you&apos;ll be using that project?<br><br><br><br><br><br><br><br><br><br></div>
                            </div>
                        </li>
                    
                        <li>
                            <h2><a href="/project/7281/log/23477-system-structure">System structure</a></h2>
                            <small class="authorship">11 hours ago  &bull;
                                <a class="gray-link" href="/project/7281/log/23477#discussion-list">
                                    0 comments
                                </a>
                                </small>
                            <div style="position:relative">
                                <div id="post-body-23477"><p><img src="https://cdn.hackaday.io/images/7174541439838368047.png"></p></div>
                            </div>
                        </li>
                    
                </ul>

                

                

                </p>

            
        </div>
    </div>

    










<div class="footer" id="footer">
  <a href="#header" class="back-to-top" onClick="CT(this, 'Footer', 'GoingUp');">^ Going up? ^</a>
    <div class="container">
        <p><a href="http://hackaday.com/about/">About Us</a> <a href="mailto:projects-contact@hackaday.com">Contact Us</a> <a href="/project/37">Give Feedback</a>&copy; 2015 Hackaday <a href="/tos">Terms of Use</a> <a href="/privacy-policy">Privacy Policy</a></p>
        <a href="/" class="had-skull"  onClick="CT(this, 'Footer', 'Home' ); return false;">Hackaday.io</a>
    </div>
</div>

<script>

    var csrftoken = 'FjPqwc6N-cwdW6zmvYn8iEE_P__Y4CcsDa4s';

</script>

    <script type="text/javascript">

    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47229708-1', 'auto');

    var dimensionValue = 'nonregistered';
    ga('set', 'dimension1', dimensionValue);
    ga('require', 'displayfeatures');

    ga('send', 'pageview');

    </script>

<img src="//analytics.supplyframe.com/trackingservlet/impression?action=pageImpression&amp;zone=HIO_logs&amp;extra=logged%3Dfalse%7ChaveAccountCookie%3D0%7C&amp;ab=undefined" class="sf-impression" />

    
    
    <script src="//cdn.hackaday.io/build/h%2FydgsYIeDTf7pqgYQEKK8Ngblw0IkZCDqfJ9S2tk7zsBoxIHt5iOd49Qp%2BF4vdxEuRj%2BGpGDLbX4aGOQGmbjaOxUZvklg4ReFk68R95OQshFrGKebvogKGQOiB5Hi1xym9KC54c9Ps0WpzuNydLk4B%2FbKi91KhV40Uxhl38XXb1IVAxAI8iW%2BoQUPCFkHVWZxD0B%2BMZ%2BuEXJTlWuBmopNMxTHRK5yleITPZODT6evbVRQc6AXs9w2Pfk7FS2nKy-0.48.6.js"></script>

</body>
</html>